/*
 * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing.
 *
 * If you wish to regenerate this file because of a game update use the ZHM Mod SDK CodeGen mod:
 * https://github.com/OrfeasZ/ZHMModSDK
 */

#include "ZHMGen.h"
#include "ZHMProperties.h"
#include "ZHMEnums.h"

ZHMTypeInfo IPureWaterReflectable::TypeInfo = ZHMTypeInfo("IPureWaterReflectable", sizeof(IPureWaterReflectable), alignof(IPureWaterReflectable), IPureWaterReflectable::WriteJson, IPureWaterReflectable::WriteSimpleJson, IPureWaterReflectable::FromSimpleJson, IPureWaterReflectable::Serialize);

void IPureWaterReflectable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IPureWaterReflectable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IPureWaterReflectable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IPureWaterReflectable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IPureWaterReflectable::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IPureWaterReflectable s_Object;

	*reinterpret_cast<IPureWaterReflectable*>(p_Target) = s_Object;
}

void IPureWaterReflectable::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IPureWaterReflectable*>(p_Object);

}

ZHMTypeInfo SPhysicsSaveData::TypeInfo = ZHMTypeInfo("SPhysicsSaveData", sizeof(SPhysicsSaveData), alignof(SPhysicsSaveData), SPhysicsSaveData::WriteJson, SPhysicsSaveData::WriteSimpleJson, SPhysicsSaveData::FromSimpleJson, SPhysicsSaveData::Serialize);

void SPhysicsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPhysicsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsInPhysicsWorld") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsInPhysicsWorld;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsKinematicBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsKinematicBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SPhysicsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPhysicsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsInPhysicsWorld") << ":";
	p_Stream << s_Object->m_bIsInPhysicsWorld;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsKinematicBody") << ":";
	p_Stream << s_Object->m_bIsKinematicBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << s_Object->m_bIsVisible;

	p_Stream << "}";
}

void SPhysicsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPhysicsSaveData s_Object;

	s_Object.m_bIsInPhysicsWorld = bool(p_Document["m_bIsInPhysicsWorld"]);

	s_Object.m_bIsKinematicBody = bool(p_Document["m_bIsKinematicBody"]);

	s_Object.m_bIsVisible = bool(p_Document["m_bIsVisible"]);

	*reinterpret_cast<SPhysicsSaveData*>(p_Target) = s_Object;
}

void SPhysicsSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SPhysicsSaveData*>(p_Object);

}

ZHMTypeInfo ZGameTime::TypeInfo = ZHMTypeInfo("ZGameTime", sizeof(ZGameTime), alignof(ZGameTime), ZGameTime::WriteJson, ZGameTime::WriteSimpleJson, ZGameTime::FromSimpleJson, ZGameTime::Serialize);

void ZGameTime::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZGameTime*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nTicks") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTicks;
	p_Stream << "}";

	p_Stream << "}";
}

void ZGameTime::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZGameTime*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nTicks") << ":";
	p_Stream << s_Object->m_nTicks;

	p_Stream << "}";
}

void ZGameTime::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZGameTime s_Object;

	s_Object.m_nTicks = int64(p_Document["m_nTicks"]);

	*reinterpret_cast<ZGameTime*>(p_Target) = s_Object;
}

void ZGameTime::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZGameTime*>(p_Object);

}

ZHMTypeInfo SActBehaviorEntitySaveData::TypeInfo = ZHMTypeInfo("SActBehaviorEntitySaveData", sizeof(SActBehaviorEntitySaveData), alignof(SActBehaviorEntitySaveData), SActBehaviorEntitySaveData::WriteJson, SActBehaviorEntitySaveData::WriteSimpleJson, SActBehaviorEntitySaveData::FromSimpleJson, SActBehaviorEntitySaveData::Serialize);

void SActBehaviorEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActBehaviorEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bStartedSignalSent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStartedSignalSent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReachedSignalSent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReachedSignalSent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZActBehaviorEntity.EState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZActBehaviorEntity.EState", static_cast<int>(s_Object->m_nState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ActStartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_ActStartTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceTimeout") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForceTimeout;
	p_Stream << "}";

	p_Stream << "}";
}

void SActBehaviorEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActBehaviorEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bStartedSignalSent") << ":";
	p_Stream << s_Object->m_bStartedSignalSent;
	p_Stream << ",";

	p_Stream << JsonStr("m_bReachedSignalSent") << ":";
	p_Stream << s_Object->m_bReachedSignalSent;
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZActBehaviorEntity.EState", static_cast<int>(s_Object->m_nState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_ActStartTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_ActStartTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceTimeout") << ":";
	p_Stream << s_Object->m_bForceTimeout;

	p_Stream << "}";
}

void SActBehaviorEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActBehaviorEntitySaveData s_Object;

	s_Object.m_bStartedSignalSent = bool(p_Document["m_bStartedSignalSent"]);

	s_Object.m_bReachedSignalSent = bool(p_Document["m_bReachedSignalSent"]);

	s_Object.m_nState = static_cast<ZActBehaviorEntity_EState>(ZHMEnums::GetEnumValueByName("ZActBehaviorEntity.EState", std::string_view(p_Document["m_nState"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_ActStartTime"], &s_Item);
		s_Object.m_ActStartTime = s_Item;
	}

	s_Object.m_bForceTimeout = bool(p_Document["m_bForceTimeout"]);

	*reinterpret_cast<SActBehaviorEntitySaveData*>(p_Target) = s_Object;
}

void SActBehaviorEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActBehaviorEntitySaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_ActStartTime, p_Serializer, p_OwnOffset + offsetof(SActBehaviorEntitySaveData, m_ActStartTime));
}

ZHMTypeInfo SActorSoundDefs::TypeInfo = ZHMTypeInfo("SActorSoundDefs", sizeof(SActorSoundDefs), alignof(SActorSoundDefs), SActorSoundDefs::WriteJson, SActorSoundDefs::WriteSimpleJson, SActorSoundDefs::FromSimpleJson, SActorSoundDefs::Serialize);

void SActorSoundDefs::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSoundDefs*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SActorSoundDefs::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSoundDefs*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SActorSoundDefs::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorSoundDefs s_Object;

	*reinterpret_cast<SActorSoundDefs*>(p_Target) = s_Object;
}

void SActorSoundDefs::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorSoundDefs*>(p_Object);

}

ZHMTypeInfo SGetHelpOrderSaveData::TypeInfo = ZHMTypeInfo("SGetHelpOrderSaveData", sizeof(SGetHelpOrderSaveData), alignof(SGetHelpOrderSaveData), SGetHelpOrderSaveData::WriteJson, SGetHelpOrderSaveData::WriteSimpleJson, SGetHelpOrderSaveData::FromSimpleJson, SGetHelpOrderSaveData::Serialize);

void SGetHelpOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGetHelpOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_helpType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_helpType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_helpType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInitialGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInitialGuard;
	p_Stream << "}";

	p_Stream << "}";
}

void SGetHelpOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGetHelpOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_helpType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_helpType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rInitialGuard") << ":";
	p_Stream << s_Object->m_rInitialGuard;

	p_Stream << "}";
}

void SGetHelpOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGetHelpOrderSaveData s_Object;

	s_Object.m_helpType = static_cast<EAISharedEventType>(ZHMEnums::GetEnumValueByName("EAISharedEventType", std::string_view(p_Document["m_helpType"])));

	s_Object.m_rInitialGuard = static_cast<uint32>(int64_t(p_Document["m_rInitialGuard"]));

	*reinterpret_cast<SGetHelpOrderSaveData*>(p_Target) = s_Object;
}

void SGetHelpOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGetHelpOrderSaveData*>(p_Object);

}

ZHMTypeInfo SActorProviderDirectSaveData::TypeInfo = ZHMTypeInfo("SActorProviderDirectSaveData", sizeof(SActorProviderDirectSaveData), alignof(SActorProviderDirectSaveData), SActorProviderDirectSaveData::WriteJson, SActorProviderDirectSaveData::WriteSimpleJson, SActorProviderDirectSaveData::FromSimpleJson, SActorProviderDirectSaveData::Serialize);

void SActorProviderDirectSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorProviderDirectSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRunning;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorProviderDirectSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorProviderDirectSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aActors[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRunning") << ":";
	p_Stream << s_Object->m_bRunning;

	p_Stream << "}";
}

void SActorProviderDirectSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorProviderDirectSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aActors"])
	{
		s_Object.m_aActors.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	s_Object.m_bRunning = bool(p_Document["m_bRunning"]);

	*reinterpret_cast<SActorProviderDirectSaveData*>(p_Target) = s_Object;
}

void SActorProviderDirectSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorProviderDirectSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aActors, p_Serializer, p_OwnOffset + offsetof(SActorProviderDirectSaveData, m_aActors));
}

ZHMTypeInfo float4::TypeInfo = ZHMTypeInfo("float4", sizeof(float4), alignof(float4), float4::WriteJson, float4::WriteSimpleJson, float4::FromSimpleJson, float4::Serialize);

void float4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<float4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->z;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->w;
	p_Stream << "}";

	p_Stream << "}";
}

void float4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<float4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << s_Object->z;
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << s_Object->w;

	p_Stream << "}";
}

void float4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	float4 s_Object;

	s_Object.x = static_cast<float32>(double(p_Document["x"]));

	s_Object.y = static_cast<float32>(double(p_Document["y"]));

	s_Object.z = static_cast<float32>(double(p_Document["z"]));

	s_Object.w = static_cast<float32>(double(p_Document["w"]));

	*reinterpret_cast<float4*>(p_Target) = s_Object;
}

void float4::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<float4*>(p_Object);

}

ZHMTypeInfo SCrowdActorSaveData::TypeInfo = ZHMTypeInfo("SCrowdActorSaveData", sizeof(SCrowdActorSaveData), alignof(SCrowdActorSaveData), SCrowdActorSaveData::WriteJson, SCrowdActorSaveData::WriteSimpleJson, SCrowdActorSaveData::FromSimpleJson, SCrowdActorSaveData::Serialize);

void SCrowdActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eWantedSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESpeed") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eWantedSpeed) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESpeed", static_cast<int>(s_Object->m_eWantedSpeed))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eWantedGait") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGait") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eWantedGait) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_eWantedGait))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAnimSourceID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAnimSourceID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAnimSourceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAnimSourceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vForward") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vForward, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eMood") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("CrowdUtil.ECrowdActorMood") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eMood) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("CrowdUtil.ECrowdActorMood", static_cast<int>(s_Object->m_eMood))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_eWantedSpeed") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESpeed", static_cast<int>(s_Object->m_eWantedSpeed)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eWantedGait") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_eWantedGait)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nAnimSourceID") << ":";
	p_Stream << s_Object->m_nAnimSourceID;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAnimSourceIndex") << ":";
	p_Stream << s_Object->m_nAnimSourceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vForward") << ":";
	float4::WriteSimpleJson(&s_Object->m_vForward, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpeed") << ":";
	p_Stream << s_Object->m_fSpeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_eMood") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("CrowdUtil.ECrowdActorMood", static_cast<int>(s_Object->m_eMood)));

	p_Stream << "}";
}

void SCrowdActorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdActorSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_eWantedSpeed = static_cast<ESpeed>(ZHMEnums::GetEnumValueByName("ESpeed", std::string_view(p_Document["m_eWantedSpeed"])));

	s_Object.m_eWantedGait = static_cast<EGait>(ZHMEnums::GetEnumValueByName("EGait", std::string_view(p_Document["m_eWantedGait"])));

	s_Object.m_nAnimSourceID = static_cast<uint32>(int64_t(p_Document["m_nAnimSourceID"]));

	s_Object.m_nAnimSourceIndex = static_cast<uint32>(int64_t(p_Document["m_nAnimSourceIndex"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vForward"], &s_Item);
		s_Object.m_vForward = s_Item;
	}

	s_Object.m_fSpeed = static_cast<float32>(double(p_Document["m_fSpeed"]));

	s_Object.m_eMood = static_cast<CrowdUtil_ECrowdActorMood>(ZHMEnums::GetEnumValueByName("CrowdUtil.ECrowdActorMood", std::string_view(p_Document["m_eMood"])));

	*reinterpret_cast<SCrowdActorSaveData*>(p_Target) = s_Object;
}

void SCrowdActorSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdActorSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vPosition, p_Serializer, p_OwnOffset + offsetof(SCrowdActorSaveData, m_vPosition));
	float4::Serialize(&s_Object->m_vForward, p_Serializer, p_OwnOffset + offsetof(SCrowdActorSaveData, m_vForward));
}

ZHMTypeInfo SCollidingParticle::TypeInfo = ZHMTypeInfo("SCollidingParticle", sizeof(SCollidingParticle), alignof(SCollidingParticle), SCollidingParticle::WriteJson, SCollidingParticle::WriteSimpleJson, SCollidingParticle::FromSimpleJson, SCollidingParticle::Serialize);

void SCollidingParticle::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCollidingParticle*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vNewVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vNewVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nColor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nColor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSize;
	p_Stream << "}";

	p_Stream << "}";
}

void SCollidingParticle::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCollidingParticle*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_vVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vNewVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_vNewVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nColor") << ":";
	p_Stream << s_Object->m_nColor;
	p_Stream << ",";

	p_Stream << JsonStr("m_fSize") << ":";
	p_Stream << s_Object->m_fSize;

	p_Stream << "}";
}

void SCollidingParticle::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCollidingParticle s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vVelocity"], &s_Item);
		s_Object.m_vVelocity = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vNewVelocity"], &s_Item);
		s_Object.m_vNewVelocity = s_Item;
	}

	s_Object.m_nColor = static_cast<uint32>(int64_t(p_Document["m_nColor"]));

	s_Object.m_fSize = static_cast<float32>(double(p_Document["m_fSize"]));

	*reinterpret_cast<SCollidingParticle*>(p_Target) = s_Object;
}

void SCollidingParticle::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCollidingParticle*>(p_Object);

	float4::Serialize(&s_Object->m_vPosition, p_Serializer, p_OwnOffset + offsetof(SCollidingParticle, m_vPosition));
	float4::Serialize(&s_Object->m_vVelocity, p_Serializer, p_OwnOffset + offsetof(SCollidingParticle, m_vVelocity));
	float4::Serialize(&s_Object->m_vNewVelocity, p_Serializer, p_OwnOffset + offsetof(SCollidingParticle, m_vNewVelocity));
}

ZHMTypeInfo SAudioEmitterSwitchSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterSwitchSaveData", sizeof(SAudioEmitterSwitchSaveData), alignof(SAudioEmitterSwitchSaveData), SAudioEmitterSwitchSaveData::WriteJson, SAudioEmitterSwitchSaveData::WriteSimpleJson, SAudioEmitterSwitchSaveData::FromSimpleJson, SAudioEmitterSwitchSaveData::Serialize);

void SAudioEmitterSwitchSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterSwitchSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nGroupId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGroupId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStateId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nStateId;
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterSwitchSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterSwitchSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nGroupId") << ":";
	p_Stream << s_Object->m_nGroupId;
	p_Stream << ",";

	p_Stream << JsonStr("m_nStateId") << ":";
	p_Stream << s_Object->m_nStateId;

	p_Stream << "}";
}

void SAudioEmitterSwitchSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioEmitterSwitchSaveData s_Object;

	s_Object.m_nGroupId = static_cast<uint32>(int64_t(p_Document["m_nGroupId"]));

	s_Object.m_nStateId = static_cast<uint32>(int64_t(p_Document["m_nStateId"]));

	*reinterpret_cast<SAudioEmitterSwitchSaveData*>(p_Target) = s_Object;
}

void SAudioEmitterSwitchSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterSwitchSaveData*>(p_Object);

}

ZHMTypeInfo SVector2::TypeInfo = ZHMTypeInfo("SVector2", sizeof(SVector2), alignof(SVector2), SVector2::WriteJson, SVector2::WriteSimpleJson, SVector2::FromSimpleJson, SVector2::Serialize);

void SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";

	p_Stream << "}";
}

void SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;

	p_Stream << "}";
}

void SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVector2 s_Object;

	s_Object.x = static_cast<float32>(double(p_Document["x"]));

	s_Object.y = static_cast<float32>(double(p_Document["y"]));

	*reinterpret_cast<SVector2*>(p_Target) = s_Object;
}

void SVector2::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVector2*>(p_Object);

}

ZHMTypeInfo SMathDistanceSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathDistanceSaveData_SVector2", sizeof(SMathDistanceSaveData_SVector2), alignof(SMathDistanceSaveData_SVector2), SMathDistanceSaveData_SVector2::WriteJson, SMathDistanceSaveData_SVector2::WriteSimpleJson, SMathDistanceSaveData_SVector2::FromSimpleJson, SMathDistanceSaveData_SVector2::Serialize);

void SMathDistanceSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathDistanceSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathDistanceSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_fB, p_Stream);

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathDistanceSaveData_SVector2 s_Object;

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_fA"], &s_Item);
		s_Object.m_fA = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_fB"], &s_Item);
		s_Object.m_fB = s_Item;
	}

	*reinterpret_cast<SMathDistanceSaveData_SVector2*>(p_Target) = s_Object;
}

void SMathDistanceSaveData_SVector2::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathDistanceSaveData_SVector2*>(p_Object);

	SVector2::Serialize(&s_Object->m_fA, p_Serializer, p_OwnOffset + offsetof(SMathDistanceSaveData_SVector2, m_fA));
	SVector2::Serialize(&s_Object->m_fB, p_Serializer, p_OwnOffset + offsetof(SMathDistanceSaveData_SVector2, m_fB));
}

ZHMTypeInfo SItemStorageSaveData::TypeInfo = ZHMTypeInfo("SItemStorageSaveData", sizeof(SItemStorageSaveData), alignof(SItemStorageSaveData), SItemStorageSaveData::WriteJson, SItemStorageSaveData::WriteSimpleJson, SItemStorageSaveData::FromSimpleJson, SItemStorageSaveData::Serialize);

void SItemStorageSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemStorageSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Storage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_Storage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ContainedItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_ContainedItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_ContainedItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_ContainedItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SItemStorageSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemStorageSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Storage") << ":";
	p_Stream << s_Object->m_Storage;
	p_Stream << ",";

	p_Stream << JsonStr("m_ContainedItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_ContainedItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_ContainedItems[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_ContainedItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SItemStorageSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemStorageSaveData s_Object;

	s_Object.m_Storage = static_cast<uint32>(int64_t(p_Document["m_Storage"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_ContainedItems"])
	{
		s_Object.m_ContainedItems.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SItemStorageSaveData*>(p_Target) = s_Object;
}

void SItemStorageSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItemStorageSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_ContainedItems, p_Serializer, p_OwnOffset + offsetof(SItemStorageSaveData, m_ContainedItems));
}

ZHMTypeInfo SBehaviorTreeInputPinCondition::TypeInfo = ZHMTypeInfo("SBehaviorTreeInputPinCondition", sizeof(SBehaviorTreeInputPinCondition), alignof(SBehaviorTreeInputPinCondition), SBehaviorTreeInputPinCondition::WriteJson, SBehaviorTreeInputPinCondition::WriteSimpleJson, SBehaviorTreeInputPinCondition::FromSimpleJson, SBehaviorTreeInputPinCondition::Serialize);

void SBehaviorTreeInputPinCondition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeInputPinCondition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeInputPinCondition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeInputPinCondition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);

	p_Stream << "}";
}

void SBehaviorTreeInputPinCondition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeInputPinCondition s_Object;

	s_Object.m_sName = std::string_view(p_Document["m_sName"]);

	*reinterpret_cast<SBehaviorTreeInputPinCondition*>(p_Target) = s_Object;
}

void SBehaviorTreeInputPinCondition::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeInputPinCondition*>(p_Object);

	ZString::Serialize(&s_Object->m_sName, p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeInputPinCondition, m_sName));
}

ZHMTypeInfo SItemWeaponSaveData::TypeInfo = ZHMTypeInfo("SItemWeaponSaveData", sizeof(SItemWeaponSaveData), alignof(SItemWeaponSaveData), SItemWeaponSaveData::WriteJson, SItemWeaponSaveData::WriteSimpleJson, SItemWeaponSaveData::FromSimpleJson, SItemWeaponSaveData::Serialize);

void SItemWeaponSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemWeaponSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_magazineBulletsByAmmoType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_magazineBulletsByAmmoType.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_magazineBulletsByAmmoType[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_magazineBulletsByAmmoType.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nExtraMagazineBullets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nExtraMagazineBullets;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ePendingDeathContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDeathContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_ePendingDeathContext) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->m_ePendingDeathContext))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eDeathContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDeathContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eDeathContext) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->m_eDeathContext))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SItemWeaponSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemWeaponSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_magazineBulletsByAmmoType") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_magazineBulletsByAmmoType.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_magazineBulletsByAmmoType[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_magazineBulletsByAmmoType.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nExtraMagazineBullets") << ":";
	p_Stream << s_Object->m_nExtraMagazineBullets;
	p_Stream << ",";

	p_Stream << JsonStr("m_ePendingDeathContext") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->m_ePendingDeathContext)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eDeathContext") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->m_eDeathContext)));

	p_Stream << "}";
}

void SItemWeaponSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemWeaponSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_magazineBulletsByAmmoType"])
	{
		s_Object.m_magazineBulletsByAmmoType.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	s_Object.m_nExtraMagazineBullets = static_cast<uint32>(int64_t(p_Document["m_nExtraMagazineBullets"]));

	s_Object.m_ePendingDeathContext = static_cast<EDeathContext>(ZHMEnums::GetEnumValueByName("EDeathContext", std::string_view(p_Document["m_ePendingDeathContext"])));

	s_Object.m_eDeathContext = static_cast<EDeathContext>(ZHMEnums::GetEnumValueByName("EDeathContext", std::string_view(p_Document["m_eDeathContext"])));

	*reinterpret_cast<SItemWeaponSaveData*>(p_Target) = s_Object;
}

void SItemWeaponSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItemWeaponSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_magazineBulletsByAmmoType, p_Serializer, p_OwnOffset + offsetof(SItemWeaponSaveData, m_magazineBulletsByAmmoType));
}

ZHMTypeInfo ZResourceID::TypeInfo = ZHMTypeInfo("ZResourceID", sizeof(ZResourceID), alignof(ZResourceID), ZResourceID::WriteJson, ZResourceID::WriteSimpleJson, ZResourceID::FromSimpleJson, ZResourceID::Serialize);

void ZResourceID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZResourceID*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_uri") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_uri);
	p_Stream << "}";

	p_Stream << "}";
}

void ZResourceID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZResourceID*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_uri") << ":";
	p_Stream << JsonStr(s_Object->m_uri);

	p_Stream << "}";
}

void ZResourceID::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZResourceID s_Object;

	s_Object.m_uri = std::string_view(p_Document["m_uri"]);

	*reinterpret_cast<ZResourceID*>(p_Target) = s_Object;
}

void ZResourceID::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZResourceID*>(p_Object);

	ZString::Serialize(&s_Object->m_uri, p_Serializer, p_OwnOffset + offsetof(ZResourceID, m_uri));
}

ZHMTypeInfo SEnvironmentConfigResourceEntry::TypeInfo = ZHMTypeInfo("SEnvironmentConfigResourceEntry", sizeof(SEnvironmentConfigResourceEntry), alignof(SEnvironmentConfigResourceEntry), SEnvironmentConfigResourceEntry::WriteJson, SEnvironmentConfigResourceEntry::WriteSimpleJson, SEnvironmentConfigResourceEntry::FromSimpleJson, SEnvironmentConfigResourceEntry::Serialize);

void SEnvironmentConfigResourceEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEnvironmentConfigResourceEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Name") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->Name);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ContractsDatastoreRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->ContractsDatastoreRid, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("UnlockablesDatastoreRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->UnlockablesDatastoreRid, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("BlobsDatastoreRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->BlobsDatastoreRid, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ActivityDatastoreRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->ActivityDatastoreRid, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEnvironmentConfigResourceEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEnvironmentConfigResourceEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Name") << ":";
	p_Stream << JsonStr(s_Object->Name);
	p_Stream << ",";

	p_Stream << JsonStr("ContractsDatastoreRid") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->ContractsDatastoreRid, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("UnlockablesDatastoreRid") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->UnlockablesDatastoreRid, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("BlobsDatastoreRid") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->BlobsDatastoreRid, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("ActivityDatastoreRid") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->ActivityDatastoreRid, p_Stream);

	p_Stream << "}";
}

void SEnvironmentConfigResourceEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEnvironmentConfigResourceEntry s_Object;

	s_Object.Name = std::string_view(p_Document["Name"]);

	{
		ZResourceID s_Item;
		ZResourceID::FromSimpleJson(p_Document["ContractsDatastoreRid"], &s_Item);
		s_Object.ContractsDatastoreRid = s_Item;
	}

	{
		ZResourceID s_Item;
		ZResourceID::FromSimpleJson(p_Document["UnlockablesDatastoreRid"], &s_Item);
		s_Object.UnlockablesDatastoreRid = s_Item;
	}

	{
		ZResourceID s_Item;
		ZResourceID::FromSimpleJson(p_Document["BlobsDatastoreRid"], &s_Item);
		s_Object.BlobsDatastoreRid = s_Item;
	}

	{
		ZResourceID s_Item;
		ZResourceID::FromSimpleJson(p_Document["ActivityDatastoreRid"], &s_Item);
		s_Object.ActivityDatastoreRid = s_Item;
	}

	*reinterpret_cast<SEnvironmentConfigResourceEntry*>(p_Target) = s_Object;
}

void SEnvironmentConfigResourceEntry::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEnvironmentConfigResourceEntry*>(p_Object);

	ZString::Serialize(&s_Object->Name, p_Serializer, p_OwnOffset + offsetof(SEnvironmentConfigResourceEntry, Name));
	ZResourceID::Serialize(&s_Object->ContractsDatastoreRid, p_Serializer, p_OwnOffset + offsetof(SEnvironmentConfigResourceEntry, ContractsDatastoreRid));
	ZResourceID::Serialize(&s_Object->UnlockablesDatastoreRid, p_Serializer, p_OwnOffset + offsetof(SEnvironmentConfigResourceEntry, UnlockablesDatastoreRid));
	ZResourceID::Serialize(&s_Object->BlobsDatastoreRid, p_Serializer, p_OwnOffset + offsetof(SEnvironmentConfigResourceEntry, BlobsDatastoreRid));
	ZResourceID::Serialize(&s_Object->ActivityDatastoreRid, p_Serializer, p_OwnOffset + offsetof(SEnvironmentConfigResourceEntry, ActivityDatastoreRid));
}

ZHMTypeInfo SEnvironmentConfigResource::TypeInfo = ZHMTypeInfo("SEnvironmentConfigResource", sizeof(SEnvironmentConfigResource), alignof(SEnvironmentConfigResource), SEnvironmentConfigResource::WriteJson, SEnvironmentConfigResource::WriteSimpleJson, SEnvironmentConfigResource::FromSimpleJson, SEnvironmentConfigResource::Serialize);

void SEnvironmentConfigResource::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEnvironmentConfigResource*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Environments") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEnvironmentConfigResourceEntry>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Environments.size(); ++i)
	{
		auto& s_Item0 = s_Object->Environments[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEnvironmentConfigResourceEntry") << "," << JsonStr("$val") << ":";
		SEnvironmentConfigResourceEntry::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->Environments.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SEnvironmentConfigResource::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEnvironmentConfigResource*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Environments") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Environments.size(); ++i)
	{
		auto& s_Item0 = s_Object->Environments[i];
		SEnvironmentConfigResourceEntry::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->Environments.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEnvironmentConfigResource::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEnvironmentConfigResource s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["Environments"])
	{
		SEnvironmentConfigResourceEntry s_ArrayItem0;
		SEnvironmentConfigResourceEntry::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.Environments.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SEnvironmentConfigResource*>(p_Target) = s_Object;
}

void SEnvironmentConfigResource::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEnvironmentConfigResource*>(p_Object);

	TArray<SEnvironmentConfigResourceEntry>::Serialize(&s_Object->Environments, p_Serializer, p_OwnOffset + offsetof(SEnvironmentConfigResource, Environments));
}

ZHMTypeInfo ZAMDEvent::TypeInfo = ZHMTypeInfo("ZAMDEvent", sizeof(ZAMDEvent), alignof(ZAMDEvent), ZAMDEvent::WriteJson, ZAMDEvent::WriteSimpleJson, ZAMDEvent::FromSimpleJson, ZAMDEvent::Serialize);

void ZAMDEvent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAMDEvent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEventID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEventID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStartFraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStartFraction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_customData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_customData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZAMDEvent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAMDEvent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEventID") << ":";
	p_Stream << s_Object->m_nEventID;
	p_Stream << ",";

	p_Stream << JsonStr("m_fStartFraction") << ":";
	p_Stream << s_Object->m_fStartFraction;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_customData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_customData, p_Stream);

	p_Stream << "}";
}

void ZAMDEvent::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZAMDEvent s_Object;

	s_Object.m_nEventID = static_cast<uint32>(int64_t(p_Document["m_nEventID"]));

	s_Object.m_fStartFraction = static_cast<float32>(double(p_Document["m_fStartFraction"]));

	s_Object.m_fDuration = static_cast<float32>(double(p_Document["m_fDuration"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_customData"], &s_Item);
		s_Object.m_customData = s_Item;
	}

	*reinterpret_cast<ZAMDEvent*>(p_Target) = s_Object;
}

void ZAMDEvent::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZAMDEvent*>(p_Object);

	ZVariant::Serialize(&s_Object->m_customData, p_Serializer, p_OwnOffset + offsetof(ZAMDEvent, m_customData));
}

ZHMTypeInfo ZAMDEventTrack::TypeInfo = ZHMTypeInfo("ZAMDEventTrack", sizeof(ZAMDEventTrack), alignof(ZAMDEventTrack), ZAMDEventTrack::WriteJson, ZAMDEventTrack::WriteSimpleJson, ZAMDEventTrack::FromSimpleJson, ZAMDEventTrack::Serialize);

void ZAMDEventTrack::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAMDEventTrack*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_events") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZAMDEvent>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_events.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_events[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZAMDEvent") << "," << JsonStr("$val") << ":";
		ZAMDEvent::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_events.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void ZAMDEventTrack::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAMDEventTrack*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << ",";

	p_Stream << JsonStr("m_events") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_events.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_events[i];
		ZAMDEvent::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_events.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZAMDEventTrack::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZAMDEventTrack s_Object;

	s_Object.m_sName = std::string_view(p_Document["m_sName"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["m_events"])
	{
		ZAMDEvent s_ArrayItem0;
		ZAMDEvent::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_events.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<ZAMDEventTrack*>(p_Target) = s_Object;
}

void ZAMDEventTrack::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZAMDEventTrack*>(p_Object);

	ZString::Serialize(&s_Object->m_sName, p_Serializer, p_OwnOffset + offsetof(ZAMDEventTrack, m_sName));
	TArray<ZAMDEvent>::Serialize(&s_Object->m_events, p_Serializer, p_OwnOffset + offsetof(ZAMDEventTrack, m_events));
}

ZHMTypeInfo ZAMDTake::TypeInfo = ZHMTypeInfo("ZAMDTake", sizeof(ZAMDTake), alignof(ZAMDTake), ZAMDTake::WriteJson, ZAMDTake::WriteSimpleJson, ZAMDTake::FromSimpleJson, ZAMDTake::Serialize);

void ZAMDTake::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAMDTake*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eventTracks") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZAMDEventTrack>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_eventTracks.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_eventTracks[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZAMDEventTrack") << "," << JsonStr("$val") << ":";
		ZAMDEventTrack::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_eventTracks.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_customData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_customData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSyncTrackIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSyncTrackIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void ZAMDTake::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAMDTake*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eventTracks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_eventTracks.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_eventTracks[i];
		ZAMDEventTrack::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_eventTracks.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_customData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_customData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nSyncTrackIndex") << ":";
	p_Stream << s_Object->m_nSyncTrackIndex;

	p_Stream << "}";
}

void ZAMDTake::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZAMDTake s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_eventTracks"])
	{
		ZAMDEventTrack s_ArrayItem0;
		ZAMDEventTrack::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_eventTracks.push_back(s_ArrayItem0);
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_customData"], &s_Item);
		s_Object.m_customData = s_Item;
	}

	s_Object.m_nSyncTrackIndex = static_cast<int32>(int64_t(p_Document["m_nSyncTrackIndex"]));

	*reinterpret_cast<ZAMDTake*>(p_Target) = s_Object;
}

void ZAMDTake::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZAMDTake*>(p_Object);

	TArray<ZAMDEventTrack>::Serialize(&s_Object->m_eventTracks, p_Serializer, p_OwnOffset + offsetof(ZAMDTake, m_eventTracks));
	ZVariant::Serialize(&s_Object->m_customData, p_Serializer, p_OwnOffset + offsetof(ZAMDTake, m_customData));
}

ZHMTypeInfo SDestructibleInteractionHandlerData::TypeInfo = ZHMTypeInfo("SDestructibleInteractionHandlerData", sizeof(SDestructibleInteractionHandlerData), alignof(SDestructibleInteractionHandlerData), SDestructibleInteractionHandlerData::WriteJson, SDestructibleInteractionHandlerData::WriteSimpleJson, SDestructibleInteractionHandlerData::FromSimpleJson, SDestructibleInteractionHandlerData::Serialize);

void SDestructibleInteractionHandlerData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDestructibleInteractionHandlerData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fSettleTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSettleTime;
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructibleInteractionHandlerData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDestructibleInteractionHandlerData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fSettleTime") << ":";
	p_Stream << s_Object->m_fSettleTime;

	p_Stream << "}";
}

void SDestructibleInteractionHandlerData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDestructibleInteractionHandlerData s_Object;

	s_Object.m_fSettleTime = static_cast<float32>(double(p_Document["m_fSettleTime"]));

	*reinterpret_cast<SDestructibleInteractionHandlerData*>(p_Target) = s_Object;
}

void SDestructibleInteractionHandlerData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDestructibleInteractionHandlerData*>(p_Object);

}

ZHMTypeInfo ZResourcePtr::TypeInfo = ZHMTypeInfo("ZResourcePtr", sizeof(ZResourcePtr), alignof(ZResourcePtr), ZResourcePtr::WriteJson, ZResourcePtr::WriteSimpleJson, ZResourcePtr::FromSimpleJson, ZResourcePtr::Serialize);

void ZResourcePtr::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZResourcePtr*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZResourcePtr::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZResourcePtr*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZResourcePtr::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZResourcePtr s_Object;

	*reinterpret_cast<ZResourcePtr*>(p_Target) = s_Object;
}

void ZResourcePtr::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZResourcePtr*>(p_Object);

}

ZHMTypeInfo ZHM5CrowdEventConsumer_SCrowdSoundEventData::TypeInfo = ZHMTypeInfo("ZHM5CrowdEventConsumer.SCrowdSoundEventData", sizeof(ZHM5CrowdEventConsumer_SCrowdSoundEventData), alignof(ZHM5CrowdEventConsumer_SCrowdSoundEventData), ZHM5CrowdEventConsumer_SCrowdSoundEventData::WriteJson, ZHM5CrowdEventConsumer_SCrowdSoundEventData::WriteSimpleJson, ZHM5CrowdEventConsumer_SCrowdSoundEventData::FromSimpleJson, ZHM5CrowdEventConsumer_SCrowdSoundEventData::Serialize);

void ZHM5CrowdEventConsumer_SCrowdSoundEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5CrowdEventConsumer_SCrowdSoundEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pAudioEventRes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourcePtr") << "," << JsonStr("$val") << ":";
	ZResourcePtr::WriteJson(&s_Object->m_pAudioEventRes, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAttenuation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAttenuation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fPitch") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPitch;
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5CrowdEventConsumer_SCrowdSoundEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5CrowdEventConsumer_SCrowdSoundEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pAudioEventRes") << ":";
	ZResourcePtr::WriteSimpleJson(&s_Object->m_pAudioEventRes, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fAttenuation") << ":";
	p_Stream << s_Object->m_fAttenuation;
	p_Stream << ",";

	p_Stream << JsonStr("m_fPitch") << ":";
	p_Stream << s_Object->m_fPitch;

	p_Stream << "}";
}

void ZHM5CrowdEventConsumer_SCrowdSoundEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5CrowdEventConsumer_SCrowdSoundEventData s_Object;

	{
		ZResourcePtr s_Item;
		ZResourcePtr::FromSimpleJson(p_Document["m_pAudioEventRes"], &s_Item);
		s_Object.m_pAudioEventRes = s_Item;
	}

	s_Object.m_fAttenuation = static_cast<float32>(double(p_Document["m_fAttenuation"]));

	s_Object.m_fPitch = static_cast<float32>(double(p_Document["m_fPitch"]));

	*reinterpret_cast<ZHM5CrowdEventConsumer_SCrowdSoundEventData*>(p_Target) = s_Object;
}

void ZHM5CrowdEventConsumer_SCrowdSoundEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5CrowdEventConsumer_SCrowdSoundEventData*>(p_Object);

	ZResourcePtr::Serialize(&s_Object->m_pAudioEventRes, p_Serializer, p_OwnOffset + offsetof(ZHM5CrowdEventConsumer_SCrowdSoundEventData, m_pAudioEventRes));
}

ZHMTypeInfo STimerEntityCommandSaveData::TypeInfo = ZHMTypeInfo("STimerEntityCommandSaveData", sizeof(STimerEntityCommandSaveData), alignof(STimerEntityCommandSaveData), STimerEntityCommandSaveData::WriteJson, STimerEntityCommandSaveData::WriteSimpleJson, STimerEntityCommandSaveData::FromSimpleJson, STimerEntityCommandSaveData::Serialize);

void STimerEntityCommandSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STimerEntityCommandSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ETimerEntityCommandType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ETimerEntityCommandType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fInterval") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fInterval;
	p_Stream << "}";

	p_Stream << "}";
}

void STimerEntityCommandSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STimerEntityCommandSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ETimerEntityCommandType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_fInterval") << ":";
	p_Stream << s_Object->m_fInterval;

	p_Stream << "}";
}

void STimerEntityCommandSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STimerEntityCommandSaveData s_Object;

	s_Object.m_eType = static_cast<ETimerEntityCommandType>(ZHMEnums::GetEnumValueByName("ETimerEntityCommandType", std::string_view(p_Document["m_eType"])));

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_fInterval = static_cast<float32>(double(p_Document["m_fInterval"]));

	*reinterpret_cast<STimerEntityCommandSaveData*>(p_Target) = s_Object;
}

void STimerEntityCommandSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STimerEntityCommandSaveData*>(p_Object);

}

ZHMTypeInfo STimerEntityStateSaveData::TypeInfo = ZHMTypeInfo("STimerEntityStateSaveData", sizeof(STimerEntityStateSaveData), alignof(STimerEntityStateSaveData), STimerEntityStateSaveData::WriteJson, STimerEntityStateSaveData::WriteSimpleJson, STimerEntityStateSaveData::FromSimpleJson, STimerEntityStateSaveData::Serialize);

void STimerEntityStateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STimerEntityStateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fNextEventTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fNextEventTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPending") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPending;
	p_Stream << "}";

	p_Stream << "}";
}

void STimerEntityStateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STimerEntityStateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_fNextEventTime") << ":";
	p_Stream << s_Object->m_fNextEventTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPending") << ":";
	p_Stream << s_Object->m_bPending;

	p_Stream << "}";
}

void STimerEntityStateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STimerEntityStateSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_fNextEventTime = static_cast<float32>(double(p_Document["m_fNextEventTime"]));

	s_Object.m_bPending = bool(p_Document["m_bPending"]);

	*reinterpret_cast<STimerEntityStateSaveData*>(p_Target) = s_Object;
}

void STimerEntityStateSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STimerEntityStateSaveData*>(p_Object);

}

ZHMTypeInfo SGameTimersSaveData::TypeInfo = ZHMTypeInfo("SGameTimersSaveData", sizeof(SGameTimersSaveData), alignof(SGameTimersSaveData), SGameTimersSaveData::WriteJson, SGameTimersSaveData::WriteSimpleJson, SGameTimersSaveData::FromSimpleJson, SGameTimersSaveData::Serialize);

void SGameTimersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameTimersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aTimerEntityCommands") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<STimerEntityCommandSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTimerEntityCommands.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aTimerEntityCommands[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STimerEntityCommandSaveData") << "," << JsonStr("$val") << ":";
		STimerEntityCommandSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aTimerEntityCommands.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aTimerEntityState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<STimerEntityStateSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTimerEntityState.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aTimerEntityState[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STimerEntityStateSaveData") << "," << JsonStr("$val") << ":";
		STimerEntityStateSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aTimerEntityState.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPendingTimers") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPendingTimers.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPendingTimers[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aPendingTimers.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SGameTimersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameTimersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aTimerEntityCommands") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTimerEntityCommands.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aTimerEntityCommands[i];
		STimerEntityCommandSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aTimerEntityCommands.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aTimerEntityState") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTimerEntityState.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aTimerEntityState[i];
		STimerEntityStateSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aTimerEntityState.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPendingTimers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPendingTimers.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPendingTimers[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aPendingTimers.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SGameTimersSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameTimersSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aTimerEntityCommands"])
	{
		STimerEntityCommandSaveData s_ArrayItem0;
		STimerEntityCommandSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aTimerEntityCommands.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aTimerEntityState"])
	{
		STimerEntityStateSaveData s_ArrayItem0;
		STimerEntityStateSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aTimerEntityState.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aPendingTimers"])
	{
		s_Object.m_aPendingTimers.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SGameTimersSaveData*>(p_Target) = s_Object;
}

void SGameTimersSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGameTimersSaveData*>(p_Object);

	TArray<STimerEntityCommandSaveData>::Serialize(&s_Object->m_aTimerEntityCommands, p_Serializer, p_OwnOffset + offsetof(SGameTimersSaveData, m_aTimerEntityCommands));
	TArray<STimerEntityStateSaveData>::Serialize(&s_Object->m_aTimerEntityState, p_Serializer, p_OwnOffset + offsetof(SGameTimersSaveData, m_aTimerEntityState));
	TArray<uint32>::Serialize(&s_Object->m_aPendingTimers, p_Serializer, p_OwnOffset + offsetof(SGameTimersSaveData, m_aPendingTimers));
}

ZHMTypeInfo SMatrix::TypeInfo = ZHMTypeInfo("SMatrix", sizeof(SMatrix), alignof(SMatrix), SMatrix::WriteJson, SMatrix::WriteSimpleJson, SMatrix::FromSimpleJson, SMatrix::Serialize);

void SMatrix::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("XAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->XAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->YAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->ZAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("Trans") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->Trans, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("XAxis") << ":";
	float4::WriteSimpleJson(&s_Object->XAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	float4::WriteSimpleJson(&s_Object->YAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	float4::WriteSimpleJson(&s_Object->ZAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("Trans") << ":";
	float4::WriteSimpleJson(&s_Object->Trans, p_Stream);

	p_Stream << "}";
}

void SMatrix::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMatrix s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["XAxis"], &s_Item);
		s_Object.XAxis = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["YAxis"], &s_Item);
		s_Object.YAxis = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["ZAxis"], &s_Item);
		s_Object.ZAxis = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["Trans"], &s_Item);
		s_Object.Trans = s_Item;
	}

	*reinterpret_cast<SMatrix*>(p_Target) = s_Object;
}

void SMatrix::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMatrix*>(p_Object);

	float4::Serialize(&s_Object->XAxis, p_Serializer, p_OwnOffset + offsetof(SMatrix, XAxis));
	float4::Serialize(&s_Object->YAxis, p_Serializer, p_OwnOffset + offsetof(SMatrix, YAxis));
	float4::Serialize(&s_Object->ZAxis, p_Serializer, p_OwnOffset + offsetof(SMatrix, ZAxis));
	float4::Serialize(&s_Object->Trans, p_Serializer, p_OwnOffset + offsetof(SMatrix, Trans));
}

ZHMTypeInfo SAIEventSaveData::TypeInfo = ZHMTypeInfo("SAIEventSaveData", sizeof(SAIEventSaveData), alignof(SAIEventSaveData), SAIEventSaveData::WriteJson, SAIEventSaveData::WriteSimpleJson, SAIEventSaveData::FromSimpleJson, SAIEventSaveData::Serialize);

void SAIEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAIEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHandled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHandled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nEnd") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nEnd, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAIEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAIEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bHandled") << ":";
	p_Stream << s_Object->m_bHandled;
	p_Stream << ",";

	p_Stream << JsonStr("m_nStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nEnd") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nEnd, p_Stream);

	p_Stream << "}";
}

void SAIEventSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAIEventSaveData s_Object;

	s_Object.m_eType = static_cast<EAIEventType>(ZHMEnums::GetEnumValueByName("EAIEventType", std::string_view(p_Document["m_eType"])));

	s_Object.m_bHandled = bool(p_Document["m_bHandled"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_nStart"], &s_Item);
		s_Object.m_nStart = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_nEnd"], &s_Item);
		s_Object.m_nEnd = s_Item;
	}

	*reinterpret_cast<SAIEventSaveData*>(p_Target) = s_Object;
}

void SAIEventSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAIEventSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_nStart, p_Serializer, p_OwnOffset + offsetof(SAIEventSaveData, m_nStart));
	ZGameTime::Serialize(&s_Object->m_nEnd, p_Serializer, p_OwnOffset + offsetof(SAIEventSaveData, m_nEnd));
}

ZHMTypeInfo SKnownEntitySaveData::TypeInfo = ZHMTypeInfo("SKnownEntitySaveData", sizeof(SKnownEntitySaveData), alignof(SKnownEntitySaveData), SKnownEntitySaveData::WriteJson, SKnownEntitySaveData::WriteSimpleJson, SKnownEntitySaveData::FromSimpleJson, SKnownEntitySaveData::Serialize);

void SKnownEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SKnownEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nSharedIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSharedIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SAIEventSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEvents.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAIEventSaveData") << "," << JsonStr("$val") << ":";
		SAIEventSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBooleanEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBooleanEvents;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBooleanEventsHandled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBooleanEventsHandled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_knownWorldMatrix") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_knownWorldMatrix, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastWorldMatrixUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastWorldMatrixUpdate, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGoals") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGoals;
	p_Stream << "}";

	p_Stream << "}";
}

void SKnownEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SKnownEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nSharedIndex") << ":";
	p_Stream << s_Object->m_nSharedIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_aEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEvents.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEvents[i];
		SAIEventSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBooleanEvents") << ":";
	p_Stream << s_Object->m_nBooleanEvents;
	p_Stream << ",";

	p_Stream << JsonStr("m_nBooleanEventsHandled") << ":";
	p_Stream << s_Object->m_nBooleanEventsHandled;
	p_Stream << ",";

	p_Stream << JsonStr("m_knownWorldMatrix") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_knownWorldMatrix, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastWorldMatrixUpdate") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastWorldMatrixUpdate, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nGoals") << ":";
	p_Stream << s_Object->m_nGoals;

	p_Stream << "}";
}

void SKnownEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SKnownEntitySaveData s_Object;

	s_Object.m_nSharedIndex = static_cast<int32>(int64_t(p_Document["m_nSharedIndex"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEvents"])
	{
		SAIEventSaveData s_ArrayItem0;
		SAIEventSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aEvents.push_back(s_ArrayItem0);
	}

	s_Object.m_nBooleanEvents = static_cast<uint32>(int64_t(p_Document["m_nBooleanEvents"]));

	s_Object.m_nBooleanEventsHandled = static_cast<uint32>(int64_t(p_Document["m_nBooleanEventsHandled"]));

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_knownWorldMatrix"], &s_Item);
		s_Object.m_knownWorldMatrix = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastWorldMatrixUpdate"], &s_Item);
		s_Object.m_tLastWorldMatrixUpdate = s_Item;
	}

	s_Object.m_nGoals = static_cast<uint16>(int64_t(p_Document["m_nGoals"]));

	*reinterpret_cast<SKnownEntitySaveData*>(p_Target) = s_Object;
}

void SKnownEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SKnownEntitySaveData*>(p_Object);

	TArray<SAIEventSaveData>::Serialize(&s_Object->m_aEvents, p_Serializer, p_OwnOffset + offsetof(SKnownEntitySaveData, m_aEvents));
	SMatrix::Serialize(&s_Object->m_knownWorldMatrix, p_Serializer, p_OwnOffset + offsetof(SKnownEntitySaveData, m_knownWorldMatrix));
	ZGameTime::Serialize(&s_Object->m_tLastWorldMatrixUpdate, p_Serializer, p_OwnOffset + offsetof(SKnownEntitySaveData, m_tLastWorldMatrixUpdate));
}

ZHMTypeInfo SActorGoalSaveData::TypeInfo = ZHMTypeInfo("SActorGoalSaveData", sizeof(SActorGoalSaveData), alignof(SActorGoalSaveData), SActorGoalSaveData::WriteJson, SActorGoalSaveData::WriteSimpleJson, SActorGoalSaveData::FromSimpleJson, SActorGoalSaveData::Serialize);

void SActorGoalSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorGoalSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<int32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aHandled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<bool>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aHandled.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aHandled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aHandled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIsCurrent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<bool>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIsCurrent.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aIsCurrent[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aIsCurrent.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fExpiredTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<float32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_fExpiredTime.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_fExpiredTime[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_fExpiredTime.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActorGoalSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorGoalSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aHandled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aHandled.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aHandled[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aHandled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIsCurrent") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIsCurrent.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aIsCurrent[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aIsCurrent.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fExpiredTime") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_fExpiredTime.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_fExpiredTime[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_fExpiredTime.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorGoalSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorGoalSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<int32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aHandled"])
	{
		s_Object.m_aHandled.push_back(bool(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aIsCurrent"])
	{
		s_Object.m_aIsCurrent.push_back(bool(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_fExpiredTime"])
	{
		s_Object.m_fExpiredTime.push_back(static_cast<float32>(double(s_Item0)));
	}

	*reinterpret_cast<SActorGoalSaveData*>(p_Target) = s_Object;
}

void SActorGoalSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorGoalSaveData*>(p_Object);

	TArray<int32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SActorGoalSaveData, m_aEntities));
	TArray<bool>::Serialize(&s_Object->m_aHandled, p_Serializer, p_OwnOffset + offsetof(SActorGoalSaveData, m_aHandled));
	TArray<bool>::Serialize(&s_Object->m_aIsCurrent, p_Serializer, p_OwnOffset + offsetof(SActorGoalSaveData, m_aIsCurrent));
	TArray<float32>::Serialize(&s_Object->m_fExpiredTime, p_Serializer, p_OwnOffset + offsetof(SActorGoalSaveData, m_fExpiredTime));
}

ZHMTypeInfo SKnowledgeSaveData::TypeInfo = ZHMTypeInfo("SKnowledgeSaveData", sizeof(SKnowledgeSaveData), alignof(SKnowledgeSaveData), SKnowledgeSaveData::WriteJson, SKnowledgeSaveData::WriteSimpleJson, SKnowledgeSaveData::FromSimpleJson, SKnowledgeSaveData::Serialize);

void SKnowledgeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SKnowledgeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aKnownEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SKnownEntitySaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKnownEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aKnownEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SKnownEntitySaveData") << "," << JsonStr("$val") << ":";
		SKnownEntitySaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aKnownEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGoalKeys") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<EAIGoal>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGoalKeys.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGoalKeys[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIGoal") << "," << JsonStr("$val") << ":";
		p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Item0) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Item0))) << "}";
		p_Stream << "}";

		if (i < s_Object->m_aGoalKeys.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGoals") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorGoalSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGoals.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGoals[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorGoalSaveData") << "," << JsonStr("$val") << ":";
		SActorGoalSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGoals.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMAttentionLastUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMAttentionLastUpdate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMDisguiseAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMDisguiseAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMTrespassingAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMTrespassingAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMLastTrespassingAttentionMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMLastTrespassingAttentionMax;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTrespassingAttentionGain") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastTrespassingAttentionGain, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastAttentionEvaluate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastAttentionEvaluate, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMWeaponAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMWeaponAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMWeaponAttentionChange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHMWeaponAttentionChange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eGameTension") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eGameTension) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eGameTension))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tAmbientStartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tAmbientStartTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tExpiredAIModifierSuppressSocialGreeting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tExpiredAIModifierSuppressSocialGreeting, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_behaviorModifiers") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_behaviorModifiers;
	p_Stream << "}";

	p_Stream << "}";
}

void SKnowledgeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SKnowledgeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aKnownEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKnownEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aKnownEntities[i];
		SKnownEntitySaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aKnownEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGoalKeys") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGoalKeys.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGoalKeys[i];
		p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIGoal", static_cast<int>(s_Item0)));

		if (i < s_Object->m_aGoalKeys.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGoals") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGoals.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGoals[i];
		SActorGoalSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aGoals.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMAttention") << ":";
	p_Stream << s_Object->m_fHMAttention;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMAttentionLastUpdate") << ":";
	p_Stream << s_Object->m_fHMAttentionLastUpdate;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMDisguiseAttention") << ":";
	p_Stream << s_Object->m_fHMDisguiseAttention;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMTrespassingAttention") << ":";
	p_Stream << s_Object->m_fHMTrespassingAttention;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMLastTrespassingAttentionMax") << ":";
	p_Stream << s_Object->m_fHMLastTrespassingAttentionMax;
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTrespassingAttentionGain") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastTrespassingAttentionGain, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastAttentionEvaluate") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastAttentionEvaluate, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMWeaponAttention") << ":";
	p_Stream << s_Object->m_fHMWeaponAttention;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHMWeaponAttentionChange") << ":";
	p_Stream << s_Object->m_fHMWeaponAttentionChange;
	p_Stream << ",";

	p_Stream << JsonStr("m_eGameTension") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eGameTension)));
	p_Stream << ",";

	p_Stream << JsonStr("m_tAmbientStartTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tAmbientStartTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tExpiredAIModifierSuppressSocialGreeting") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tExpiredAIModifierSuppressSocialGreeting, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_behaviorModifiers") << ":";
	p_Stream << s_Object->m_behaviorModifiers;

	p_Stream << "}";
}

void SKnowledgeSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SKnowledgeSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aKnownEntities"])
	{
		SKnownEntitySaveData s_ArrayItem0;
		SKnownEntitySaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aKnownEntities.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aGoalKeys"])
	{
		s_Object.m_aGoalKeys.push_back(static_cast<EAIGoal>(ZHMEnums::GetEnumValueByName("EAIGoal", std::string_view(s_Item0))));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aGoals"])
	{
		SActorGoalSaveData s_ArrayItem0;
		SActorGoalSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aGoals.push_back(s_ArrayItem0);
	}

	s_Object.m_fHMAttention = static_cast<float32>(double(p_Document["m_fHMAttention"]));

	s_Object.m_fHMAttentionLastUpdate = static_cast<float32>(double(p_Document["m_fHMAttentionLastUpdate"]));

	s_Object.m_fHMDisguiseAttention = static_cast<float32>(double(p_Document["m_fHMDisguiseAttention"]));

	s_Object.m_fHMTrespassingAttention = static_cast<float32>(double(p_Document["m_fHMTrespassingAttention"]));

	s_Object.m_fHMLastTrespassingAttentionMax = static_cast<float32>(double(p_Document["m_fHMLastTrespassingAttentionMax"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastTrespassingAttentionGain"], &s_Item);
		s_Object.m_tLastTrespassingAttentionGain = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastAttentionEvaluate"], &s_Item);
		s_Object.m_tLastAttentionEvaluate = s_Item;
	}

	s_Object.m_fHMWeaponAttention = static_cast<float32>(double(p_Document["m_fHMWeaponAttention"]));

	s_Object.m_fHMWeaponAttentionChange = static_cast<float32>(double(p_Document["m_fHMWeaponAttentionChange"]));

	s_Object.m_eGameTension = static_cast<EGameTension>(ZHMEnums::GetEnumValueByName("EGameTension", std::string_view(p_Document["m_eGameTension"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tAmbientStartTime"], &s_Item);
		s_Object.m_tAmbientStartTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tExpiredAIModifierSuppressSocialGreeting"], &s_Item);
		s_Object.m_tExpiredAIModifierSuppressSocialGreeting = s_Item;
	}

	s_Object.m_behaviorModifiers = static_cast<uint32>(int64_t(p_Document["m_behaviorModifiers"]));

	*reinterpret_cast<SKnowledgeSaveData*>(p_Target) = s_Object;
}

void SKnowledgeSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SKnowledgeSaveData*>(p_Object);

	TArray<SKnownEntitySaveData>::Serialize(&s_Object->m_aKnownEntities, p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_aKnownEntities));
	TArray<EAIGoal>::Serialize(&s_Object->m_aGoalKeys, p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_aGoalKeys));
	TArray<SActorGoalSaveData>::Serialize(&s_Object->m_aGoals, p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_aGoals));
	ZGameTime::Serialize(&s_Object->m_tLastTrespassingAttentionGain, p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_tLastTrespassingAttentionGain));
	ZGameTime::Serialize(&s_Object->m_tLastAttentionEvaluate, p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_tLastAttentionEvaluate));
	ZGameTime::Serialize(&s_Object->m_tAmbientStartTime, p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_tAmbientStartTime));
	ZGameTime::Serialize(&s_Object->m_tExpiredAIModifierSuppressSocialGreeting, p_Serializer, p_OwnOffset + offsetof(SKnowledgeSaveData, m_tExpiredAIModifierSuppressSocialGreeting));
}

ZHMTypeInfo SMovementDrainPipeSaveData::TypeInfo = ZHMTypeInfo("SMovementDrainPipeSaveData", sizeof(SMovementDrainPipeSaveData), alignof(SMovementDrainPipeSaveData), SMovementDrainPipeSaveData::WriteJson, SMovementDrainPipeSaveData::WriteSimpleJson, SMovementDrainPipeSaveData::FromSimpleJson, SMovementDrainPipeSaveData::Serialize);

void SMovementDrainPipeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementDrainPipeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rDrainPipe") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDrainPipe;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementDrainPipeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementDrainPipeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rDrainPipe") << ":";
	p_Stream << s_Object->m_rDrainPipe;

	p_Stream << "}";
}

void SMovementDrainPipeSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementDrainPipeSaveData s_Object;

	s_Object.m_rDrainPipe = static_cast<uint32>(int64_t(p_Document["m_rDrainPipe"]));

	*reinterpret_cast<SMovementDrainPipeSaveData*>(p_Target) = s_Object;
}

void SMovementDrainPipeSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMovementDrainPipeSaveData*>(p_Object);

}

ZHMTypeInfo SExtendedCppEntityProperty::TypeInfo = ZHMTypeInfo("SExtendedCppEntityProperty", sizeof(SExtendedCppEntityProperty), alignof(SExtendedCppEntityProperty), SExtendedCppEntityProperty::WriteJson, SExtendedCppEntityProperty::WriteSimpleJson, SExtendedCppEntityProperty::FromSimpleJson, SExtendedCppEntityProperty::Serialize);

void SExtendedCppEntityProperty::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExtendedCppEntityProperty*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("propertyName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->propertyName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EExtendedPropertyType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->propertyType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EExtendedPropertyType", static_cast<int>(s_Object->propertyType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rtEditable") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rtEditable;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("extraData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->extraData;
	p_Stream << "}";

	p_Stream << "}";
}

void SExtendedCppEntityProperty::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExtendedCppEntityProperty*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("propertyName") << ":";
	p_Stream << JsonStr(s_Object->propertyName);
	p_Stream << ",";

	p_Stream << JsonStr("propertyType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EExtendedPropertyType", static_cast<int>(s_Object->propertyType)));
	p_Stream << ",";

	p_Stream << JsonStr("rtEditable") << ":";
	p_Stream << s_Object->rtEditable;
	p_Stream << ",";

	p_Stream << JsonStr("extraData") << ":";
	p_Stream << s_Object->extraData;

	p_Stream << "}";
}

void SExtendedCppEntityProperty::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExtendedCppEntityProperty s_Object;

	s_Object.propertyName = std::string_view(p_Document["propertyName"]);

	s_Object.propertyType = static_cast<EExtendedPropertyType>(ZHMEnums::GetEnumValueByName("EExtendedPropertyType", std::string_view(p_Document["propertyType"])));

	s_Object.rtEditable = bool(p_Document["rtEditable"]);

	s_Object.extraData = uint64(p_Document["extraData"]);

	*reinterpret_cast<SExtendedCppEntityProperty*>(p_Target) = s_Object;
}

void SExtendedCppEntityProperty::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SExtendedCppEntityProperty*>(p_Object);

	ZString::Serialize(&s_Object->propertyName, p_Serializer, p_OwnOffset + offsetof(SExtendedCppEntityProperty, propertyName));
}

ZHMTypeInfo SExtendedCppEntityBlueprint::TypeInfo = ZHMTypeInfo("SExtendedCppEntityBlueprint", sizeof(SExtendedCppEntityBlueprint), alignof(SExtendedCppEntityBlueprint), SExtendedCppEntityBlueprint::WriteJson, SExtendedCppEntityBlueprint::WriteSimpleJson, SExtendedCppEntityBlueprint::FromSimpleJson, SExtendedCppEntityBlueprint::Serialize);

void SExtendedCppEntityBlueprint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExtendedCppEntityBlueprint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("properties") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SExtendedCppEntityProperty>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->properties.size(); ++i)
	{
		auto& s_Item0 = s_Object->properties[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExtendedCppEntityProperty") << "," << JsonStr("$val") << ":";
		SExtendedCppEntityProperty::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->properties.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SExtendedCppEntityBlueprint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExtendedCppEntityBlueprint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("properties") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->properties.size(); ++i)
	{
		auto& s_Item0 = s_Object->properties[i];
		SExtendedCppEntityProperty::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->properties.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SExtendedCppEntityBlueprint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExtendedCppEntityBlueprint s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["properties"])
	{
		SExtendedCppEntityProperty s_ArrayItem0;
		SExtendedCppEntityProperty::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.properties.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SExtendedCppEntityBlueprint*>(p_Target) = s_Object;
}

void SExtendedCppEntityBlueprint::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SExtendedCppEntityBlueprint*>(p_Object);

	TArray<SExtendedCppEntityProperty>::Serialize(&s_Object->properties, p_Serializer, p_OwnOffset + offsetof(SExtendedCppEntityBlueprint, properties));
}

ZHMTypeInfo SSavableData::TypeInfo = ZHMTypeInfo("SSavableData", sizeof(SSavableData), alignof(SSavableData), SSavableData::WriteJson, SSavableData::WriteSimpleJson, SSavableData::FromSimpleJson, SSavableData::Serialize);

void SSavableData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSavableData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_EntitiesData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_EntitiesData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Data, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nId;
	p_Stream << "}";

	p_Stream << "}";
}

void SSavableData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSavableData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_EntitiesData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_EntitiesData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Data") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Data, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nId") << ":";
	p_Stream << s_Object->m_nId;

	p_Stream << "}";
}

void SSavableData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSavableData s_Object;

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_EntitiesData"], &s_Item);
		s_Object.m_EntitiesData = s_Item;
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_Data"], &s_Item);
		s_Object.m_Data = s_Item;
	}

	s_Object.m_nId = static_cast<uint32>(int64_t(p_Document["m_nId"]));

	*reinterpret_cast<SSavableData*>(p_Target) = s_Object;
}

void SSavableData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSavableData*>(p_Object);

	ZVariant::Serialize(&s_Object->m_EntitiesData, p_Serializer, p_OwnOffset + offsetof(SSavableData, m_EntitiesData));
	ZVariant::Serialize(&s_Object->m_Data, p_Serializer, p_OwnOffset + offsetof(SSavableData, m_Data));
}

ZHMTypeInfo SSaveGameMetaData::TypeInfo = ZHMTypeInfo("SSaveGameMetaData", sizeof(SSaveGameMetaData), alignof(SSaveGameMetaData), SSaveGameMetaData::WriteJson, SSaveGameMetaData::WriteSimpleJson, SSaveGameMetaData::FromSimpleJson, SSaveGameMetaData::Serialize);

void SSaveGameMetaData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSaveGameMetaData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nSlot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->nSlot);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eSaveType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESaveType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eSaveType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESaveType", static_cast<int>(s_Object->eSaveType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eDifficultyLevel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->eDifficultyLevel;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContractId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContractId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContractTitle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContractTitle);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContractType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContractType);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sLocationId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sLocationId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContractSessionId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContractSessionId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sLastEventToken") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sLastEventToken);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsOnline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsOnline;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsVR") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsVR;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aScreenShot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aScreenShot.size(); ++i)
	{
		auto& s_Item0 = s_Object->aScreenShot[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->aScreenShot.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aRequirements") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ERequirementId>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aRequirements.size(); ++i)
	{
		auto& s_Item0 = s_Object->aRequirements[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ERequirementId") << "," << JsonStr("$val") << ":";
		p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Item0) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ERequirementId", static_cast<int>(s_Item0))) << "}";
		p_Stream << "}";

		if (i < s_Object->aRequirements.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SSaveGameMetaData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSaveGameMetaData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nSlot") << ":";
	p_Stream << static_cast<int>(s_Object->nSlot);
	p_Stream << ",";

	p_Stream << JsonStr("eSaveType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESaveType", static_cast<int>(s_Object->eSaveType)));
	p_Stream << ",";

	p_Stream << JsonStr("eDifficultyLevel") << ":";
	p_Stream << s_Object->eDifficultyLevel;
	p_Stream << ",";

	p_Stream << JsonStr("sContractId") << ":";
	p_Stream << JsonStr(s_Object->sContractId);
	p_Stream << ",";

	p_Stream << JsonStr("sContractTitle") << ":";
	p_Stream << JsonStr(s_Object->sContractTitle);
	p_Stream << ",";

	p_Stream << JsonStr("sContractType") << ":";
	p_Stream << JsonStr(s_Object->sContractType);
	p_Stream << ",";

	p_Stream << JsonStr("sLocationId") << ":";
	p_Stream << JsonStr(s_Object->sLocationId);
	p_Stream << ",";

	p_Stream << JsonStr("sContractSessionId") << ":";
	p_Stream << JsonStr(s_Object->sContractSessionId);
	p_Stream << ",";

	p_Stream << JsonStr("sLastEventToken") << ":";
	p_Stream << JsonStr(s_Object->sLastEventToken);
	p_Stream << ",";

	p_Stream << JsonStr("bIsOnline") << ":";
	p_Stream << s_Object->bIsOnline;
	p_Stream << ",";

	p_Stream << JsonStr("bIsVR") << ":";
	p_Stream << s_Object->bIsVR;
	p_Stream << ",";

	p_Stream << JsonStr("aScreenShot") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aScreenShot.size(); ++i)
	{
		auto& s_Item0 = s_Object->aScreenShot[i];
		p_Stream << s_Item0;

		if (i < s_Object->aScreenShot.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aRequirements") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aRequirements.size(); ++i)
	{
		auto& s_Item0 = s_Object->aRequirements[i];
		p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ERequirementId", static_cast<int>(s_Item0)));

		if (i < s_Object->aRequirements.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SSaveGameMetaData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSaveGameMetaData s_Object;

	s_Object.nSlot = static_cast<uint8>(int64_t(p_Document["nSlot"]));

	s_Object.eSaveType = static_cast<ESaveType>(ZHMEnums::GetEnumValueByName("ESaveType", std::string_view(p_Document["eSaveType"])));

	s_Object.eDifficultyLevel = static_cast<int32>(int64_t(p_Document["eDifficultyLevel"]));

	s_Object.sContractId = std::string_view(p_Document["sContractId"]);

	s_Object.sContractTitle = std::string_view(p_Document["sContractTitle"]);

	s_Object.sContractType = std::string_view(p_Document["sContractType"]);

	s_Object.sLocationId = std::string_view(p_Document["sLocationId"]);

	s_Object.sContractSessionId = std::string_view(p_Document["sContractSessionId"]);

	s_Object.sLastEventToken = std::string_view(p_Document["sLastEventToken"]);

	s_Object.bIsOnline = bool(p_Document["bIsOnline"]);

	s_Object.bIsVR = bool(p_Document["bIsVR"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["aScreenShot"])
	{
		s_Object.aScreenShot.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["aRequirements"])
	{
		s_Object.aRequirements.push_back(static_cast<ERequirementId>(ZHMEnums::GetEnumValueByName("ERequirementId", std::string_view(s_Item0))));
	}

	*reinterpret_cast<SSaveGameMetaData*>(p_Target) = s_Object;
}

void SSaveGameMetaData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSaveGameMetaData*>(p_Object);

	ZString::Serialize(&s_Object->sContractId, p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, sContractId));
	ZString::Serialize(&s_Object->sContractTitle, p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, sContractTitle));
	ZString::Serialize(&s_Object->sContractType, p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, sContractType));
	ZString::Serialize(&s_Object->sLocationId, p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, sLocationId));
	ZString::Serialize(&s_Object->sContractSessionId, p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, sContractSessionId));
	ZString::Serialize(&s_Object->sLastEventToken, p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, sLastEventToken));
	TArray<uint32>::Serialize(&s_Object->aScreenShot, p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, aScreenShot));
	TArray<ERequirementId>::Serialize(&s_Object->aRequirements, p_Serializer, p_OwnOffset + offsetof(SSaveGameMetaData, aRequirements));
}

ZHMTypeInfo SGuardPointOrderSaveData::TypeInfo = ZHMTypeInfo("SGuardPointOrderSaveData", sizeof(SGuardPointOrderSaveData), alignof(SGuardPointOrderSaveData), SGuardPointOrderSaveData::WriteJson, SGuardPointOrderSaveData::WriteSimpleJson, SGuardPointOrderSaveData::FromSimpleJson, SGuardPointOrderSaveData::Serialize);

void SGuardPointOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGuardPointOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_guardPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_guardPoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_walkOnly") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_walkOnly;
	p_Stream << "}";

	p_Stream << "}";
}

void SGuardPointOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGuardPointOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_guardPoint") << ":";
	p_Stream << s_Object->m_guardPoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_walkOnly") << ":";
	p_Stream << s_Object->m_walkOnly;

	p_Stream << "}";
}

void SGuardPointOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGuardPointOrderSaveData s_Object;

	s_Object.m_guardPoint = static_cast<uint32>(int64_t(p_Document["m_guardPoint"]));

	s_Object.m_walkOnly = bool(p_Document["m_walkOnly"]);

	*reinterpret_cast<SGuardPointOrderSaveData*>(p_Target) = s_Object;
}

void SGuardPointOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGuardPointOrderSaveData*>(p_Object);

}

ZHMTypeInfo ZGuid::TypeInfo = ZHMTypeInfo("ZGuid", sizeof(ZGuid), alignof(ZGuid), ZGuid::WriteJson, ZGuid::WriteSimpleJson, ZGuid::FromSimpleJson, ZGuid::Serialize);

void ZGuid::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZGuid*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("_a") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->_a;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_b") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->_b;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_c") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->_c;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_d") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_d);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_e") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_e);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_f") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_f);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_g") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_g);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_h") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_h);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_i") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_i);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_j") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_j);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_k") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->_k);
	p_Stream << "}";

	p_Stream << "}";
}

void ZGuid::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZGuid*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("_a") << ":";
	p_Stream << s_Object->_a;
	p_Stream << ",";

	p_Stream << JsonStr("_b") << ":";
	p_Stream << s_Object->_b;
	p_Stream << ",";

	p_Stream << JsonStr("_c") << ":";
	p_Stream << s_Object->_c;
	p_Stream << ",";

	p_Stream << JsonStr("_d") << ":";
	p_Stream << static_cast<int>(s_Object->_d);
	p_Stream << ",";

	p_Stream << JsonStr("_e") << ":";
	p_Stream << static_cast<int>(s_Object->_e);
	p_Stream << ",";

	p_Stream << JsonStr("_f") << ":";
	p_Stream << static_cast<int>(s_Object->_f);
	p_Stream << ",";

	p_Stream << JsonStr("_g") << ":";
	p_Stream << static_cast<int>(s_Object->_g);
	p_Stream << ",";

	p_Stream << JsonStr("_h") << ":";
	p_Stream << static_cast<int>(s_Object->_h);
	p_Stream << ",";

	p_Stream << JsonStr("_i") << ":";
	p_Stream << static_cast<int>(s_Object->_i);
	p_Stream << ",";

	p_Stream << JsonStr("_j") << ":";
	p_Stream << static_cast<int>(s_Object->_j);
	p_Stream << ",";

	p_Stream << JsonStr("_k") << ":";
	p_Stream << static_cast<int>(s_Object->_k);

	p_Stream << "}";
}

void ZGuid::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZGuid s_Object;

	s_Object._a = static_cast<uint32>(int64_t(p_Document["_a"]));

	s_Object._b = static_cast<uint16>(int64_t(p_Document["_b"]));

	s_Object._c = static_cast<uint16>(int64_t(p_Document["_c"]));

	s_Object._d = static_cast<uint8>(int64_t(p_Document["_d"]));

	s_Object._e = static_cast<uint8>(int64_t(p_Document["_e"]));

	s_Object._f = static_cast<uint8>(int64_t(p_Document["_f"]));

	s_Object._g = static_cast<uint8>(int64_t(p_Document["_g"]));

	s_Object._h = static_cast<uint8>(int64_t(p_Document["_h"]));

	s_Object._i = static_cast<uint8>(int64_t(p_Document["_i"]));

	s_Object._j = static_cast<uint8>(int64_t(p_Document["_j"]));

	s_Object._k = static_cast<uint8>(int64_t(p_Document["_k"]));

	*reinterpret_cast<ZGuid*>(p_Target) = s_Object;
}

void ZGuid::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZGuid*>(p_Object);

}

ZHMTypeInfo SActivity::TypeInfo = ZHMTypeInfo("SActivity", sizeof(SActivity), alignof(SActivity), SActivity::WriteJson, SActivity::WriteSimpleJson, SActivity::FromSimpleJson, SActivity::Serialize);

void SActivity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActivity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGuid") << "," << JsonStr("$val") << ":";
	ZGuid::WriteJson(&s_Object->id, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("activityId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->activityId);
	p_Stream << "}";

	p_Stream << "}";
}

void SActivity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActivity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("id") << ":";
	ZGuid::WriteSimpleJson(&s_Object->id, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("activityId") << ":";
	p_Stream << JsonStr(s_Object->activityId);

	p_Stream << "}";
}

void SActivity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActivity s_Object;

	{
		ZGuid s_Item;
		ZGuid::FromSimpleJson(p_Document["id"], &s_Item);
		s_Object.id = s_Item;
	}

	s_Object.activityId = std::string_view(p_Document["activityId"]);

	*reinterpret_cast<SActivity*>(p_Target) = s_Object;
}

void SActivity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActivity*>(p_Object);

	ZGuid::Serialize(&s_Object->id, p_Serializer, p_OwnOffset + offsetof(SActivity, id));
	ZString::Serialize(&s_Object->activityId, p_Serializer, p_OwnOffset + offsetof(SActivity, activityId));
}

ZHMTypeInfo SActivityExits::TypeInfo = ZHMTypeInfo("SActivityExits", sizeof(SActivityExits), alignof(SActivityExits), SActivityExits::WriteJson, SActivityExits::WriteSimpleJson, SActivityExits::FromSimpleJson, SActivityExits::Serialize);

void SActivityExits::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActivityExits*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("activity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivity") << "," << JsonStr("$val") << ":";
	SActivity::WriteJson(&s_Object->activity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("exits") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exits.size(); ++i)
	{
		auto& s_Item0 = s_Object->exits[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->exits.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActivityExits::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActivityExits*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("activity") << ":";
	SActivity::WriteSimpleJson(&s_Object->activity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("exits") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exits.size(); ++i)
	{
		auto& s_Item0 = s_Object->exits[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->exits.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActivityExits::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActivityExits s_Object;

	{
		SActivity s_Item;
		SActivity::FromSimpleJson(p_Document["activity"], &s_Item);
		s_Object.activity = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["exits"])
	{
		s_Object.exits.push_back(std::string_view(s_Item0));
	}

	*reinterpret_cast<SActivityExits*>(p_Target) = s_Object;
}

void SActivityExits::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActivityExits*>(p_Object);

	SActivity::Serialize(&s_Object->activity, p_Serializer, p_OwnOffset + offsetof(SActivityExits, activity));
	TArray<ZString>::Serialize(&s_Object->exits, p_Serializer, p_OwnOffset + offsetof(SActivityExits, exits));
}

ZHMTypeInfo ZSituationOrder::TypeInfo = ZHMTypeInfo("ZSituationOrder", sizeof(ZSituationOrder), alignof(ZSituationOrder), ZSituationOrder::WriteJson, ZSituationOrder::WriteSimpleJson, ZSituationOrder::FromSimpleJson, ZSituationOrder::Serialize);

void ZSituationOrder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSituationOrder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSituationOrder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSituationOrder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZSituationOrder::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSituationOrder s_Object;

	*reinterpret_cast<ZSituationOrder*>(p_Target) = s_Object;
}

void ZSituationOrder::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZSituationOrder*>(p_Object);

}

ZHMTypeInfo ZBehaviorTreeVariable::TypeInfo = ZHMTypeInfo("ZBehaviorTreeVariable", sizeof(ZBehaviorTreeVariable), alignof(ZBehaviorTreeVariable), ZBehaviorTreeVariable::WriteJson, ZBehaviorTreeVariable::WriteSimpleJson, ZBehaviorTreeVariable::FromSimpleJson, ZBehaviorTreeVariable::Serialize);

void ZBehaviorTreeVariable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZBehaviorTreeVariable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZBehaviorTreeVariable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZBehaviorTreeVariable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZBehaviorTreeVariable::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZBehaviorTreeVariable s_Object;

	*reinterpret_cast<ZBehaviorTreeVariable*>(p_Target) = s_Object;
}

void ZBehaviorTreeVariable::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZBehaviorTreeVariable*>(p_Object);

}

ZHMTypeInfo SCppEntitySubsetInfo::TypeInfo = ZHMTypeInfo("SCppEntitySubsetInfo", sizeof(SCppEntitySubsetInfo), alignof(SCppEntitySubsetInfo), SCppEntitySubsetInfo::WriteJson, SCppEntitySubsetInfo::WriteSimpleJson, SCppEntitySubsetInfo::FromSimpleJson, SCppEntitySubsetInfo::Serialize);

void SCppEntitySubsetInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntitySubsetInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("name") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->name);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("flags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->flags;
	p_Stream << "}";

	p_Stream << "}";
}

void SCppEntitySubsetInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntitySubsetInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("name") << ":";
	p_Stream << JsonStr(s_Object->name);
	p_Stream << ",";

	p_Stream << JsonStr("flags") << ":";
	p_Stream << s_Object->flags;

	p_Stream << "}";
}

void SCppEntitySubsetInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCppEntitySubsetInfo s_Object;

	s_Object.name = std::string_view(p_Document["name"]);

	s_Object.flags = static_cast<uint32>(int64_t(p_Document["flags"]));

	*reinterpret_cast<SCppEntitySubsetInfo*>(p_Target) = s_Object;
}

void SCppEntitySubsetInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCppEntitySubsetInfo*>(p_Object);

	ZString::Serialize(&s_Object->name, p_Serializer, p_OwnOffset + offsetof(SCppEntitySubsetInfo, name));
}

ZHMTypeInfo SCppEntityBlueprint::TypeInfo = ZHMTypeInfo("SCppEntityBlueprint", sizeof(SCppEntityBlueprint), alignof(SCppEntityBlueprint), SCppEntityBlueprint::WriteJson, SCppEntityBlueprint::WriteSimpleJson, SCppEntityBlueprint::FromSimpleJson, SCppEntityBlueprint::Serialize);

void SCppEntityBlueprint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntityBlueprint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("typeName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TypeID") << "," << JsonStr("$val") << ":";
	TypeID::WriteJson(&s_Object->typeName, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("typeFlags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->typeFlags;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("subsets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SCppEntitySubsetInfo>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subsets.size(); ++i)
	{
		auto& s_Item0 = s_Object->subsets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCppEntitySubsetInfo") << "," << JsonStr("$val") << ":";
		SCppEntitySubsetInfo::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->subsets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCppEntityBlueprint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntityBlueprint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("typeName") << ":";
	TypeID::WriteSimpleJson(&s_Object->typeName, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("typeFlags") << ":";
	p_Stream << s_Object->typeFlags;
	p_Stream << ",";

	p_Stream << JsonStr("subsets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subsets.size(); ++i)
	{
		auto& s_Item0 = s_Object->subsets[i];
		SCppEntitySubsetInfo::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->subsets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCppEntityBlueprint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCppEntityBlueprint s_Object;

	{
		TypeID s_Item;
		TypeID::FromSimpleJson(p_Document["typeName"], &s_Item);
		s_Object.typeName = s_Item;
	}

	s_Object.typeFlags = static_cast<uint32>(int64_t(p_Document["typeFlags"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["subsets"])
	{
		SCppEntitySubsetInfo s_ArrayItem0;
		SCppEntitySubsetInfo::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.subsets.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SCppEntityBlueprint*>(p_Target) = s_Object;
}

void SCppEntityBlueprint::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCppEntityBlueprint*>(p_Object);

	TypeID::Serialize(&s_Object->typeName, p_Serializer, p_OwnOffset + offsetof(SCppEntityBlueprint, typeName));
	TArray<SCppEntitySubsetInfo>::Serialize(&s_Object->subsets, p_Serializer, p_OwnOffset + offsetof(SCppEntityBlueprint, subsets));
}

ZHMTypeInfo SMusicGridData::TypeInfo = ZHMTypeInfo("SMusicGridData", sizeof(SMusicGridData), alignof(SMusicGridData), SMusicGridData::WriteJson, SMusicGridData::WriteSimpleJson, SMusicGridData::FromSimpleJson, SMusicGridData::Serialize);

void SMusicGridData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMusicGridData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fGridDurationSec") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGridDurationSec;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridOffsetSec") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGridOffsetSec;
	p_Stream << "}";

	p_Stream << "}";
}

void SMusicGridData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMusicGridData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fGridDurationSec") << ":";
	p_Stream << s_Object->m_fGridDurationSec;
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridOffsetSec") << ":";
	p_Stream << s_Object->m_fGridOffsetSec;

	p_Stream << "}";
}

void SMusicGridData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMusicGridData s_Object;

	s_Object.m_fGridDurationSec = static_cast<float32>(double(p_Document["m_fGridDurationSec"]));

	s_Object.m_fGridOffsetSec = static_cast<float32>(double(p_Document["m_fGridOffsetSec"]));

	*reinterpret_cast<SMusicGridData*>(p_Target) = s_Object;
}

void SMusicGridData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMusicGridData*>(p_Object);

}

ZHMTypeInfo ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData::TypeInfo = ZHMTypeInfo("ZAISetpieceDistractionContextEntity.SAIDistractionContextEntitySaveData", sizeof(ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData), alignof(ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData), ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData::WriteJson, ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData::WriteSimpleJson, ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData::FromSimpleJson, ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData::Serialize);

void ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_DistractedActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_DistractedActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CooldownExpirationTimestamp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_CooldownExpirationTimestamp, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DistractionIsActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_DistractionIsActive;
	p_Stream << "}";

	p_Stream << "}";
}

void ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_DistractedActor") << ":";
	p_Stream << s_Object->m_DistractedActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_CooldownExpirationTimestamp") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_CooldownExpirationTimestamp, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_DistractionIsActive") << ":";
	p_Stream << s_Object->m_DistractionIsActive;

	p_Stream << "}";
}

void ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData s_Object;

	s_Object.m_DistractedActor = static_cast<uint32>(int64_t(p_Document["m_DistractedActor"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_CooldownExpirationTimestamp"], &s_Item);
		s_Object.m_CooldownExpirationTimestamp = s_Item;
	}

	s_Object.m_DistractionIsActive = bool(p_Document["m_DistractionIsActive"]);

	*reinterpret_cast<ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData*>(p_Target) = s_Object;
}

void ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_CooldownExpirationTimestamp, p_Serializer, p_OwnOffset + offsetof(ZAISetpieceDistractionContextEntity_SAIDistractionContextEntitySaveData, m_CooldownExpirationTimestamp));
}

ZHMTypeInfo SExitsActiveSaveData::TypeInfo = ZHMTypeInfo("SExitsActiveSaveData", sizeof(SExitsActiveSaveData), alignof(SExitsActiveSaveData), SExitsActiveSaveData::WriteJson, SExitsActiveSaveData::WriteSimpleJson, SExitsActiveSaveData::FromSimpleJson, SExitsActiveSaveData::Serialize);

void SExitsActiveSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExitsActiveSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsActive;
	p_Stream << "}";

	p_Stream << "}";
}

void SExitsActiveSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExitsActiveSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsActive") << ":";
	p_Stream << s_Object->m_bIsActive;

	p_Stream << "}";
}

void SExitsActiveSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExitsActiveSaveData s_Object;

	s_Object.m_bIsActive = bool(p_Document["m_bIsActive"]);

	*reinterpret_cast<SExitsActiveSaveData*>(p_Target) = s_Object;
}

void SExitsActiveSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SExitsActiveSaveData*>(p_Object);

}

ZHMTypeInfo SRepositionOrderSaveData::TypeInfo = ZHMTypeInfo("SRepositionOrderSaveData", sizeof(SRepositionOrderSaveData), alignof(SRepositionOrderSaveData), SRepositionOrderSaveData::WriteJson, SRepositionOrderSaveData::WriteSimpleJson, SRepositionOrderSaveData::FromSimpleJson, SRepositionOrderSaveData::Serialize);

void SRepositionOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRepositionOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bStrafe") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStrafe;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAimAtTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAimAtTarget;
	p_Stream << "}";

	p_Stream << "}";
}

void SRepositionOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRepositionOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bStrafe") << ":";
	p_Stream << s_Object->m_bStrafe;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAimAtTarget") << ":";
	p_Stream << s_Object->m_bAimAtTarget;

	p_Stream << "}";
}

void SRepositionOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRepositionOrderSaveData s_Object;

	s_Object.m_bStrafe = bool(p_Document["m_bStrafe"]);

	s_Object.m_bAimAtTarget = bool(p_Document["m_bAimAtTarget"]);

	*reinterpret_cast<SRepositionOrderSaveData*>(p_Target) = s_Object;
}

void SRepositionOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRepositionOrderSaveData*>(p_Object);

}

ZHMTypeInfo SObjetiveSaveData::TypeInfo = ZHMTypeInfo("SObjetiveSaveData", sizeof(SObjetiveSaveData), alignof(SObjetiveSaveData), SObjetiveSaveData::WriteJson, SObjetiveSaveData::WriteSimpleJson, SObjetiveSaveData::FromSimpleJson, SObjetiveSaveData::Serialize);

void SObjetiveSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SObjetiveSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("IContractObjective.Type") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("IContractObjective.Type", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_SaveData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_SaveData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SObjetiveSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SObjetiveSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("IContractObjective.Type", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_SaveData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_SaveData, p_Stream);

	p_Stream << "}";
}

void SObjetiveSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SObjetiveSaveData s_Object;

	s_Object.m_eType = static_cast<IContractObjective_Type>(ZHMEnums::GetEnumValueByName("IContractObjective.Type", std::string_view(p_Document["m_eType"])));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_SaveData"], &s_Item);
		s_Object.m_SaveData = s_Item;
	}

	*reinterpret_cast<SObjetiveSaveData*>(p_Target) = s_Object;
}

void SObjetiveSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SObjetiveSaveData*>(p_Object);

	ZVariant::Serialize(&s_Object->m_SaveData, p_Serializer, p_OwnOffset + offsetof(SObjetiveSaveData, m_SaveData));
}

ZHMTypeInfo SDestructiblePieceSaveData::TypeInfo = ZHMTypeInfo("SDestructiblePieceSaveData", sizeof(SDestructiblePieceSaveData), alignof(SDestructiblePieceSaveData), SDestructiblePieceSaveData::WriteJson, SDestructiblePieceSaveData::WriteSimpleJson, SDestructiblePieceSaveData::FromSimpleJson, SDestructiblePieceSaveData::Serialize);

void SDestructiblePieceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDestructiblePieceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_mTransform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_mTransform, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint16>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMass") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fMass;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ePhysicsType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EPhysicsObjectType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_ePhysicsType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EPhysicsObjectType", static_cast<int>(s_Object->m_ePhysicsType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAwake") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsAwake;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLinearVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_fLinearVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAngularVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_fAngularVelocity, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructiblePieceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDestructiblePieceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_mTransform") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_mTransform, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aIndices[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMass") << ":";
	p_Stream << s_Object->m_fMass;
	p_Stream << ",";

	p_Stream << JsonStr("m_ePhysicsType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EPhysicsObjectType", static_cast<int>(s_Object->m_ePhysicsType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAwake") << ":";
	p_Stream << s_Object->m_bIsAwake;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLinearVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_fLinearVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fAngularVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_fAngularVelocity, p_Stream);

	p_Stream << "}";
}

void SDestructiblePieceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDestructiblePieceSaveData s_Object;

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_mTransform"], &s_Item);
		s_Object.m_mTransform = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aIndices"])
	{
		s_Object.m_aIndices.push_back(static_cast<uint16>(int64_t(s_Item0)));
	}

	s_Object.m_fMass = static_cast<float32>(double(p_Document["m_fMass"]));

	s_Object.m_ePhysicsType = static_cast<EPhysicsObjectType>(ZHMEnums::GetEnumValueByName("EPhysicsObjectType", std::string_view(p_Document["m_ePhysicsType"])));

	s_Object.m_bIsAwake = bool(p_Document["m_bIsAwake"]);

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_fLinearVelocity"], &s_Item);
		s_Object.m_fLinearVelocity = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_fAngularVelocity"], &s_Item);
		s_Object.m_fAngularVelocity = s_Item;
	}

	*reinterpret_cast<SDestructiblePieceSaveData*>(p_Target) = s_Object;
}

void SDestructiblePieceSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDestructiblePieceSaveData*>(p_Object);

	SMatrix::Serialize(&s_Object->m_mTransform, p_Serializer, p_OwnOffset + offsetof(SDestructiblePieceSaveData, m_mTransform));
	TArray<uint16>::Serialize(&s_Object->m_aIndices, p_Serializer, p_OwnOffset + offsetof(SDestructiblePieceSaveData, m_aIndices));
	float4::Serialize(&s_Object->m_fLinearVelocity, p_Serializer, p_OwnOffset + offsetof(SDestructiblePieceSaveData, m_fLinearVelocity));
	float4::Serialize(&s_Object->m_fAngularVelocity, p_Serializer, p_OwnOffset + offsetof(SDestructiblePieceSaveData, m_fAngularVelocity));
}

ZHMTypeInfo SDestructibleRuntimeConnnection::TypeInfo = ZHMTypeInfo("SDestructibleRuntimeConnnection", sizeof(SDestructibleRuntimeConnnection), alignof(SDestructibleRuntimeConnnection), SDestructibleRuntimeConnnection::WriteJson, SDestructibleRuntimeConnnection::WriteSimpleJson, SDestructibleRuntimeConnnection::FromSimpleJson, SDestructibleRuntimeConnnection::Serialize);

void SDestructibleRuntimeConnnection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDestructibleRuntimeConnnection*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nPieceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPieceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aConnections") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint16>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aConnections.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aConnections[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aConnections.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructibleRuntimeConnnection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDestructibleRuntimeConnnection*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nPieceIndex") << ":";
	p_Stream << s_Object->m_nPieceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_aConnections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aConnections.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aConnections[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aConnections.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDestructibleRuntimeConnnection::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDestructibleRuntimeConnnection s_Object;

	s_Object.m_nPieceIndex = static_cast<uint16>(int64_t(p_Document["m_nPieceIndex"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aConnections"])
	{
		s_Object.m_aConnections.push_back(static_cast<uint16>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SDestructibleRuntimeConnnection*>(p_Target) = s_Object;
}

void SDestructibleRuntimeConnnection::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDestructibleRuntimeConnnection*>(p_Object);

	TArray<uint16>::Serialize(&s_Object->m_aConnections, p_Serializer, p_OwnOffset + offsetof(SDestructibleRuntimeConnnection, m_aConnections));
}

ZHMTypeInfo SDestructibleRuntimeDamage::TypeInfo = ZHMTypeInfo("SDestructibleRuntimeDamage", sizeof(SDestructibleRuntimeDamage), alignof(SDestructibleRuntimeDamage), SDestructibleRuntimeDamage::WriteJson, SDestructibleRuntimeDamage::WriteSimpleJson, SDestructibleRuntimeDamage::FromSimpleJson, SDestructibleRuntimeDamage::Serialize);

void SDestructibleRuntimeDamage::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDestructibleRuntimeDamage*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nPieceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPieceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDamage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDamage;
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructibleRuntimeDamage::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDestructibleRuntimeDamage*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nPieceIndex") << ":";
	p_Stream << s_Object->m_nPieceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDamage") << ":";
	p_Stream << s_Object->m_fDamage;

	p_Stream << "}";
}

void SDestructibleRuntimeDamage::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDestructibleRuntimeDamage s_Object;

	s_Object.m_nPieceIndex = static_cast<uint16>(int64_t(p_Document["m_nPieceIndex"]));

	s_Object.m_fDamage = static_cast<float32>(double(p_Document["m_fDamage"]));

	*reinterpret_cast<SDestructibleRuntimeDamage*>(p_Target) = s_Object;
}

void SDestructibleRuntimeDamage::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDestructibleRuntimeDamage*>(p_Object);

}

ZHMTypeInfo SDestructibleObjectSaveData::TypeInfo = ZHMTypeInfo("SDestructibleObjectSaveData", sizeof(SDestructibleObjectSaveData), alignof(SDestructibleObjectSaveData), SDestructibleObjectSaveData::WriteJson, SDestructibleObjectSaveData::WriteSimpleJson, SDestructibleObjectSaveData::FromSimpleJson, SDestructibleObjectSaveData::Serialize);

void SDestructibleObjectSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDestructibleObjectSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_interactionData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDestructibleInteractionHandlerData") << "," << JsonStr("$val") << ":";
	SDestructibleInteractionHandlerData::WriteJson(&s_Object->m_interactionData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDestructiblePieces") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDestructiblePieceSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDestructiblePieces.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDestructiblePieces[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDestructiblePieceSaveData") << "," << JsonStr("$val") << ":";
		SDestructiblePieceSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aDestructiblePieces.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aConnectionData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDestructibleRuntimeConnnection>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aConnectionData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aConnectionData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDestructibleRuntimeConnnection") << "," << JsonStr("$val") << ":";
		SDestructibleRuntimeConnnection::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aConnectionData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDamageData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDestructibleRuntimeDamage>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDamageData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDamageData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDestructibleRuntimeDamage") << "," << JsonStr("$val") << ":";
		SDestructibleRuntimeDamage::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aDamageData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumAnchors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumAnchors;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eRuntimeMemoryAllocationState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ERuntimeMemoryAllocationState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eRuntimeMemoryAllocationState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ERuntimeMemoryAllocationState", static_cast<int>(s_Object->m_eRuntimeMemoryAllocationState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eSystemPhysicsType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EPhysicsObjectType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eSystemPhysicsType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EPhysicsObjectType", static_cast<int>(s_Object->m_eSystemPhysicsType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasSystemBeenDetached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasSystemBeenDetached;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasSystemBeenFractured") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasSystemBeenFractured;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPhysicsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPhysicsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestructionEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDestructionEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SDestructibleObjectSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDestructibleObjectSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_interactionData") << ":";
	SDestructibleInteractionHandlerData::WriteSimpleJson(&s_Object->m_interactionData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aDestructiblePieces") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDestructiblePieces.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDestructiblePieces[i];
		SDestructiblePieceSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aDestructiblePieces.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aConnectionData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aConnectionData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aConnectionData[i];
		SDestructibleRuntimeConnnection::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aConnectionData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDamageData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDamageData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDamageData[i];
		SDestructibleRuntimeDamage::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aDamageData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumAnchors") << ":";
	p_Stream << s_Object->m_nNumAnchors;
	p_Stream << ",";

	p_Stream << JsonStr("m_eRuntimeMemoryAllocationState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ERuntimeMemoryAllocationState", static_cast<int>(s_Object->m_eRuntimeMemoryAllocationState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eSystemPhysicsType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EPhysicsObjectType", static_cast<int>(s_Object->m_eSystemPhysicsType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasSystemBeenDetached") << ":";
	p_Stream << s_Object->m_bHasSystemBeenDetached;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasSystemBeenFractured") << ":";
	p_Stream << s_Object->m_bHasSystemBeenFractured;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPhysicsEnabled") << ":";
	p_Stream << s_Object->m_bPhysicsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestructionEnabled") << ":";
	p_Stream << s_Object->m_bDestructionEnabled;

	p_Stream << "}";
}

void SDestructibleObjectSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDestructibleObjectSaveData s_Object;

	{
		SDestructibleInteractionHandlerData s_Item;
		SDestructibleInteractionHandlerData::FromSimpleJson(p_Document["m_interactionData"], &s_Item);
		s_Object.m_interactionData = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aDestructiblePieces"])
	{
		SDestructiblePieceSaveData s_ArrayItem0;
		SDestructiblePieceSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aDestructiblePieces.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aConnectionData"])
	{
		SDestructibleRuntimeConnnection s_ArrayItem0;
		SDestructibleRuntimeConnnection::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aConnectionData.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aDamageData"])
	{
		SDestructibleRuntimeDamage s_ArrayItem0;
		SDestructibleRuntimeDamage::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aDamageData.push_back(s_ArrayItem0);
	}

	s_Object.m_nNumAnchors = static_cast<uint16>(int64_t(p_Document["m_nNumAnchors"]));

	s_Object.m_eRuntimeMemoryAllocationState = static_cast<ERuntimeMemoryAllocationState>(ZHMEnums::GetEnumValueByName("ERuntimeMemoryAllocationState", std::string_view(p_Document["m_eRuntimeMemoryAllocationState"])));

	s_Object.m_eSystemPhysicsType = static_cast<EPhysicsObjectType>(ZHMEnums::GetEnumValueByName("EPhysicsObjectType", std::string_view(p_Document["m_eSystemPhysicsType"])));

	s_Object.m_bHasSystemBeenDetached = bool(p_Document["m_bHasSystemBeenDetached"]);

	s_Object.m_bHasSystemBeenFractured = bool(p_Document["m_bHasSystemBeenFractured"]);

	s_Object.m_bPhysicsEnabled = bool(p_Document["m_bPhysicsEnabled"]);

	s_Object.m_bDestructionEnabled = bool(p_Document["m_bDestructionEnabled"]);

	*reinterpret_cast<SDestructibleObjectSaveData*>(p_Target) = s_Object;
}

void SDestructibleObjectSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDestructibleObjectSaveData*>(p_Object);

	SDestructibleInteractionHandlerData::Serialize(&s_Object->m_interactionData, p_Serializer, p_OwnOffset + offsetof(SDestructibleObjectSaveData, m_interactionData));
	TArray<SDestructiblePieceSaveData>::Serialize(&s_Object->m_aDestructiblePieces, p_Serializer, p_OwnOffset + offsetof(SDestructibleObjectSaveData, m_aDestructiblePieces));
	TArray<SDestructibleRuntimeConnnection>::Serialize(&s_Object->m_aConnectionData, p_Serializer, p_OwnOffset + offsetof(SDestructibleObjectSaveData, m_aConnectionData));
	TArray<SDestructibleRuntimeDamage>::Serialize(&s_Object->m_aDamageData, p_Serializer, p_OwnOffset + offsetof(SDestructibleObjectSaveData, m_aDamageData));
}

ZHMTypeInfo SIntelDisplayInfo::TypeInfo = ZHMTypeInfo("SIntelDisplayInfo", sizeof(SIntelDisplayInfo), alignof(SIntelDisplayInfo), SIntelDisplayInfo::WriteJson, SIntelDisplayInfo::WriteSimpleJson, SIntelDisplayInfo::FromSimpleJson, SIntelDisplayInfo::Serialize);

void SIntelDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("index") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->index;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("selected") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->selected;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->active;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("headline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->headline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bodyheadline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->bodyheadline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("text") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->text);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("img") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->img);
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("index") << ":";
	p_Stream << s_Object->index;
	p_Stream << ",";

	p_Stream << JsonStr("selected") << ":";
	p_Stream << s_Object->selected;
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << s_Object->active;
	p_Stream << ",";

	p_Stream << JsonStr("headline") << ":";
	p_Stream << JsonStr(s_Object->headline);
	p_Stream << ",";

	p_Stream << JsonStr("bodyheadline") << ":";
	p_Stream << JsonStr(s_Object->bodyheadline);
	p_Stream << ",";

	p_Stream << JsonStr("text") << ":";
	p_Stream << JsonStr(s_Object->text);
	p_Stream << ",";

	p_Stream << JsonStr("img") << ":";
	p_Stream << JsonStr(s_Object->img);

	p_Stream << "}";
}

void SIntelDisplayInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelDisplayInfo s_Object;

	s_Object.index = static_cast<int32>(int64_t(p_Document["index"]));

	s_Object.selected = bool(p_Document["selected"]);

	s_Object.active = bool(p_Document["active"]);

	s_Object.headline = std::string_view(p_Document["headline"]);

	s_Object.bodyheadline = std::string_view(p_Document["bodyheadline"]);

	s_Object.text = std::string_view(p_Document["text"]);

	s_Object.img = std::string_view(p_Document["img"]);

	*reinterpret_cast<SIntelDisplayInfo*>(p_Target) = s_Object;
}

void SIntelDisplayInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SIntelDisplayInfo*>(p_Object);

	ZString::Serialize(&s_Object->headline, p_Serializer, p_OwnOffset + offsetof(SIntelDisplayInfo, headline));
	ZString::Serialize(&s_Object->bodyheadline, p_Serializer, p_OwnOffset + offsetof(SIntelDisplayInfo, bodyheadline));
	ZString::Serialize(&s_Object->text, p_Serializer, p_OwnOffset + offsetof(SIntelDisplayInfo, text));
	ZString::Serialize(&s_Object->img, p_Serializer, p_OwnOffset + offsetof(SIntelDisplayInfo, img));
}

ZHMTypeInfo SIntelDisplayInfoArray_dummy::TypeInfo = ZHMTypeInfo("SIntelDisplayInfoArray_dummy", sizeof(SIntelDisplayInfoArray_dummy), alignof(SIntelDisplayInfoArray_dummy), SIntelDisplayInfoArray_dummy::WriteJson, SIntelDisplayInfoArray_dummy::WriteSimpleJson, SIntelDisplayInfoArray_dummy::FromSimpleJson, SIntelDisplayInfoArray_dummy::Serialize);

void SIntelDisplayInfoArray_dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SIntelDisplayInfo>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SIntelDisplayInfo") << "," << JsonStr("$val") << ":";
		SIntelDisplayInfo::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelDisplayInfoArray_dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->dummy[i];
		SIntelDisplayInfo::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SIntelDisplayInfoArray_dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelDisplayInfoArray_dummy s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["dummy"])
	{
		SIntelDisplayInfo s_ArrayItem0;
		SIntelDisplayInfo::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.dummy.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SIntelDisplayInfoArray_dummy*>(p_Target) = s_Object;
}

void SIntelDisplayInfoArray_dummy::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SIntelDisplayInfoArray_dummy*>(p_Object);

	TArray<SIntelDisplayInfo>::Serialize(&s_Object->dummy, p_Serializer, p_OwnOffset + offsetof(SIntelDisplayInfoArray_dummy, dummy));
}

ZHMTypeInfo SVector3::TypeInfo = ZHMTypeInfo("SVector3", sizeof(SVector3), alignof(SVector3), SVector3::WriteJson, SVector3::WriteSimpleJson, SVector3::FromSimpleJson, SVector3::Serialize);

void SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->z;
	p_Stream << "}";

	p_Stream << "}";
}

void SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << s_Object->z;

	p_Stream << "}";
}

void SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVector3 s_Object;

	s_Object.x = static_cast<float32>(double(p_Document["x"]));

	s_Object.y = static_cast<float32>(double(p_Document["y"]));

	s_Object.z = static_cast<float32>(double(p_Document["z"]));

	*reinterpret_cast<SVector3*>(p_Target) = s_Object;
}

void SVector3::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVector3*>(p_Object);

}

ZHMTypeInfo SVector4::TypeInfo = ZHMTypeInfo("SVector4", sizeof(SVector4), alignof(SVector4), SVector4::WriteJson, SVector4::WriteSimpleJson, SVector4::FromSimpleJson, SVector4::Serialize);

void SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->z;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->w;
	p_Stream << "}";

	p_Stream << "}";
}

void SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;
	p_Stream << ",";

	p_Stream << JsonStr("z") << ":";
	p_Stream << s_Object->z;
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << s_Object->w;

	p_Stream << "}";
}

void SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVector4 s_Object;

	s_Object.x = static_cast<float32>(double(p_Document["x"]));

	s_Object.y = static_cast<float32>(double(p_Document["y"]));

	s_Object.z = static_cast<float32>(double(p_Document["z"]));

	s_Object.w = static_cast<float32>(double(p_Document["w"]));

	*reinterpret_cast<SVector4*>(p_Target) = s_Object;
}

void SVector4::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVector4*>(p_Object);

}

ZHMTypeInfo SSpatialSaveData::TypeInfo = ZHMTypeInfo("SSpatialSaveData", sizeof(SSpatialSaveData), alignof(SSpatialSaveData), SSpatialSaveData::WriteJson, SSpatialSaveData::WriteSimpleJson, SSpatialSaveData::FromSimpleJson, SSpatialSaveData::Serialize);

void SSpatialSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSpatialSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternionRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vQuaternionRotation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSpatialSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSpatialSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternionRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vQuaternionRotation, p_Stream);

	p_Stream << "}";
}

void SSpatialSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSpatialSaveData s_Object;

	s_Object.m_bVisible = bool(p_Document["m_bVisible"]);

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vQuaternionRotation"], &s_Item);
		s_Object.m_vQuaternionRotation = s_Item;
	}

	*reinterpret_cast<SSpatialSaveData*>(p_Target) = s_Object;
}

void SSpatialSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSpatialSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vPosition, p_Serializer, p_OwnOffset + offsetof(SSpatialSaveData, m_vPosition));
	SVector4::Serialize(&s_Object->m_vQuaternionRotation, p_Serializer, p_OwnOffset + offsetof(SSpatialSaveData, m_vQuaternionRotation));
}

ZHMTypeInfo ZRuntimeResourceID::TypeInfo = ZHMTypeInfo("ZRuntimeResourceID", sizeof(ZRuntimeResourceID), alignof(ZRuntimeResourceID), ZRuntimeResourceID::WriteJson, ZRuntimeResourceID::WriteSimpleJson, ZRuntimeResourceID::FromSimpleJson, ZRuntimeResourceID::Serialize);

void ZRuntimeResourceID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZRuntimeResourceID*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_IDHigh") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IDHigh;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IDLow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IDLow;
	p_Stream << "}";

	p_Stream << "}";
}

void ZRuntimeResourceID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZRuntimeResourceID*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_IDHigh") << ":";
	p_Stream << s_Object->m_IDHigh;
	p_Stream << ",";

	p_Stream << JsonStr("m_IDLow") << ":";
	p_Stream << s_Object->m_IDLow;

	p_Stream << "}";
}

void ZRuntimeResourceID::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZRuntimeResourceID s_Object;

	s_Object.m_IDHigh = static_cast<uint32>(int64_t(p_Document["m_IDHigh"]));

	s_Object.m_IDLow = static_cast<uint32>(int64_t(p_Document["m_IDLow"]));

	*reinterpret_cast<ZRuntimeResourceID*>(p_Target) = s_Object;
}

void ZRuntimeResourceID::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZRuntimeResourceID*>(p_Object);

	p_Serializer.RegisterRuntimeResourceId(p_OwnOffset);
}

ZHMTypeInfo SWeaponStatusUIData::TypeInfo = ZHMTypeInfo("SWeaponStatusUIData", sizeof(SWeaponStatusUIData), alignof(SWeaponStatusUIData), SWeaponStatusUIData::WriteJson, SWeaponStatusUIData::WriteSimpleJson, SWeaponStatusUIData::FromSimpleJson, SWeaponStatusUIData::Serialize);

void SWeaponStatusUIData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWeaponStatusUIData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("containedIcon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->containedIcon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sWeaponName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sWeaponName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sContainedItemName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sContainedItemName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSilenced") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSilenced;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsFirearm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsFirearm;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHolstered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHolstered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bCannotBeHolstered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bCannotBeHolstered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIllegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bCanReload") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bCanReload;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsReloading") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsReloading;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fReloadDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fReloadDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInfiniteAmmo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInfiniteAmmo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsContainer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsContainer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainsItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainsItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nContainedItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nContainedItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemIllegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemDetectedDuringFrisk") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemDetectedDuringFrisk;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fLastBulletFiredTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fLastBulletFiredTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fTimeBetweenBullets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fTimeBetweenBullets;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aPerks") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aPerks.size(); ++i)
	{
		auto& s_Item0 = s_Object->aPerks[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->aPerks.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aAmmoTypes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aAmmoTypes.size(); ++i)
	{
		auto& s_Item0 = s_Object->aAmmoTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->aAmmoTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nCurrentAmmoType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nCurrentAmmoType;
	p_Stream << "}";

	p_Stream << "}";
}

void SWeaponStatusUIData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWeaponStatusUIData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->icon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("containedIcon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->containedIcon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("sWeaponName") << ":";
	p_Stream << JsonStr(s_Object->sWeaponName);
	p_Stream << ",";

	p_Stream << JsonStr("sContainedItemName") << ":";
	p_Stream << JsonStr(s_Object->sContainedItemName);
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << ",";

	p_Stream << JsonStr("bSilenced") << ":";
	p_Stream << s_Object->bSilenced;
	p_Stream << ",";

	p_Stream << JsonStr("bIsFirearm") << ":";
	p_Stream << s_Object->bIsFirearm;
	p_Stream << ",";

	p_Stream << JsonStr("bHolstered") << ":";
	p_Stream << s_Object->bHolstered;
	p_Stream << ",";

	p_Stream << JsonStr("bCannotBeHolstered") << ":";
	p_Stream << s_Object->bCannotBeHolstered;
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << s_Object->bIllegal;
	p_Stream << ",";

	p_Stream << JsonStr("bCanReload") << ":";
	p_Stream << s_Object->bCanReload;
	p_Stream << ",";

	p_Stream << JsonStr("bIsReloading") << ":";
	p_Stream << s_Object->bIsReloading;
	p_Stream << ",";

	p_Stream << JsonStr("fReloadDuration") << ":";
	p_Stream << s_Object->fReloadDuration;
	p_Stream << ",";

	p_Stream << JsonStr("bInfiniteAmmo") << ":";
	p_Stream << s_Object->bInfiniteAmmo;
	p_Stream << ",";

	p_Stream << JsonStr("bIsContainer") << ":";
	p_Stream << s_Object->bIsContainer;
	p_Stream << ",";

	p_Stream << JsonStr("bContainsItem") << ":";
	p_Stream << s_Object->bContainsItem;
	p_Stream << ",";

	p_Stream << JsonStr("nContainedItemHUDType") << ":";
	p_Stream << s_Object->nContainedItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemIllegal") << ":";
	p_Stream << s_Object->bContainedItemIllegal;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemSuspicious") << ":";
	p_Stream << s_Object->bContainedItemSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemDetectedDuringFrisk") << ":";
	p_Stream << s_Object->bContainedItemDetectedDuringFrisk;
	p_Stream << ",";

	p_Stream << JsonStr("fLastBulletFiredTime") << ":";
	p_Stream << s_Object->fLastBulletFiredTime;
	p_Stream << ",";

	p_Stream << JsonStr("fTimeBetweenBullets") << ":";
	p_Stream << s_Object->fTimeBetweenBullets;
	p_Stream << ",";

	p_Stream << JsonStr("aPerks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aPerks.size(); ++i)
	{
		auto& s_Item0 = s_Object->aPerks[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->aPerks.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aAmmoTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aAmmoTypes.size(); ++i)
	{
		auto& s_Item0 = s_Object->aAmmoTypes[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->aAmmoTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("nCurrentAmmoType") << ":";
	p_Stream << s_Object->nCurrentAmmoType;

	p_Stream << "}";
}

void SWeaponStatusUIData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SWeaponStatusUIData s_Object;

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["icon"], &s_Item);
		s_Object.icon = s_Item;
	}

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["containedIcon"], &s_Item);
		s_Object.containedIcon = s_Item;
	}

	s_Object.sWeaponName = std::string_view(p_Document["sWeaponName"]);

	s_Object.sContainedItemName = std::string_view(p_Document["sContainedItemName"]);

	s_Object.nWeaponType = static_cast<int32>(int64_t(p_Document["nWeaponType"]));

	s_Object.nItemHUDType = static_cast<int32>(int64_t(p_Document["nItemHUDType"]));

	s_Object.nAmmoRemaining = static_cast<int32>(int64_t(p_Document["nAmmoRemaining"]));

	s_Object.nAmmoTotal = static_cast<int32>(int64_t(p_Document["nAmmoTotal"]));

	s_Object.nAmmoInClip = static_cast<int32>(int64_t(p_Document["nAmmoInClip"]));

	s_Object.bSilenced = bool(p_Document["bSilenced"]);

	s_Object.bIsFirearm = bool(p_Document["bIsFirearm"]);

	s_Object.bHolstered = bool(p_Document["bHolstered"]);

	s_Object.bCannotBeHolstered = bool(p_Document["bCannotBeHolstered"]);

	s_Object.bHasItemToShow = bool(p_Document["bHasItemToShow"]);

	s_Object.bSuspicious = bool(p_Document["bSuspicious"]);

	s_Object.bIllegal = bool(p_Document["bIllegal"]);

	s_Object.bCanReload = bool(p_Document["bCanReload"]);

	s_Object.bIsReloading = bool(p_Document["bIsReloading"]);

	s_Object.fReloadDuration = static_cast<float32>(double(p_Document["fReloadDuration"]));

	s_Object.bInfiniteAmmo = bool(p_Document["bInfiniteAmmo"]);

	s_Object.bIsContainer = bool(p_Document["bIsContainer"]);

	s_Object.bContainsItem = bool(p_Document["bContainsItem"]);

	s_Object.nContainedItemHUDType = static_cast<int32>(int64_t(p_Document["nContainedItemHUDType"]));

	s_Object.bContainedItemIllegal = bool(p_Document["bContainedItemIllegal"]);

	s_Object.bContainedItemSuspicious = bool(p_Document["bContainedItemSuspicious"]);

	s_Object.bContainedItemDetectedDuringFrisk = bool(p_Document["bContainedItemDetectedDuringFrisk"]);

	s_Object.fLastBulletFiredTime = static_cast<float32>(double(p_Document["fLastBulletFiredTime"]));

	s_Object.fTimeBetweenBullets = static_cast<float32>(double(p_Document["fTimeBetweenBullets"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["aPerks"])
	{
		s_Object.aPerks.push_back(std::string_view(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["aAmmoTypes"])
	{
		s_Object.aAmmoTypes.push_back(std::string_view(s_Item0));
	}

	s_Object.nCurrentAmmoType = static_cast<uint32>(int64_t(p_Document["nCurrentAmmoType"]));

	*reinterpret_cast<SWeaponStatusUIData*>(p_Target) = s_Object;
}

void SWeaponStatusUIData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SWeaponStatusUIData*>(p_Object);

	ZRuntimeResourceID::Serialize(&s_Object->icon, p_Serializer, p_OwnOffset + offsetof(SWeaponStatusUIData, icon));
	ZRuntimeResourceID::Serialize(&s_Object->containedIcon, p_Serializer, p_OwnOffset + offsetof(SWeaponStatusUIData, containedIcon));
	ZString::Serialize(&s_Object->sWeaponName, p_Serializer, p_OwnOffset + offsetof(SWeaponStatusUIData, sWeaponName));
	ZString::Serialize(&s_Object->sContainedItemName, p_Serializer, p_OwnOffset + offsetof(SWeaponStatusUIData, sContainedItemName));
	TArray<ZString>::Serialize(&s_Object->aPerks, p_Serializer, p_OwnOffset + offsetof(SWeaponStatusUIData, aPerks));
	TArray<ZString>::Serialize(&s_Object->aAmmoTypes, p_Serializer, p_OwnOffset + offsetof(SWeaponStatusUIData, aAmmoTypes));
}

ZHMTypeInfo SVRConfigCameraComponent::TypeInfo = ZHMTypeInfo("SVRConfigCameraComponent", sizeof(SVRConfigCameraComponent), alignof(SVRConfigCameraComponent), SVRConfigCameraComponent::WriteJson, SVRConfigCameraComponent::WriteSimpleJson, SVRConfigCameraComponent::FromSimpleJson, SVRConfigCameraComponent::Serialize);

void SVRConfigCameraComponent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVRConfigCameraComponent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eHeadAnchorMode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EVRConfigHeadAnchorMode") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eHeadAnchorMode) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EVRConfigHeadAnchorMode", static_cast<int>(s_Object->m_eHeadAnchorMode))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uRecenterRequestCounter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uRecenterRequestCounter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fVRUserInputWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fVRUserInputWeight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGridSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fCapsuleHeadAttacherOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fCapsuleHeadAttacherOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fCapsuleHeadAttacherOffsetSneaking") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fCapsuleHeadAttacherOffsetSneaking;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHeadBoneAttacherOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHeadBoneAttacherOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vAnchorPosOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vAnchorPosOffset, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_mAnchorRotOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_mAnchorRotOffset, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SVRConfigCameraComponent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVRConfigCameraComponent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eHeadAnchorMode") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EVRConfigHeadAnchorMode", static_cast<int>(s_Object->m_eHeadAnchorMode)));
	p_Stream << ",";

	p_Stream << JsonStr("m_uRecenterRequestCounter") << ":";
	p_Stream << s_Object->m_uRecenterRequestCounter;
	p_Stream << ",";

	p_Stream << JsonStr("m_fVRUserInputWeight") << ":";
	p_Stream << s_Object->m_fVRUserInputWeight;
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridSize") << ":";
	p_Stream << s_Object->m_fGridSize;
	p_Stream << ",";

	p_Stream << JsonStr("m_fCapsuleHeadAttacherOffset") << ":";
	p_Stream << s_Object->m_fCapsuleHeadAttacherOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_fCapsuleHeadAttacherOffsetSneaking") << ":";
	p_Stream << s_Object->m_fCapsuleHeadAttacherOffsetSneaking;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHeadBoneAttacherOffset") << ":";
	p_Stream << s_Object->m_fHeadBoneAttacherOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_vAnchorPosOffset") << ":";
	float4::WriteSimpleJson(&s_Object->m_vAnchorPosOffset, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_mAnchorRotOffset") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_mAnchorRotOffset, p_Stream);

	p_Stream << "}";
}

void SVRConfigCameraComponent::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVRConfigCameraComponent s_Object;

	s_Object.m_eHeadAnchorMode = static_cast<EVRConfigHeadAnchorMode>(ZHMEnums::GetEnumValueByName("EVRConfigHeadAnchorMode", std::string_view(p_Document["m_eHeadAnchorMode"])));

	s_Object.m_uRecenterRequestCounter = static_cast<uint32>(int64_t(p_Document["m_uRecenterRequestCounter"]));

	s_Object.m_fVRUserInputWeight = static_cast<float32>(double(p_Document["m_fVRUserInputWeight"]));

	s_Object.m_fGridSize = static_cast<float32>(double(p_Document["m_fGridSize"]));

	s_Object.m_fCapsuleHeadAttacherOffset = static_cast<float32>(double(p_Document["m_fCapsuleHeadAttacherOffset"]));

	s_Object.m_fCapsuleHeadAttacherOffsetSneaking = static_cast<float32>(double(p_Document["m_fCapsuleHeadAttacherOffsetSneaking"]));

	s_Object.m_fHeadBoneAttacherOffset = static_cast<float32>(double(p_Document["m_fHeadBoneAttacherOffset"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vAnchorPosOffset"], &s_Item);
		s_Object.m_vAnchorPosOffset = s_Item;
	}

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_mAnchorRotOffset"], &s_Item);
		s_Object.m_mAnchorRotOffset = s_Item;
	}

	*reinterpret_cast<SVRConfigCameraComponent*>(p_Target) = s_Object;
}

void SVRConfigCameraComponent::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVRConfigCameraComponent*>(p_Object);

	float4::Serialize(&s_Object->m_vAnchorPosOffset, p_Serializer, p_OwnOffset + offsetof(SVRConfigCameraComponent, m_vAnchorPosOffset));
	SMatrix::Serialize(&s_Object->m_mAnchorRotOffset, p_Serializer, p_OwnOffset + offsetof(SVRConfigCameraComponent, m_mAnchorRotOffset));
}

ZHMTypeInfo SInteractionIndicatorInstanceData_SUIControlData::TypeInfo = ZHMTypeInfo("SInteractionIndicatorInstanceData.SUIControlData", sizeof(SInteractionIndicatorInstanceData_SUIControlData), alignof(SInteractionIndicatorInstanceData_SUIControlData), SInteractionIndicatorInstanceData_SUIControlData::WriteJson, SInteractionIndicatorInstanceData_SUIControlData::WriteSimpleJson, SInteractionIndicatorInstanceData_SUIControlData::FromSimpleJson, SInteractionIndicatorInstanceData_SUIControlData::Serialize);

void SInteractionIndicatorInstanceData_SUIControlData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInteractionIndicatorInstanceData_SUIControlData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_eState;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTypeId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_eTypeId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nIconId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIconId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sLabel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sLabel);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sDescription") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sDescription);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sGlyph") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sGlyph);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIllegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoActionAvailable") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNoActionAvailable;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInRange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIllegalItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIllegalItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSuspiciousItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSuspiciousItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bContainsItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bContainsItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFontSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFontSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTxtDirReversed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsTxtDirReversed;
	p_Stream << "}";

	p_Stream << "}";
}

void SInteractionIndicatorInstanceData_SUIControlData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInteractionIndicatorInstanceData_SUIControlData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << s_Object->m_eState;
	p_Stream << ",";

	p_Stream << JsonStr("m_eTypeId") << ":";
	p_Stream << s_Object->m_eTypeId;
	p_Stream << ",";

	p_Stream << JsonStr("m_nIconId") << ":";
	p_Stream << s_Object->m_nIconId;
	p_Stream << ",";

	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << ",";

	p_Stream << JsonStr("m_sLabel") << ":";
	p_Stream << JsonStr(s_Object->m_sLabel);
	p_Stream << ",";

	p_Stream << JsonStr("m_sDescription") << ":";
	p_Stream << JsonStr(s_Object->m_sDescription);
	p_Stream << ",";

	p_Stream << JsonStr("m_sGlyph") << ":";
	p_Stream << JsonStr(s_Object->m_sGlyph);
	p_Stream << ",";

	p_Stream << JsonStr("m_bIllegal") << ":";
	p_Stream << s_Object->m_bIllegal;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoActionAvailable") << ":";
	p_Stream << s_Object->m_bNoActionAvailable;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInRange") << ":";
	p_Stream << s_Object->m_bInRange;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIllegalItem") << ":";
	p_Stream << s_Object->m_bIllegalItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSuspiciousItem") << ":";
	p_Stream << s_Object->m_bSuspiciousItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bContainsItem") << ":";
	p_Stream << s_Object->m_bContainsItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFontSize") << ":";
	p_Stream << s_Object->m_nFontSize;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTxtDirReversed") << ":";
	p_Stream << s_Object->m_bIsTxtDirReversed;

	p_Stream << "}";
}

void SInteractionIndicatorInstanceData_SUIControlData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInteractionIndicatorInstanceData_SUIControlData s_Object;

	s_Object.m_eState = static_cast<int32>(int64_t(p_Document["m_eState"]));

	s_Object.m_eTypeId = static_cast<int32>(int64_t(p_Document["m_eTypeId"]));

	s_Object.m_nIconId = static_cast<int32>(int64_t(p_Document["m_nIconId"]));

	s_Object.m_fProgress = static_cast<float32>(double(p_Document["m_fProgress"]));

	s_Object.m_sLabel = std::string_view(p_Document["m_sLabel"]);

	s_Object.m_sDescription = std::string_view(p_Document["m_sDescription"]);

	s_Object.m_sGlyph = std::string_view(p_Document["m_sGlyph"]);

	s_Object.m_bIllegal = bool(p_Document["m_bIllegal"]);

	s_Object.m_bNoActionAvailable = bool(p_Document["m_bNoActionAvailable"]);

	s_Object.m_bInRange = bool(p_Document["m_bInRange"]);

	s_Object.m_bIllegalItem = bool(p_Document["m_bIllegalItem"]);

	s_Object.m_bSuspiciousItem = bool(p_Document["m_bSuspiciousItem"]);

	s_Object.m_bContainsItem = bool(p_Document["m_bContainsItem"]);

	s_Object.m_nFontSize = static_cast<int32>(int64_t(p_Document["m_nFontSize"]));

	s_Object.m_bIsTxtDirReversed = bool(p_Document["m_bIsTxtDirReversed"]);

	*reinterpret_cast<SInteractionIndicatorInstanceData_SUIControlData*>(p_Target) = s_Object;
}

void SInteractionIndicatorInstanceData_SUIControlData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SInteractionIndicatorInstanceData_SUIControlData*>(p_Object);

	ZString::Serialize(&s_Object->m_sLabel, p_Serializer, p_OwnOffset + offsetof(SInteractionIndicatorInstanceData_SUIControlData, m_sLabel));
	ZString::Serialize(&s_Object->m_sDescription, p_Serializer, p_OwnOffset + offsetof(SInteractionIndicatorInstanceData_SUIControlData, m_sDescription));
	ZString::Serialize(&s_Object->m_sGlyph, p_Serializer, p_OwnOffset + offsetof(SInteractionIndicatorInstanceData_SUIControlData, m_sGlyph));
}

ZHMTypeInfo IMorphemeEventConsumer::TypeInfo = ZHMTypeInfo("IMorphemeEventConsumer", sizeof(IMorphemeEventConsumer), alignof(IMorphemeEventConsumer), IMorphemeEventConsumer::WriteJson, IMorphemeEventConsumer::WriteSimpleJson, IMorphemeEventConsumer::FromSimpleJson, IMorphemeEventConsumer::Serialize);

void IMorphemeEventConsumer::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IMorphemeEventConsumer*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMorphemeEventConsumer::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IMorphemeEventConsumer*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IMorphemeEventConsumer::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IMorphemeEventConsumer s_Object;

	*reinterpret_cast<IMorphemeEventConsumer*>(p_Target) = s_Object;
}

void IMorphemeEventConsumer::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IMorphemeEventConsumer*>(p_Object);

}

ZHMTypeInfo ZStandOffSituation_SState::TypeInfo = ZHMTypeInfo("ZStandOffSituation.SState", sizeof(ZStandOffSituation_SState), alignof(ZStandOffSituation_SState), ZStandOffSituation_SState::WriteJson, ZStandOffSituation_SState::WriteSimpleJson, ZStandOffSituation_SState::FromSimpleJson, ZStandOffSituation_SState::Serialize);

void ZStandOffSituation_SState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZStandOffSituation_SState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eSituationState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZStandOffSituation.ESituationState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eSituationState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZStandOffSituation.ESituationState", static_cast<int>(s_Object->m_eSituationState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eArrestReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eArrestReason) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_eArrestReason))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningPriority") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nWarningPriority;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_TargetHasWeaponEquipped") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_TargetHasWeaponEquipped;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ImmediateWarningDialog") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_ImmediateWarningDialog;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nResetCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nResetCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bArrestReasonStated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bArrestReasonStated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetOnStairs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetOnStairs;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUpdateApproachPositions") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUpdateApproachPositions;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHelpOrderAssigned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHelpOrderAssigned;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCivilianTransferredKnowledge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCivilianTransferredKnowledge;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetLost") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetLost;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGetHelpGroupStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGetHelpGroupStarted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHandlerHasLOS") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHandlerHasLOS;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vLastKnownPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vLastKnownPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMovingTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fMovingTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRunningTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRunningTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fEquippedWeaponTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fEquippedWeaponTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStrangleTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStrangleTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_mainStateStartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_mainStateStartTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTimeTargetLOS") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastTimeTargetLOS, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTimeGuardHadLOS") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastTimeGuardHadLOS, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tNextCivBark") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tNextCivBark, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tStartSearchCountdown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tStartSearchCountdown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eDialogState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZStandOffSituation.EDialogState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eDialogState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZStandOffSituation.EDialogState", static_cast<int>(s_Object->m_eDialogState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWarning3Given") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWarning3Given;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopWarningGiven") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStopWarningGiven;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_reportedTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_reportedTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggeredBySecurityCameras") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTriggeredBySecurityCameras;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLOSMemberWantsToKill") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLOSMemberWantsToKill;
	p_Stream << "}";

	p_Stream << "}";
}

void ZStandOffSituation_SState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZStandOffSituation_SState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eSituationState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZStandOffSituation.ESituationState", static_cast<int>(s_Object->m_eSituationState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eArrestReason") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_eArrestReason)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningPriority") << ":";
	p_Stream << s_Object->m_nWarningPriority;
	p_Stream << ",";

	p_Stream << JsonStr("m_TargetHasWeaponEquipped") << ":";
	p_Stream << s_Object->m_TargetHasWeaponEquipped;
	p_Stream << ",";

	p_Stream << JsonStr("m_ImmediateWarningDialog") << ":";
	p_Stream << s_Object->m_ImmediateWarningDialog;
	p_Stream << ",";

	p_Stream << JsonStr("m_nResetCount") << ":";
	p_Stream << s_Object->m_nResetCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_bArrestReasonStated") << ":";
	p_Stream << s_Object->m_bArrestReasonStated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetOnStairs") << ":";
	p_Stream << s_Object->m_bTargetOnStairs;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUpdateApproachPositions") << ":";
	p_Stream << s_Object->m_bUpdateApproachPositions;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHelpOrderAssigned") << ":";
	p_Stream << s_Object->m_bHelpOrderAssigned;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCivilianTransferredKnowledge") << ":";
	p_Stream << s_Object->m_bCivilianTransferredKnowledge;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetLost") << ":";
	p_Stream << s_Object->m_bTargetLost;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGetHelpGroupStarted") << ":";
	p_Stream << s_Object->m_bGetHelpGroupStarted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHandlerHasLOS") << ":";
	p_Stream << s_Object->m_bHandlerHasLOS;
	p_Stream << ",";

	p_Stream << JsonStr("m_vLastKnownPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vLastKnownPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fMovingTime") << ":";
	p_Stream << s_Object->m_fMovingTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRunningTime") << ":";
	p_Stream << s_Object->m_fRunningTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fEquippedWeaponTime") << ":";
	p_Stream << s_Object->m_fEquippedWeaponTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fStrangleTime") << ":";
	p_Stream << s_Object->m_fStrangleTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_mainStateStartTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_mainStateStartTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTimeTargetLOS") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastTimeTargetLOS, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTimeGuardHadLOS") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastTimeGuardHadLOS, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tNextCivBark") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tNextCivBark, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tStartSearchCountdown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tStartSearchCountdown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eDialogState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZStandOffSituation.EDialogState", static_cast<int>(s_Object->m_eDialogState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWarning3Given") << ":";
	p_Stream << s_Object->m_bWarning3Given;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopWarningGiven") << ":";
	p_Stream << s_Object->m_bStopWarningGiven;
	p_Stream << ",";

	p_Stream << JsonStr("m_reportedTarget") << ":";
	p_Stream << s_Object->m_reportedTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggeredBySecurityCameras") << ":";
	p_Stream << s_Object->m_bTriggeredBySecurityCameras;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLOSMemberWantsToKill") << ":";
	p_Stream << s_Object->m_bLOSMemberWantsToKill;

	p_Stream << "}";
}

void ZStandOffSituation_SState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZStandOffSituation_SState s_Object;

	s_Object.m_eSituationState = static_cast<ZStandOffSituation_ESituationState>(ZHMEnums::GetEnumValueByName("ZStandOffSituation.ESituationState", std::string_view(p_Document["m_eSituationState"])));

	s_Object.m_eArrestReason = static_cast<EDisturbanceType>(ZHMEnums::GetEnumValueByName("EDisturbanceType", std::string_view(p_Document["m_eArrestReason"])));

	s_Object.m_nWarningPriority = static_cast<uint32>(int64_t(p_Document["m_nWarningPriority"]));

	s_Object.m_TargetHasWeaponEquipped = bool(p_Document["m_TargetHasWeaponEquipped"]);

	s_Object.m_ImmediateWarningDialog = bool(p_Document["m_ImmediateWarningDialog"]);

	s_Object.m_nResetCount = static_cast<int32>(int64_t(p_Document["m_nResetCount"]));

	s_Object.m_bArrestReasonStated = bool(p_Document["m_bArrestReasonStated"]);

	s_Object.m_bTargetOnStairs = bool(p_Document["m_bTargetOnStairs"]);

	s_Object.m_bUpdateApproachPositions = bool(p_Document["m_bUpdateApproachPositions"]);

	s_Object.m_bHelpOrderAssigned = bool(p_Document["m_bHelpOrderAssigned"]);

	s_Object.m_bCivilianTransferredKnowledge = bool(p_Document["m_bCivilianTransferredKnowledge"]);

	s_Object.m_bTargetLost = bool(p_Document["m_bTargetLost"]);

	s_Object.m_bGetHelpGroupStarted = bool(p_Document["m_bGetHelpGroupStarted"]);

	s_Object.m_bHandlerHasLOS = bool(p_Document["m_bHandlerHasLOS"]);

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vLastKnownPosition"], &s_Item);
		s_Object.m_vLastKnownPosition = s_Item;
	}

	s_Object.m_fMovingTime = static_cast<float32>(double(p_Document["m_fMovingTime"]));

	s_Object.m_fRunningTime = static_cast<float32>(double(p_Document["m_fRunningTime"]));

	s_Object.m_fEquippedWeaponTime = static_cast<float32>(double(p_Document["m_fEquippedWeaponTime"]));

	s_Object.m_fStrangleTime = static_cast<float32>(double(p_Document["m_fStrangleTime"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_mainStateStartTime"], &s_Item);
		s_Object.m_mainStateStartTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastTimeTargetLOS"], &s_Item);
		s_Object.m_tLastTimeTargetLOS = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastTimeGuardHadLOS"], &s_Item);
		s_Object.m_tLastTimeGuardHadLOS = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tNextCivBark"], &s_Item);
		s_Object.m_tNextCivBark = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tStartSearchCountdown"], &s_Item);
		s_Object.m_tStartSearchCountdown = s_Item;
	}

	s_Object.m_eDialogState = static_cast<ZStandOffSituation_EDialogState>(ZHMEnums::GetEnumValueByName("ZStandOffSituation.EDialogState", std::string_view(p_Document["m_eDialogState"])));

	s_Object.m_nWarningCount = static_cast<int32>(int64_t(p_Document["m_nWarningCount"]));

	s_Object.m_bWarning3Given = bool(p_Document["m_bWarning3Given"]);

	s_Object.m_bStopWarningGiven = bool(p_Document["m_bStopWarningGiven"]);

	s_Object.m_reportedTarget = bool(p_Document["m_reportedTarget"]);

	s_Object.m_bTriggeredBySecurityCameras = bool(p_Document["m_bTriggeredBySecurityCameras"]);

	s_Object.m_bLOSMemberWantsToKill = bool(p_Document["m_bLOSMemberWantsToKill"]);

	*reinterpret_cast<ZStandOffSituation_SState*>(p_Target) = s_Object;
}

void ZStandOffSituation_SState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZStandOffSituation_SState*>(p_Object);

	float4::Serialize(&s_Object->m_vLastKnownPosition, p_Serializer, p_OwnOffset + offsetof(ZStandOffSituation_SState, m_vLastKnownPosition));
	ZGameTime::Serialize(&s_Object->m_mainStateStartTime, p_Serializer, p_OwnOffset + offsetof(ZStandOffSituation_SState, m_mainStateStartTime));
	ZGameTime::Serialize(&s_Object->m_tLastTimeTargetLOS, p_Serializer, p_OwnOffset + offsetof(ZStandOffSituation_SState, m_tLastTimeTargetLOS));
	ZGameTime::Serialize(&s_Object->m_tLastTimeGuardHadLOS, p_Serializer, p_OwnOffset + offsetof(ZStandOffSituation_SState, m_tLastTimeGuardHadLOS));
	ZGameTime::Serialize(&s_Object->m_tNextCivBark, p_Serializer, p_OwnOffset + offsetof(ZStandOffSituation_SState, m_tNextCivBark));
	ZGameTime::Serialize(&s_Object->m_tStartSearchCountdown, p_Serializer, p_OwnOffset + offsetof(ZStandOffSituation_SState, m_tStartSearchCountdown));
}

ZHMTypeInfo SCrowdPoseBoneSaveData::TypeInfo = ZHMTypeInfo("SCrowdPoseBoneSaveData", sizeof(SCrowdPoseBoneSaveData), alignof(SCrowdPoseBoneSaveData), SCrowdPoseBoneSaveData::WriteJson, SCrowdPoseBoneSaveData::WriteSimpleJson, SCrowdPoseBoneSaveData::FromSimpleJson, SCrowdPoseBoneSaveData::Serialize);

void SCrowdPoseBoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdPoseBoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTranslation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdPoseBoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdPoseBoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTranslation, p_Stream);

	p_Stream << "}";
}

void SCrowdPoseBoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdPoseBoneSaveData s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mQuaterion"], &s_Item);
		s_Object.mQuaterion = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mTranslation"], &s_Item);
		s_Object.mTranslation = s_Item;
	}

	*reinterpret_cast<SCrowdPoseBoneSaveData*>(p_Target) = s_Object;
}

void SCrowdPoseBoneSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdPoseBoneSaveData*>(p_Object);

	SVector4::Serialize(&s_Object->mQuaterion, p_Serializer, p_OwnOffset + offsetof(SCrowdPoseBoneSaveData, mQuaterion));
	SVector4::Serialize(&s_Object->mTranslation, p_Serializer, p_OwnOffset + offsetof(SCrowdPoseBoneSaveData, mTranslation));
}

ZHMTypeInfo SCrowdPoseSaveData::TypeInfo = ZHMTypeInfo("SCrowdPoseSaveData", sizeof(SCrowdPoseSaveData), alignof(SCrowdPoseSaveData), SCrowdPoseSaveData::WriteJson, SCrowdPoseSaveData::WriteSimpleJson, SCrowdPoseSaveData::FromSimpleJson, SCrowdPoseSaveData::Serialize);

void SCrowdPoseSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdPoseSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SCrowdPoseBoneSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdPoseBoneSaveData") << "," << JsonStr("$val") << ":";
		SCrowdPoseBoneSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdPoseSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdPoseSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBones[i];
		SCrowdPoseBoneSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdPoseSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdPoseSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aBones"])
	{
		SCrowdPoseBoneSaveData s_ArrayItem0;
		SCrowdPoseBoneSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aBones.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SCrowdPoseSaveData*>(p_Target) = s_Object;
}

void SCrowdPoseSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdPoseSaveData*>(p_Object);

	TArray<SCrowdPoseBoneSaveData>::Serialize(&s_Object->m_aBones, p_Serializer, p_OwnOffset + offsetof(SCrowdPoseSaveData, m_aBones));
}

ZHMTypeInfo SCrowdPoseCollectionSaveData::TypeInfo = ZHMTypeInfo("SCrowdPoseCollectionSaveData", sizeof(SCrowdPoseCollectionSaveData), alignof(SCrowdPoseCollectionSaveData), SCrowdPoseCollectionSaveData::WriteJson, SCrowdPoseCollectionSaveData::WriteSimpleJson, SCrowdPoseCollectionSaveData::FromSimpleJson, SCrowdPoseCollectionSaveData::Serialize);

void SCrowdPoseCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdPoseCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_id;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPoses") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SCrowdPoseSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPoses.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPoses[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdPoseSaveData") << "," << JsonStr("$val") << ":";
		SCrowdPoseSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aPoses.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdPoseCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdPoseCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_id") << ":";
	p_Stream << s_Object->m_id;
	p_Stream << ",";

	p_Stream << JsonStr("m_aPoses") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPoses.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPoses[i];
		SCrowdPoseSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aPoses.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdPoseCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdPoseCollectionSaveData s_Object;

	s_Object.m_id = uint64(p_Document["m_id"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aPoses"])
	{
		SCrowdPoseSaveData s_ArrayItem0;
		SCrowdPoseSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aPoses.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SCrowdPoseCollectionSaveData*>(p_Target) = s_Object;
}

void SCrowdPoseCollectionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdPoseCollectionSaveData*>(p_Object);

	TArray<SCrowdPoseSaveData>::Serialize(&s_Object->m_aPoses, p_Serializer, p_OwnOffset + offsetof(SCrowdPoseCollectionSaveData, m_aPoses));
}

ZHMTypeInfo SCrowdDeadPoseRepositorySaveData::TypeInfo = ZHMTypeInfo("SCrowdDeadPoseRepositorySaveData", sizeof(SCrowdDeadPoseRepositorySaveData), alignof(SCrowdDeadPoseRepositorySaveData), SCrowdDeadPoseRepositorySaveData::WriteJson, SCrowdDeadPoseRepositorySaveData::WriteSimpleJson, SCrowdDeadPoseRepositorySaveData::FromSimpleJson, SCrowdDeadPoseRepositorySaveData::Serialize);

void SCrowdDeadPoseRepositorySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdDeadPoseRepositorySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aPoseCollections") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SCrowdPoseCollectionSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPoseCollections.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPoseCollections[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdPoseCollectionSaveData") << "," << JsonStr("$val") << ":";
		SCrowdPoseCollectionSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aPoseCollections.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdDeadPoseRepositorySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdDeadPoseRepositorySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aPoseCollections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPoseCollections.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPoseCollections[i];
		SCrowdPoseCollectionSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aPoseCollections.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdDeadPoseRepositorySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdDeadPoseRepositorySaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aPoseCollections"])
	{
		SCrowdPoseCollectionSaveData s_ArrayItem0;
		SCrowdPoseCollectionSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aPoseCollections.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SCrowdDeadPoseRepositorySaveData*>(p_Target) = s_Object;
}

void SCrowdDeadPoseRepositorySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdDeadPoseRepositorySaveData*>(p_Object);

	TArray<SCrowdPoseCollectionSaveData>::Serialize(&s_Object->m_aPoseCollections, p_Serializer, p_OwnOffset + offsetof(SCrowdDeadPoseRepositorySaveData, m_aPoseCollections));
}

ZHMTypeInfo ZDynamicObject::TypeInfo = ZHMTypeInfo("ZDynamicObject", sizeof(ZDynamicObject), alignof(ZDynamicObject), ZDynamicObject::WriteJson, ZDynamicObject::WriteSimpleJson, ZDynamicObject::FromSimpleJson, ZDynamicObject::Serialize);

void ZDynamicObject::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDynamicObject*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_value") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_value, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZDynamicObject::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDynamicObject*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_value") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_value, p_Stream);

	p_Stream << "}";
}

void ZDynamicObject::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZDynamicObject s_Object;

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_value"], &s_Item);
		s_Object.m_value = s_Item;
	}

	*reinterpret_cast<ZDynamicObject*>(p_Target) = s_Object;
}

void ZDynamicObject::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZDynamicObject*>(p_Object);

	ZVariant::Serialize(&s_Object->m_value, p_Serializer, p_OwnOffset + offsetof(ZDynamicObject, m_value));
}

ZHMTypeInfo SChallengeSaveData::TypeInfo = ZHMTypeInfo("SChallengeSaveData", sizeof(SChallengeSaveData), alignof(SChallengeSaveData), SChallengeSaveData::WriteJson, SChallengeSaveData::WriteSimpleJson, SChallengeSaveData::FromSimpleJson, SChallengeSaveData::Serialize);

void SChallengeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SChallengeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_State") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_State, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SChallengeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SChallengeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sId") << ":";
	p_Stream << JsonStr(s_Object->m_sId);
	p_Stream << ",";

	p_Stream << JsonStr("m_State") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_State, p_Stream);

	p_Stream << "}";
}

void SChallengeSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SChallengeSaveData s_Object;

	s_Object.m_sId = std::string_view(p_Document["m_sId"]);

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_State"], &s_Item);
		s_Object.m_State = s_Item;
	}

	*reinterpret_cast<SChallengeSaveData*>(p_Target) = s_Object;
}

void SChallengeSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SChallengeSaveData*>(p_Object);

	ZString::Serialize(&s_Object->m_sId, p_Serializer, p_OwnOffset + offsetof(SChallengeSaveData, m_sId));
	ZDynamicObject::Serialize(&s_Object->m_State, p_Serializer, p_OwnOffset + offsetof(SChallengeSaveData, m_State));
}

ZHMTypeInfo ZHUDOccluderTriggerEntity_SBoneTestSetup::TypeInfo = ZHMTypeInfo("ZHUDOccluderTriggerEntity.SBoneTestSetup", sizeof(ZHUDOccluderTriggerEntity_SBoneTestSetup), alignof(ZHUDOccluderTriggerEntity_SBoneTestSetup), ZHUDOccluderTriggerEntity_SBoneTestSetup::WriteJson, ZHUDOccluderTriggerEntity_SBoneTestSetup::WriteSimpleJson, ZHUDOccluderTriggerEntity_SBoneTestSetup::FromSimpleJson, ZHUDOccluderTriggerEntity_SBoneTestSetup::Serialize);

void ZHUDOccluderTriggerEntity_SBoneTestSetup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDOccluderTriggerEntity_SBoneTestSetup*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("boneId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("BoneId.Enum") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->boneId) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("BoneId.Enum", static_cast<int>(s_Object->boneId))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("localOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->localOffset, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("radius") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->radius;
	p_Stream << "}";

	p_Stream << "}";
}

void ZHUDOccluderTriggerEntity_SBoneTestSetup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDOccluderTriggerEntity_SBoneTestSetup*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("boneId") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("BoneId.Enum", static_cast<int>(s_Object->boneId)));
	p_Stream << ",";

	p_Stream << JsonStr("localOffset") << ":";
	SVector3::WriteSimpleJson(&s_Object->localOffset, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("radius") << ":";
	p_Stream << s_Object->radius;

	p_Stream << "}";
}

void ZHUDOccluderTriggerEntity_SBoneTestSetup::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHUDOccluderTriggerEntity_SBoneTestSetup s_Object;

	s_Object.boneId = static_cast<BoneId_Enum>(ZHMEnums::GetEnumValueByName("BoneId.Enum", std::string_view(p_Document["boneId"])));

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["localOffset"], &s_Item);
		s_Object.localOffset = s_Item;
	}

	s_Object.radius = static_cast<float32>(double(p_Document["radius"]));

	*reinterpret_cast<ZHUDOccluderTriggerEntity_SBoneTestSetup*>(p_Target) = s_Object;
}

void ZHUDOccluderTriggerEntity_SBoneTestSetup::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHUDOccluderTriggerEntity_SBoneTestSetup*>(p_Object);

	SVector3::Serialize(&s_Object->localOffset, p_Serializer, p_OwnOffset + offsetof(ZHUDOccluderTriggerEntity_SBoneTestSetup, localOffset));
}

ZHMTypeInfo STimerEntitySaveData::TypeInfo = ZHMTypeInfo("STimerEntitySaveData", sizeof(STimerEntitySaveData), alignof(STimerEntitySaveData), STimerEntitySaveData::WriteJson, STimerEntitySaveData::WriteSimpleJson, STimerEntitySaveData::FromSimpleJson, STimerEntitySaveData::Serialize);

void STimerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STimerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeToNextEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimeToNextEvent;
	p_Stream << "}";

	p_Stream << "}";
}

void STimerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STimerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeToNextEvent") << ":";
	p_Stream << s_Object->m_fTimeToNextEvent;

	p_Stream << "}";
}

void STimerEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STimerEntitySaveData s_Object;

	s_Object.m_nInterval = static_cast<int32>(int64_t(p_Document["m_nInterval"]));

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_fTimeToNextEvent = static_cast<float32>(double(p_Document["m_fTimeToNextEvent"]));

	*reinterpret_cast<STimerEntitySaveData*>(p_Target) = s_Object;
}

void STimerEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STimerEntitySaveData*>(p_Object);

}

ZHMTypeInfo STimerEntitiesSaveData::TypeInfo = ZHMTypeInfo("STimerEntitiesSaveData", sizeof(STimerEntitiesSaveData), alignof(STimerEntitiesSaveData), STimerEntitiesSaveData::WriteJson, STimerEntitiesSaveData::WriteSimpleJson, STimerEntitiesSaveData::FromSimpleJson, STimerEntitiesSaveData::Serialize);

void STimerEntitiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STimerEntitiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<STimerEntitySaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STimerEntitySaveData") << "," << JsonStr("$val") << ":";
		STimerEntitySaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STimerEntitiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STimerEntitiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		STimerEntitySaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STimerEntitiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STimerEntitiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		STimerEntitySaveData s_ArrayItem0;
		STimerEntitySaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<STimerEntitiesSaveData*>(p_Target) = s_Object;
}

void STimerEntitiesSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STimerEntitiesSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(STimerEntitiesSaveData, m_aEntities));
	TArray<STimerEntitySaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(STimerEntitiesSaveData, m_aData));
}

ZHMTypeInfo SRandomTimerEntitySaveData::TypeInfo = ZHMTypeInfo("SRandomTimerEntitySaveData", sizeof(SRandomTimerEntitySaveData), alignof(SRandomTimerEntitySaveData), SRandomTimerEntitySaveData::WriteJson, SRandomTimerEntitySaveData::WriteSimpleJson, SRandomTimerEntitySaveData::FromSimpleJson, SRandomTimerEntitySaveData::Serialize);

void SRandomTimerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRandomTimerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegistered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRegistered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMinTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fMinTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMaxTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fMaxTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fProbability") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fProbability;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << "}";

	p_Stream << "}";
}

void SRandomTimerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRandomTimerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegistered") << ":";
	p_Stream << s_Object->m_bRegistered;
	p_Stream << ",";

	p_Stream << JsonStr("m_fMinTime") << ":";
	p_Stream << s_Object->m_fMinTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fMaxTime") << ":";
	p_Stream << s_Object->m_fMaxTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fProbability") << ":";
	p_Stream << s_Object->m_fProbability;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << s_Object->m_nRemaining;

	p_Stream << "}";
}

void SRandomTimerEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRandomTimerEntitySaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_bRegistered = bool(p_Document["m_bRegistered"]);

	s_Object.m_fMinTime = static_cast<float32>(double(p_Document["m_fMinTime"]));

	s_Object.m_fMaxTime = static_cast<float32>(double(p_Document["m_fMaxTime"]));

	s_Object.m_fProbability = static_cast<float32>(double(p_Document["m_fProbability"]));

	s_Object.m_nRemaining = static_cast<int32>(int64_t(p_Document["m_nRemaining"]));

	*reinterpret_cast<SRandomTimerEntitySaveData*>(p_Target) = s_Object;
}

void SRandomTimerEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRandomTimerEntitySaveData*>(p_Object);

}

ZHMTypeInfo SRandomTimerEntitiesSaveData::TypeInfo = ZHMTypeInfo("SRandomTimerEntitiesSaveData", sizeof(SRandomTimerEntitiesSaveData), alignof(SRandomTimerEntitiesSaveData), SRandomTimerEntitiesSaveData::WriteJson, SRandomTimerEntitiesSaveData::WriteSimpleJson, SRandomTimerEntitiesSaveData::FromSimpleJson, SRandomTimerEntitiesSaveData::Serialize);

void SRandomTimerEntitiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRandomTimerEntitiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SRandomTimerEntitySaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRandomTimerEntitySaveData") << "," << JsonStr("$val") << ":";
		SRandomTimerEntitySaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SRandomTimerEntitiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRandomTimerEntitiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SRandomTimerEntitySaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SRandomTimerEntitiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRandomTimerEntitiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SRandomTimerEntitySaveData s_ArrayItem0;
		SRandomTimerEntitySaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SRandomTimerEntitiesSaveData*>(p_Target) = s_Object;
}

void SRandomTimerEntitiesSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRandomTimerEntitiesSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SRandomTimerEntitiesSaveData, m_aEntities));
	TArray<SRandomTimerEntitySaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SRandomTimerEntitiesSaveData, m_aData));
}

ZHMTypeInfo STimerManagerSaveData::TypeInfo = ZHMTypeInfo("STimerManagerSaveData", sizeof(STimerManagerSaveData), alignof(STimerManagerSaveData), STimerManagerSaveData::WriteJson, STimerManagerSaveData::WriteSimpleJson, STimerManagerSaveData::FromSimpleJson, STimerManagerSaveData::Serialize);

void STimerManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STimerManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_TimersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STimerEntitiesSaveData") << "," << JsonStr("$val") << ":";
	STimerEntitiesSaveData::WriteJson(&s_Object->m_TimersData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_RandomTimersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRandomTimerEntitiesSaveData") << "," << JsonStr("$val") << ":";
	SRandomTimerEntitiesSaveData::WriteJson(&s_Object->m_RandomTimersData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_GameTimersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SGameTimersSaveData") << "," << JsonStr("$val") << ":";
	SGameTimersSaveData::WriteJson(&s_Object->m_GameTimersData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STimerManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STimerManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_TimersData") << ":";
	STimerEntitiesSaveData::WriteSimpleJson(&s_Object->m_TimersData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_RandomTimersData") << ":";
	SRandomTimerEntitiesSaveData::WriteSimpleJson(&s_Object->m_RandomTimersData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_GameTimersData") << ":";
	SGameTimersSaveData::WriteSimpleJson(&s_Object->m_GameTimersData, p_Stream);

	p_Stream << "}";
}

void STimerManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STimerManagerSaveData s_Object;

	{
		STimerEntitiesSaveData s_Item;
		STimerEntitiesSaveData::FromSimpleJson(p_Document["m_TimersData"], &s_Item);
		s_Object.m_TimersData = s_Item;
	}

	{
		SRandomTimerEntitiesSaveData s_Item;
		SRandomTimerEntitiesSaveData::FromSimpleJson(p_Document["m_RandomTimersData"], &s_Item);
		s_Object.m_RandomTimersData = s_Item;
	}

	{
		SGameTimersSaveData s_Item;
		SGameTimersSaveData::FromSimpleJson(p_Document["m_GameTimersData"], &s_Item);
		s_Object.m_GameTimersData = s_Item;
	}

	*reinterpret_cast<STimerManagerSaveData*>(p_Target) = s_Object;
}

void STimerManagerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STimerManagerSaveData*>(p_Object);

	STimerEntitiesSaveData::Serialize(&s_Object->m_TimersData, p_Serializer, p_OwnOffset + offsetof(STimerManagerSaveData, m_TimersData));
	SRandomTimerEntitiesSaveData::Serialize(&s_Object->m_RandomTimersData, p_Serializer, p_OwnOffset + offsetof(STimerManagerSaveData, m_RandomTimersData));
	SGameTimersSaveData::Serialize(&s_Object->m_GameTimersData, p_Serializer, p_OwnOffset + offsetof(STimerManagerSaveData, m_GameTimersData));
}

ZHMTypeInfo SGateSaveData::TypeInfo = ZHMTypeInfo("SGateSaveData", sizeof(SGateSaveData), alignof(SGateSaveData), SGateSaveData::WriteJson, SGateSaveData::WriteSimpleJson, SGateSaveData::FromSimpleJson, SGateSaveData::Serialize);

void SGateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOpen") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOpen;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpenFraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fOpenFraction;
	p_Stream << "}";

	p_Stream << "}";
}

void SGateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOpen") << ":";
	p_Stream << s_Object->m_bIsOpen;
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpenFraction") << ":";
	p_Stream << s_Object->m_fOpenFraction;

	p_Stream << "}";
}

void SGateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGateSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_bIsOpen = bool(p_Document["m_bIsOpen"]);

	s_Object.m_fOpenFraction = static_cast<float32>(double(p_Document["m_fOpenFraction"]));

	*reinterpret_cast<SGateSaveData*>(p_Target) = s_Object;
}

void SGateSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGateSaveData*>(p_Object);

}

ZHMTypeInfo SEntityTemplatePropertyAlias::TypeInfo = ZHMTypeInfo("SEntityTemplatePropertyAlias", sizeof(SEntityTemplatePropertyAlias), alignof(SEntityTemplatePropertyAlias), SEntityTemplatePropertyAlias::WriteJson, SEntityTemplatePropertyAlias::WriteSimpleJson, SEntityTemplatePropertyAlias::FromSimpleJson, SEntityTemplatePropertyAlias::Serialize);

void SEntityTemplatePropertyAlias::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePropertyAlias*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sAliasName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sAliasName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sPropertyName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sPropertyName);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePropertyAlias::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePropertyAlias*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sAliasName") << ":";
	p_Stream << JsonStr(s_Object->sAliasName);
	p_Stream << ",";

	p_Stream << JsonStr("entityID") << ":";
	p_Stream << s_Object->entityID;
	p_Stream << ",";

	p_Stream << JsonStr("sPropertyName") << ":";
	p_Stream << JsonStr(s_Object->sPropertyName);

	p_Stream << "}";
}

void SEntityTemplatePropertyAlias::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplatePropertyAlias s_Object;

	s_Object.sAliasName = std::string_view(p_Document["sAliasName"]);

	s_Object.entityID = static_cast<int32>(int64_t(p_Document["entityID"]));

	s_Object.sPropertyName = std::string_view(p_Document["sPropertyName"]);

	*reinterpret_cast<SEntityTemplatePropertyAlias*>(p_Target) = s_Object;
}

void SEntityTemplatePropertyAlias::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePropertyAlias*>(p_Object);

	ZString::Serialize(&s_Object->sAliasName, p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePropertyAlias, sAliasName));
	ZString::Serialize(&s_Object->sPropertyName, p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePropertyAlias, sPropertyName));
}

ZHMTypeInfo SDrama2ActorSaveState::TypeInfo = ZHMTypeInfo("SDrama2ActorSaveState", sizeof(SDrama2ActorSaveState), alignof(SDrama2ActorSaveState), SDrama2ActorSaveState::WriteJson, SDrama2ActorSaveState::WriteSimpleJson, SDrama2ActorSaveState::FromSimpleJson, SDrama2ActorSaveState::Serialize);

void SDrama2ActorSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDrama2ActorSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSequence") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSequence;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sMatchName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sMatchName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tActorSpeakEnd") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tActorSpeakEnd, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsDone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsSpeaking") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsSpeaking;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bOwnsCurrentBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOwnsCurrentBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRequired") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRequired;
	p_Stream << "}";

	p_Stream << "}";
}

void SDrama2ActorSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDrama2ActorSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSequence") << ":";
	p_Stream << s_Object->m_rSequence;
	p_Stream << ",";

	p_Stream << JsonStr("m_rBehavior") << ":";
	p_Stream << s_Object->m_rBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << ",";

	p_Stream << JsonStr("m_sMatchName") << ":";
	p_Stream << JsonStr(s_Object->m_sMatchName);
	p_Stream << ",";

	p_Stream << JsonStr("m_tActorSpeakEnd") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tActorSpeakEnd, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDone") << ":";
	p_Stream << s_Object->m_bIsDone;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPaused") << ":";
	p_Stream << s_Object->m_bIsPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsSpeaking") << ":";
	p_Stream << s_Object->m_bIsSpeaking;
	p_Stream << ",";

	p_Stream << JsonStr("m_bOwnsCurrentBehavior") << ":";
	p_Stream << s_Object->m_bOwnsCurrentBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRequired") << ":";
	p_Stream << s_Object->m_bRequired;

	p_Stream << "}";
}

void SDrama2ActorSaveState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDrama2ActorSaveState s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_rSequence = static_cast<uint32>(int64_t(p_Document["m_rSequence"]));

	s_Object.m_rBehavior = static_cast<uint32>(int64_t(p_Document["m_rBehavior"]));

	s_Object.m_rCurrentSpeakEntity = static_cast<uint32>(int64_t(p_Document["m_rCurrentSpeakEntity"]));

	s_Object.m_rScreenplay = static_cast<uint32>(int64_t(p_Document["m_rScreenplay"]));

	s_Object.m_sMatchName = std::string_view(p_Document["m_sMatchName"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tActorSpeakEnd"], &s_Item);
		s_Object.m_tActorSpeakEnd = s_Item;
	}

	s_Object.m_bIsDone = bool(p_Document["m_bIsDone"]);

	s_Object.m_bIsPaused = bool(p_Document["m_bIsPaused"]);

	s_Object.m_bIsSpeaking = bool(p_Document["m_bIsSpeaking"]);

	s_Object.m_bOwnsCurrentBehavior = bool(p_Document["m_bOwnsCurrentBehavior"]);

	s_Object.m_bActive = bool(p_Document["m_bActive"]);

	s_Object.m_bRequired = bool(p_Document["m_bRequired"]);

	*reinterpret_cast<SDrama2ActorSaveState*>(p_Target) = s_Object;
}

void SDrama2ActorSaveState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDrama2ActorSaveState*>(p_Object);

	ZString::Serialize(&s_Object->m_sMatchName, p_Serializer, p_OwnOffset + offsetof(SDrama2ActorSaveState, m_sMatchName));
	ZGameTime::Serialize(&s_Object->m_tActorSpeakEnd, p_Serializer, p_OwnOffset + offsetof(SDrama2ActorSaveState, m_tActorSpeakEnd));
}

ZHMTypeInfo SHUDPromptDisplayInfo::TypeInfo = ZHMTypeInfo("SHUDPromptDisplayInfo", sizeof(SHUDPromptDisplayInfo), alignof(SHUDPromptDisplayInfo), SHUDPromptDisplayInfo::WriteJson, SHUDPromptDisplayInfo::WriteSimpleJson, SHUDPromptDisplayInfo::FromSimpleJson, SHUDPromptDisplayInfo::Serialize);

void SHUDPromptDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHUDPromptDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActionPromptState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActionPromptState", static_cast<int>(s_Object->m_eState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nIconId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIconId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTypeId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_eTypeId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowWarning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoActionAvailable") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNoActionAvailable;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sLabel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sLabel);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sDescription") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sDescription);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sGlyph") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sGlyph);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpacity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fOpacity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIllegalItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIllegalItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSuspiciousItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSuspiciousItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropTempHolsterableItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropTempHolsterableItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFontSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFontSize;
	p_Stream << "}";

	p_Stream << "}";
}

void SHUDPromptDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHUDPromptDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActionPromptState", static_cast<int>(s_Object->m_eState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nIconId") << ":";
	p_Stream << s_Object->m_nIconId;
	p_Stream << ",";

	p_Stream << JsonStr("m_eTypeId") << ":";
	p_Stream << s_Object->m_eTypeId;
	p_Stream << ",";

	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistance") << ":";
	p_Stream << s_Object->m_fDistance;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowWarning") << ":";
	p_Stream << s_Object->m_bShowWarning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoActionAvailable") << ":";
	p_Stream << s_Object->m_bNoActionAvailable;
	p_Stream << ",";

	p_Stream << JsonStr("m_sLabel") << ":";
	p_Stream << JsonStr(s_Object->m_sLabel);
	p_Stream << ",";

	p_Stream << JsonStr("m_sDescription") << ":";
	p_Stream << JsonStr(s_Object->m_sDescription);
	p_Stream << ",";

	p_Stream << JsonStr("m_sGlyph") << ":";
	p_Stream << JsonStr(s_Object->m_sGlyph);
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpacity") << ":";
	p_Stream << s_Object->m_fOpacity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIllegalItem") << ":";
	p_Stream << s_Object->m_bIllegalItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSuspiciousItem") << ":";
	p_Stream << s_Object->m_bSuspiciousItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropTempHolsterableItems") << ":";
	p_Stream << s_Object->m_bDropTempHolsterableItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFontSize") << ":";
	p_Stream << s_Object->m_nFontSize;

	p_Stream << "}";
}

void SHUDPromptDisplayInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHUDPromptDisplayInfo s_Object;

	s_Object.m_bActive = bool(p_Document["m_bActive"]);

	s_Object.m_eState = static_cast<EActionPromptState>(ZHMEnums::GetEnumValueByName("EActionPromptState", std::string_view(p_Document["m_eState"])));

	s_Object.m_nIconId = static_cast<int32>(int64_t(p_Document["m_nIconId"]));

	s_Object.m_eTypeId = static_cast<int32>(int64_t(p_Document["m_eTypeId"]));

	s_Object.m_fProgress = static_cast<float32>(double(p_Document["m_fProgress"]));

	s_Object.m_fDistance = static_cast<float32>(double(p_Document["m_fDistance"]));

	s_Object.m_bShowWarning = bool(p_Document["m_bShowWarning"]);

	s_Object.m_bNoActionAvailable = bool(p_Document["m_bNoActionAvailable"]);

	s_Object.m_sLabel = std::string_view(p_Document["m_sLabel"]);

	s_Object.m_sDescription = std::string_view(p_Document["m_sDescription"]);

	s_Object.m_sGlyph = std::string_view(p_Document["m_sGlyph"]);

	s_Object.m_fOpacity = static_cast<float32>(double(p_Document["m_fOpacity"]));

	s_Object.m_bIllegalItem = bool(p_Document["m_bIllegalItem"]);

	s_Object.m_bSuspiciousItem = bool(p_Document["m_bSuspiciousItem"]);

	s_Object.m_bDropTempHolsterableItems = bool(p_Document["m_bDropTempHolsterableItems"]);

	s_Object.m_nFontSize = static_cast<int32>(int64_t(p_Document["m_nFontSize"]));

	*reinterpret_cast<SHUDPromptDisplayInfo*>(p_Target) = s_Object;
}

void SHUDPromptDisplayInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHUDPromptDisplayInfo*>(p_Object);

	ZString::Serialize(&s_Object->m_sLabel, p_Serializer, p_OwnOffset + offsetof(SHUDPromptDisplayInfo, m_sLabel));
	ZString::Serialize(&s_Object->m_sDescription, p_Serializer, p_OwnOffset + offsetof(SHUDPromptDisplayInfo, m_sDescription));
	ZString::Serialize(&s_Object->m_sGlyph, p_Serializer, p_OwnOffset + offsetof(SHUDPromptDisplayInfo, m_sGlyph));
}

ZHMTypeInfo ZDisguiseSituation_SSituationSaveData::TypeInfo = ZHMTypeInfo("ZDisguiseSituation.SSituationSaveData", sizeof(ZDisguiseSituation_SSituationSaveData), alignof(ZDisguiseSituation_SSituationSaveData), ZDisguiseSituation_SSituationSaveData::WriteJson, ZDisguiseSituation_SSituationSaveData::WriteSimpleJson, ZDisguiseSituation_SSituationSaveData::FromSimpleJson, ZDisguiseSituation_SSituationSaveData::Serialize);

void ZDisguiseSituation_SSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDisguiseSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aInvestigateDisguiseGroups") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<int32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aInvestigateDisguiseGroups.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aInvestigateDisguiseGroups[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aInvestigateDisguiseGroups.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEventSetOnEscalation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEventSetOnEscalation) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eEventSetOnEscalation))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZDisguiseSituation_SSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDisguiseSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_aInvestigateDisguiseGroups") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aInvestigateDisguiseGroups.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aInvestigateDisguiseGroups[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aInvestigateDisguiseGroups.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEventSetOnEscalation") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eEventSetOnEscalation)));

	p_Stream << "}";
}

void ZDisguiseSituation_SSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZDisguiseSituation_SSituationSaveData s_Object;

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aInvestigateDisguiseGroups"])
	{
		s_Object.m_aInvestigateDisguiseGroups.push_back(static_cast<int32>(int64_t(s_Item0)));
	}

	s_Object.m_eEventSetOnEscalation = static_cast<EAISharedEventType>(ZHMEnums::GetEnumValueByName("EAISharedEventType", std::string_view(p_Document["m_eEventSetOnEscalation"])));

	*reinterpret_cast<ZDisguiseSituation_SSituationSaveData*>(p_Target) = s_Object;
}

void ZDisguiseSituation_SSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZDisguiseSituation_SSituationSaveData*>(p_Object);

	TArray<int32>::Serialize(&s_Object->m_aInvestigateDisguiseGroups, p_Serializer, p_OwnOffset + offsetof(ZDisguiseSituation_SSituationSaveData, m_aInvestigateDisguiseGroups));
}

ZHMTypeInfo SStepCounterEntitySaveData::TypeInfo = ZHMTypeInfo("SStepCounterEntitySaveData", sizeof(SStepCounterEntitySaveData), alignof(SStepCounterEntitySaveData), SStepCounterEntitySaveData::WriteJson, SStepCounterEntitySaveData::WriteSimpleJson, SStepCounterEntitySaveData::FromSimpleJson, SStepCounterEntitySaveData::Serialize);

void SStepCounterEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SStepCounterEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nLoopIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nLoopIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirst") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFirst;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCountFrom") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCountFrom;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCountTo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCountTo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStepSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nStepSize;
	p_Stream << "}";

	p_Stream << "}";
}

void SStepCounterEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SStepCounterEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nLoopIndex") << ":";
	p_Stream << s_Object->m_nLoopIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirst") << ":";
	p_Stream << s_Object->m_bFirst;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCountFrom") << ":";
	p_Stream << s_Object->m_nCountFrom;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCountTo") << ":";
	p_Stream << s_Object->m_nCountTo;
	p_Stream << ",";

	p_Stream << JsonStr("m_nStepSize") << ":";
	p_Stream << s_Object->m_nStepSize;

	p_Stream << "}";
}

void SStepCounterEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SStepCounterEntitySaveData s_Object;

	s_Object.m_nIndex = static_cast<float32>(double(p_Document["m_nIndex"]));

	s_Object.m_nLoopIndex = static_cast<int32>(int64_t(p_Document["m_nLoopIndex"]));

	s_Object.m_bFirst = bool(p_Document["m_bFirst"]);

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_nCountFrom = static_cast<float32>(double(p_Document["m_nCountFrom"]));

	s_Object.m_nCountTo = static_cast<float32>(double(p_Document["m_nCountTo"]));

	s_Object.m_nStepSize = static_cast<float32>(double(p_Document["m_nStepSize"]));

	*reinterpret_cast<SStepCounterEntitySaveData*>(p_Target) = s_Object;
}

void SStepCounterEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SStepCounterEntitySaveData*>(p_Object);

}

ZHMTypeInfo SLoadRuntimeResourceResult::TypeInfo = ZHMTypeInfo("SLoadRuntimeResourceResult", sizeof(SLoadRuntimeResourceResult), alignof(SLoadRuntimeResourceResult), SLoadRuntimeResourceResult::WriteJson, SLoadRuntimeResourceResult::WriteSimpleJson, SLoadRuntimeResourceResult::FromSimpleJson, SLoadRuntimeResourceResult::Serialize);

void SLoadRuntimeResourceResult::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLoadRuntimeResourceResult*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sFilePath") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sFilePath);
	p_Stream << "}";

	p_Stream << "}";
}

void SLoadRuntimeResourceResult::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLoadRuntimeResourceResult*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sFilePath") << ":";
	p_Stream << JsonStr(s_Object->sFilePath);

	p_Stream << "}";
}

void SLoadRuntimeResourceResult::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLoadRuntimeResourceResult s_Object;

	s_Object.sFilePath = std::string_view(p_Document["sFilePath"]);

	*reinterpret_cast<SLoadRuntimeResourceResult*>(p_Target) = s_Object;
}

void SLoadRuntimeResourceResult::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLoadRuntimeResourceResult*>(p_Object);

	ZString::Serialize(&s_Object->sFilePath, p_Serializer, p_OwnOffset + offsetof(SLoadRuntimeResourceResult, sFilePath));
}

ZHMTypeInfo SHeroEscortSituation2Actors::TypeInfo = ZHMTypeInfo("SHeroEscortSituation2Actors", sizeof(SHeroEscortSituation2Actors), alignof(SHeroEscortSituation2Actors), SHeroEscortSituation2Actors::WriteJson, SHeroEscortSituation2Actors::WriteSimpleJson, SHeroEscortSituation2Actors::FromSimpleJson, SHeroEscortSituation2Actors::Serialize);

void SHeroEscortSituation2Actors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituation2Actors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroEscortSituation2Actors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituation2Actors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SHeroEscortSituation2Actors::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroEscortSituation2Actors s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SHeroEscortSituation2Actors*>(p_Target) = s_Object;
}

void SHeroEscortSituation2Actors::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituation2Actors*>(p_Object);

}

ZHMTypeInfo SSpatialMoverEntitySaveData::TypeInfo = ZHMTypeInfo("SSpatialMoverEntitySaveData", sizeof(SSpatialMoverEntitySaveData), alignof(SSpatialMoverEntitySaveData), SSpatialMoverEntitySaveData::WriteJson, SSpatialMoverEntitySaveData::WriteSimpleJson, SSpatialMoverEntitySaveData::FromSimpleJson, SSpatialMoverEntitySaveData::Serialize);

void SSpatialMoverEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSpatialMoverEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBackwards") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBackwards;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFrameUpdateRegistered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsFrameUpdateRegistered;
	p_Stream << "}";

	p_Stream << "}";
}

void SSpatialMoverEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSpatialMoverEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fSpeed") << ":";
	p_Stream << s_Object->m_fSpeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBackwards") << ":";
	p_Stream << s_Object->m_bBackwards;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFrameUpdateRegistered") << ":";
	p_Stream << s_Object->m_bIsFrameUpdateRegistered;

	p_Stream << "}";
}

void SSpatialMoverEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSpatialMoverEntitySaveData s_Object;

	s_Object.m_fSpeed = static_cast<float32>(double(p_Document["m_fSpeed"]));

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_bBackwards = bool(p_Document["m_bBackwards"]);

	s_Object.m_bIsFrameUpdateRegistered = bool(p_Document["m_bIsFrameUpdateRegistered"]);

	*reinterpret_cast<SSpatialMoverEntitySaveData*>(p_Target) = s_Object;
}

void SSpatialMoverEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSpatialMoverEntitySaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vPosition, p_Serializer, p_OwnOffset + offsetof(SSpatialMoverEntitySaveData, m_vPosition));
}

ZHMTypeInfo SLayerBehaviorConfiguration::TypeInfo = ZHMTypeInfo("SLayerBehaviorConfiguration", sizeof(SLayerBehaviorConfiguration), alignof(SLayerBehaviorConfiguration), SLayerBehaviorConfiguration::WriteJson, SLayerBehaviorConfiguration::WriteSimpleJson, SLayerBehaviorConfiguration::FromSimpleJson, SLayerBehaviorConfiguration::Serialize);

void SLayerBehaviorConfiguration::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLayerBehaviorConfiguration*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bTrigger") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTrigger;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCollector") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCollector;
	p_Stream << "}";

	p_Stream << "}";
}

void SLayerBehaviorConfiguration::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLayerBehaviorConfiguration*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bTrigger") << ":";
	p_Stream << s_Object->m_bTrigger;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCollector") << ":";
	p_Stream << s_Object->m_bCollector;

	p_Stream << "}";
}

void SLayerBehaviorConfiguration::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLayerBehaviorConfiguration s_Object;

	s_Object.m_bTrigger = bool(p_Document["m_bTrigger"]);

	s_Object.m_bCollector = bool(p_Document["m_bCollector"]);

	*reinterpret_cast<SLayerBehaviorConfiguration*>(p_Target) = s_Object;
}

void SLayerBehaviorConfiguration::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLayerBehaviorConfiguration*>(p_Object);

}

ZHMTypeInfo IBodybagEntity::TypeInfo = ZHMTypeInfo("IBodybagEntity", sizeof(IBodybagEntity), alignof(IBodybagEntity), IBodybagEntity::WriteJson, IBodybagEntity::WriteSimpleJson, IBodybagEntity::FromSimpleJson, IBodybagEntity::Serialize);

void IBodybagEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IBodybagEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBodybagEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IBodybagEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IBodybagEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IBodybagEntity s_Object;

	*reinterpret_cast<IBodybagEntity*>(p_Target) = s_Object;
}

void IBodybagEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IBodybagEntity*>(p_Object);

}

ZHMTypeInfo SInventoryItem::TypeInfo = ZHMTypeInfo("SInventoryItem", sizeof(SInventoryItem), alignof(SInventoryItem), SInventoryItem::WriteJson, SInventoryItem::WriteSimpleJson, SInventoryItem::FromSimpleJson, SInventoryItem::Serialize);

void SInventoryItem::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryItem*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sInstanceId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sInstanceId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sUnlockableId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sUnlockableId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("repositoryId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->repositoryId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aRepositoryAssetIds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZRepositoryID>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aRepositoryAssetIds.size(); ++i)
	{
		auto& s_Item0 = s_Object->aRepositoryAssetIds[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
		ZRepositoryID::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aRepositoryAssetIds.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aModifierIds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZRepositoryID>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aModifierIds.size(); ++i)
	{
		auto& s_Item0 = s_Object->aModifierIds[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
		ZRepositoryID::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aModifierIds.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryItem::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryItem*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sInstanceId") << ":";
	p_Stream << JsonStr(s_Object->sInstanceId);
	p_Stream << ",";

	p_Stream << JsonStr("sUnlockableId") << ":";
	p_Stream << JsonStr(s_Object->sUnlockableId);
	p_Stream << ",";

	p_Stream << JsonStr("repositoryId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->repositoryId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("aRepositoryAssetIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aRepositoryAssetIds.size(); ++i)
	{
		auto& s_Item0 = s_Object->aRepositoryAssetIds[i];
		ZRepositoryID::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->aRepositoryAssetIds.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aModifierIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aModifierIds.size(); ++i)
	{
		auto& s_Item0 = s_Object->aModifierIds[i];
		ZRepositoryID::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->aModifierIds.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SInventoryItem::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryItem s_Object;

	s_Object.sInstanceId = std::string_view(p_Document["sInstanceId"]);

	s_Object.sUnlockableId = std::string_view(p_Document["sUnlockableId"]);

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["repositoryId"], &s_Item);
		s_Object.repositoryId = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["aRepositoryAssetIds"])
	{
		ZRepositoryID s_ArrayItem0;
		ZRepositoryID::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.aRepositoryAssetIds.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["aModifierIds"])
	{
		ZRepositoryID s_ArrayItem0;
		ZRepositoryID::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.aModifierIds.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SInventoryItem*>(p_Target) = s_Object;
}

void SInventoryItem::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SInventoryItem*>(p_Object);

	ZString::Serialize(&s_Object->sInstanceId, p_Serializer, p_OwnOffset + offsetof(SInventoryItem, sInstanceId));
	ZString::Serialize(&s_Object->sUnlockableId, p_Serializer, p_OwnOffset + offsetof(SInventoryItem, sUnlockableId));
	ZRepositoryID::Serialize(&s_Object->repositoryId, p_Serializer, p_OwnOffset + offsetof(SInventoryItem, repositoryId));
	TArray<ZRepositoryID>::Serialize(&s_Object->aRepositoryAssetIds, p_Serializer, p_OwnOffset + offsetof(SInventoryItem, aRepositoryAssetIds));
	TArray<ZRepositoryID>::Serialize(&s_Object->aModifierIds, p_Serializer, p_OwnOffset + offsetof(SInventoryItem, aModifierIds));
}

ZHMTypeInfo SContainerItemInfo::TypeInfo = ZHMTypeInfo("SContainerItemInfo", sizeof(SContainerItemInfo), alignof(SContainerItemInfo), SContainerItemInfo::WriteJson, SContainerItemInfo::WriteSimpleJson, SContainerItemInfo::FromSimpleJson, SContainerItemInfo::Serialize);

void SContainerItemInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContainerItemInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sContainerInstanceId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sContainerInstanceId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_concealedItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryItem") << "," << JsonStr("$val") << ":";
	SInventoryItem::WriteJson(&s_Object->m_concealedItem, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SContainerItemInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContainerItemInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sContainerInstanceId") << ":";
	p_Stream << JsonStr(s_Object->m_sContainerInstanceId);
	p_Stream << ",";

	p_Stream << JsonStr("m_concealedItem") << ":";
	SInventoryItem::WriteSimpleJson(&s_Object->m_concealedItem, p_Stream);

	p_Stream << "}";
}

void SContainerItemInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SContainerItemInfo s_Object;

	s_Object.m_sContainerInstanceId = std::string_view(p_Document["m_sContainerInstanceId"]);

	{
		SInventoryItem s_Item;
		SInventoryItem::FromSimpleJson(p_Document["m_concealedItem"], &s_Item);
		s_Object.m_concealedItem = s_Item;
	}

	*reinterpret_cast<SContainerItemInfo*>(p_Target) = s_Object;
}

void SContainerItemInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SContainerItemInfo*>(p_Object);

	ZString::Serialize(&s_Object->m_sContainerInstanceId, p_Serializer, p_OwnOffset + offsetof(SContainerItemInfo, m_sContainerInstanceId));
	SInventoryItem::Serialize(&s_Object->m_concealedItem, p_Serializer, p_OwnOffset + offsetof(SContainerItemInfo, m_concealedItem));
}

ZHMTypeInfo SInventoryInfo::TypeInfo = ZHMTypeInfo("SInventoryInfo", sizeof(SInventoryInfo), alignof(SInventoryInfo), SInventoryInfo::WriteJson, SInventoryInfo::WriteSimpleJson, SInventoryInfo::FromSimpleJson, SInventoryInfo::Serialize);

void SInventoryInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aPockets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SInventoryItem>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPockets.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPockets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryItem") << "," << JsonStr("$val") << ":";
		SInventoryItem::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aPockets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CarriedItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryItem") << "," << JsonStr("$val") << ":";
	SInventoryItem::WriteJson(&s_Object->m_CarriedItem, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aContainerItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SContainerItemInfo>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aContainerItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aContainerItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SContainerItemInfo") << "," << JsonStr("$val") << ":";
		SContainerItemInfo::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aContainerItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aPockets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPockets.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPockets[i];
		SInventoryItem::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aPockets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_CarriedItem") << ":";
	SInventoryItem::WriteSimpleJson(&s_Object->m_CarriedItem, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aContainerItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aContainerItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aContainerItems[i];
		SContainerItemInfo::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aContainerItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SInventoryInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryInfo s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aPockets"])
	{
		SInventoryItem s_ArrayItem0;
		SInventoryItem::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aPockets.push_back(s_ArrayItem0);
	}

	{
		SInventoryItem s_Item;
		SInventoryItem::FromSimpleJson(p_Document["m_CarriedItem"], &s_Item);
		s_Object.m_CarriedItem = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aContainerItems"])
	{
		SContainerItemInfo s_ArrayItem0;
		SContainerItemInfo::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aContainerItems.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SInventoryInfo*>(p_Target) = s_Object;
}

void SInventoryInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SInventoryInfo*>(p_Object);

	TArray<SInventoryItem>::Serialize(&s_Object->m_aPockets, p_Serializer, p_OwnOffset + offsetof(SInventoryInfo, m_aPockets));
	SInventoryItem::Serialize(&s_Object->m_CarriedItem, p_Serializer, p_OwnOffset + offsetof(SInventoryInfo, m_CarriedItem));
	TArray<SContainerItemInfo>::Serialize(&s_Object->m_aContainerItems, p_Serializer, p_OwnOffset + offsetof(SInventoryInfo, m_aContainerItems));
}

ZHMTypeInfo ZRayQueryInput::TypeInfo = ZHMTypeInfo("ZRayQueryInput", sizeof(ZRayQueryInput), alignof(ZRayQueryInput), ZRayQueryInput::WriteJson, ZRayQueryInput::WriteSimpleJson, ZRayQueryInput::FromSimpleJson, ZRayQueryInput::Serialize);

void ZRayQueryInput::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZRayQueryInput*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZRayQueryInput::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZRayQueryInput*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZRayQueryInput::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZRayQueryInput s_Object;

	*reinterpret_cast<ZRayQueryInput*>(p_Target) = s_Object;
}

void ZRayQueryInput::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZRayQueryInput*>(p_Object);

}

ZHMTypeInfo ZKeywordCalculator_SCollection::TypeInfo = ZHMTypeInfo("ZKeywordCalculator.SCollection", sizeof(ZKeywordCalculator_SCollection), alignof(ZKeywordCalculator_SCollection), ZKeywordCalculator_SCollection::WriteJson, ZKeywordCalculator_SCollection::WriteSimpleJson, ZKeywordCalculator_SCollection::FromSimpleJson, ZKeywordCalculator_SCollection::Serialize);

void ZKeywordCalculator_SCollection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZKeywordCalculator_SCollection*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("aKeywords") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<int32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aKeywords.size(); ++i)
	{
		auto& s_Item0 = s_Object->aKeywords[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->aKeywords.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void ZKeywordCalculator_SCollection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZKeywordCalculator_SCollection*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("aKeywords") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aKeywords.size(); ++i)
	{
		auto& s_Item0 = s_Object->aKeywords[i];
		p_Stream << s_Item0;

		if (i < s_Object->aKeywords.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZKeywordCalculator_SCollection::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZKeywordCalculator_SCollection s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["aKeywords"])
	{
		s_Object.aKeywords.push_back(static_cast<int32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<ZKeywordCalculator_SCollection*>(p_Target) = s_Object;
}

void ZKeywordCalculator_SCollection::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZKeywordCalculator_SCollection*>(p_Object);

	TArray<int32>::Serialize(&s_Object->aKeywords, p_Serializer, p_OwnOffset + offsetof(ZKeywordCalculator_SCollection, aKeywords));
}

ZHMTypeInfo SActorThrowSaveData::TypeInfo = ZHMTypeInfo("SActorThrowSaveData", sizeof(SActorThrowSaveData), alignof(SActorThrowSaveData), SActorThrowSaveData::WriteJson, SActorThrowSaveData::WriteSimpleJson, SActorThrowSaveData::FromSimpleJson, SActorThrowSaveData::Serialize);

void SActorThrowSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorThrowSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vStartPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vStartPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vEndPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vEndPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vItemVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vItemVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistance;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorThrowSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorThrowSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_vStartPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vStartPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vEndPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vEndPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vItemVelocity") << ":";
	float4::WriteSimpleJson(&s_Object->m_vItemVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistance") << ":";
	p_Stream << s_Object->m_fDistance;

	p_Stream << "}";
}

void SActorThrowSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorThrowSaveData s_Object;

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vStartPosition"], &s_Item);
		s_Object.m_vStartPosition = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vEndPosition"], &s_Item);
		s_Object.m_vEndPosition = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vItemVelocity"], &s_Item);
		s_Object.m_vItemVelocity = s_Item;
	}

	s_Object.m_fDistance = static_cast<float32>(double(p_Document["m_fDistance"]));

	*reinterpret_cast<SActorThrowSaveData*>(p_Target) = s_Object;
}

void SActorThrowSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorThrowSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vStartPosition, p_Serializer, p_OwnOffset + offsetof(SActorThrowSaveData, m_vStartPosition));
	float4::Serialize(&s_Object->m_vEndPosition, p_Serializer, p_OwnOffset + offsetof(SActorThrowSaveData, m_vEndPosition));
	float4::Serialize(&s_Object->m_vItemVelocity, p_Serializer, p_OwnOffset + offsetof(SActorThrowSaveData, m_vItemVelocity));
}

ZHMTypeInfo SIntelListDisplayInfo::TypeInfo = ZHMTypeInfo("SIntelListDisplayInfo", sizeof(SIntelListDisplayInfo), alignof(SIntelListDisplayInfo), SIntelListDisplayInfo::WriteJson, SIntelListDisplayInfo::WriteSimpleJson, SIntelListDisplayInfo::FromSimpleJson, SIntelListDisplayInfo::Serialize);

void SIntelListDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelListDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("index") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->index;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->active;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("newInfo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->newInfo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("label") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelListDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelListDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("index") << ":";
	p_Stream << s_Object->index;
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << s_Object->active;
	p_Stream << ",";

	p_Stream << JsonStr("newInfo") << ":";
	p_Stream << s_Object->newInfo;
	p_Stream << ",";

	p_Stream << JsonStr("label") << ":";
	p_Stream << JsonStr(s_Object->label);

	p_Stream << "}";
}

void SIntelListDisplayInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelListDisplayInfo s_Object;

	s_Object.index = static_cast<int32>(int64_t(p_Document["index"]));

	s_Object.active = bool(p_Document["active"]);

	s_Object.newInfo = bool(p_Document["newInfo"]);

	s_Object.label = std::string_view(p_Document["label"]);

	*reinterpret_cast<SIntelListDisplayInfo*>(p_Target) = s_Object;
}

void SIntelListDisplayInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SIntelListDisplayInfo*>(p_Object);

	ZString::Serialize(&s_Object->label, p_Serializer, p_OwnOffset + offsetof(SIntelListDisplayInfo, label));
}

ZHMTypeInfo SAgencyPickupInfo::TypeInfo = ZHMTypeInfo("SAgencyPickupInfo", sizeof(SAgencyPickupInfo), alignof(SAgencyPickupInfo), SAgencyPickupInfo::WriteJson, SAgencyPickupInfo::WriteSimpleJson, SAgencyPickupInfo::FromSimpleJson, SAgencyPickupInfo::Serialize);

void SAgencyPickupInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAgencyPickupInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_AgencyPickupId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_AgencyPickupId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aItemIds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZRepositoryID>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItemIds.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aItemIds[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
		ZRepositoryID::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItemIds.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aModifierIds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZRepositoryID>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aModifierIds.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aModifierIds[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
		ZRepositoryID::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aModifierIds.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SAgencyPickupInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAgencyPickupInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_AgencyPickupId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_AgencyPickupId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aItemIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItemIds.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aItemIds[i];
		ZRepositoryID::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aItemIds.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aModifierIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aModifierIds.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aModifierIds[i];
		ZRepositoryID::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aModifierIds.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SAgencyPickupInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAgencyPickupInfo s_Object;

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_AgencyPickupId"], &s_Item);
		s_Object.m_AgencyPickupId = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aItemIds"])
	{
		ZRepositoryID s_ArrayItem0;
		ZRepositoryID::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aItemIds.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aModifierIds"])
	{
		ZRepositoryID s_ArrayItem0;
		ZRepositoryID::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aModifierIds.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SAgencyPickupInfo*>(p_Target) = s_Object;
}

void SAgencyPickupInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAgencyPickupInfo*>(p_Object);

	ZRepositoryID::Serialize(&s_Object->m_AgencyPickupId, p_Serializer, p_OwnOffset + offsetof(SAgencyPickupInfo, m_AgencyPickupId));
	TArray<ZRepositoryID>::Serialize(&s_Object->m_aItemIds, p_Serializer, p_OwnOffset + offsetof(SAgencyPickupInfo, m_aItemIds));
	TArray<ZRepositoryID>::Serialize(&s_Object->m_aModifierIds, p_Serializer, p_OwnOffset + offsetof(SAgencyPickupInfo, m_aModifierIds));
}

ZHMTypeInfo SSoundAmbienceSaveData::TypeInfo = ZHMTypeInfo("SSoundAmbienceSaveData", sizeof(SSoundAmbienceSaveData), alignof(SSoundAmbienceSaveData), SSoundAmbienceSaveData::WriteJson, SSoundAmbienceSaveData::WriteSimpleJson, SSoundAmbienceSaveData::FromSimpleJson, SSoundAmbienceSaveData::Serialize);

void SSoundAmbienceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSoundAmbienceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCurrentAmbience") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentAmbience;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentGate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentGate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTransitionAmount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTransitionAmount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnteredFromSide0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnteredFromSide0;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInTransition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInTransition;
	p_Stream << "}";

	p_Stream << "}";
}

void SSoundAmbienceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSoundAmbienceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCurrentAmbience") << ":";
	p_Stream << s_Object->m_rCurrentAmbience;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentGate") << ":";
	p_Stream << s_Object->m_rCurrentGate;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTransitionAmount") << ":";
	p_Stream << s_Object->m_fTransitionAmount;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnteredFromSide0") << ":";
	p_Stream << s_Object->m_bEnteredFromSide0;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInTransition") << ":";
	p_Stream << s_Object->m_bInTransition;

	p_Stream << "}";
}

void SSoundAmbienceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSoundAmbienceSaveData s_Object;

	s_Object.m_rCurrentAmbience = static_cast<uint32>(int64_t(p_Document["m_rCurrentAmbience"]));

	s_Object.m_rCurrentGate = static_cast<uint32>(int64_t(p_Document["m_rCurrentGate"]));

	s_Object.m_fTransitionAmount = static_cast<float32>(double(p_Document["m_fTransitionAmount"]));

	s_Object.m_bEnteredFromSide0 = bool(p_Document["m_bEnteredFromSide0"]);

	s_Object.m_bInTransition = bool(p_Document["m_bInTransition"]);

	*reinterpret_cast<SSoundAmbienceSaveData*>(p_Target) = s_Object;
}

void SSoundAmbienceSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSoundAmbienceSaveData*>(p_Object);

}

ZHMTypeInfo SChallengesSaveData::TypeInfo = ZHMTypeInfo("SChallengesSaveData", sizeof(SChallengesSaveData), alignof(SChallengesSaveData), SChallengesSaveData::WriteJson, SChallengesSaveData::WriteSimpleJson, SChallengesSaveData::FromSimpleJson, SChallengesSaveData::Serialize);

void SChallengesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SChallengesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_mChallengeStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SChallengeSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mChallengeStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_mChallengeStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SChallengeSaveData") << "," << JsonStr("$val") << ":";
		SChallengeSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_mChallengeStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SChallengesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SChallengesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_mChallengeStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mChallengeStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_mChallengeStates[i];
		SChallengeSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_mChallengeStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SChallengesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SChallengesSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_mChallengeStates"])
	{
		SChallengeSaveData s_ArrayItem0;
		SChallengeSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_mChallengeStates.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SChallengesSaveData*>(p_Target) = s_Object;
}

void SChallengesSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SChallengesSaveData*>(p_Object);

	TArray<SChallengeSaveData>::Serialize(&s_Object->m_mChallengeStates, p_Serializer, p_OwnOffset + offsetof(SChallengesSaveData, m_mChallengeStates));
}

ZHMTypeInfo SLevelSaveData::TypeInfo = ZHMTypeInfo("SLevelSaveData", sizeof(SLevelSaveData), alignof(SLevelSaveData), SLevelSaveData::WriteJson, SLevelSaveData::WriteSimpleJson, SLevelSaveData::FromSimpleJson, SLevelSaveData::Serialize);

void SLevelSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLevelSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nGameTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGameTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGameTimePrev") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGameTimePrev;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGameTimeDelta") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGameTimeDelta;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sScene") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sScene);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sLocationId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sLocationId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sContractId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sContractId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sContractSessionId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sContractSessionId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sLastEventToken") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sLastEventToken);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_EnabledEntranceId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_EnabledEntranceId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_StartupDisguiseId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_StartupDisguiseId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_contractData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_contractData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_trackedOpportunity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGuid") << "," << JsonStr("$val") << ":";
	ZGuid::WriteJson(&s_Object->m_trackedOpportunity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStartupInventory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryInfo") << "," << JsonStr("$val") << ":";
	SInventoryInfo::WriteJson(&s_Object->m_aStartupInventory, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStartupAgencyPickupSelection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAgencyPickupInfo") << "," << JsonStr("$val") << ":";
	SAgencyPickupInfo::WriteJson(&s_Object->m_aStartupAgencyPickupSelection, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aObjectives") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SObjetiveSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aObjectives.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aObjectives[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SObjetiveSaveData") << "," << JsonStr("$val") << ":";
		SObjetiveSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aObjectives.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGameChangers") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZVariant>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGameChangers.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGameChangers[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
		ZVariant::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGameChangers.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_SoundAmbienceData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSoundAmbienceSaveData") << "," << JsonStr("$val") << ":";
	SSoundAmbienceSaveData::WriteJson(&s_Object->m_SoundAmbienceData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ChallengesSaveData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SChallengesSaveData") << "," << JsonStr("$val") << ":";
	SChallengesSaveData::WriteJson(&s_Object->m_ChallengesSaveData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSaveGameLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSaveGameLimit;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLastKillTimestamp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLastKillTimestamp;
	p_Stream << "}";

	p_Stream << "}";
}

void SLevelSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLevelSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nGameTime") << ":";
	p_Stream << s_Object->m_nGameTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGameTimePrev") << ":";
	p_Stream << s_Object->m_nGameTimePrev;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGameTimeDelta") << ":";
	p_Stream << s_Object->m_nGameTimeDelta;
	p_Stream << ",";

	p_Stream << JsonStr("m_sScene") << ":";
	p_Stream << JsonStr(s_Object->m_sScene);
	p_Stream << ",";

	p_Stream << JsonStr("m_sLocationId") << ":";
	p_Stream << JsonStr(s_Object->m_sLocationId);
	p_Stream << ",";

	p_Stream << JsonStr("m_sContractId") << ":";
	p_Stream << JsonStr(s_Object->m_sContractId);
	p_Stream << ",";

	p_Stream << JsonStr("m_sContractSessionId") << ":";
	p_Stream << JsonStr(s_Object->m_sContractSessionId);
	p_Stream << ",";

	p_Stream << JsonStr("m_sLastEventToken") << ":";
	p_Stream << JsonStr(s_Object->m_sLastEventToken);
	p_Stream << ",";

	p_Stream << JsonStr("m_EnabledEntranceId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_EnabledEntranceId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_StartupDisguiseId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_StartupDisguiseId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_contractData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_contractData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_trackedOpportunity") << ":";
	ZGuid::WriteSimpleJson(&s_Object->m_trackedOpportunity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aStartupInventory") << ":";
	SInventoryInfo::WriteSimpleJson(&s_Object->m_aStartupInventory, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aStartupAgencyPickupSelection") << ":";
	SAgencyPickupInfo::WriteSimpleJson(&s_Object->m_aStartupAgencyPickupSelection, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aObjectives") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aObjectives.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aObjectives[i];
		SObjetiveSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aObjectives.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGameChangers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGameChangers.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGameChangers[i];
		ZVariant::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aGameChangers.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_SoundAmbienceData") << ":";
	SSoundAmbienceSaveData::WriteSimpleJson(&s_Object->m_SoundAmbienceData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ChallengesSaveData") << ":";
	SChallengesSaveData::WriteSimpleJson(&s_Object->m_ChallengesSaveData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nSaveGameLimit") << ":";
	p_Stream << s_Object->m_nSaveGameLimit;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLastKillTimestamp") << ":";
	p_Stream << s_Object->m_fLastKillTimestamp;

	p_Stream << "}";
}

void SLevelSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLevelSaveData s_Object;

	s_Object.m_nGameTime = int64(p_Document["m_nGameTime"]);

	s_Object.m_nGameTimePrev = int64(p_Document["m_nGameTimePrev"]);

	s_Object.m_nGameTimeDelta = int64(p_Document["m_nGameTimeDelta"]);

	s_Object.m_sScene = std::string_view(p_Document["m_sScene"]);

	s_Object.m_sLocationId = std::string_view(p_Document["m_sLocationId"]);

	s_Object.m_sContractId = std::string_view(p_Document["m_sContractId"]);

	s_Object.m_sContractSessionId = std::string_view(p_Document["m_sContractSessionId"]);

	s_Object.m_sLastEventToken = std::string_view(p_Document["m_sLastEventToken"]);

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_EnabledEntranceId"], &s_Item);
		s_Object.m_EnabledEntranceId = s_Item;
	}

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_StartupDisguiseId"], &s_Item);
		s_Object.m_StartupDisguiseId = s_Item;
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_contractData"], &s_Item);
		s_Object.m_contractData = s_Item;
	}

	{
		ZGuid s_Item;
		ZGuid::FromSimpleJson(p_Document["m_trackedOpportunity"], &s_Item);
		s_Object.m_trackedOpportunity = s_Item;
	}

	{
		SInventoryInfo s_Item;
		SInventoryInfo::FromSimpleJson(p_Document["m_aStartupInventory"], &s_Item);
		s_Object.m_aStartupInventory = s_Item;
	}

	{
		SAgencyPickupInfo s_Item;
		SAgencyPickupInfo::FromSimpleJson(p_Document["m_aStartupAgencyPickupSelection"], &s_Item);
		s_Object.m_aStartupAgencyPickupSelection = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aObjectives"])
	{
		SObjetiveSaveData s_ArrayItem0;
		SObjetiveSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aObjectives.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aGameChangers"])
	{
		ZVariant s_ArrayItem0;
		ZVariant::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aGameChangers.push_back(s_ArrayItem0);
	}

	{
		SSoundAmbienceSaveData s_Item;
		SSoundAmbienceSaveData::FromSimpleJson(p_Document["m_SoundAmbienceData"], &s_Item);
		s_Object.m_SoundAmbienceData = s_Item;
	}

	{
		SChallengesSaveData s_Item;
		SChallengesSaveData::FromSimpleJson(p_Document["m_ChallengesSaveData"], &s_Item);
		s_Object.m_ChallengesSaveData = s_Item;
	}

	s_Object.m_nSaveGameLimit = static_cast<int32>(int64_t(p_Document["m_nSaveGameLimit"]));

	s_Object.m_fLastKillTimestamp = static_cast<float32>(double(p_Document["m_fLastKillTimestamp"]));

	*reinterpret_cast<SLevelSaveData*>(p_Target) = s_Object;
}

void SLevelSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLevelSaveData*>(p_Object);

	ZString::Serialize(&s_Object->m_sScene, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_sScene));
	ZString::Serialize(&s_Object->m_sLocationId, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_sLocationId));
	ZString::Serialize(&s_Object->m_sContractId, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_sContractId));
	ZString::Serialize(&s_Object->m_sContractSessionId, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_sContractSessionId));
	ZString::Serialize(&s_Object->m_sLastEventToken, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_sLastEventToken));
	ZRepositoryID::Serialize(&s_Object->m_EnabledEntranceId, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_EnabledEntranceId));
	ZRepositoryID::Serialize(&s_Object->m_StartupDisguiseId, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_StartupDisguiseId));
	ZVariant::Serialize(&s_Object->m_contractData, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_contractData));
	ZGuid::Serialize(&s_Object->m_trackedOpportunity, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_trackedOpportunity));
	SInventoryInfo::Serialize(&s_Object->m_aStartupInventory, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_aStartupInventory));
	SAgencyPickupInfo::Serialize(&s_Object->m_aStartupAgencyPickupSelection, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_aStartupAgencyPickupSelection));
	TArray<SObjetiveSaveData>::Serialize(&s_Object->m_aObjectives, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_aObjectives));
	TArray<ZVariant>::Serialize(&s_Object->m_aGameChangers, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_aGameChangers));
	SSoundAmbienceSaveData::Serialize(&s_Object->m_SoundAmbienceData, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_SoundAmbienceData));
	SChallengesSaveData::Serialize(&s_Object->m_ChallengesSaveData, p_Serializer, p_OwnOffset + offsetof(SLevelSaveData, m_ChallengesSaveData));
}

ZHMTypeInfo ZDetectedInPrivateSituation_SSituationSaveData::TypeInfo = ZHMTypeInfo("ZDetectedInPrivateSituation.SSituationSaveData", sizeof(ZDetectedInPrivateSituation_SSituationSaveData), alignof(ZDetectedInPrivateSituation_SSituationSaveData), ZDetectedInPrivateSituation_SSituationSaveData::WriteJson, ZDetectedInPrivateSituation_SSituationSaveData::WriteSimpleJson, ZDetectedInPrivateSituation_SSituationSaveData::FromSimpleJson, ZDetectedInPrivateSituation_SSituationSaveData::Serialize);

void ZDetectedInPrivateSituation_SSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDetectedInPrivateSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pDetectedInPrivateGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pDetectedInPrivateGroup;
	p_Stream << "}";

	p_Stream << "}";
}

void ZDetectedInPrivateSituation_SSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDetectedInPrivateSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pDetectedInPrivateGroup") << ":";
	p_Stream << s_Object->m_pDetectedInPrivateGroup;

	p_Stream << "}";
}

void ZDetectedInPrivateSituation_SSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZDetectedInPrivateSituation_SSituationSaveData s_Object;

	s_Object.m_pDetectedInPrivateGroup = static_cast<int32>(int64_t(p_Document["m_pDetectedInPrivateGroup"]));

	*reinterpret_cast<ZDetectedInPrivateSituation_SSituationSaveData*>(p_Target) = s_Object;
}

void ZDetectedInPrivateSituation_SSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZDetectedInPrivateSituation_SSituationSaveData*>(p_Object);

}

ZHMTypeInfo SFSMSaveData::TypeInfo = ZHMTypeInfo("SFSMSaveData", sizeof(SFSMSaveData), alignof(SFSMSaveData), SFSMSaveData::WriteJson, SFSMSaveData::WriteSimpleJson, SFSMSaveData::FromSimpleJson, SFSMSaveData::Serialize);

void SFSMSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFSMSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eStateStatus") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EFSMStateStatus") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eStateStatus) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EFSMStateStatus", static_cast<int>(s_Object->m_eStateStatus))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_state;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_prevState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_prevState;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tCurrentStateEnterTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tCurrentStateEnterTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SFSMSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFSMSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eStateStatus") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EFSMStateStatus", static_cast<int>(s_Object->m_eStateStatus)));
	p_Stream << ",";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << s_Object->m_state;
	p_Stream << ",";

	p_Stream << JsonStr("m_prevState") << ":";
	p_Stream << s_Object->m_prevState;
	p_Stream << ",";

	p_Stream << JsonStr("m_tCurrentStateEnterTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tCurrentStateEnterTime, p_Stream);

	p_Stream << "}";
}

void SFSMSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFSMSaveData s_Object;

	s_Object.m_eStateStatus = static_cast<EFSMStateStatus>(ZHMEnums::GetEnumValueByName("EFSMStateStatus", std::string_view(p_Document["m_eStateStatus"])));

	s_Object.m_state = static_cast<int32>(int64_t(p_Document["m_state"]));

	s_Object.m_prevState = static_cast<int32>(int64_t(p_Document["m_prevState"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tCurrentStateEnterTime"], &s_Item);
		s_Object.m_tCurrentStateEnterTime = s_Item;
	}

	*reinterpret_cast<SFSMSaveData*>(p_Target) = s_Object;
}

void SFSMSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SFSMSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tCurrentStateEnterTime, p_Serializer, p_OwnOffset + offsetof(SFSMSaveData, m_tCurrentStateEnterTime));
}

ZHMTypeInfo SGetHelpGroupSaveData::TypeInfo = ZHMTypeInfo("SGetHelpGroupSaveData", sizeof(SGetHelpGroupSaveData), alignof(SGetHelpGroupSaveData), SGetHelpGroupSaveData::WriteJson, SGetHelpGroupSaveData::WriteSimpleJson, SGetHelpGroupSaveData::FromSimpleJson, SGetHelpGroupSaveData::Serialize);

void SGetHelpGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGetHelpGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vLastKnownTargetPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vLastKnownTargetPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rReturnNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rReturnNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_blocked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint16>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_blocked.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_blocked[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_blocked.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReportingToHitman") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReportingToHitman;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStartedReportDialog") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStartedReportDialog;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMultipleBodies") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMultipleBodies;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGetHelpOrderCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGetHelpOrderCompleted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDoneReporting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDoneReporting;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tGetHelpCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tGetHelpCompleted, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pReporter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pReporter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IllegalItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IllegalItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_additionalGuards") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_additionalGuards.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_additionalGuards[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_additionalGuards.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SGetHelpGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGetHelpGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vLastKnownTargetPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vLastKnownTargetPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rReturnNode") << ":";
	p_Stream << s_Object->m_rReturnNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_blocked") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_blocked.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_blocked[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_blocked.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReportingToHitman") << ":";
	p_Stream << s_Object->m_bReportingToHitman;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStartedReportDialog") << ":";
	p_Stream << s_Object->m_bStartedReportDialog;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMultipleBodies") << ":";
	p_Stream << s_Object->m_bMultipleBodies;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGetHelpOrderCompleted") << ":";
	p_Stream << s_Object->m_bGetHelpOrderCompleted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDoneReporting") << ":";
	p_Stream << s_Object->m_bDoneReporting;
	p_Stream << ",";

	p_Stream << JsonStr("m_tGetHelpCompleted") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tGetHelpCompleted, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type)));
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_pReporter") << ":";
	p_Stream << s_Object->m_pReporter;
	p_Stream << ",";

	p_Stream << JsonStr("m_pGuard") << ":";
	p_Stream << s_Object->m_pGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_IllegalItem") << ":";
	p_Stream << s_Object->m_IllegalItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_additionalGuards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_additionalGuards.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_additionalGuards[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_additionalGuards.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SGetHelpGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGetHelpGroupSaveData s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vLastKnownTargetPosition"], &s_Item);
		s_Object.m_vLastKnownTargetPosition = s_Item;
	}

	s_Object.m_rReturnNode = static_cast<uint16>(int64_t(p_Document["m_rReturnNode"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_blocked"])
	{
		s_Object.m_blocked.push_back(static_cast<uint16>(int64_t(s_Item0)));
	}

	s_Object.m_bReportingToHitman = bool(p_Document["m_bReportingToHitman"]);

	s_Object.m_bStartedReportDialog = bool(p_Document["m_bStartedReportDialog"]);

	s_Object.m_bMultipleBodies = bool(p_Document["m_bMultipleBodies"]);

	s_Object.m_bGetHelpOrderCompleted = bool(p_Document["m_bGetHelpOrderCompleted"]);

	s_Object.m_bDoneReporting = bool(p_Document["m_bDoneReporting"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tGetHelpCompleted"], &s_Item);
		s_Object.m_tGetHelpCompleted = s_Item;
	}

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_type = static_cast<EDisturbanceType>(ZHMEnums::GetEnumValueByName("EDisturbanceType", std::string_view(p_Document["m_type"])));

	s_Object.m_target = static_cast<uint32>(int64_t(p_Document["m_target"]));

	s_Object.m_pReporter = static_cast<uint32>(int64_t(p_Document["m_pReporter"]));

	s_Object.m_pGuard = static_cast<uint32>(int64_t(p_Document["m_pGuard"]));

	s_Object.m_IllegalItem = static_cast<uint32>(int64_t(p_Document["m_IllegalItem"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_additionalGuards"])
	{
		s_Object.m_additionalGuards.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SGetHelpGroupSaveData*>(p_Target) = s_Object;
}

void SGetHelpGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGetHelpGroupSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vLastKnownTargetPosition, p_Serializer, p_OwnOffset + offsetof(SGetHelpGroupSaveData, m_vLastKnownTargetPosition));
	TArray<uint16>::Serialize(&s_Object->m_blocked, p_Serializer, p_OwnOffset + offsetof(SGetHelpGroupSaveData, m_blocked));
	ZGameTime::Serialize(&s_Object->m_tGetHelpCompleted, p_Serializer, p_OwnOffset + offsetof(SGetHelpGroupSaveData, m_tGetHelpCompleted));
	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SGetHelpGroupSaveData, m_fsmState));
	TArray<uint32>::Serialize(&s_Object->m_additionalGuards, p_Serializer, p_OwnOffset + offsetof(SGetHelpGroupSaveData, m_additionalGuards));
}

ZHMTypeInfo SActorDynamicTemplateManipulatorSaveData::TypeInfo = ZHMTypeInfo("SActorDynamicTemplateManipulatorSaveData", sizeof(SActorDynamicTemplateManipulatorSaveData), alignof(SActorDynamicTemplateManipulatorSaveData), SActorDynamicTemplateManipulatorSaveData::WriteJson, SActorDynamicTemplateManipulatorSaveData::WriteSimpleJson, SActorDynamicTemplateManipulatorSaveData::FromSimpleJson, SActorDynamicTemplateManipulatorSaveData::Serialize);

void SActorDynamicTemplateManipulatorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorDynamicTemplateManipulatorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorDynamicTemplateManipulatorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorDynamicTemplateManipulatorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SActorDynamicTemplateManipulatorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorDynamicTemplateManipulatorSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SActorDynamicTemplateManipulatorSaveData*>(p_Target) = s_Object;
}

void SActorDynamicTemplateManipulatorSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorDynamicTemplateManipulatorSaveData*>(p_Object);

}

ZHMTypeInfo SCautiousVIPGroupState::TypeInfo = ZHMTypeInfo("SCautiousVIPGroupState", sizeof(SCautiousVIPGroupState), alignof(SCautiousVIPGroupState), SCautiousVIPGroupState::WriteJson, SCautiousVIPGroupState::WriteSimpleJson, SCautiousVIPGroupState::FromSimpleJson, SCautiousVIPGroupState::Serialize);

void SCautiousVIPGroupState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousVIPGroupState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tMove") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tMove, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousVIPGroupState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousVIPGroupState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tMove") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tMove, p_Stream);

	p_Stream << "}";
}

void SCautiousVIPGroupState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCautiousVIPGroupState s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tMove"], &s_Item);
		s_Object.m_tMove = s_Item;
	}

	*reinterpret_cast<SCautiousVIPGroupState*>(p_Target) = s_Object;
}

void SCautiousVIPGroupState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCautiousVIPGroupState*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tMove, p_Serializer, p_OwnOffset + offsetof(SCautiousVIPGroupState, m_tMove));
}

ZHMTypeInfo SActorKeywordProxySaveData::TypeInfo = ZHMTypeInfo("SActorKeywordProxySaveData", sizeof(SActorKeywordProxySaveData), alignof(SActorKeywordProxySaveData), SActorKeywordProxySaveData::WriteJson, SActorKeywordProxySaveData::WriteSimpleJson, SActorKeywordProxySaveData::FromSimpleJson, SActorKeywordProxySaveData::Serialize);

void SActorKeywordProxySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorKeywordProxySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorKeywordProxySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorKeywordProxySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SActorKeywordProxySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorKeywordProxySaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SActorKeywordProxySaveData*>(p_Target) = s_Object;
}

void SActorKeywordProxySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorKeywordProxySaveData*>(p_Object);

}

ZHMTypeInfo SHUDPromptDisplayInfoArray_Dummy::TypeInfo = ZHMTypeInfo("SHUDPromptDisplayInfoArray_Dummy", sizeof(SHUDPromptDisplayInfoArray_Dummy), alignof(SHUDPromptDisplayInfoArray_Dummy), SHUDPromptDisplayInfoArray_Dummy::WriteJson, SHUDPromptDisplayInfoArray_Dummy::WriteSimpleJson, SHUDPromptDisplayInfoArray_Dummy::FromSimpleJson, SHUDPromptDisplayInfoArray_Dummy::Serialize);

void SHUDPromptDisplayInfoArray_Dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHUDPromptDisplayInfoArray_Dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SHUDPromptDisplayInfo>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHUDPromptDisplayInfo") << "," << JsonStr("$val") << ":";
		SHUDPromptDisplayInfo::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SHUDPromptDisplayInfoArray_Dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHUDPromptDisplayInfoArray_Dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->dummy[i];
		SHUDPromptDisplayInfo::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SHUDPromptDisplayInfoArray_Dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHUDPromptDisplayInfoArray_Dummy s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["dummy"])
	{
		SHUDPromptDisplayInfo s_ArrayItem0;
		SHUDPromptDisplayInfo::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.dummy.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SHUDPromptDisplayInfoArray_Dummy*>(p_Target) = s_Object;
}

void SHUDPromptDisplayInfoArray_Dummy::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHUDPromptDisplayInfoArray_Dummy*>(p_Object);

	TArray<SHUDPromptDisplayInfo>::Serialize(&s_Object->dummy, p_Serializer, p_OwnOffset + offsetof(SHUDPromptDisplayInfoArray_Dummy, dummy));
}

ZHMTypeInfo SCombatSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SCombatSituationMemberSaveData", sizeof(SCombatSituationMemberSaveData), alignof(SCombatSituationMemberSaveData), SCombatSituationMemberSaveData::WriteJson, SCombatSituationMemberSaveData::WriteSimpleJson, SCombatSituationMemberSaveData::FromSimpleJson, SCombatSituationMemberSaveData::Serialize);

void SCombatSituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCombatSituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceFieldValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistanceFieldValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_civilianJoinReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_civilianJoinReason) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_civilianJoinReason))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPreferredToFire") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPreferredToFire;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDialogPreventShooting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDialogPreventShooting;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanFlee") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCanFlee;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCantFleeNoPath") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCantFleeNoPath;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReportedToGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReportedToGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandAndShoot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStandAndShoot;
	p_Stream << "}";

	p_Stream << "}";
}

void SCombatSituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCombatSituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceFieldValue") << ":";
	p_Stream << s_Object->m_fDistanceFieldValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_civilianJoinReason") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_civilianJoinReason)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPreferredToFire") << ":";
	p_Stream << s_Object->m_bIsPreferredToFire;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDialogPreventShooting") << ":";
	p_Stream << s_Object->m_bDialogPreventShooting;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanFlee") << ":";
	p_Stream << s_Object->m_bCanFlee;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCantFleeNoPath") << ":";
	p_Stream << s_Object->m_bCantFleeNoPath;
	p_Stream << ",";

	p_Stream << JsonStr("m_bReportedToGuard") << ":";
	p_Stream << s_Object->m_bReportedToGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandAndShoot") << ":";
	p_Stream << s_Object->m_bStandAndShoot;

	p_Stream << "}";
}

void SCombatSituationMemberSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCombatSituationMemberSaveData s_Object;

	s_Object.m_fDistanceToTarget = static_cast<float32>(double(p_Document["m_fDistanceToTarget"]));

	s_Object.m_fDistanceFieldValue = static_cast<float32>(double(p_Document["m_fDistanceFieldValue"]));

	s_Object.m_civilianJoinReason = static_cast<EDisturbanceType>(ZHMEnums::GetEnumValueByName("EDisturbanceType", std::string_view(p_Document["m_civilianJoinReason"])));

	s_Object.m_bIsPreferredToFire = bool(p_Document["m_bIsPreferredToFire"]);

	s_Object.m_bDialogPreventShooting = bool(p_Document["m_bDialogPreventShooting"]);

	s_Object.m_bCanFlee = bool(p_Document["m_bCanFlee"]);

	s_Object.m_bCantFleeNoPath = bool(p_Document["m_bCantFleeNoPath"]);

	s_Object.m_bReportedToGuard = bool(p_Document["m_bReportedToGuard"]);

	s_Object.m_bStandAndShoot = bool(p_Document["m_bStandAndShoot"]);

	*reinterpret_cast<SCombatSituationMemberSaveData*>(p_Target) = s_Object;
}

void SCombatSituationMemberSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCombatSituationMemberSaveData*>(p_Object);

}

ZHMTypeInfo SVariantStruct::TypeInfo = ZHMTypeInfo("SVariantStruct", sizeof(SVariantStruct), alignof(SVariantStruct), SVariantStruct::WriteJson, SVariantStruct::WriteSimpleJson, SVariantStruct::FromSimpleJson, SVariantStruct::Serialize);

void SVariantStruct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVariantStruct*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Data, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SVariantStruct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVariantStruct*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Data") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Data, p_Stream);

	p_Stream << "}";
}

void SVariantStruct::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVariantStruct s_Object;

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_Data"], &s_Item);
		s_Object.m_Data = s_Item;
	}

	*reinterpret_cast<SVariantStruct*>(p_Target) = s_Object;
}

void SVariantStruct::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVariantStruct*>(p_Object);

	ZVariant::Serialize(&s_Object->m_Data, p_Serializer, p_OwnOffset + offsetof(SVariantStruct, m_Data));
}

ZHMTypeInfo SBehaviorTreeEntityReference::TypeInfo = ZHMTypeInfo("SBehaviorTreeEntityReference", sizeof(SBehaviorTreeEntityReference), alignof(SBehaviorTreeEntityReference), SBehaviorTreeEntityReference::WriteJson, SBehaviorTreeEntityReference::WriteSimpleJson, SBehaviorTreeEntityReference::FromSimpleJson, SBehaviorTreeEntityReference::Serialize);

void SBehaviorTreeEntityReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEntityReference*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bList") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bList;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeEntityReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEntityReference*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bList") << ":";
	p_Stream << s_Object->m_bList;
	p_Stream << ",";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);

	p_Stream << "}";
}

void SBehaviorTreeEntityReference::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeEntityReference s_Object;

	s_Object.m_bList = bool(p_Document["m_bList"]);

	s_Object.m_sName = std::string_view(p_Document["m_sName"]);

	*reinterpret_cast<SBehaviorTreeEntityReference*>(p_Target) = s_Object;
}

void SBehaviorTreeEntityReference::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEntityReference*>(p_Object);

	ZString::Serialize(&s_Object->m_sName, p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeEntityReference, m_sName));
}

ZHMTypeInfo SBehaviorTreeInfo::TypeInfo = ZHMTypeInfo("SBehaviorTreeInfo", sizeof(SBehaviorTreeInfo), alignof(SBehaviorTreeInfo), SBehaviorTreeInfo::WriteJson, SBehaviorTreeInfo::WriteSimpleJson, SBehaviorTreeInfo::FromSimpleJson, SBehaviorTreeInfo::Serialize);

void SBehaviorTreeInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_references") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SBehaviorTreeEntityReference>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_references.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_references[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBehaviorTreeEntityReference") << "," << JsonStr("$val") << ":";
		SBehaviorTreeEntityReference::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_references.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_inputPinConditions") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SBehaviorTreeInputPinCondition>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_inputPinConditions.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_inputPinConditions[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBehaviorTreeInputPinCondition") << "," << JsonStr("$val") << ":";
		SBehaviorTreeInputPinCondition::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_inputPinConditions.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_references") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_references.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_references[i];
		SBehaviorTreeEntityReference::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_references.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_inputPinConditions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_inputPinConditions.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_inputPinConditions[i];
		SBehaviorTreeInputPinCondition::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_inputPinConditions.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SBehaviorTreeInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeInfo s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_references"])
	{
		SBehaviorTreeEntityReference s_ArrayItem0;
		SBehaviorTreeEntityReference::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_references.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_inputPinConditions"])
	{
		SBehaviorTreeInputPinCondition s_ArrayItem0;
		SBehaviorTreeInputPinCondition::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_inputPinConditions.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SBehaviorTreeInfo*>(p_Target) = s_Object;
}

void SBehaviorTreeInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeInfo*>(p_Object);

	TArray<SBehaviorTreeEntityReference>::Serialize(&s_Object->m_references, p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeInfo, m_references));
	TArray<SBehaviorTreeInputPinCondition>::Serialize(&s_Object->m_inputPinConditions, p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeInfo, m_inputPinConditions));
}

ZHMTypeInfo SShotListenerSaveData::TypeInfo = ZHMTypeInfo("SShotListenerSaveData", sizeof(SShotListenerSaveData), alignof(SShotListenerSaveData), SShotListenerSaveData::WriteJson, SShotListenerSaveData::WriteSimpleJson, SShotListenerSaveData::FromSimpleJson, SShotListenerSaveData::Serialize);

void SShotListenerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SShotListenerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNPCShotProcessed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNPCShotProcessed;
	p_Stream << "}";

	p_Stream << "}";
}

void SShotListenerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SShotListenerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNPCShotProcessed") << ":";
	p_Stream << s_Object->m_bNPCShotProcessed;

	p_Stream << "}";
}

void SShotListenerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SShotListenerSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_bNPCShotProcessed = bool(p_Document["m_bNPCShotProcessed"]);

	*reinterpret_cast<SShotListenerSaveData*>(p_Target) = s_Object;
}

void SShotListenerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SShotListenerSaveData*>(p_Object);

}

ZHMTypeInfo SKeywordSaveData::TypeInfo = ZHMTypeInfo("SKeywordSaveData", sizeof(SKeywordSaveData), alignof(SKeywordSaveData), SKeywordSaveData::WriteJson, SKeywordSaveData::WriteSimpleJson, SKeywordSaveData::FromSimpleJson, SKeywordSaveData::Serialize);

void SKeywordSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SKeywordSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_HolderSaveableId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_HolderSaveableId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_KeywordID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_KeywordID;
	p_Stream << "}";

	p_Stream << "}";
}

void SKeywordSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SKeywordSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_HolderSaveableId") << ":";
	p_Stream << s_Object->m_HolderSaveableId;
	p_Stream << ",";

	p_Stream << JsonStr("m_KeywordID") << ":";
	p_Stream << s_Object->m_KeywordID;

	p_Stream << "}";
}

void SKeywordSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SKeywordSaveData s_Object;

	s_Object.m_HolderSaveableId = static_cast<uint32>(int64_t(p_Document["m_HolderSaveableId"]));

	s_Object.m_KeywordID = static_cast<int32>(int64_t(p_Document["m_KeywordID"]));

	*reinterpret_cast<SKeywordSaveData*>(p_Target) = s_Object;
}

void SKeywordSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SKeywordSaveData*>(p_Object);

}

ZHMTypeInfo ZAT2Controller_SGeneratedFootstepEvent::TypeInfo = ZHMTypeInfo("ZAT2Controller.SGeneratedFootstepEvent", sizeof(ZAT2Controller_SGeneratedFootstepEvent), alignof(ZAT2Controller_SGeneratedFootstepEvent), ZAT2Controller_SGeneratedFootstepEvent::WriteJson, ZAT2Controller_SGeneratedFootstepEvent::WriteSimpleJson, ZAT2Controller_SGeneratedFootstepEvent::FromSimpleJson, ZAT2Controller_SGeneratedFootstepEvent::Serialize);

void ZAT2Controller_SGeneratedFootstepEvent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAT2Controller_SGeneratedFootstepEvent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eFoot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZAT2Controller.EFoot") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eFoot) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZAT2Controller.EFoot", static_cast<int>(s_Object->m_eFoot))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFrame") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFrame;
	p_Stream << "}";

	p_Stream << "}";
}

void ZAT2Controller_SGeneratedFootstepEvent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAT2Controller_SGeneratedFootstepEvent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eFoot") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZAT2Controller.EFoot", static_cast<int>(s_Object->m_eFoot)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fFrame") << ":";
	p_Stream << s_Object->m_fFrame;

	p_Stream << "}";
}

void ZAT2Controller_SGeneratedFootstepEvent::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZAT2Controller_SGeneratedFootstepEvent s_Object;

	s_Object.m_eFoot = static_cast<ZAT2Controller_EFoot>(ZHMEnums::GetEnumValueByName("ZAT2Controller.EFoot", std::string_view(p_Document["m_eFoot"])));

	s_Object.m_fFrame = static_cast<float32>(double(p_Document["m_fFrame"]));

	*reinterpret_cast<ZAT2Controller_SGeneratedFootstepEvent*>(p_Target) = s_Object;
}

void ZAT2Controller_SGeneratedFootstepEvent::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZAT2Controller_SGeneratedFootstepEvent*>(p_Object);

}

ZHMTypeInfo SProgressTimerEntitySaveData::TypeInfo = ZHMTypeInfo("SProgressTimerEntitySaveData", sizeof(SProgressTimerEntitySaveData), alignof(SProgressTimerEntitySaveData), SProgressTimerEntitySaveData::WriteJson, SProgressTimerEntitySaveData::WriteSimpleJson, SProgressTimerEntitySaveData::FromSimpleJson, SProgressTimerEntitySaveData::Serialize);

void SProgressTimerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SProgressTimerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValue;
	p_Stream << "}";

	p_Stream << "}";
}

void SProgressTimerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SProgressTimerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << s_Object->m_bValue;

	p_Stream << "}";
}

void SProgressTimerEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SProgressTimerEntitySaveData s_Object;

	s_Object.m_nInterval = static_cast<int32>(int64_t(p_Document["m_nInterval"]));

	s_Object.m_nRemaining = static_cast<int32>(int64_t(p_Document["m_nRemaining"]));

	s_Object.m_bValue = bool(p_Document["m_bValue"]);

	*reinterpret_cast<SProgressTimerEntitySaveData*>(p_Target) = s_Object;
}

void SProgressTimerEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SProgressTimerEntitySaveData*>(p_Object);

}

ZHMTypeInfo ZTrespassingSituation_SState::TypeInfo = ZHMTypeInfo("ZTrespassingSituation.SState", sizeof(ZTrespassingSituation_SState), alignof(ZTrespassingSituation_SState), ZTrespassingSituation_SState::WriteJson, ZTrespassingSituation_SState::WriteSimpleJson, ZTrespassingSituation_SState::FromSimpleJson, ZTrespassingSituation_SState::Serialize);

void ZTrespassingSituation_SState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZTrespassingSituation_SState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eSituationState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZTrespassingSituation.ESituationState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eSituationState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZTrespassingSituation.ESituationState", static_cast<int>(s_Object->m_eSituationState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tDeepTrespassingTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tDeepTrespassingTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tStartStandDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tStartStandDown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTargetVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastTargetVisible, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopWarningGiven") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStopWarningGiven;
	p_Stream << "}";

	p_Stream << "}";
}

void ZTrespassingSituation_SState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZTrespassingSituation_SState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eSituationState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZTrespassingSituation.ESituationState", static_cast<int>(s_Object->m_eSituationState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_tDeepTrespassingTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tDeepTrespassingTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tStartStandDown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tStartStandDown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTargetVisible") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastTargetVisible, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopWarningGiven") << ":";
	p_Stream << s_Object->m_bStopWarningGiven;

	p_Stream << "}";
}

void ZTrespassingSituation_SState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZTrespassingSituation_SState s_Object;

	s_Object.m_eSituationState = static_cast<ZTrespassingSituation_ESituationState>(ZHMEnums::GetEnumValueByName("ZTrespassingSituation.ESituationState", std::string_view(p_Document["m_eSituationState"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tDeepTrespassingTime"], &s_Item);
		s_Object.m_tDeepTrespassingTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tStartStandDown"], &s_Item);
		s_Object.m_tStartStandDown = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastTargetVisible"], &s_Item);
		s_Object.m_tLastTargetVisible = s_Item;
	}

	s_Object.m_bStopWarningGiven = bool(p_Document["m_bStopWarningGiven"]);

	*reinterpret_cast<ZTrespassingSituation_SState*>(p_Target) = s_Object;
}

void ZTrespassingSituation_SState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZTrespassingSituation_SState*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tDeepTrespassingTime, p_Serializer, p_OwnOffset + offsetof(ZTrespassingSituation_SState, m_tDeepTrespassingTime));
	ZGameTime::Serialize(&s_Object->m_tStartStandDown, p_Serializer, p_OwnOffset + offsetof(ZTrespassingSituation_SState, m_tStartStandDown));
	ZGameTime::Serialize(&s_Object->m_tLastTargetVisible, p_Serializer, p_OwnOffset + offsetof(ZTrespassingSituation_SState, m_tLastTargetVisible));
}

ZHMTypeInfo SMatrix33::TypeInfo = ZHMTypeInfo("SMatrix33", sizeof(SMatrix33), alignof(SMatrix33), SMatrix33::WriteJson, SMatrix33::WriteSimpleJson, SMatrix33::FromSimpleJson, SMatrix33::Serialize);

void SMatrix33::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix33*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("XAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->XAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->YAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->ZAxis, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix33::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix33*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("XAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->XAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->YAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->ZAxis, p_Stream);

	p_Stream << "}";
}

void SMatrix33::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMatrix33 s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["XAxis"], &s_Item);
		s_Object.XAxis = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["YAxis"], &s_Item);
		s_Object.YAxis = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["ZAxis"], &s_Item);
		s_Object.ZAxis = s_Item;
	}

	*reinterpret_cast<SMatrix33*>(p_Target) = s_Object;
}

void SMatrix33::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMatrix33*>(p_Object);

	SVector3::Serialize(&s_Object->XAxis, p_Serializer, p_OwnOffset + offsetof(SMatrix33, XAxis));
	SVector3::Serialize(&s_Object->YAxis, p_Serializer, p_OwnOffset + offsetof(SMatrix33, YAxis));
	SVector3::Serialize(&s_Object->ZAxis, p_Serializer, p_OwnOffset + offsetof(SMatrix33, ZAxis));
}

ZHMTypeInfo SCrowdBodySaveData::TypeInfo = ZHMTypeInfo("SCrowdBodySaveData", sizeof(SCrowdBodySaveData), alignof(SCrowdBodySaveData), SCrowdBodySaveData::WriteJson, SCrowdBodySaveData::WriteSimpleJson, SCrowdBodySaveData::FromSimpleJson, SCrowdBodySaveData::Serialize);

void SCrowdBodySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdBodySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pCorpseBodybagEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pCorpseBodybagEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCrowdEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCrowdEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iActorIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iActorIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rPerceptibleEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rPerceptibleEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aKnownBy") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKnownBy.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aKnownBy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aKnownBy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bManaged") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bManaged;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBagSharedKnowledge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBagSharedKnowledge;
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdBodySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdBodySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pCorpseBodybagEntity") << ":";
	p_Stream << s_Object->m_pCorpseBodybagEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCrowdEntity") << ":";
	p_Stream << s_Object->m_rCrowdEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_iActorIndex") << ":";
	p_Stream << s_Object->m_iActorIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_rPerceptibleEntity") << ":";
	p_Stream << s_Object->m_rPerceptibleEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_aKnownBy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKnownBy.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aKnownBy[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aKnownBy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bManaged") << ":";
	p_Stream << s_Object->m_bManaged;
	p_Stream << ",";

	p_Stream << JsonStr("m_rBagSharedKnowledge") << ":";
	p_Stream << s_Object->m_rBagSharedKnowledge;

	p_Stream << "}";
}

void SCrowdBodySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdBodySaveData s_Object;

	s_Object.m_pCorpseBodybagEntity = static_cast<uint32>(int64_t(p_Document["m_pCorpseBodybagEntity"]));

	s_Object.m_rCrowdEntity = static_cast<uint32>(int64_t(p_Document["m_rCrowdEntity"]));

	s_Object.m_iActorIndex = static_cast<uint16>(int64_t(p_Document["m_iActorIndex"]));

	s_Object.m_rPerceptibleEntity = static_cast<uint32>(int64_t(p_Document["m_rPerceptibleEntity"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aKnownBy"])
	{
		s_Object.m_aKnownBy.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tStart"], &s_Item);
		s_Object.m_tStart = s_Item;
	}

	s_Object.m_bManaged = bool(p_Document["m_bManaged"]);

	s_Object.m_rBagSharedKnowledge = static_cast<int32>(int64_t(p_Document["m_rBagSharedKnowledge"]));

	*reinterpret_cast<SCrowdBodySaveData*>(p_Target) = s_Object;
}

void SCrowdBodySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdBodySaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aKnownBy, p_Serializer, p_OwnOffset + offsetof(SCrowdBodySaveData, m_aKnownBy));
	ZGameTime::Serialize(&s_Object->m_tStart, p_Serializer, p_OwnOffset + offsetof(SCrowdBodySaveData, m_tStart));
}

ZHMTypeInfo SValueIntSaveData::TypeInfo = ZHMTypeInfo("SValueIntSaveData", sizeof(SValueIntSaveData), alignof(SValueIntSaveData), SValueIntSaveData::WriteJson, SValueIntSaveData::WriteSimpleJson, SValueIntSaveData::FromSimpleJson, SValueIntSaveData::Serialize);

void SValueIntSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SValueIntSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<int32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SValueIntSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SValueIntSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SValueIntSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SValueIntSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		s_Object.m_aData.push_back(static_cast<int32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SValueIntSaveData*>(p_Target) = s_Object;
}

void SValueIntSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SValueIntSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SValueIntSaveData, m_aEntities));
	TArray<int32>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SValueIntSaveData, m_aData));
}

ZHMTypeInfo SMovementLadderSaveData::TypeInfo = ZHMTypeInfo("SMovementLadderSaveData", sizeof(SMovementLadderSaveData), alignof(SMovementLadderSaveData), SMovementLadderSaveData::WriteJson, SMovementLadderSaveData::WriteSimpleJson, SMovementLadderSaveData::FromSimpleJson, SMovementLadderSaveData::Serialize);

void SMovementLadderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementLadderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rLadder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rLadder;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementLadderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementLadderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rLadder") << ":";
	p_Stream << s_Object->m_rLadder;

	p_Stream << "}";
}

void SMovementLadderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementLadderSaveData s_Object;

	s_Object.m_rLadder = static_cast<uint32>(int64_t(p_Document["m_rLadder"]));

	*reinterpret_cast<SMovementLadderSaveData*>(p_Target) = s_Object;
}

void SMovementLadderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMovementLadderSaveData*>(p_Object);

}

ZHMTypeInfo SAIModifierServiceActorSaveData::TypeInfo = ZHMTypeInfo("SAIModifierServiceActorSaveData", sizeof(SAIModifierServiceActorSaveData), alignof(SAIModifierServiceActorSaveData), SAIModifierServiceActorSaveData::WriteJson, SAIModifierServiceActorSaveData::WriteSimpleJson, SAIModifierServiceActorSaveData::FromSimpleJson, SAIModifierServiceActorSaveData::Serialize);

void SAIModifierServiceActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAIModifierServiceActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActorRef") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActorRef;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNeedsVolumeUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNeedsVolumeUpdate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNeedsKnowledgeUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNeedsKnowledgeUpdate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModVolume") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModVolume;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModRole") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModRole;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModOutfit;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModOverride") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModOverride;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModStatus") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_uiModStatus;
	p_Stream << "}";

	p_Stream << "}";
}

void SAIModifierServiceActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAIModifierServiceActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActorRef") << ":";
	p_Stream << s_Object->m_rActorRef;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNeedsVolumeUpdate") << ":";
	p_Stream << s_Object->m_bNeedsVolumeUpdate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNeedsKnowledgeUpdate") << ":";
	p_Stream << s_Object->m_bNeedsKnowledgeUpdate;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModVolume") << ":";
	p_Stream << s_Object->m_uiModVolume;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModBehavior") << ":";
	p_Stream << s_Object->m_uiModBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModRole") << ":";
	p_Stream << s_Object->m_uiModRole;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModItem") << ":";
	p_Stream << s_Object->m_uiModItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModSituation") << ":";
	p_Stream << s_Object->m_uiModSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModOutfit") << ":";
	p_Stream << s_Object->m_uiModOutfit;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModOverride") << ":";
	p_Stream << s_Object->m_uiModOverride;
	p_Stream << ",";

	p_Stream << JsonStr("m_uiModStatus") << ":";
	p_Stream << s_Object->m_uiModStatus;

	p_Stream << "}";
}

void SAIModifierServiceActorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAIModifierServiceActorSaveData s_Object;

	s_Object.m_rActorRef = static_cast<uint32>(int64_t(p_Document["m_rActorRef"]));

	s_Object.m_bNeedsVolumeUpdate = bool(p_Document["m_bNeedsVolumeUpdate"]);

	s_Object.m_bNeedsKnowledgeUpdate = bool(p_Document["m_bNeedsKnowledgeUpdate"]);

	s_Object.m_uiModVolume = static_cast<uint32>(int64_t(p_Document["m_uiModVolume"]));

	s_Object.m_uiModBehavior = static_cast<uint32>(int64_t(p_Document["m_uiModBehavior"]));

	s_Object.m_uiModRole = static_cast<uint32>(int64_t(p_Document["m_uiModRole"]));

	s_Object.m_uiModItem = static_cast<uint32>(int64_t(p_Document["m_uiModItem"]));

	s_Object.m_uiModSituation = static_cast<uint32>(int64_t(p_Document["m_uiModSituation"]));

	s_Object.m_uiModOutfit = static_cast<uint32>(int64_t(p_Document["m_uiModOutfit"]));

	s_Object.m_uiModOverride = static_cast<uint32>(int64_t(p_Document["m_uiModOverride"]));

	s_Object.m_uiModStatus = static_cast<uint32>(int64_t(p_Document["m_uiModStatus"]));

	*reinterpret_cast<SAIModifierServiceActorSaveData*>(p_Target) = s_Object;
}

void SAIModifierServiceActorSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAIModifierServiceActorSaveData*>(p_Object);

}

ZHMTypeInfo SAIModifierServiceSaveData::TypeInfo = ZHMTypeInfo("SAIModifierServiceSaveData", sizeof(SAIModifierServiceSaveData), alignof(SAIModifierServiceSaveData), SAIModifierServiceSaveData::WriteJson, SAIModifierServiceSaveData::WriteSimpleJson, SAIModifierServiceSaveData::FromSimpleJson, SAIModifierServiceSaveData::Serialize);

void SAIModifierServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAIModifierServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bFullVolumeUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFullVolumeUpdate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SAIModifierServiceActorSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAIModifierServiceActorSaveData") << "," << JsonStr("$val") << ":";
		SAIModifierServiceActorSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SAIModifierServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAIModifierServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bFullVolumeUpdate") << ":";
	p_Stream << s_Object->m_bFullVolumeUpdate;
	p_Stream << ",";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aActors[i];
		SAIModifierServiceActorSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SAIModifierServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAIModifierServiceSaveData s_Object;

	s_Object.m_bFullVolumeUpdate = bool(p_Document["m_bFullVolumeUpdate"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aActors"])
	{
		SAIModifierServiceActorSaveData s_ArrayItem0;
		SAIModifierServiceActorSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aActors.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SAIModifierServiceSaveData*>(p_Target) = s_Object;
}

void SAIModifierServiceSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAIModifierServiceSaveData*>(p_Object);

	TArray<SAIModifierServiceActorSaveData>::Serialize(&s_Object->m_aActors, p_Serializer, p_OwnOffset + offsetof(SAIModifierServiceSaveData, m_aActors));
}

ZHMTypeInfo ISoundGateController::TypeInfo = ZHMTypeInfo("ISoundGateController", sizeof(ISoundGateController), alignof(ISoundGateController), ISoundGateController::WriteJson, ISoundGateController::WriteSimpleJson, ISoundGateController::FromSimpleJson, ISoundGateController::Serialize);

void ISoundGateController::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISoundGateController*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundGateController::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISoundGateController*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ISoundGateController::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ISoundGateController s_Object;

	*reinterpret_cast<ISoundGateController*>(p_Target) = s_Object;
}

void ISoundGateController::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ISoundGateController*>(p_Object);

}

ZHMTypeInfo ZDialogEventItemTypedIndex::TypeInfo = ZHMTypeInfo("ZDialogEventItemTypedIndex", sizeof(ZDialogEventItemTypedIndex), alignof(ZDialogEventItemTypedIndex), ZDialogEventItemTypedIndex::WriteJson, ZDialogEventItemTypedIndex::WriteSimpleJson, ZDialogEventItemTypedIndex::FromSimpleJson, ZDialogEventItemTypedIndex::Serialize);

void ZDialogEventItemTypedIndex::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDialogEventItemTypedIndex*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZDialogEventItemTypedIndex::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDialogEventItemTypedIndex*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZDialogEventItemTypedIndex::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZDialogEventItemTypedIndex s_Object;

	*reinterpret_cast<ZDialogEventItemTypedIndex*>(p_Target) = s_Object;
}

void ZDialogEventItemTypedIndex::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZDialogEventItemTypedIndex*>(p_Object);

}

ZHMTypeInfo SIntelSaveData::TypeInfo = ZHMTypeInfo("SIntelSaveData", sizeof(SIntelSaveData), alignof(SIntelSaveData), SIntelSaveData::WriteJson, SIntelSaveData::WriteSimpleJson, SIntelSaveData::FromSimpleJson, SIntelSaveData::Serialize);

void SIntelSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCurrentStage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentStage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHandlerAudioPlayPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHandlerAudioPlayPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTracked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTracked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUnlocked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUnlocked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegistered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRegistered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsLastTriggered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsLastTriggered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsHandlerAudioPlaying") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsHandlerAudioPlaying;
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCurrentStage") << ":";
	p_Stream << s_Object->m_rCurrentStage;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHandlerAudioPlayPosition") << ":";
	p_Stream << s_Object->m_fHandlerAudioPlayPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTracked") << ":";
	p_Stream << s_Object->m_bTracked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUnlocked") << ":";
	p_Stream << s_Object->m_bUnlocked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegistered") << ":";
	p_Stream << s_Object->m_bRegistered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsLastTriggered") << ":";
	p_Stream << s_Object->m_bIsLastTriggered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsHandlerAudioPlaying") << ":";
	p_Stream << s_Object->m_bIsHandlerAudioPlaying;

	p_Stream << "}";
}

void SIntelSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelSaveData s_Object;

	s_Object.m_rCurrentStage = static_cast<uint32>(int64_t(p_Document["m_rCurrentStage"]));

	s_Object.m_fHandlerAudioPlayPosition = static_cast<float32>(double(p_Document["m_fHandlerAudioPlayPosition"]));

	s_Object.m_bTracked = bool(p_Document["m_bTracked"]);

	s_Object.m_bUnlocked = bool(p_Document["m_bUnlocked"]);

	s_Object.m_bRegistered = bool(p_Document["m_bRegistered"]);

	s_Object.m_bIsLastTriggered = bool(p_Document["m_bIsLastTriggered"]);

	s_Object.m_bIsHandlerAudioPlaying = bool(p_Document["m_bIsHandlerAudioPlaying"]);

	*reinterpret_cast<SIntelSaveData*>(p_Target) = s_Object;
}

void SIntelSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SIntelSaveData*>(p_Object);

}

ZHMTypeInfo SActivityObjective::TypeInfo = ZHMTypeInfo("SActivityObjective", sizeof(SActivityObjective), alignof(SActivityObjective), SActivityObjective::WriteJson, SActivityObjective::WriteSimpleJson, SActivityObjective::FromSimpleJson, SActivityObjective::Serialize);

void SActivityObjective::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActivityObjective*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("activity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivity") << "," << JsonStr("$val") << ":";
	SActivity::WriteJson(&s_Object->activity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("opportunities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActivity>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->opportunities.size(); ++i)
	{
		auto& s_Item0 = s_Object->opportunities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivity") << "," << JsonStr("$val") << ":";
		SActivity::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->opportunities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActivityObjective::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActivityObjective*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("activity") << ":";
	SActivity::WriteSimpleJson(&s_Object->activity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("opportunities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->opportunities.size(); ++i)
	{
		auto& s_Item0 = s_Object->opportunities[i];
		SActivity::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->opportunities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActivityObjective::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActivityObjective s_Object;

	{
		SActivity s_Item;
		SActivity::FromSimpleJson(p_Document["activity"], &s_Item);
		s_Object.activity = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["opportunities"])
	{
		SActivity s_ArrayItem0;
		SActivity::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.opportunities.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SActivityObjective*>(p_Target) = s_Object;
}

void SActivityObjective::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActivityObjective*>(p_Object);

	SActivity::Serialize(&s_Object->activity, p_Serializer, p_OwnOffset + offsetof(SActivityObjective, activity));
	TArray<SActivity>::Serialize(&s_Object->opportunities, p_Serializer, p_OwnOffset + offsetof(SActivityObjective, opportunities));
}

ZHMTypeInfo SActivityDefinition::TypeInfo = ZHMTypeInfo("SActivityDefinition", sizeof(SActivityDefinition), alignof(SActivityDefinition), SActivityDefinition::WriteJson, SActivityDefinition::WriteSimpleJson, SActivityDefinition::FromSimpleJson, SActivityDefinition::Serialize);

void SActivityDefinition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActivityDefinition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("activity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivity") << "," << JsonStr("$val") << ":";
	SActivity::WriteJson(&s_Object->activity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("objectives") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActivityObjective>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->objectives.size(); ++i)
	{
		auto& s_Item0 = s_Object->objectives[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivityObjective") << "," << JsonStr("$val") << ":";
		SActivityObjective::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->objectives.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("exits") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivityExits") << "," << JsonStr("$val") << ":";
	SActivityExits::WriteJson(&s_Object->exits, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SActivityDefinition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActivityDefinition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("activity") << ":";
	SActivity::WriteSimpleJson(&s_Object->activity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("objectives") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->objectives.size(); ++i)
	{
		auto& s_Item0 = s_Object->objectives[i];
		SActivityObjective::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->objectives.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exits") << ":";
	SActivityExits::WriteSimpleJson(&s_Object->exits, p_Stream);

	p_Stream << "}";
}

void SActivityDefinition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActivityDefinition s_Object;

	{
		SActivity s_Item;
		SActivity::FromSimpleJson(p_Document["activity"], &s_Item);
		s_Object.activity = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["objectives"])
	{
		SActivityObjective s_ArrayItem0;
		SActivityObjective::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.objectives.push_back(s_ArrayItem0);
	}

	{
		SActivityExits s_Item;
		SActivityExits::FromSimpleJson(p_Document["exits"], &s_Item);
		s_Object.exits = s_Item;
	}

	*reinterpret_cast<SActivityDefinition*>(p_Target) = s_Object;
}

void SActivityDefinition::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActivityDefinition*>(p_Object);

	SActivity::Serialize(&s_Object->activity, p_Serializer, p_OwnOffset + offsetof(SActivityDefinition, activity));
	TArray<SActivityObjective>::Serialize(&s_Object->objectives, p_Serializer, p_OwnOffset + offsetof(SActivityDefinition, objectives));
	SActivityExits::Serialize(&s_Object->exits, p_Serializer, p_OwnOffset + offsetof(SActivityDefinition, exits));
}

ZHMTypeInfo SActivities::TypeInfo = ZHMTypeInfo("SActivities", sizeof(SActivities), alignof(SActivities), SActivities::WriteJson, SActivities::WriteSimpleJson, SActivities::FromSimpleJson, SActivities::Serialize);

void SActivities::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActivities*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Activities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActivityDefinition>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Activities.size(); ++i)
	{
		auto& s_Item0 = s_Object->Activities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActivityDefinition") << "," << JsonStr("$val") << ":";
		SActivityDefinition::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->Activities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActivities::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActivities*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Activities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Activities.size(); ++i)
	{
		auto& s_Item0 = s_Object->Activities[i];
		SActivityDefinition::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->Activities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActivities::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActivities s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["Activities"])
	{
		SActivityDefinition s_ArrayItem0;
		SActivityDefinition::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.Activities.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SActivities*>(p_Target) = s_Object;
}

void SActivities::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActivities*>(p_Object);

	TArray<SActivityDefinition>::Serialize(&s_Object->Activities, p_Serializer, p_OwnOffset + offsetof(SActivities, Activities));
}

ZHMTypeInfo SEntityTemplateReference::TypeInfo = ZHMTypeInfo("SEntityTemplateReference", sizeof(SEntityTemplateReference), alignof(SEntityTemplateReference), SEntityTemplateReference::WriteJson, SEntityTemplateReference::WriteSimpleJson, SEntityTemplateReference::FromSimpleJson, SEntityTemplateReference::Serialize);

void SEntityTemplateReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateReference*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->externalSceneIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->exposedEntity);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplateReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateReference*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entityID") << ":";
	p_Stream << s_Object->entityID;
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneIndex") << ":";
	p_Stream << s_Object->externalSceneIndex;
	p_Stream << ",";

	p_Stream << JsonStr("entityIndex") << ":";
	p_Stream << s_Object->entityIndex;
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntity") << ":";
	p_Stream << JsonStr(s_Object->exposedEntity);

	p_Stream << "}";
}

void SEntityTemplateReference::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplateReference s_Object;

	s_Object.entityID = uint64(p_Document["entityID"]);

	s_Object.externalSceneIndex = static_cast<int32>(int64_t(p_Document["externalSceneIndex"]));

	s_Object.entityIndex = static_cast<int32>(int64_t(p_Document["entityIndex"]));

	s_Object.exposedEntity = std::string_view(p_Document["exposedEntity"]);

	*reinterpret_cast<SEntityTemplateReference*>(p_Target) = s_Object;
}

void SEntityTemplateReference::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateReference*>(p_Object);

	ZString::Serialize(&s_Object->exposedEntity, p_Serializer, p_OwnOffset + offsetof(SEntityTemplateReference, exposedEntity));
}

ZHMTypeInfo SEntityTemplateProperty::TypeInfo = ZHMTypeInfo("SEntityTemplateProperty", sizeof(SEntityTemplateProperty), alignof(SEntityTemplateProperty), SEntityTemplateProperty::WriteJson, SEntityTemplateProperty::WriteSimpleJson, SEntityTemplateProperty::FromSimpleJson, SEntityTemplateProperty::Serialize);

void SEntityTemplateProperty::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateProperty*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nPropertyID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nPropertyID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("value") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->value, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplateProperty::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateProperty*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nPropertyID") << ":";
	{
		auto s_PropertyName = ZHMProperties::PropertyToString(s_Object->nPropertyID);

		if (s_PropertyName.size() == 0)
			p_Stream << s_Object->nPropertyID;
		else
			p_Stream << JsonStr(s_PropertyName);
	}
	p_Stream << ",";

	p_Stream << JsonStr("value") << ":";
	ZVariant::WriteSimpleJson(&s_Object->value, p_Stream);

	p_Stream << "}";
}

void SEntityTemplateProperty::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplateProperty s_Object;

	if (p_Document["nPropertyID"].type() == simdjson::ondemand::json_type::string)
		s_Object.nPropertyID = Hash::Crc32(std::string_view(p_Document["nPropertyID"]));
	else
		s_Object.nPropertyID = static_cast<uint32>(int64_t(p_Document["nPropertyID"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["value"], &s_Item);
		s_Object.value = s_Item;
	}

	*reinterpret_cast<SEntityTemplateProperty*>(p_Target) = s_Object;
}

void SEntityTemplateProperty::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateProperty*>(p_Object);

	ZVariant::Serialize(&s_Object->value, p_Serializer, p_OwnOffset + offsetof(SEntityTemplateProperty, value));
}

ZHMTypeInfo SEntityTemplatePlatformSpecificProperty::TypeInfo = ZHMTypeInfo("SEntityTemplatePlatformSpecificProperty", sizeof(SEntityTemplatePlatformSpecificProperty), alignof(SEntityTemplatePlatformSpecificProperty), SEntityTemplatePlatformSpecificProperty::WriteJson, SEntityTemplatePlatformSpecificProperty::WriteSimpleJson, SEntityTemplatePlatformSpecificProperty::FromSimpleJson, SEntityTemplatePlatformSpecificProperty::Serialize);

void SEntityTemplatePlatformSpecificProperty::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePlatformSpecificProperty*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("propertyValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
	SEntityTemplateProperty::WriteJson(&s_Object->propertyValue, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("platform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EVirtualPlatformID") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->platform) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EVirtualPlatformID", static_cast<int>(s_Object->platform))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("postInit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->postInit;
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePlatformSpecificProperty::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePlatformSpecificProperty*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("propertyValue") << ":";
	SEntityTemplateProperty::WriteSimpleJson(&s_Object->propertyValue, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("platform") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EVirtualPlatformID", static_cast<int>(s_Object->platform)));
	p_Stream << ",";

	p_Stream << JsonStr("postInit") << ":";
	p_Stream << s_Object->postInit;

	p_Stream << "}";
}

void SEntityTemplatePlatformSpecificProperty::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplatePlatformSpecificProperty s_Object;

	{
		SEntityTemplateProperty s_Item;
		SEntityTemplateProperty::FromSimpleJson(p_Document["propertyValue"], &s_Item);
		s_Object.propertyValue = s_Item;
	}

	s_Object.platform = static_cast<EVirtualPlatformID>(ZHMEnums::GetEnumValueByName("EVirtualPlatformID", std::string_view(p_Document["platform"])));

	s_Object.postInit = bool(p_Document["postInit"]);

	*reinterpret_cast<SEntityTemplatePlatformSpecificProperty*>(p_Target) = s_Object;
}

void SEntityTemplatePlatformSpecificProperty::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePlatformSpecificProperty*>(p_Object);

	SEntityTemplateProperty::Serialize(&s_Object->propertyValue, p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePlatformSpecificProperty, propertyValue));
}

ZHMTypeInfo STemplateFactorySubEntity::TypeInfo = ZHMTypeInfo("STemplateFactorySubEntity", sizeof(STemplateFactorySubEntity), alignof(STemplateFactorySubEntity), STemplateFactorySubEntity::WriteJson, STemplateFactorySubEntity::WriteSimpleJson, STemplateFactorySubEntity::FromSimpleJson, STemplateFactorySubEntity::Serialize);

void STemplateFactorySubEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateFactorySubEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("logicalParent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->logicalParent, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityTypeResourceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityTypeResourceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyValues") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityTemplateProperty>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->propertyValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
		SEntityTemplateProperty::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->propertyValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("postInitPropertyValues") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityTemplateProperty>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->postInitPropertyValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->postInitPropertyValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
		SEntityTemplateProperty::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->postInitPropertyValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("platformSpecificPropertyValues") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityTemplatePlatformSpecificProperty>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->platformSpecificPropertyValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->platformSpecificPropertyValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePlatformSpecificProperty") << "," << JsonStr("$val") << ":";
		SEntityTemplatePlatformSpecificProperty::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->platformSpecificPropertyValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STemplateFactorySubEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateFactorySubEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("logicalParent") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->logicalParent, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("entityTypeResourceIndex") << ":";
	p_Stream << s_Object->entityTypeResourceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("propertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->propertyValues[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->propertyValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("postInitPropertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->postInitPropertyValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->postInitPropertyValues[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->postInitPropertyValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("platformSpecificPropertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->platformSpecificPropertyValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->platformSpecificPropertyValues[i];
		SEntityTemplatePlatformSpecificProperty::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->platformSpecificPropertyValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STemplateFactorySubEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STemplateFactorySubEntity s_Object;

	{
		SEntityTemplateReference s_Item;
		SEntityTemplateReference::FromSimpleJson(p_Document["logicalParent"], &s_Item);
		s_Object.logicalParent = s_Item;
	}

	s_Object.entityTypeResourceIndex = static_cast<int32>(int64_t(p_Document["entityTypeResourceIndex"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["propertyValues"])
	{
		SEntityTemplateProperty s_ArrayItem0;
		SEntityTemplateProperty::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.propertyValues.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["postInitPropertyValues"])
	{
		SEntityTemplateProperty s_ArrayItem0;
		SEntityTemplateProperty::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.postInitPropertyValues.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["platformSpecificPropertyValues"])
	{
		SEntityTemplatePlatformSpecificProperty s_ArrayItem0;
		SEntityTemplatePlatformSpecificProperty::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.platformSpecificPropertyValues.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<STemplateFactorySubEntity*>(p_Target) = s_Object;
}

void STemplateFactorySubEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STemplateFactorySubEntity*>(p_Object);

	SEntityTemplateReference::Serialize(&s_Object->logicalParent, p_Serializer, p_OwnOffset + offsetof(STemplateFactorySubEntity, logicalParent));
	TArray<SEntityTemplateProperty>::Serialize(&s_Object->propertyValues, p_Serializer, p_OwnOffset + offsetof(STemplateFactorySubEntity, propertyValues));
	TArray<SEntityTemplateProperty>::Serialize(&s_Object->postInitPropertyValues, p_Serializer, p_OwnOffset + offsetof(STemplateFactorySubEntity, postInitPropertyValues));
	TArray<SEntityTemplatePlatformSpecificProperty>::Serialize(&s_Object->platformSpecificPropertyValues, p_Serializer, p_OwnOffset + offsetof(STemplateFactorySubEntity, platformSpecificPropertyValues));
}

ZHMTypeInfo SEntityTemplatePropertyOverride::TypeInfo = ZHMTypeInfo("SEntityTemplatePropertyOverride", sizeof(SEntityTemplatePropertyOverride), alignof(SEntityTemplatePropertyOverride), SEntityTemplatePropertyOverride::WriteJson, SEntityTemplatePropertyOverride::WriteSimpleJson, SEntityTemplatePropertyOverride::FromSimpleJson, SEntityTemplatePropertyOverride::Serialize);

void SEntityTemplatePropertyOverride::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePropertyOverride*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("propertyOwner") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->propertyOwner, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
	SEntityTemplateProperty::WriteJson(&s_Object->propertyValue, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePropertyOverride::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePropertyOverride*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("propertyOwner") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->propertyOwner, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("propertyValue") << ":";
	SEntityTemplateProperty::WriteSimpleJson(&s_Object->propertyValue, p_Stream);

	p_Stream << "}";
}

void SEntityTemplatePropertyOverride::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplatePropertyOverride s_Object;

	{
		SEntityTemplateReference s_Item;
		SEntityTemplateReference::FromSimpleJson(p_Document["propertyOwner"], &s_Item);
		s_Object.propertyOwner = s_Item;
	}

	{
		SEntityTemplateProperty s_Item;
		SEntityTemplateProperty::FromSimpleJson(p_Document["propertyValue"], &s_Item);
		s_Object.propertyValue = s_Item;
	}

	*reinterpret_cast<SEntityTemplatePropertyOverride*>(p_Target) = s_Object;
}

void SEntityTemplatePropertyOverride::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePropertyOverride*>(p_Object);

	SEntityTemplateReference::Serialize(&s_Object->propertyOwner, p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePropertyOverride, propertyOwner));
	SEntityTemplateProperty::Serialize(&s_Object->propertyValue, p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePropertyOverride, propertyValue));
}

ZHMTypeInfo STemplateEntityFactory::TypeInfo = ZHMTypeInfo("STemplateEntityFactory", sizeof(STemplateEntityFactory), alignof(STemplateEntityFactory), STemplateEntityFactory::WriteJson, STemplateEntityFactory::WriteSimpleJson, STemplateEntityFactory::FromSimpleJson, STemplateEntityFactory::Serialize);

void STemplateEntityFactory::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateEntityFactory*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("subType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->subType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("blueprintIndexInResourceHeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->blueprintIndexInResourceHeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rootEntityIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rootEntityIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("subEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<STemplateFactorySubEntity>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->subEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STemplateFactorySubEntity") << "," << JsonStr("$val") << ":";
		STemplateFactorySubEntity::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->subEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyOverrides") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityTemplatePropertyOverride>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyOverrides.size(); ++i)
	{
		auto& s_Item0 = s_Object->propertyOverrides[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePropertyOverride") << "," << JsonStr("$val") << ":";
		SEntityTemplatePropertyOverride::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->propertyOverrides.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneTypeIndicesInResourceHeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<int32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->externalSceneTypeIndicesInResourceHeader.size(); ++i)
	{
		auto& s_Item0 = s_Object->externalSceneTypeIndicesInResourceHeader[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->externalSceneTypeIndicesInResourceHeader.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STemplateEntityFactory::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateEntityFactory*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("subType") << ":";
	p_Stream << s_Object->subType;
	p_Stream << ",";

	p_Stream << JsonStr("blueprintIndexInResourceHeader") << ":";
	p_Stream << s_Object->blueprintIndexInResourceHeader;
	p_Stream << ",";

	p_Stream << JsonStr("rootEntityIndex") << ":";
	p_Stream << s_Object->rootEntityIndex;
	p_Stream << ",";

	p_Stream << JsonStr("subEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->subEntities[i];
		STemplateFactorySubEntity::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->subEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("propertyOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyOverrides.size(); ++i)
	{
		auto& s_Item0 = s_Object->propertyOverrides[i];
		SEntityTemplatePropertyOverride::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->propertyOverrides.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneTypeIndicesInResourceHeader") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->externalSceneTypeIndicesInResourceHeader.size(); ++i)
	{
		auto& s_Item0 = s_Object->externalSceneTypeIndicesInResourceHeader[i];
		p_Stream << s_Item0;

		if (i < s_Object->externalSceneTypeIndicesInResourceHeader.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STemplateEntityFactory::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STemplateEntityFactory s_Object;

	s_Object.subType = static_cast<int32>(int64_t(p_Document["subType"]));

	s_Object.blueprintIndexInResourceHeader = static_cast<int32>(int64_t(p_Document["blueprintIndexInResourceHeader"]));

	s_Object.rootEntityIndex = static_cast<int32>(int64_t(p_Document["rootEntityIndex"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["subEntities"])
	{
		STemplateFactorySubEntity s_ArrayItem0;
		STemplateFactorySubEntity::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.subEntities.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["propertyOverrides"])
	{
		SEntityTemplatePropertyOverride s_ArrayItem0;
		SEntityTemplatePropertyOverride::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.propertyOverrides.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["externalSceneTypeIndicesInResourceHeader"])
	{
		s_Object.externalSceneTypeIndicesInResourceHeader.push_back(static_cast<int32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<STemplateEntityFactory*>(p_Target) = s_Object;
}

void STemplateEntityFactory::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STemplateEntityFactory*>(p_Object);

	TArray<STemplateFactorySubEntity>::Serialize(&s_Object->subEntities, p_Serializer, p_OwnOffset + offsetof(STemplateEntityFactory, subEntities));
	TArray<SEntityTemplatePropertyOverride>::Serialize(&s_Object->propertyOverrides, p_Serializer, p_OwnOffset + offsetof(STemplateEntityFactory, propertyOverrides));
	TArray<int32>::Serialize(&s_Object->externalSceneTypeIndicesInResourceHeader, p_Serializer, p_OwnOffset + offsetof(STemplateEntityFactory, externalSceneTypeIndicesInResourceHeader));
}

ZHMTypeInfo SColorRGB::TypeInfo = ZHMTypeInfo("SColorRGB", sizeof(SColorRGB), alignof(SColorRGB), SColorRGB::WriteJson, SColorRGB::WriteSimpleJson, SColorRGB::FromSimpleJson, SColorRGB::Serialize);

void SColorRGB::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SColorRGB*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("r") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->r;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("g") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->g;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->b;
	p_Stream << "}";

	p_Stream << "}";
}

void SColorRGB::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SColorRGB*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("r") << ":";
	p_Stream << s_Object->r;
	p_Stream << ",";

	p_Stream << JsonStr("g") << ":";
	p_Stream << s_Object->g;
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << s_Object->b;

	p_Stream << "}";
}

void SColorRGB::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SColorRGB s_Object;

	s_Object.r = static_cast<float32>(double(p_Document["r"]));

	s_Object.g = static_cast<float32>(double(p_Document["g"]));

	s_Object.b = static_cast<float32>(double(p_Document["b"]));

	*reinterpret_cast<SColorRGB*>(p_Target) = s_Object;
}

void SColorRGB::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SColorRGB*>(p_Object);

}

ZHMTypeInfo SLightSaveData::TypeInfo = ZHMTypeInfo("SLightSaveData", sizeof(SLightSaveData), alignof(SLightSaveData), SLightSaveData::WriteJson, SLightSaveData::WriteSimpleJson, SLightSaveData::FromSimpleJson, SLightSaveData::Serialize);

void SLightSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLightSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DiffuseColor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_DiffuseColor, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDiffusePower") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDiffusePower;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAspectXByY_Actual") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAspectXByY_Actual;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SLightSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLightSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_DiffuseColor") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_DiffuseColor, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fDiffusePower") << ":";
	p_Stream << s_Object->m_fDiffusePower;
	p_Stream << ",";

	p_Stream << JsonStr("m_fAspectXByY_Actual") << ":";
	p_Stream << s_Object->m_fAspectXByY_Actual;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;

	p_Stream << "}";
}

void SLightSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLightSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	{
		SColorRGB s_Item;
		SColorRGB::FromSimpleJson(p_Document["m_DiffuseColor"], &s_Item);
		s_Object.m_DiffuseColor = s_Item;
	}

	s_Object.m_fDiffusePower = static_cast<float32>(double(p_Document["m_fDiffusePower"]));

	s_Object.m_fAspectXByY_Actual = static_cast<float32>(double(p_Document["m_fAspectXByY_Actual"]));

	s_Object.m_bVisible = bool(p_Document["m_bVisible"]);

	*reinterpret_cast<SLightSaveData*>(p_Target) = s_Object;
}

void SLightSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLightSaveData*>(p_Object);

	SColorRGB::Serialize(&s_Object->m_DiffuseColor, p_Serializer, p_OwnOffset + offsetof(SLightSaveData, m_DiffuseColor));
}

ZHMTypeInfo SItemActionSaveData::TypeInfo = ZHMTypeInfo("SItemActionSaveData", sizeof(SItemActionSaveData), alignof(SItemActionSaveData), SItemActionSaveData::WriteJson, SItemActionSaveData::WriteSimpleJson, SItemActionSaveData::FromSimpleJson, SItemActionSaveData::Serialize);

void SItemActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

void SItemActionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemActionSaveData s_Object;

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	*reinterpret_cast<SItemActionSaveData*>(p_Target) = s_Object;
}

void SItemActionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItemActionSaveData*>(p_Object);

}

ZHMTypeInfo SDramaActorSaveState::TypeInfo = ZHMTypeInfo("SDramaActorSaveState", sizeof(SDramaActorSaveState), alignof(SDramaActorSaveState), SDramaActorSaveState::WriteJson, SDramaActorSaveState::WriteSimpleJson, SDramaActorSaveState::FromSimpleJson, SDramaActorSaveState::Serialize);

void SDramaActorSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaActorSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSequence") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSequence;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sMatchName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sMatchName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tActorSpeakEnd") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tActorSpeakEnd, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsDone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsSpeaking") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsSpeaking;
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaActorSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaActorSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSequence") << ":";
	p_Stream << s_Object->m_rSequence;
	p_Stream << ",";

	p_Stream << JsonStr("m_rBehavior") << ":";
	p_Stream << s_Object->m_rBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << ",";

	p_Stream << JsonStr("m_sMatchName") << ":";
	p_Stream << JsonStr(s_Object->m_sMatchName);
	p_Stream << ",";

	p_Stream << JsonStr("m_tActorSpeakEnd") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tActorSpeakEnd, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDone") << ":";
	p_Stream << s_Object->m_bIsDone;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPaused") << ":";
	p_Stream << s_Object->m_bIsPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsSpeaking") << ":";
	p_Stream << s_Object->m_bIsSpeaking;

	p_Stream << "}";
}

void SDramaActorSaveState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDramaActorSaveState s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_rSequence = static_cast<uint32>(int64_t(p_Document["m_rSequence"]));

	s_Object.m_rBehavior = static_cast<uint32>(int64_t(p_Document["m_rBehavior"]));

	s_Object.m_rCurrentSpeakEntity = static_cast<uint32>(int64_t(p_Document["m_rCurrentSpeakEntity"]));

	s_Object.m_rScreenplay = static_cast<uint32>(int64_t(p_Document["m_rScreenplay"]));

	s_Object.m_sMatchName = std::string_view(p_Document["m_sMatchName"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tActorSpeakEnd"], &s_Item);
		s_Object.m_tActorSpeakEnd = s_Item;
	}

	s_Object.m_bIsDone = bool(p_Document["m_bIsDone"]);

	s_Object.m_bIsPaused = bool(p_Document["m_bIsPaused"]);

	s_Object.m_bIsSpeaking = bool(p_Document["m_bIsSpeaking"]);

	*reinterpret_cast<SDramaActorSaveState*>(p_Target) = s_Object;
}

void SDramaActorSaveState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDramaActorSaveState*>(p_Object);

	ZString::Serialize(&s_Object->m_sMatchName, p_Serializer, p_OwnOffset + offsetof(SDramaActorSaveState, m_sMatchName));
	ZGameTime::Serialize(&s_Object->m_tActorSpeakEnd, p_Serializer, p_OwnOffset + offsetof(SDramaActorSaveState, m_tActorSpeakEnd));
}

ZHMTypeInfo STrackerEntitySaveData::TypeInfo = ZHMTypeInfo("STrackerEntitySaveData", sizeof(STrackerEntitySaveData), alignof(STrackerEntitySaveData), STrackerEntitySaveData::WriteJson, STrackerEntitySaveData::WriteSimpleJson, STrackerEntitySaveData::FromSimpleJson, STrackerEntitySaveData::Serialize);

void STrackerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STrackerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTracker") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTracker;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpatialVisibility") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSpatialVisibility;
	p_Stream << "}";

	p_Stream << "}";
}

void STrackerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STrackerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTracker") << ":";
	p_Stream << s_Object->m_rTracker;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpatialVisibility") << ":";
	p_Stream << s_Object->m_bSpatialVisibility;

	p_Stream << "}";
}

void STrackerEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STrackerEntitySaveData s_Object;

	s_Object.m_rTracker = static_cast<uint32>(int64_t(p_Document["m_rTracker"]));

	s_Object.m_bIsVisible = bool(p_Document["m_bIsVisible"]);

	s_Object.m_bIsEnabled = bool(p_Document["m_bIsEnabled"]);

	s_Object.m_bSpatialVisibility = bool(p_Document["m_bSpatialVisibility"]);

	*reinterpret_cast<STrackerEntitySaveData*>(p_Target) = s_Object;
}

void STrackerEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STrackerEntitySaveData*>(p_Object);

}

ZHMTypeInfo STrackerManagerSaveData::TypeInfo = ZHMTypeInfo("STrackerManagerSaveData", sizeof(STrackerManagerSaveData), alignof(STrackerManagerSaveData), STrackerManagerSaveData::WriteJson, STrackerManagerSaveData::WriteSimpleJson, STrackerManagerSaveData::FromSimpleJson, STrackerManagerSaveData::Serialize);

void STrackerManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STrackerManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aTrackerData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<STrackerEntitySaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTrackerData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aTrackerData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STrackerEntitySaveData") << "," << JsonStr("$val") << ":";
		STrackerEntitySaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aTrackerData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STrackerManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STrackerManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aTrackerData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTrackerData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aTrackerData[i];
		STrackerEntitySaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aTrackerData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STrackerManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STrackerManagerSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aTrackerData"])
	{
		STrackerEntitySaveData s_ArrayItem0;
		STrackerEntitySaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aTrackerData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<STrackerManagerSaveData*>(p_Target) = s_Object;
}

void STrackerManagerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STrackerManagerSaveData*>(p_Object);

	TArray<STrackerEntitySaveData>::Serialize(&s_Object->m_aTrackerData, p_Serializer, p_OwnOffset + offsetof(STrackerManagerSaveData, m_aTrackerData));
}

ZHMTypeInfo ZHM5BodySoundEventConsumer_SBodySoundEventData::TypeInfo = ZHMTypeInfo("ZHM5BodySoundEventConsumer.SBodySoundEventData", sizeof(ZHM5BodySoundEventConsumer_SBodySoundEventData), alignof(ZHM5BodySoundEventConsumer_SBodySoundEventData), ZHM5BodySoundEventConsumer_SBodySoundEventData::WriteJson, ZHM5BodySoundEventConsumer_SBodySoundEventData::WriteSimpleJson, ZHM5BodySoundEventConsumer_SBodySoundEventData::FromSimpleJson, ZHM5BodySoundEventConsumer_SBodySoundEventData::Serialize);

void ZHM5BodySoundEventConsumer_SBodySoundEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5BodySoundEventConsumer_SBodySoundEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHM5BodySoundEventConsumer.EAnimSoundBody") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nEvent) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHM5BodySoundEventConsumer.EAnimSoundBody", static_cast<int>(s_Object->m_nEvent))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5BodySoundEventConsumer_SBodySoundEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5BodySoundEventConsumer_SBodySoundEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHM5BodySoundEventConsumer.EAnimSoundBody", static_cast<int>(s_Object->m_nEvent)));

	p_Stream << "}";
}

void ZHM5BodySoundEventConsumer_SBodySoundEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5BodySoundEventConsumer_SBodySoundEventData s_Object;

	s_Object.m_nEvent = static_cast<ZHM5BodySoundEventConsumer_EAnimSoundBody>(ZHMEnums::GetEnumValueByName("ZHM5BodySoundEventConsumer.EAnimSoundBody", std::string_view(p_Document["m_nEvent"])));

	*reinterpret_cast<ZHM5BodySoundEventConsumer_SBodySoundEventData*>(p_Target) = s_Object;
}

void ZHM5BodySoundEventConsumer_SBodySoundEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5BodySoundEventConsumer_SBodySoundEventData*>(p_Object);

}

ZHMTypeInfo AnimationEventDataTypes_SBlend::TypeInfo = ZHMTypeInfo("AnimationEventDataTypes.SBlend", sizeof(AnimationEventDataTypes_SBlend), alignof(AnimationEventDataTypes_SBlend), AnimationEventDataTypes_SBlend::WriteJson, AnimationEventDataTypes_SBlend::WriteSimpleJson, AnimationEventDataTypes_SBlend::FromSimpleJson, AnimationEventDataTypes_SBlend::Serialize);

void AnimationEventDataTypes_SBlend::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AnimationEventDataTypes_SBlend*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fBlendTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fBlendTime;
	p_Stream << "}";

	p_Stream << "}";
}

void AnimationEventDataTypes_SBlend::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AnimationEventDataTypes_SBlend*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fBlendTime") << ":";
	p_Stream << s_Object->m_fBlendTime;

	p_Stream << "}";
}

void AnimationEventDataTypes_SBlend::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AnimationEventDataTypes_SBlend s_Object;

	s_Object.m_fBlendTime = static_cast<float32>(double(p_Document["m_fBlendTime"]));

	*reinterpret_cast<AnimationEventDataTypes_SBlend*>(p_Target) = s_Object;
}

void AnimationEventDataTypes_SBlend::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AnimationEventDataTypes_SBlend*>(p_Object);

}

ZHMTypeInfo ZGuidString::TypeInfo = ZHMTypeInfo("ZGuidString", sizeof(ZGuidString), alignof(ZGuidString), ZGuidString::WriteJson, ZGuidString::WriteSimpleJson, ZGuidString::FromSimpleJson, ZGuidString::Serialize);

void ZGuidString::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZGuidString*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZGuidString::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZGuidString*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZGuidString::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZGuidString s_Object;

	*reinterpret_cast<ZGuidString*>(p_Target) = s_Object;
}

void ZGuidString::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZGuidString*>(p_Object);

}

ZHMTypeInfo SRemoteControlReceiverSaveData::TypeInfo = ZHMTypeInfo("SRemoteControlReceiverSaveData", sizeof(SRemoteControlReceiverSaveData), alignof(SRemoteControlReceiverSaveData), SRemoteControlReceiverSaveData::WriteJson, SRemoteControlReceiverSaveData::WriteSimpleJson, SRemoteControlReceiverSaveData::FromSimpleJson, SRemoteControlReceiverSaveData::Serialize);

void SRemoteControlReceiverSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRemoteControlReceiverSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReceiverActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReceiverActivated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDestroyed;
	p_Stream << "}";

	p_Stream << "}";
}

void SRemoteControlReceiverSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRemoteControlReceiverSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bReceiverActivated") << ":";
	p_Stream << s_Object->m_bReceiverActivated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << s_Object->m_bDestroyed;

	p_Stream << "}";
}

void SRemoteControlReceiverSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRemoteControlReceiverSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_bReceiverActivated = bool(p_Document["m_bReceiverActivated"]);

	s_Object.m_bDestroyed = bool(p_Document["m_bDestroyed"]);

	*reinterpret_cast<SRemoteControlReceiverSaveData*>(p_Target) = s_Object;
}

void SRemoteControlReceiverSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRemoteControlReceiverSaveData*>(p_Object);

}

ZHMTypeInfo SBodyContainerSaveData::TypeInfo = ZHMTypeInfo("SBodyContainerSaveData", sizeof(SBodyContainerSaveData), alignof(SBodyContainerSaveData), SBodyContainerSaveData::WriteJson, SBodyContainerSaveData::WriteSimpleJson, SBodyContainerSaveData::FromSimpleJson, SBodyContainerSaveData::Serialize);

void SBodyContainerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBodyContainerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eBCState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHM5BodyContainer.EBCState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eBCState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHM5BodyContainer.EBCState", static_cast<int>(s_Object->m_eBCState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLidAutoCloseTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLidAutoCloseTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLidOpenFraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLidOpenFraction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFrameUpdateActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFrameUpdateActive;
	p_Stream << "}";

	p_Stream << "}";
}

void SBodyContainerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBodyContainerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eBCState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHM5BodyContainer.EBCState", static_cast<int>(s_Object->m_eBCState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fLidAutoCloseTime") << ":";
	p_Stream << s_Object->m_fLidAutoCloseTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLidOpenFraction") << ":";
	p_Stream << s_Object->m_fLidOpenFraction;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFrameUpdateActive") << ":";
	p_Stream << s_Object->m_bFrameUpdateActive;

	p_Stream << "}";
}

void SBodyContainerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBodyContainerSaveData s_Object;

	s_Object.m_eBCState = static_cast<ZHM5BodyContainer_EBCState>(ZHMEnums::GetEnumValueByName("ZHM5BodyContainer.EBCState", std::string_view(p_Document["m_eBCState"])));

	s_Object.m_fLidAutoCloseTime = static_cast<float32>(double(p_Document["m_fLidAutoCloseTime"]));

	s_Object.m_fLidOpenFraction = static_cast<float32>(double(p_Document["m_fLidOpenFraction"]));

	s_Object.m_bFrameUpdateActive = bool(p_Document["m_bFrameUpdateActive"]);

	*reinterpret_cast<SBodyContainerSaveData*>(p_Target) = s_Object;
}

void SBodyContainerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBodyContainerSaveData*>(p_Object);

}

ZHMTypeInfo ZHM5FootstepEventConsumer_SFootstepSoundEventData::TypeInfo = ZHMTypeInfo("ZHM5FootstepEventConsumer.SFootstepSoundEventData", sizeof(ZHM5FootstepEventConsumer_SFootstepSoundEventData), alignof(ZHM5FootstepEventConsumer_SFootstepSoundEventData), ZHM5FootstepEventConsumer_SFootstepSoundEventData::WriteJson, ZHM5FootstepEventConsumer_SFootstepSoundEventData::WriteSimpleJson, ZHM5FootstepEventConsumer_SFootstepSoundEventData::FromSimpleJson, ZHM5FootstepEventConsumer_SFootstepSoundEventData::Serialize);

void ZHM5FootstepEventConsumer_SFootstepSoundEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5FootstepEventConsumer_SFootstepSoundEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EHM5SoundFootstepEvent") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nEvent) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EHM5SoundFootstepEvent", static_cast<int>(s_Object->m_nEvent))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5FootstepEventConsumer_SFootstepSoundEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5FootstepEventConsumer_SFootstepSoundEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EHM5SoundFootstepEvent", static_cast<int>(s_Object->m_nEvent)));

	p_Stream << "}";
}

void ZHM5FootstepEventConsumer_SFootstepSoundEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5FootstepEventConsumer_SFootstepSoundEventData s_Object;

	s_Object.m_nEvent = static_cast<EHM5SoundFootstepEvent>(ZHMEnums::GetEnumValueByName("EHM5SoundFootstepEvent", std::string_view(p_Document["m_nEvent"])));

	*reinterpret_cast<ZHM5FootstepEventConsumer_SFootstepSoundEventData*>(p_Target) = s_Object;
}

void ZHM5FootstepEventConsumer_SFootstepSoundEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5FootstepEventConsumer_SFootstepSoundEventData*>(p_Object);

}

ZHMTypeInfo ZRecoverUnconsciousSituation_SSituationSaveData::TypeInfo = ZHMTypeInfo("ZRecoverUnconsciousSituation.SSituationSaveData", sizeof(ZRecoverUnconsciousSituation_SSituationSaveData), alignof(ZRecoverUnconsciousSituation_SSituationSaveData), ZRecoverUnconsciousSituation_SSituationSaveData::WriteJson, ZRecoverUnconsciousSituation_SSituationSaveData::WriteSimpleJson, ZRecoverUnconsciousSituation_SSituationSaveData::FromSimpleJson, ZRecoverUnconsciousSituation_SSituationSaveData::Serialize);

void ZRecoverUnconsciousSituation_SSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZRecoverUnconsciousSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rVictim") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rVictim;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pInvestigateDisguiseGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pInvestigateDisguiseGroup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pRecoverUnconsciousGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pRecoverUnconsciousGroup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pObserversGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pObserversGroup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEscalate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEscalate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVictimPacified") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVictimPacified;
	p_Stream << "}";

	p_Stream << "}";
}

void ZRecoverUnconsciousSituation_SSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZRecoverUnconsciousSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rVictim") << ":";
	p_Stream << s_Object->m_rVictim;
	p_Stream << ",";

	p_Stream << JsonStr("m_pInvestigateDisguiseGroup") << ":";
	p_Stream << s_Object->m_pInvestigateDisguiseGroup;
	p_Stream << ",";

	p_Stream << JsonStr("m_pRecoverUnconsciousGroup") << ":";
	p_Stream << s_Object->m_pRecoverUnconsciousGroup;
	p_Stream << ",";

	p_Stream << JsonStr("m_pObserversGroup") << ":";
	p_Stream << s_Object->m_pObserversGroup;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEscalate") << ":";
	p_Stream << s_Object->m_bEscalate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVictimPacified") << ":";
	p_Stream << s_Object->m_bVictimPacified;

	p_Stream << "}";
}

void ZRecoverUnconsciousSituation_SSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZRecoverUnconsciousSituation_SSituationSaveData s_Object;

	s_Object.m_rVictim = static_cast<uint32>(int64_t(p_Document["m_rVictim"]));

	s_Object.m_pInvestigateDisguiseGroup = static_cast<int32>(int64_t(p_Document["m_pInvestigateDisguiseGroup"]));

	s_Object.m_pRecoverUnconsciousGroup = static_cast<int32>(int64_t(p_Document["m_pRecoverUnconsciousGroup"]));

	s_Object.m_pObserversGroup = static_cast<int32>(int64_t(p_Document["m_pObserversGroup"]));

	s_Object.m_bEscalate = bool(p_Document["m_bEscalate"]);

	s_Object.m_bVictimPacified = bool(p_Document["m_bVictimPacified"]);

	*reinterpret_cast<ZRecoverUnconsciousSituation_SSituationSaveData*>(p_Target) = s_Object;
}

void ZRecoverUnconsciousSituation_SSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZRecoverUnconsciousSituation_SSituationSaveData*>(p_Object);

}

ZHMTypeInfo S3rdPersonCameraSaveData::TypeInfo = ZHMTypeInfo("S3rdPersonCameraSaveData", sizeof(S3rdPersonCameraSaveData), alignof(S3rdPersonCameraSaveData), S3rdPersonCameraSaveData::WriteJson, S3rdPersonCameraSaveData::WriteSimpleJson, S3rdPersonCameraSaveData::FromSimpleJson, S3rdPersonCameraSaveData::Serialize);

void S3rdPersonCameraSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<S3rdPersonCameraSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fAngleYaw") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAngleYaw;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAnglePitch") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAnglePitch;
	p_Stream << "}";

	p_Stream << "}";
}

void S3rdPersonCameraSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<S3rdPersonCameraSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fAngleYaw") << ":";
	p_Stream << s_Object->m_fAngleYaw;
	p_Stream << ",";

	p_Stream << JsonStr("m_fAnglePitch") << ":";
	p_Stream << s_Object->m_fAnglePitch;

	p_Stream << "}";
}

void S3rdPersonCameraSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	S3rdPersonCameraSaveData s_Object;

	s_Object.m_fAngleYaw = static_cast<float32>(double(p_Document["m_fAngleYaw"]));

	s_Object.m_fAnglePitch = static_cast<float32>(double(p_Document["m_fAnglePitch"]));

	*reinterpret_cast<S3rdPersonCameraSaveData*>(p_Target) = s_Object;
}

void S3rdPersonCameraSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<S3rdPersonCameraSaveData*>(p_Object);

}

ZHMTypeInfo SCautiousSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SCautiousSituationMemberSaveData", sizeof(SCautiousSituationMemberSaveData), alignof(SCautiousSituationMemberSaveData), SCautiousSituationMemberSaveData::WriteJson, SCautiousSituationMemberSaveData::WriteSimpleJson, SCautiousSituationMemberSaveData::FromSimpleJson, SCautiousSituationMemberSaveData::Serialize);

void SCautiousSituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousSituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tLastDisturbance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastDisturbance, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSearchCalc") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastSearchCalc, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInfluenceCalc") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastInfluenceCalc, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSearchCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastSearchCompleted, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInvestigationCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastInvestigationCompleted, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tTimeIdling") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tTimeIdling, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pGuardDutyPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pGuardDutyPoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBulletImpactsHeard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBulletImpactsHeard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPatrolWaypointIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointSubIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPatrolWaypointSubIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBanterCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBanterCandidate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCivOccupant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCivOccupant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRecievingNewHuntTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRecievingNewHuntTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownEnforcer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLockdownEnforcer;
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousSituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousSituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tLastDisturbance") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastDisturbance, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSearchCalc") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastSearchCalc, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInfluenceCalc") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastInfluenceCalc, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSearchCompleted") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastSearchCompleted, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInvestigationCompleted") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastInvestigationCompleted, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tTimeIdling") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tTimeIdling, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_pGuardDutyPoint") << ":";
	p_Stream << s_Object->m_pGuardDutyPoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_nBulletImpactsHeard") << ":";
	p_Stream << s_Object->m_nBulletImpactsHeard;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointIndex") << ":";
	p_Stream << s_Object->m_nPatrolWaypointIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointSubIndex") << ":";
	p_Stream << s_Object->m_nPatrolWaypointSubIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBanterCandidate") << ":";
	p_Stream << s_Object->m_bBanterCandidate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCivOccupant") << ":";
	p_Stream << s_Object->m_bCivOccupant;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRecievingNewHuntTarget") << ":";
	p_Stream << s_Object->m_bRecievingNewHuntTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownEnforcer") << ":";
	p_Stream << s_Object->m_bLockdownEnforcer;

	p_Stream << "}";
}

void SCautiousSituationMemberSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCautiousSituationMemberSaveData s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastDisturbance"], &s_Item);
		s_Object.m_tLastDisturbance = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastSearchCalc"], &s_Item);
		s_Object.m_tLastSearchCalc = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastInfluenceCalc"], &s_Item);
		s_Object.m_tLastInfluenceCalc = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastSearchCompleted"], &s_Item);
		s_Object.m_tLastSearchCompleted = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastInvestigationCompleted"], &s_Item);
		s_Object.m_tLastInvestigationCompleted = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tTimeIdling"], &s_Item);
		s_Object.m_tTimeIdling = s_Item;
	}

	s_Object.m_pGuardDutyPoint = static_cast<uint32>(int64_t(p_Document["m_pGuardDutyPoint"]));

	s_Object.m_nBulletImpactsHeard = static_cast<int32>(int64_t(p_Document["m_nBulletImpactsHeard"]));

	s_Object.m_nPatrolWaypointIndex = static_cast<int32>(int64_t(p_Document["m_nPatrolWaypointIndex"]));

	s_Object.m_nPatrolWaypointSubIndex = static_cast<uint32>(int64_t(p_Document["m_nPatrolWaypointSubIndex"]));

	s_Object.m_bBanterCandidate = bool(p_Document["m_bBanterCandidate"]);

	s_Object.m_bCivOccupant = bool(p_Document["m_bCivOccupant"]);

	s_Object.m_bRecievingNewHuntTarget = bool(p_Document["m_bRecievingNewHuntTarget"]);

	s_Object.m_bLockdownEnforcer = bool(p_Document["m_bLockdownEnforcer"]);

	*reinterpret_cast<SCautiousSituationMemberSaveData*>(p_Target) = s_Object;
}

void SCautiousSituationMemberSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCautiousSituationMemberSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tLastDisturbance, p_Serializer, p_OwnOffset + offsetof(SCautiousSituationMemberSaveData, m_tLastDisturbance));
	ZGameTime::Serialize(&s_Object->m_tLastSearchCalc, p_Serializer, p_OwnOffset + offsetof(SCautiousSituationMemberSaveData, m_tLastSearchCalc));
	ZGameTime::Serialize(&s_Object->m_tLastInfluenceCalc, p_Serializer, p_OwnOffset + offsetof(SCautiousSituationMemberSaveData, m_tLastInfluenceCalc));
	ZGameTime::Serialize(&s_Object->m_tLastSearchCompleted, p_Serializer, p_OwnOffset + offsetof(SCautiousSituationMemberSaveData, m_tLastSearchCompleted));
	ZGameTime::Serialize(&s_Object->m_tLastInvestigationCompleted, p_Serializer, p_OwnOffset + offsetof(SCautiousSituationMemberSaveData, m_tLastInvestigationCompleted));
	ZGameTime::Serialize(&s_Object->m_tTimeIdling, p_Serializer, p_OwnOffset + offsetof(SCautiousSituationMemberSaveData, m_tTimeIdling));
}

ZHMTypeInfo ZHM5HIKEventConsumer_SZHM5HIKEventData::TypeInfo = ZHMTypeInfo("ZHM5HIKEventConsumer.SZHM5HIKEventData", sizeof(ZHM5HIKEventConsumer_SZHM5HIKEventData), alignof(ZHM5HIKEventConsumer_SZHM5HIKEventData), ZHM5HIKEventConsumer_SZHM5HIKEventData::WriteJson, ZHM5HIKEventConsumer_SZHM5HIKEventData::WriteSimpleJson, ZHM5HIKEventConsumer_SZHM5HIKEventData::FromSimpleJson, ZHM5HIKEventConsumer_SZHM5HIKEventData::Serialize);

void ZHM5HIKEventConsumer_SZHM5HIKEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5HIKEventConsumer_SZHM5HIKEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEffector") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHM5HIKEventConsumer.EEffector") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nEffector) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHM5HIKEventConsumer.EEffector", static_cast<int>(s_Object->m_nEffector))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBlend") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHM5HIKEventConsumer.EBlend") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nBlend) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHM5HIKEventConsumer.EBlend", static_cast<int>(s_Object->m_nBlend))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5HIKEventConsumer_SZHM5HIKEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5HIKEventConsumer_SZHM5HIKEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEffector") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHM5HIKEventConsumer.EEffector", static_cast<int>(s_Object->m_nEffector)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nBlend") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHM5HIKEventConsumer.EBlend", static_cast<int>(s_Object->m_nBlend)));

	p_Stream << "}";
}

void ZHM5HIKEventConsumer_SZHM5HIKEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5HIKEventConsumer_SZHM5HIKEventData s_Object;

	s_Object.m_nEffector = static_cast<ZHM5HIKEventConsumer_EEffector>(ZHMEnums::GetEnumValueByName("ZHM5HIKEventConsumer.EEffector", std::string_view(p_Document["m_nEffector"])));

	s_Object.m_nBlend = static_cast<ZHM5HIKEventConsumer_EBlend>(ZHMEnums::GetEnumValueByName("ZHM5HIKEventConsumer.EBlend", std::string_view(p_Document["m_nBlend"])));

	*reinterpret_cast<ZHM5HIKEventConsumer_SZHM5HIKEventData*>(p_Target) = s_Object;
}

void ZHM5HIKEventConsumer_SZHM5HIKEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5HIKEventConsumer_SZHM5HIKEventData*>(p_Object);

}

ZHMTypeInfo SCrowdFlowChannel::TypeInfo = ZHMTypeInfo("SCrowdFlowChannel", sizeof(SCrowdFlowChannel), alignof(SCrowdFlowChannel), SCrowdFlowChannel::WriteJson, SCrowdFlowChannel::WriteSimpleJson, SCrowdFlowChannel::FromSimpleJson, SCrowdFlowChannel::Serialize);

void SCrowdFlowChannel::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdFlowChannel*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aFlowVectorIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint8>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowVectorIndex.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aFlowVectorIndex[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item0);
		p_Stream << "}";

		if (i < s_Object->m_aFlowVectorIndex.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aFlowCost") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint16>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowCost.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aFlowCost[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aFlowCost.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdFlowChannel::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdFlowChannel*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aFlowVectorIndex") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowVectorIndex.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aFlowVectorIndex[i];
		p_Stream << static_cast<int>(s_Item0);

		if (i < s_Object->m_aFlowVectorIndex.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aFlowCost") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowCost.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aFlowCost[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aFlowCost.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdFlowChannel::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdFlowChannel s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aFlowVectorIndex"])
	{
		s_Object.m_aFlowVectorIndex.push_back(static_cast<uint8>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aFlowCost"])
	{
		s_Object.m_aFlowCost.push_back(static_cast<uint16>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SCrowdFlowChannel*>(p_Target) = s_Object;
}

void SCrowdFlowChannel::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdFlowChannel*>(p_Object);

	TArray<uint8>::Serialize(&s_Object->m_aFlowVectorIndex, p_Serializer, p_OwnOffset + offsetof(SCrowdFlowChannel, m_aFlowVectorIndex));
	TArray<uint16>::Serialize(&s_Object->m_aFlowCost, p_Serializer, p_OwnOffset + offsetof(SCrowdFlowChannel, m_aFlowCost));
}

ZHMTypeInfo SDrama2SetupSaveData::TypeInfo = ZHMTypeInfo("SDrama2SetupSaveData", sizeof(SDrama2SetupSaveData), alignof(SDrama2SetupSaveData), SDrama2SetupSaveData::WriteJson, SDrama2SetupSaveData::WriteSimpleJson, SDrama2SetupSaveData::FromSimpleJson, SDrama2SetupSaveData::Serialize);

void SDrama2SetupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDrama2SetupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bDoneTriggered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDoneTriggered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EScreenPlayState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EScreenPlayState", static_cast<int>(s_Object->m_eState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSituation;
	p_Stream << "}";

	p_Stream << "}";
}

void SDrama2SetupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDrama2SetupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bDoneTriggered") << ":";
	p_Stream << s_Object->m_bDoneTriggered;
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EScreenPlayState", static_cast<int>(s_Object->m_eState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << s_Object->m_rSituation;

	p_Stream << "}";
}

void SDrama2SetupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDrama2SetupSaveData s_Object;

	s_Object.m_bDoneTriggered = bool(p_Document["m_bDoneTriggered"]);

	s_Object.m_eState = static_cast<EScreenPlayState>(ZHMEnums::GetEnumValueByName("EScreenPlayState", std::string_view(p_Document["m_eState"])));

	s_Object.m_rSituation = static_cast<uint32>(int64_t(p_Document["m_rSituation"]));

	*reinterpret_cast<SDrama2SetupSaveData*>(p_Target) = s_Object;
}

void SDrama2SetupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDrama2SetupSaveData*>(p_Object);

}

ZHMTypeInfo SDrama2SetupCollectionSaveData::TypeInfo = ZHMTypeInfo("SDrama2SetupCollectionSaveData", sizeof(SDrama2SetupCollectionSaveData), alignof(SDrama2SetupCollectionSaveData), SDrama2SetupCollectionSaveData::WriteJson, SDrama2SetupCollectionSaveData::WriteSimpleJson, SDrama2SetupCollectionSaveData::FromSimpleJson, SDrama2SetupCollectionSaveData::Serialize);

void SDrama2SetupCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDrama2SetupCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDrama2SetupSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDrama2SetupSaveData") << "," << JsonStr("$val") << ":";
		SDrama2SetupSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SDrama2SetupCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDrama2SetupCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		SDrama2SetupSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDrama2SetupCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDrama2SetupCollectionSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aStates"])
	{
		SDrama2SetupSaveData s_ArrayItem0;
		SDrama2SetupSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aStates.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SDrama2SetupCollectionSaveData*>(p_Target) = s_Object;
}

void SDrama2SetupCollectionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDrama2SetupCollectionSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SDrama2SetupCollectionSaveData, m_aEntities));
	TArray<SDrama2SetupSaveData>::Serialize(&s_Object->m_aStates, p_Serializer, p_OwnOffset + offsetof(SDrama2SetupCollectionSaveData, m_aStates));
}

ZHMTypeInfo SBehaviorTreeEvaluationLogEntry::TypeInfo = ZHMTypeInfo("SBehaviorTreeEvaluationLogEntry", sizeof(SBehaviorTreeEvaluationLogEntry), alignof(SBehaviorTreeEvaluationLogEntry), SBehaviorTreeEvaluationLogEntry::WriteJson, SBehaviorTreeEvaluationLogEntry::WriteSimpleJson, SBehaviorTreeEvaluationLogEntry::FromSimpleJson, SBehaviorTreeEvaluationLogEntry::Serialize);

void SBehaviorTreeEvaluationLogEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEvaluationLogEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nBehaviorTreeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBehaviorTreeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nConditionOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nConditionOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bResult") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bResult;
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLogEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEvaluationLogEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nBehaviorTreeIndex") << ":";
	p_Stream << s_Object->m_nBehaviorTreeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nConditionOffset") << ":";
	p_Stream << s_Object->m_nConditionOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_bResult") << ":";
	p_Stream << s_Object->m_bResult;

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLogEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeEvaluationLogEntry s_Object;

	s_Object.m_nBehaviorTreeIndex = static_cast<uint32>(int64_t(p_Document["m_nBehaviorTreeIndex"]));

	s_Object.m_nConditionOffset = uint64(p_Document["m_nConditionOffset"]);

	s_Object.m_bResult = bool(p_Document["m_bResult"]);

	*reinterpret_cast<SBehaviorTreeEvaluationLogEntry*>(p_Target) = s_Object;
}

void SBehaviorTreeEvaluationLogEntry::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEvaluationLogEntry*>(p_Object);

}

ZHMTypeInfo SBehaviorTreeEvaluationLog::TypeInfo = ZHMTypeInfo("SBehaviorTreeEvaluationLog", sizeof(SBehaviorTreeEvaluationLog), alignof(SBehaviorTreeEvaluationLog), SBehaviorTreeEvaluationLog::WriteJson, SBehaviorTreeEvaluationLog::WriteSimpleJson, SBehaviorTreeEvaluationLog::FromSimpleJson, SBehaviorTreeEvaluationLog::Serialize);

void SBehaviorTreeEvaluationLog::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEvaluationLog*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_BehaviorTrees") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZResourceID>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_BehaviorTrees.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_BehaviorTrees[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
		ZResourceID::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_BehaviorTrees.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Entries") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SBehaviorTreeEvaluationLogEntry>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_Entries.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_Entries[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBehaviorTreeEvaluationLogEntry") << "," << JsonStr("$val") << ":";
		SBehaviorTreeEvaluationLogEntry::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_Entries.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLog::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEvaluationLog*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_BehaviorTrees") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_BehaviorTrees.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_BehaviorTrees[i];
		ZResourceID::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_BehaviorTrees.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_Entries") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_Entries.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_Entries[i];
		SBehaviorTreeEvaluationLogEntry::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_Entries.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SBehaviorTreeEvaluationLog::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBehaviorTreeEvaluationLog s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_BehaviorTrees"])
	{
		ZResourceID s_ArrayItem0;
		ZResourceID::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_BehaviorTrees.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_Entries"])
	{
		SBehaviorTreeEvaluationLogEntry s_ArrayItem0;
		SBehaviorTreeEvaluationLogEntry::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_Entries.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SBehaviorTreeEvaluationLog*>(p_Target) = s_Object;
}

void SBehaviorTreeEvaluationLog::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBehaviorTreeEvaluationLog*>(p_Object);

	TArray<ZResourceID>::Serialize(&s_Object->m_BehaviorTrees, p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeEvaluationLog, m_BehaviorTrees));
	TArray<SBehaviorTreeEvaluationLogEntry>::Serialize(&s_Object->m_Entries, p_Serializer, p_OwnOffset + offsetof(SBehaviorTreeEvaluationLog, m_Entries));
}

ZHMTypeInfo STargetInfoObjectiveCondition::TypeInfo = ZHMTypeInfo("STargetInfoObjectiveCondition", sizeof(STargetInfoObjectiveCondition), alignof(STargetInfoObjectiveCondition), STargetInfoObjectiveCondition::WriteJson, STargetInfoObjectiveCondition::WriteSimpleJson, STargetInfoObjectiveCondition::FromSimpleJson, STargetInfoObjectiveCondition::Serialize);

void STargetInfoObjectiveCondition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STargetInfoObjectiveCondition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("header") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->header);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("title") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->title);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->icon);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->type);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("hardCondition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->hardCondition;
	p_Stream << "}";

	p_Stream << "}";
}

void STargetInfoObjectiveCondition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STargetInfoObjectiveCondition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("header") << ":";
	p_Stream << JsonStr(s_Object->header);
	p_Stream << ",";

	p_Stream << JsonStr("title") << ":";
	p_Stream << JsonStr(s_Object->title);
	p_Stream << ",";

	p_Stream << JsonStr("icon") << ":";
	p_Stream << JsonStr(s_Object->icon);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(s_Object->type);
	p_Stream << ",";

	p_Stream << JsonStr("hardCondition") << ":";
	p_Stream << s_Object->hardCondition;

	p_Stream << "}";
}

void STargetInfoObjectiveCondition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STargetInfoObjectiveCondition s_Object;

	s_Object.header = std::string_view(p_Document["header"]);

	s_Object.title = std::string_view(p_Document["title"]);

	s_Object.icon = std::string_view(p_Document["icon"]);

	s_Object.type = std::string_view(p_Document["type"]);

	s_Object.hardCondition = bool(p_Document["hardCondition"]);

	*reinterpret_cast<STargetInfoObjectiveCondition*>(p_Target) = s_Object;
}

void STargetInfoObjectiveCondition::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STargetInfoObjectiveCondition*>(p_Object);

	ZString::Serialize(&s_Object->header, p_Serializer, p_OwnOffset + offsetof(STargetInfoObjectiveCondition, header));
	ZString::Serialize(&s_Object->title, p_Serializer, p_OwnOffset + offsetof(STargetInfoObjectiveCondition, title));
	ZString::Serialize(&s_Object->icon, p_Serializer, p_OwnOffset + offsetof(STargetInfoObjectiveCondition, icon));
	ZString::Serialize(&s_Object->type, p_Serializer, p_OwnOffset + offsetof(STargetInfoObjectiveCondition, type));
}

ZHMTypeInfo STargetInfoDisplayData::TypeInfo = ZHMTypeInfo("STargetInfoDisplayData", sizeof(STargetInfoDisplayData), alignof(STargetInfoDisplayData), STargetInfoDisplayData::WriteJson, STargetInfoDisplayData::WriteSimpleJson, STargetInfoDisplayData::FromSimpleJson, STargetInfoDisplayData::Serialize);

void STargetInfoDisplayData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STargetInfoDisplayData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("npcName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->npcName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("disguiseName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->disguiseName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("objectiveType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->objectiveType);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("objectiveConditions") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<STargetInfoObjectiveCondition>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->objectiveConditions.size(); ++i)
	{
		auto& s_Item0 = s_Object->objectiveConditions[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STargetInfoObjectiveCondition") << "," << JsonStr("$val") << ":";
		STargetInfoObjectiveCondition::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->objectiveConditions.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fX") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fX;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fY") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fY;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsTarget;
	p_Stream << "}";

	p_Stream << "}";
}

void STargetInfoDisplayData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STargetInfoDisplayData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("npcName") << ":";
	p_Stream << JsonStr(s_Object->npcName);
	p_Stream << ",";

	p_Stream << JsonStr("disguiseName") << ":";
	p_Stream << JsonStr(s_Object->disguiseName);
	p_Stream << ",";

	p_Stream << JsonStr("objectiveType") << ":";
	p_Stream << JsonStr(s_Object->objectiveType);
	p_Stream << ",";

	p_Stream << JsonStr("objectiveConditions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->objectiveConditions.size(); ++i)
	{
		auto& s_Item0 = s_Object->objectiveConditions[i];
		STargetInfoObjectiveCondition::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->objectiveConditions.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("fX") << ":";
	p_Stream << s_Object->fX;
	p_Stream << ",";

	p_Stream << JsonStr("fY") << ":";
	p_Stream << s_Object->fY;
	p_Stream << ",";

	p_Stream << JsonStr("fAlpha") << ":";
	p_Stream << s_Object->fAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("bIsTarget") << ":";
	p_Stream << s_Object->bIsTarget;

	p_Stream << "}";
}

void STargetInfoDisplayData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STargetInfoDisplayData s_Object;

	s_Object.npcName = std::string_view(p_Document["npcName"]);

	s_Object.disguiseName = std::string_view(p_Document["disguiseName"]);

	s_Object.objectiveType = std::string_view(p_Document["objectiveType"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["objectiveConditions"])
	{
		STargetInfoObjectiveCondition s_ArrayItem0;
		STargetInfoObjectiveCondition::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.objectiveConditions.push_back(s_ArrayItem0);
	}

	s_Object.fX = static_cast<int32>(int64_t(p_Document["fX"]));

	s_Object.fY = static_cast<int32>(int64_t(p_Document["fY"]));

	s_Object.fAlpha = static_cast<float32>(double(p_Document["fAlpha"]));

	s_Object.bIsTarget = bool(p_Document["bIsTarget"]);

	*reinterpret_cast<STargetInfoDisplayData*>(p_Target) = s_Object;
}

void STargetInfoDisplayData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STargetInfoDisplayData*>(p_Object);

	ZString::Serialize(&s_Object->npcName, p_Serializer, p_OwnOffset + offsetof(STargetInfoDisplayData, npcName));
	ZString::Serialize(&s_Object->disguiseName, p_Serializer, p_OwnOffset + offsetof(STargetInfoDisplayData, disguiseName));
	ZString::Serialize(&s_Object->objectiveType, p_Serializer, p_OwnOffset + offsetof(STargetInfoDisplayData, objectiveType));
	TArray<STargetInfoObjectiveCondition>::Serialize(&s_Object->objectiveConditions, p_Serializer, p_OwnOffset + offsetof(STargetInfoDisplayData, objectiveConditions));
}

ZHMTypeInfo STargetInfoDisplayData_Dummy::TypeInfo = ZHMTypeInfo("STargetInfoDisplayData_Dummy", sizeof(STargetInfoDisplayData_Dummy), alignof(STargetInfoDisplayData_Dummy), STargetInfoDisplayData_Dummy::WriteJson, STargetInfoDisplayData_Dummy::WriteSimpleJson, STargetInfoDisplayData_Dummy::FromSimpleJson, STargetInfoDisplayData_Dummy::Serialize);

void STargetInfoDisplayData_Dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STargetInfoDisplayData_Dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("__dummy") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<STargetInfoDisplayData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->__dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->__dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STargetInfoDisplayData") << "," << JsonStr("$val") << ":";
		STargetInfoDisplayData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->__dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STargetInfoDisplayData_Dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STargetInfoDisplayData_Dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("__dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->__dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->__dummy[i];
		STargetInfoDisplayData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->__dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STargetInfoDisplayData_Dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STargetInfoDisplayData_Dummy s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["__dummy"])
	{
		STargetInfoDisplayData s_ArrayItem0;
		STargetInfoDisplayData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.__dummy.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<STargetInfoDisplayData_Dummy*>(p_Target) = s_Object;
}

void STargetInfoDisplayData_Dummy::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STargetInfoDisplayData_Dummy*>(p_Object);

	TArray<STargetInfoDisplayData>::Serialize(&s_Object->__dummy, p_Serializer, p_OwnOffset + offsetof(STargetInfoDisplayData_Dummy, __dummy));
}

ZHMTypeInfo SClothBundleSpawnSaveData::TypeInfo = ZHMTypeInfo("SClothBundleSpawnSaveData", sizeof(SClothBundleSpawnSaveData), alignof(SClothBundleSpawnSaveData), SClothBundleSpawnSaveData::WriteJson, SClothBundleSpawnSaveData::WriteSimpleJson, SClothBundleSpawnSaveData::FromSimpleJson, SClothBundleSpawnSaveData::Serialize);

void SClothBundleSpawnSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SClothBundleSpawnSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rClothbundle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rClothbundle;
	p_Stream << "}";

	p_Stream << "}";
}

void SClothBundleSpawnSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SClothBundleSpawnSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rClothbundle") << ":";
	p_Stream << s_Object->m_rClothbundle;

	p_Stream << "}";
}

void SClothBundleSpawnSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SClothBundleSpawnSaveData s_Object;

	s_Object.m_rClothbundle = static_cast<uint32>(int64_t(p_Document["m_rClothbundle"]));

	*reinterpret_cast<SClothBundleSpawnSaveData*>(p_Target) = s_Object;
}

void SClothBundleSpawnSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SClothBundleSpawnSaveData*>(p_Object);

}

ZHMTypeInfo ZSoundCollisionInfo::TypeInfo = ZHMTypeInfo("ZSoundCollisionInfo", sizeof(ZSoundCollisionInfo), alignof(ZSoundCollisionInfo), ZSoundCollisionInfo::WriteJson, ZSoundCollisionInfo::WriteSimpleJson, ZSoundCollisionInfo::FromSimpleJson, ZSoundCollisionInfo::Serialize);

void ZSoundCollisionInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSoundCollisionInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSoundCollisionInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSoundCollisionInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZSoundCollisionInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSoundCollisionInfo s_Object;

	*reinterpret_cast<ZSoundCollisionInfo*>(p_Target) = s_Object;
}

void ZSoundCollisionInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZSoundCollisionInfo*>(p_Object);

}

ZHMTypeInfo ZGfxValueWrapper::TypeInfo = ZHMTypeInfo("ZGfxValueWrapper", sizeof(ZGfxValueWrapper), alignof(ZGfxValueWrapper), ZGfxValueWrapper::WriteJson, ZGfxValueWrapper::WriteSimpleJson, ZGfxValueWrapper::FromSimpleJson, ZGfxValueWrapper::Serialize);

void ZGfxValueWrapper::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZGfxValueWrapper*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZGfxValueWrapper::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZGfxValueWrapper*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZGfxValueWrapper::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZGfxValueWrapper s_Object;

	*reinterpret_cast<ZGfxValueWrapper*>(p_Target) = s_Object;
}

void ZGfxValueWrapper::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZGfxValueWrapper*>(p_Object);

}

ZHMTypeInfo SAudioEmitterEventSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterEventSaveData", sizeof(SAudioEmitterEventSaveData), alignof(SAudioEmitterEventSaveData), SAudioEmitterEventSaveData::WriteJson, SAudioEmitterEventSaveData::WriteSimpleJson, SAudioEmitterEventSaveData::FromSimpleJson, SAudioEmitterEventSaveData::Serialize);

void SAudioEmitterEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEventId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEventId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFlags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFlags;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rEventSender") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEventSender;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSeekPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSeekPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPlayState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_nPlayState);
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEventId") << ":";
	p_Stream << s_Object->m_nEventId;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFlags") << ":";
	p_Stream << s_Object->m_nFlags;
	p_Stream << ",";

	p_Stream << JsonStr("m_rEventSender") << ":";
	p_Stream << s_Object->m_rEventSender;
	p_Stream << ",";

	p_Stream << JsonStr("m_nSeekPosition") << ":";
	p_Stream << s_Object->m_nSeekPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPlayState") << ":";
	p_Stream << static_cast<int>(s_Object->m_nPlayState);

	p_Stream << "}";
}

void SAudioEmitterEventSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioEmitterEventSaveData s_Object;

	s_Object.m_nEventId = static_cast<uint32>(int64_t(p_Document["m_nEventId"]));

	s_Object.m_bPaused = bool(p_Document["m_bPaused"]);

	s_Object.m_nFlags = static_cast<uint32>(int64_t(p_Document["m_nFlags"]));

	s_Object.m_rEventSender = static_cast<uint32>(int64_t(p_Document["m_rEventSender"]));

	s_Object.m_nSeekPosition = static_cast<int32>(int64_t(p_Document["m_nSeekPosition"]));

	s_Object.m_nPlayState = static_cast<uint8>(int64_t(p_Document["m_nPlayState"]));

	*reinterpret_cast<SAudioEmitterEventSaveData*>(p_Target) = s_Object;
}

void SAudioEmitterEventSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterEventSaveData*>(p_Object);

}

ZHMTypeInfo SActorAnimSetVariationIndexSaveData::TypeInfo = ZHMTypeInfo("SActorAnimSetVariationIndexSaveData", sizeof(SActorAnimSetVariationIndexSaveData), alignof(SActorAnimSetVariationIndexSaveData), SActorAnimSetVariationIndexSaveData::WriteJson, SActorAnimSetVariationIndexSaveData::WriteSimpleJson, SActorAnimSetVariationIndexSaveData::FromSimpleJson, SActorAnimSetVariationIndexSaveData::Serialize);

void SActorAnimSetVariationIndexSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorAnimSetVariationIndexSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rAnimationSetDefinition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rAnimationSetDefinition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorAnimSetVariationIndexSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorAnimSetVariationIndexSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rAnimationSetDefinition") << ":";
	p_Stream << s_Object->m_rAnimationSetDefinition;
	p_Stream << ",";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << s_Object->m_nIndex;

	p_Stream << "}";
}

void SActorAnimSetVariationIndexSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorAnimSetVariationIndexSaveData s_Object;

	s_Object.m_rAnimationSetDefinition = static_cast<uint32>(int64_t(p_Document["m_rAnimationSetDefinition"]));

	s_Object.m_nIndex = static_cast<int32>(int64_t(p_Document["m_nIndex"]));

	*reinterpret_cast<SActorAnimSetVariationIndexSaveData*>(p_Target) = s_Object;
}

void SActorAnimSetVariationIndexSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorAnimSetVariationIndexSaveData*>(p_Object);

}

ZHMTypeInfo SActorAnimSetSaveData::TypeInfo = ZHMTypeInfo("SActorAnimSetSaveData", sizeof(SActorAnimSetSaveData), alignof(SActorAnimSetSaveData), SActorAnimSetSaveData::WriteJson, SActorAnimSetSaveData::WriteSimpleJson, SActorAnimSetSaveData::FromSimpleJson, SActorAnimSetSaveData::Serialize);

void SActorAnimSetSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorAnimSetSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eAnimSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAnimSetType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAnimSet) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetType", static_cast<int>(s_Object->m_eAnimSet))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCustomAnimationSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCustomAnimationSet;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eVariationResourceMaxTension") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eVariationResourceMaxTension) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eVariationResourceMaxTension))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eVariationResourceMaxEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eVariationResourceMaxEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eVariationResourceMaxEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAnimSetEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAnimSetState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAnimSetEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetState", static_cast<int>(s_Object->m_eAnimSetEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ePreCustomAnimSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAnimSetType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_ePreCustomAnimSet) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetType", static_cast<int>(s_Object->m_ePreCustomAnimSet))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aLocoVariationIndecies") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorAnimSetVariationIndexSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLocoVariationIndecies.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aLocoVariationIndecies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorAnimSetVariationIndexSaveData") << "," << JsonStr("$val") << ":";
		SActorAnimSetVariationIndexSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aLocoVariationIndecies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aReactVariationIndecies") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorAnimSetVariationIndexSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aReactVariationIndecies.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aReactVariationIndecies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorAnimSetVariationIndexSaveData") << "," << JsonStr("$val") << ":";
		SActorAnimSetVariationIndexSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aReactVariationIndecies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActorAnimSetSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorAnimSetSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eAnimSet") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetType", static_cast<int>(s_Object->m_eAnimSet)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rCustomAnimationSet") << ":";
	p_Stream << s_Object->m_rCustomAnimationSet;
	p_Stream << ",";

	p_Stream << JsonStr("m_eVariationResourceMaxTension") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eVariationResourceMaxTension)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eVariationResourceMaxEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eVariationResourceMaxEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eAnimSetEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetState", static_cast<int>(s_Object->m_eAnimSetEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_ePreCustomAnimSet") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAnimSetType", static_cast<int>(s_Object->m_ePreCustomAnimSet)));
	p_Stream << ",";

	p_Stream << JsonStr("m_aLocoVariationIndecies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLocoVariationIndecies.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aLocoVariationIndecies[i];
		SActorAnimSetVariationIndexSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aLocoVariationIndecies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aReactVariationIndecies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aReactVariationIndecies.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aReactVariationIndecies[i];
		SActorAnimSetVariationIndexSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aReactVariationIndecies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorAnimSetSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorAnimSetSaveData s_Object;

	s_Object.m_eAnimSet = static_cast<EAnimSetType>(ZHMEnums::GetEnumValueByName("EAnimSetType", std::string_view(p_Document["m_eAnimSet"])));

	s_Object.m_rCustomAnimationSet = static_cast<uint32>(int64_t(p_Document["m_rCustomAnimationSet"]));

	s_Object.m_eVariationResourceMaxTension = static_cast<EGameTension>(ZHMEnums::GetEnumValueByName("EGameTension", std::string_view(p_Document["m_eVariationResourceMaxTension"])));

	s_Object.m_eVariationResourceMaxEmotionState = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_eVariationResourceMaxEmotionState"])));

	s_Object.m_eAnimSetEmotionState = static_cast<EAnimSetState>(ZHMEnums::GetEnumValueByName("EAnimSetState", std::string_view(p_Document["m_eAnimSetEmotionState"])));

	s_Object.m_ePreCustomAnimSet = static_cast<EAnimSetType>(ZHMEnums::GetEnumValueByName("EAnimSetType", std::string_view(p_Document["m_ePreCustomAnimSet"])));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aLocoVariationIndecies"])
	{
		SActorAnimSetVariationIndexSaveData s_ArrayItem0;
		SActorAnimSetVariationIndexSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aLocoVariationIndecies.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aReactVariationIndecies"])
	{
		SActorAnimSetVariationIndexSaveData s_ArrayItem0;
		SActorAnimSetVariationIndexSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aReactVariationIndecies.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SActorAnimSetSaveData*>(p_Target) = s_Object;
}

void SActorAnimSetSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorAnimSetSaveData*>(p_Object);

	TArray<SActorAnimSetVariationIndexSaveData>::Serialize(&s_Object->m_aLocoVariationIndecies, p_Serializer, p_OwnOffset + offsetof(SActorAnimSetSaveData, m_aLocoVariationIndecies));
	TArray<SActorAnimSetVariationIndexSaveData>::Serialize(&s_Object->m_aReactVariationIndecies, p_Serializer, p_OwnOffset + offsetof(SActorAnimSetSaveData, m_aReactVariationIndecies));
}

ZHMTypeInfo SActorInventoryItemSaveData::TypeInfo = ZHMTypeInfo("SActorInventoryItemSaveData", sizeof(SActorInventoryItemSaveData), alignof(SActorInventoryItemSaveData), SActorInventoryItemSaveData::WriteJson, SActorInventoryItemSaveData::WriteSimpleJson, SActorInventoryItemSaveData::FromSimpleJson, SActorInventoryItemSaveData::Serialize);

void SActorInventoryItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorInventoryItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAttachLocation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAttachLocation") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAttachLocation) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAttachLocation", static_cast<int>(s_Object->m_eAttachLocation))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eMaxTension") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eMaxTension) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eMaxTension))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeftHand") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLeftHand;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeapon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWeapon;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGrenade") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGrenade;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorInventoryItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorInventoryItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_eAttachLocation") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAttachLocation", static_cast<int>(s_Object->m_eAttachLocation)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eMaxTension") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eMaxTension)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeftHand") << ":";
	p_Stream << s_Object->m_bLeftHand;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeapon") << ":";
	p_Stream << s_Object->m_bWeapon;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGrenade") << ":";
	p_Stream << s_Object->m_bGrenade;

	p_Stream << "}";
}

void SActorInventoryItemSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorInventoryItemSaveData s_Object;

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	s_Object.m_eAttachLocation = static_cast<EAttachLocation>(ZHMEnums::GetEnumValueByName("EAttachLocation", std::string_view(p_Document["m_eAttachLocation"])));

	s_Object.m_eMaxTension = static_cast<EGameTension>(ZHMEnums::GetEnumValueByName("EGameTension", std::string_view(p_Document["m_eMaxTension"])));

	s_Object.m_bLeftHand = bool(p_Document["m_bLeftHand"]);

	s_Object.m_bWeapon = bool(p_Document["m_bWeapon"]);

	s_Object.m_bGrenade = bool(p_Document["m_bGrenade"]);

	*reinterpret_cast<SActorInventoryItemSaveData*>(p_Target) = s_Object;
}

void SActorInventoryItemSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorInventoryItemSaveData*>(p_Object);

}

ZHMTypeInfo SActorInventorySaveData::TypeInfo = ZHMTypeInfo("SActorInventorySaveData", sizeof(SActorInventorySaveData), alignof(SActorInventorySaveData), SActorInventorySaveData::WriteJson, SActorInventorySaveData::WriteSimpleJson, SActorInventorySaveData::FromSimpleJson, SActorInventorySaveData::Serialize);

void SActorInventorySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorInventorySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorInventoryItemSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorInventoryItemSaveData") << "," << JsonStr("$val") << ":";
		SActorInventoryItemSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActorInventorySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorInventorySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aItems[i];
		SActorInventoryItemSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorInventorySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorInventorySaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aItems"])
	{
		SActorInventoryItemSaveData s_ArrayItem0;
		SActorInventoryItemSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aItems.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SActorInventorySaveData*>(p_Target) = s_Object;
}

void SActorInventorySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorInventorySaveData*>(p_Object);

	TArray<SActorInventoryItemSaveData>::Serialize(&s_Object->m_aItems, p_Serializer, p_OwnOffset + offsetof(SActorInventorySaveData, m_aItems));
}

ZHMTypeInfo SLongTermMemorySaveData::TypeInfo = ZHMTypeInfo("SLongTermMemorySaveData", sizeof(SLongTermMemorySaveData), alignof(SLongTermMemorySaveData), SLongTermMemorySaveData::WriteJson, SLongTermMemorySaveData::WriteSimpleJson, SLongTermMemorySaveData::FromSimpleJson, SLongTermMemorySaveData::Serialize);

void SLongTermMemorySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLongTermMemorySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_sOutfit, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Memory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_Memory);
	p_Stream << "}";

	p_Stream << "}";
}

void SLongTermMemorySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLongTermMemorySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sOutfit") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_sOutfit, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Memory") << ":";
	p_Stream << static_cast<int>(s_Object->m_Memory);

	p_Stream << "}";
}

void SLongTermMemorySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLongTermMemorySaveData s_Object;

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_sOutfit"], &s_Item);
		s_Object.m_sOutfit = s_Item;
	}

	s_Object.m_Memory = static_cast<uint8>(int64_t(p_Document["m_Memory"]));

	*reinterpret_cast<SLongTermMemorySaveData*>(p_Target) = s_Object;
}

void SLongTermMemorySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLongTermMemorySaveData*>(p_Object);

	ZRepositoryID::Serialize(&s_Object->m_sOutfit, p_Serializer, p_OwnOffset + offsetof(SLongTermMemorySaveData, m_sOutfit));
}

ZHMTypeInfo SActorDamageControlSaveData::TypeInfo = ZHMTypeInfo("SActorDamageControlSaveData", sizeof(SActorDamageControlSaveData), alignof(SActorDamageControlSaveData), SActorDamageControlSaveData::WriteJson, SActorDamageControlSaveData::WriteSimpleJson, SActorDamageControlSaveData::FromSimpleJson, SActorDamageControlSaveData::Serialize);

void SActorDamageControlSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorDamageControlSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("bExplosive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bExplosive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bProjectile") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bProjectile;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHeadshot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHeadshot;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSniperShot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSniperShot;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bThroughWall") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bThroughWall;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bKillByAccident") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bKillByAccident;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bWeaponSilenced") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bWeaponSilenced;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bLongRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bLongRange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fTotalDamage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fTotalDamage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fPacifyDamage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fPacifyDamage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nImpactBodyPart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nImpactBodyPart;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("maxDeathType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDeathType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->maxDeathType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDeathType", static_cast<int>(s_Object->maxDeathType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("maxDeathContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDeathContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->maxDeathContext) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->maxDeathContext))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rAccidentSetup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rAccidentSetup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bFirearmPacifiesTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bFirearmPacifiesTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bBulletCausesHitReaction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bBulletCausesHitReaction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fHitsNumberTimeout") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fHitsNumberTimeout;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fHealthPercentTimeout") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fHealthPercentTimeout;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rCharacter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rCharacter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rSource") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rSource;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_accuseUnconsciousOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_accuseUnconsciousOutfit, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidAccuseUnconsciousOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValidAccuseUnconsciousOutfit;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eDeathSpeak") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorSoundDefs") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eDeathSpeak) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->eDeathSpeak))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bDefaultDeathSound") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bDefaultDeathSound;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("iEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->iEvents;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAgilityElementUncosciousTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAgilityElementUncosciousTime;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorDamageControlSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorDamageControlSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("bExplosive") << ":";
	p_Stream << s_Object->bExplosive;
	p_Stream << ",";

	p_Stream << JsonStr("bProjectile") << ":";
	p_Stream << s_Object->bProjectile;
	p_Stream << ",";

	p_Stream << JsonStr("bHeadshot") << ":";
	p_Stream << s_Object->bHeadshot;
	p_Stream << ",";

	p_Stream << JsonStr("bSniperShot") << ":";
	p_Stream << s_Object->bSniperShot;
	p_Stream << ",";

	p_Stream << JsonStr("bThroughWall") << ":";
	p_Stream << s_Object->bThroughWall;
	p_Stream << ",";

	p_Stream << JsonStr("bKillByAccident") << ":";
	p_Stream << s_Object->bKillByAccident;
	p_Stream << ",";

	p_Stream << JsonStr("bWeaponSilenced") << ":";
	p_Stream << s_Object->bWeaponSilenced;
	p_Stream << ",";

	p_Stream << JsonStr("bLongRange") << ":";
	p_Stream << s_Object->bLongRange;
	p_Stream << ",";

	p_Stream << JsonStr("fTotalDamage") << ":";
	p_Stream << s_Object->fTotalDamage;
	p_Stream << ",";

	p_Stream << JsonStr("fPacifyDamage") << ":";
	p_Stream << s_Object->fPacifyDamage;
	p_Stream << ",";

	p_Stream << JsonStr("nImpactBodyPart") << ":";
	p_Stream << s_Object->nImpactBodyPart;
	p_Stream << ",";

	p_Stream << JsonStr("maxDeathType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDeathType", static_cast<int>(s_Object->maxDeathType)));
	p_Stream << ",";

	p_Stream << JsonStr("maxDeathContext") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDeathContext", static_cast<int>(s_Object->maxDeathContext)));
	p_Stream << ",";

	p_Stream << JsonStr("rAccidentSetup") << ":";
	p_Stream << s_Object->rAccidentSetup;
	p_Stream << ",";

	p_Stream << JsonStr("bFirearmPacifiesTarget") << ":";
	p_Stream << s_Object->bFirearmPacifiesTarget;
	p_Stream << ",";

	p_Stream << JsonStr("bBulletCausesHitReaction") << ":";
	p_Stream << s_Object->bBulletCausesHitReaction;
	p_Stream << ",";

	p_Stream << JsonStr("fHitsNumberTimeout") << ":";
	p_Stream << s_Object->fHitsNumberTimeout;
	p_Stream << ",";

	p_Stream << JsonStr("fHealthPercentTimeout") << ":";
	p_Stream << s_Object->fHealthPercentTimeout;
	p_Stream << ",";

	p_Stream << JsonStr("rCharacter") << ":";
	p_Stream << s_Object->rCharacter;
	p_Stream << ",";

	p_Stream << JsonStr("rSource") << ":";
	p_Stream << s_Object->rSource;
	p_Stream << ",";

	p_Stream << JsonStr("m_accuseUnconsciousOutfit") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_accuseUnconsciousOutfit, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidAccuseUnconsciousOutfit") << ":";
	p_Stream << s_Object->m_bValidAccuseUnconsciousOutfit;
	p_Stream << ",";

	p_Stream << JsonStr("eDeathSpeak") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->eDeathSpeak)));
	p_Stream << ",";

	p_Stream << JsonStr("bDefaultDeathSound") << ":";
	p_Stream << s_Object->bDefaultDeathSound;
	p_Stream << ",";

	p_Stream << JsonStr("iEvents") << ":";
	p_Stream << s_Object->iEvents;
	p_Stream << ",";

	p_Stream << JsonStr("fAgilityElementUncosciousTime") << ":";
	p_Stream << s_Object->fAgilityElementUncosciousTime;

	p_Stream << "}";
}

void SActorDamageControlSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorDamageControlSaveData s_Object;

	s_Object.bExplosive = bool(p_Document["bExplosive"]);

	s_Object.bProjectile = bool(p_Document["bProjectile"]);

	s_Object.bHeadshot = bool(p_Document["bHeadshot"]);

	s_Object.bSniperShot = bool(p_Document["bSniperShot"]);

	s_Object.bThroughWall = bool(p_Document["bThroughWall"]);

	s_Object.bKillByAccident = bool(p_Document["bKillByAccident"]);

	s_Object.bWeaponSilenced = bool(p_Document["bWeaponSilenced"]);

	s_Object.bLongRange = bool(p_Document["bLongRange"]);

	s_Object.fTotalDamage = static_cast<float32>(double(p_Document["fTotalDamage"]));

	s_Object.fPacifyDamage = static_cast<float32>(double(p_Document["fPacifyDamage"]));

	s_Object.nImpactBodyPart = static_cast<int32>(int64_t(p_Document["nImpactBodyPart"]));

	s_Object.maxDeathType = static_cast<EDeathType>(ZHMEnums::GetEnumValueByName("EDeathType", std::string_view(p_Document["maxDeathType"])));

	s_Object.maxDeathContext = static_cast<EDeathContext>(ZHMEnums::GetEnumValueByName("EDeathContext", std::string_view(p_Document["maxDeathContext"])));

	s_Object.rAccidentSetup = static_cast<uint32>(int64_t(p_Document["rAccidentSetup"]));

	s_Object.bFirearmPacifiesTarget = bool(p_Document["bFirearmPacifiesTarget"]);

	s_Object.bBulletCausesHitReaction = bool(p_Document["bBulletCausesHitReaction"]);

	s_Object.fHitsNumberTimeout = static_cast<float32>(double(p_Document["fHitsNumberTimeout"]));

	s_Object.fHealthPercentTimeout = static_cast<float32>(double(p_Document["fHealthPercentTimeout"]));

	s_Object.rCharacter = static_cast<uint32>(int64_t(p_Document["rCharacter"]));

	s_Object.rSource = static_cast<uint32>(int64_t(p_Document["rSource"]));

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_accuseUnconsciousOutfit"], &s_Item);
		s_Object.m_accuseUnconsciousOutfit = s_Item;
	}

	s_Object.m_bValidAccuseUnconsciousOutfit = bool(p_Document["m_bValidAccuseUnconsciousOutfit"]);

	s_Object.eDeathSpeak = static_cast<EActorSoundDefs>(ZHMEnums::GetEnumValueByName("EActorSoundDefs", std::string_view(p_Document["eDeathSpeak"])));

	s_Object.bDefaultDeathSound = bool(p_Document["bDefaultDeathSound"]);

	s_Object.iEvents = static_cast<int32>(int64_t(p_Document["iEvents"]));

	s_Object.fAgilityElementUncosciousTime = static_cast<float32>(double(p_Document["fAgilityElementUncosciousTime"]));

	*reinterpret_cast<SActorDamageControlSaveData*>(p_Target) = s_Object;
}

void SActorDamageControlSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorDamageControlSaveData*>(p_Object);

	ZRepositoryID::Serialize(&s_Object->m_accuseUnconsciousOutfit, p_Serializer, p_OwnOffset + offsetof(SActorDamageControlSaveData, m_accuseUnconsciousOutfit));
}

ZHMTypeInfo SActorDynamicTemplateSaveData::TypeInfo = ZHMTypeInfo("SActorDynamicTemplateSaveData", sizeof(SActorDynamicTemplateSaveData), alignof(SActorDynamicTemplateSaveData), SActorDynamicTemplateSaveData::WriteJson, SActorDynamicTemplateSaveData::WriteSimpleJson, SActorDynamicTemplateSaveData::FromSimpleJson, SActorDynamicTemplateSaveData::Serialize);

void SActorDynamicTemplateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorDynamicTemplateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTensionLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTensionLimit) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eTensionLimit))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEmotionLimit) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionLimit))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nTimeLimit, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTensionRemoveLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGameTension") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTensionRemoveLimit) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eTensionRemoveLimit))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionRemoveLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEmotionRemoveLimit) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionRemoveLimit))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeRemoveLimit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nTimeRemoveLimit, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_resourceID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_resourceID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInstance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInstance;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorDynamicTemplateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorDynamicTemplateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << ",";

	p_Stream << JsonStr("m_eTensionLimit") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eTensionLimit)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionLimit") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionLimit)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeLimit") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nTimeLimit, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eTensionRemoveLimit") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGameTension", static_cast<int>(s_Object->m_eTensionRemoveLimit)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionRemoveLimit") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionRemoveLimit)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeRemoveLimit") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nTimeRemoveLimit, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_resourceID") << ":";
	p_Stream << s_Object->m_resourceID;
	p_Stream << ",";

	p_Stream << JsonStr("m_rInstance") << ":";
	p_Stream << s_Object->m_rInstance;

	p_Stream << "}";
}

void SActorDynamicTemplateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorDynamicTemplateSaveData s_Object;

	s_Object.m_sName = std::string_view(p_Document["m_sName"]);

	s_Object.m_eTensionLimit = static_cast<EGameTension>(ZHMEnums::GetEnumValueByName("EGameTension", std::string_view(p_Document["m_eTensionLimit"])));

	s_Object.m_eEmotionLimit = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_eEmotionLimit"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_nTimeLimit"], &s_Item);
		s_Object.m_nTimeLimit = s_Item;
	}

	s_Object.m_eTensionRemoveLimit = static_cast<EGameTension>(ZHMEnums::GetEnumValueByName("EGameTension", std::string_view(p_Document["m_eTensionRemoveLimit"])));

	s_Object.m_eEmotionRemoveLimit = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_eEmotionRemoveLimit"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_nTimeRemoveLimit"], &s_Item);
		s_Object.m_nTimeRemoveLimit = s_Item;
	}

	s_Object.m_resourceID = int64(p_Document["m_resourceID"]);

	s_Object.m_rInstance = static_cast<uint32>(int64_t(p_Document["m_rInstance"]));

	*reinterpret_cast<SActorDynamicTemplateSaveData*>(p_Target) = s_Object;
}

void SActorDynamicTemplateSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorDynamicTemplateSaveData*>(p_Object);

	ZString::Serialize(&s_Object->m_sName, p_Serializer, p_OwnOffset + offsetof(SActorDynamicTemplateSaveData, m_sName));
	ZGameTime::Serialize(&s_Object->m_nTimeLimit, p_Serializer, p_OwnOffset + offsetof(SActorDynamicTemplateSaveData, m_nTimeLimit));
	ZGameTime::Serialize(&s_Object->m_nTimeRemoveLimit, p_Serializer, p_OwnOffset + offsetof(SActorDynamicTemplateSaveData, m_nTimeRemoveLimit));
}

ZHMTypeInfo SEventHistorySaveData::TypeInfo = ZHMTypeInfo("SEventHistorySaveData", sizeof(SEventHistorySaveData), alignof(SEventHistorySaveData), SEventHistorySaveData::WriteJson, SEventHistorySaveData::WriteSimpleJson, SEventHistorySaveData::FromSimpleJson, SEventHistorySaveData::Serialize);

void SEventHistorySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEventHistorySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aOccurences") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZGameTime>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aOccurences.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aOccurences[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
		ZGameTime::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aOccurences.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SEventHistorySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEventHistorySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aOccurences") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aOccurences.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aOccurences[i];
		ZGameTime::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aOccurences.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEventHistorySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEventHistorySaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aOccurences"])
	{
		ZGameTime s_ArrayItem0;
		ZGameTime::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aOccurences.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SEventHistorySaveData*>(p_Target) = s_Object;
}

void SEventHistorySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEventHistorySaveData*>(p_Object);

	TArray<ZGameTime>::Serialize(&s_Object->m_aOccurences, p_Serializer, p_OwnOffset + offsetof(SEventHistorySaveData, m_aOccurences));
}

ZHMTypeInfo SActorBoneSaveData::TypeInfo = ZHMTypeInfo("SActorBoneSaveData", sizeof(SActorBoneSaveData), alignof(SActorBoneSaveData), SActorBoneSaveData::WriteJson, SActorBoneSaveData::WriteSimpleJson, SActorBoneSaveData::FromSimpleJson, SActorBoneSaveData::Serialize);

void SActorBoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorBoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTranslation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SActorBoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorBoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTranslation, p_Stream);

	p_Stream << "}";
}

void SActorBoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorBoneSaveData s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mQuaterion"], &s_Item);
		s_Object.mQuaterion = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mTranslation"], &s_Item);
		s_Object.mTranslation = s_Item;
	}

	*reinterpret_cast<SActorBoneSaveData*>(p_Target) = s_Object;
}

void SActorBoneSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorBoneSaveData*>(p_Object);

	SVector4::Serialize(&s_Object->mQuaterion, p_Serializer, p_OwnOffset + offsetof(SActorBoneSaveData, mQuaterion));
	SVector4::Serialize(&s_Object->mTranslation, p_Serializer, p_OwnOffset + offsetof(SActorBoneSaveData, mTranslation));
}

ZHMTypeInfo SActorRagdollPoseSaveData::TypeInfo = ZHMTypeInfo("SActorRagdollPoseSaveData", sizeof(SActorRagdollPoseSaveData), alignof(SActorRagdollPoseSaveData), SActorRagdollPoseSaveData::WriteJson, SActorRagdollPoseSaveData::WriteSimpleJson, SActorRagdollPoseSaveData::FromSimpleJson, SActorRagdollPoseSaveData::Serialize);

void SActorRagdollPoseSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorRagdollPoseSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vBodyVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vBodyVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorBoneSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorBoneSaveData") << "," << JsonStr("$val") << ":";
		SActorBoneSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneIndices") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBoneIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aBoneIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActorRagdollPoseSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorRagdollPoseSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vBodyVelocity") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vBodyVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBones[i];
		SActorBoneSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBoneIndices[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aBoneIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorRagdollPoseSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorRagdollPoseSaveData s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vBodyVelocity"], &s_Item);
		s_Object.m_vBodyVelocity = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aBones"])
	{
		SActorBoneSaveData s_ArrayItem0;
		SActorBoneSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aBones.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aBoneIndices"])
	{
		s_Object.m_aBoneIndices.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SActorRagdollPoseSaveData*>(p_Target) = s_Object;
}

void SActorRagdollPoseSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorRagdollPoseSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vBodyVelocity, p_Serializer, p_OwnOffset + offsetof(SActorRagdollPoseSaveData, m_vBodyVelocity));
	TArray<SActorBoneSaveData>::Serialize(&s_Object->m_aBones, p_Serializer, p_OwnOffset + offsetof(SActorRagdollPoseSaveData, m_aBones));
	TArray<uint32>::Serialize(&s_Object->m_aBoneIndices, p_Serializer, p_OwnOffset + offsetof(SActorRagdollPoseSaveData, m_aBoneIndices));
}

ZHMTypeInfo SActorSaveData::TypeInfo = ZHMTypeInfo("SActorSaveData", sizeof(SActorSaveData), alignof(SActorSaveData), SActorSaveData::WriteJson, SActorSaveData::WriteSimpleJson, SActorSaveData::FromSimpleJson, SActorSaveData::Serialize);

void SActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vQuaternion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Inventory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorInventorySaveData") << "," << JsonStr("$val") << ":";
	SActorInventorySaveData::WriteJson(&s_Object->m_Inventory, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_AnimSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorAnimSetSaveData") << "," << JsonStr("$val") << ":";
	SActorAnimSetSaveData::WriteJson(&s_Object->m_AnimSet, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ThrowHandler") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorThrowSaveData") << "," << JsonStr("$val") << ":";
	SActorThrowSaveData::WriteJson(&s_Object->m_ThrowHandler, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentBehaviorType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCurrentBehaviorType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CurrentBehaviorState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CurrentBehaviorState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aCurrentBehaviorEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCurrentBehaviorEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCurrentBehaviorEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aCurrentBehaviorEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBehaviorEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBehaviorEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBehaviorEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aBehaviorEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_KnowledgeData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SKnowledgeSaveData") << "," << JsonStr("$val") << ":";
	SKnowledgeSaveData::WriteJson(&s_Object->m_KnowledgeData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OutfitRepositoryId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_OutfitRepositoryId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitCharset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOutfitCharset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitVariation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOutfitVariation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tSequenceEndTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tSequenceEndTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorState", static_cast<int>(s_Object->m_nState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBodyContainerEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBodyContainerEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBodyContainerSlot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBodyContainerSlot;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCorpseBodybagEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCorpseBodybagEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDragBodybagEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDragBodybagEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_AccidentContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_AccidentContext;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ActorDamageControlData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorDamageControlSaveData") << "," << JsonStr("$val") << ":";
	SActorDamageControlSaveData::WriteJson(&s_Object->m_ActorDamageControlData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_AnimatedActorOrderData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_AnimatedActorOrderData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStepsFraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStepsFraction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fZBeforeEnteringStairs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fZBeforeEnteringStairs;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fZError") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fZError;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDynamicTemplates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorDynamicTemplateSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDynamicTemplates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDynamicTemplates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorDynamicTemplateSaveData") << "," << JsonStr("$val") << ":";
		SActorDynamicTemplateSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aDynamicTemplates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sEndOrientation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_sEndOrientation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eOverrideSensorState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorAIState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eOverrideSensorState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorAIState", static_cast<int>(s_Object->m_eOverrideSensorState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eDeathBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDeathBehavior") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eDeathBehavior) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDeathBehavior", static_cast<int>(s_Object->m_eDeathBehavior))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bumpsHistory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEventHistorySaveData") << "," << JsonStr("$val") << ":";
	SEventHistorySaveData::WriteJson(&s_Object->m_bumpsHistory, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_RagdollPose") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorRagdollPoseSaveData") << "," << JsonStr("$val") << ":";
	SActorRagdollPoseSaveData::WriteJson(&s_Object->m_RagdollPose, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aLongTermMemorySaveData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SLongTermMemorySaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLongTermMemorySaveData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aLongTermMemorySaveData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLongTermMemorySaveData") << "," << JsonStr("$val") << ":";
		SLongTermMemorySaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aLongTermMemorySaveData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_AgentData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_AgentData;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_KnockdownsWhileConscious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_KnockdownsWhileConscious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_SecondaryAIIconState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_SecondaryAIIconState;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_SituationAvailabilityValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_SituationAvailabilityValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_HadValidAgent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_HadValidAgent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNude") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNude;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActiveEnforcer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActiveEnforcer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPotentialEnforcer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPotentialEnforcer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDynamicEnforcer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDynamicEnforcer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsCrowdCharacter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsCrowdCharacter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsWoozy") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsWoozy;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlendingOrientation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBlendingOrientation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMakeMainWeaponUndroppable") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMakeMainWeaponUndroppable;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFinalizePendingSpawnGrenade") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFinalizePendingSpawnGrenade;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeaponIsHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWeaponIsHidden;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegisteredForLT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRegisteredForLT;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bKeepOverrideSensorStateAfterBeingUnconscious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bKeepOverrideSensorStateAfterBeingUnconscious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeaponReady") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWeaponReady;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDynamicWeaponUnholstered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDynamicWeaponUnholstered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceInteractionGlow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForceInteractionGlow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOutfitRuined") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOutfitRuined;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_BehaviorSelectDisabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_BehaviorSelectDisabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternion") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vQuaternion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Inventory") << ":";
	SActorInventorySaveData::WriteSimpleJson(&s_Object->m_Inventory, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_AnimSet") << ":";
	SActorAnimSetSaveData::WriteSimpleJson(&s_Object->m_AnimSet, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ThrowHandler") << ":";
	SActorThrowSaveData::WriteSimpleJson(&s_Object->m_ThrowHandler, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentBehaviorType") << ":";
	p_Stream << s_Object->m_nCurrentBehaviorType;
	p_Stream << ",";

	p_Stream << JsonStr("m_CurrentBehaviorState") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CurrentBehaviorState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aCurrentBehaviorEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCurrentBehaviorEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCurrentBehaviorEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aCurrentBehaviorEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBehaviorEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBehaviorEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBehaviorEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aBehaviorEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_KnowledgeData") << ":";
	SKnowledgeSaveData::WriteSimpleJson(&s_Object->m_KnowledgeData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_OutfitRepositoryId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_OutfitRepositoryId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitCharset") << ":";
	p_Stream << s_Object->m_nOutfitCharset;
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitVariation") << ":";
	p_Stream << s_Object->m_nOutfitVariation;
	p_Stream << ",";

	p_Stream << JsonStr("m_tSequenceEndTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tSequenceEndTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorState", static_cast<int>(s_Object->m_nState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rBodyContainerEntity") << ":";
	p_Stream << s_Object->m_rBodyContainerEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_nBodyContainerSlot") << ":";
	p_Stream << s_Object->m_nBodyContainerSlot;
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rCorpseBodybagEntity") << ":";
	p_Stream << s_Object->m_rCorpseBodybagEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_rDragBodybagEntity") << ":";
	p_Stream << s_Object->m_rDragBodybagEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_AccidentContext") << ":";
	p_Stream << s_Object->m_AccidentContext;
	p_Stream << ",";

	p_Stream << JsonStr("m_ActorDamageControlData") << ":";
	SActorDamageControlSaveData::WriteSimpleJson(&s_Object->m_ActorDamageControlData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_AnimatedActorOrderData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_AnimatedActorOrderData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fStepsFraction") << ":";
	p_Stream << s_Object->m_fStepsFraction;
	p_Stream << ",";

	p_Stream << JsonStr("m_fZBeforeEnteringStairs") << ":";
	p_Stream << s_Object->m_fZBeforeEnteringStairs;
	p_Stream << ",";

	p_Stream << JsonStr("m_fZError") << ":";
	p_Stream << s_Object->m_fZError;
	p_Stream << ",";

	p_Stream << JsonStr("m_aDynamicTemplates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDynamicTemplates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDynamicTemplates[i];
		SActorDynamicTemplateSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aDynamicTemplates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_sEndOrientation") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_sEndOrientation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eOverrideSensorState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorAIState", static_cast<int>(s_Object->m_eOverrideSensorState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eDeathBehavior") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDeathBehavior", static_cast<int>(s_Object->m_eDeathBehavior)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bumpsHistory") << ":";
	SEventHistorySaveData::WriteSimpleJson(&s_Object->m_bumpsHistory, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_RagdollPose") << ":";
	SActorRagdollPoseSaveData::WriteSimpleJson(&s_Object->m_RagdollPose, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aLongTermMemorySaveData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLongTermMemorySaveData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aLongTermMemorySaveData[i];
		SLongTermMemorySaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aLongTermMemorySaveData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_AgentData") << ":";
	p_Stream << s_Object->m_AgentData;
	p_Stream << ",";

	p_Stream << JsonStr("m_KnockdownsWhileConscious") << ":";
	p_Stream << s_Object->m_KnockdownsWhileConscious;
	p_Stream << ",";

	p_Stream << JsonStr("m_SecondaryAIIconState") << ":";
	p_Stream << s_Object->m_SecondaryAIIconState;
	p_Stream << ",";

	p_Stream << JsonStr("m_SituationAvailabilityValue") << ":";
	p_Stream << s_Object->m_SituationAvailabilityValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_HadValidAgent") << ":";
	p_Stream << s_Object->m_HadValidAgent;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNude") << ":";
	p_Stream << s_Object->m_bNude;
	p_Stream << ",";

	p_Stream << JsonStr("m_bActiveEnforcer") << ":";
	p_Stream << s_Object->m_bActiveEnforcer;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPotentialEnforcer") << ":";
	p_Stream << s_Object->m_bIsPotentialEnforcer;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDynamicEnforcer") << ":";
	p_Stream << s_Object->m_bDynamicEnforcer;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsCrowdCharacter") << ":";
	p_Stream << s_Object->m_bIsCrowdCharacter;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsWoozy") << ":";
	p_Stream << s_Object->m_bIsWoozy;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlendingOrientation") << ":";
	p_Stream << s_Object->m_bBlendingOrientation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMakeMainWeaponUndroppable") << ":";
	p_Stream << s_Object->m_bMakeMainWeaponUndroppable;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFinalizePendingSpawnGrenade") << ":";
	p_Stream << s_Object->m_bFinalizePendingSpawnGrenade;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeaponIsHidden") << ":";
	p_Stream << s_Object->m_bWeaponIsHidden;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRegisteredForLT") << ":";
	p_Stream << s_Object->m_bRegisteredForLT;
	p_Stream << ",";

	p_Stream << JsonStr("m_bKeepOverrideSensorStateAfterBeingUnconscious") << ":";
	p_Stream << s_Object->m_bKeepOverrideSensorStateAfterBeingUnconscious;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeaponReady") << ":";
	p_Stream << s_Object->m_bWeaponReady;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDynamicWeaponUnholstered") << ":";
	p_Stream << s_Object->m_bDynamicWeaponUnholstered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceInteractionGlow") << ":";
	p_Stream << s_Object->m_bForceInteractionGlow;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOutfitRuined") << ":";
	p_Stream << s_Object->m_bIsOutfitRuined;
	p_Stream << ",";

	p_Stream << JsonStr("m_BehaviorSelectDisabled") << ":";
	p_Stream << s_Object->m_BehaviorSelectDisabled;

	p_Stream << "}";
}

void SActorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorSaveData s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vQuaternion"], &s_Item);
		s_Object.m_vQuaternion = s_Item;
	}

	{
		SActorInventorySaveData s_Item;
		SActorInventorySaveData::FromSimpleJson(p_Document["m_Inventory"], &s_Item);
		s_Object.m_Inventory = s_Item;
	}

	{
		SActorAnimSetSaveData s_Item;
		SActorAnimSetSaveData::FromSimpleJson(p_Document["m_AnimSet"], &s_Item);
		s_Object.m_AnimSet = s_Item;
	}

	{
		SActorThrowSaveData s_Item;
		SActorThrowSaveData::FromSimpleJson(p_Document["m_ThrowHandler"], &s_Item);
		s_Object.m_ThrowHandler = s_Item;
	}

	s_Object.m_nCurrentBehaviorType = static_cast<int32>(int64_t(p_Document["m_nCurrentBehaviorType"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_CurrentBehaviorState"], &s_Item);
		s_Object.m_CurrentBehaviorState = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aCurrentBehaviorEntities"])
	{
		s_Object.m_aCurrentBehaviorEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aBehaviorEntities"])
	{
		s_Object.m_aBehaviorEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	{
		SKnowledgeSaveData s_Item;
		SKnowledgeSaveData::FromSimpleJson(p_Document["m_KnowledgeData"], &s_Item);
		s_Object.m_KnowledgeData = s_Item;
	}

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_OutfitRepositoryId"], &s_Item);
		s_Object.m_OutfitRepositoryId = s_Item;
	}

	s_Object.m_nOutfitCharset = static_cast<int32>(int64_t(p_Document["m_nOutfitCharset"]));

	s_Object.m_nOutfitVariation = static_cast<int32>(int64_t(p_Document["m_nOutfitVariation"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tSequenceEndTime"], &s_Item);
		s_Object.m_tSequenceEndTime = s_Item;
	}

	s_Object.m_nState = static_cast<EActorState>(ZHMEnums::GetEnumValueByName("EActorState", std::string_view(p_Document["m_nState"])));

	s_Object.m_rBodyContainerEntity = static_cast<uint32>(int64_t(p_Document["m_rBodyContainerEntity"]));

	s_Object.m_nBodyContainerSlot = static_cast<int32>(int64_t(p_Document["m_nBodyContainerSlot"]));

	s_Object.m_eEmotionState = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_eEmotionState"])));

	s_Object.m_rCorpseBodybagEntity = static_cast<uint32>(int64_t(p_Document["m_rCorpseBodybagEntity"]));

	s_Object.m_rDragBodybagEntity = static_cast<uint32>(int64_t(p_Document["m_rDragBodybagEntity"]));

	s_Object.m_AccidentContext = static_cast<uint32>(int64_t(p_Document["m_AccidentContext"]));

	{
		SActorDamageControlSaveData s_Item;
		SActorDamageControlSaveData::FromSimpleJson(p_Document["m_ActorDamageControlData"], &s_Item);
		s_Object.m_ActorDamageControlData = s_Item;
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_AnimatedActorOrderData"], &s_Item);
		s_Object.m_AnimatedActorOrderData = s_Item;
	}

	s_Object.m_fStepsFraction = static_cast<float32>(double(p_Document["m_fStepsFraction"]));

	s_Object.m_fZBeforeEnteringStairs = static_cast<float32>(double(p_Document["m_fZBeforeEnteringStairs"]));

	s_Object.m_fZError = static_cast<float32>(double(p_Document["m_fZError"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aDynamicTemplates"])
	{
		SActorDynamicTemplateSaveData s_ArrayItem0;
		SActorDynamicTemplateSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aDynamicTemplates.push_back(s_ArrayItem0);
	}

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_sEndOrientation"], &s_Item);
		s_Object.m_sEndOrientation = s_Item;
	}

	s_Object.m_eOverrideSensorState = static_cast<EActorAIState>(ZHMEnums::GetEnumValueByName("EActorAIState", std::string_view(p_Document["m_eOverrideSensorState"])));

	s_Object.m_eDeathBehavior = static_cast<EDeathBehavior>(ZHMEnums::GetEnumValueByName("EDeathBehavior", std::string_view(p_Document["m_eDeathBehavior"])));

	{
		SEventHistorySaveData s_Item;
		SEventHistorySaveData::FromSimpleJson(p_Document["m_bumpsHistory"], &s_Item);
		s_Object.m_bumpsHistory = s_Item;
	}

	{
		SActorRagdollPoseSaveData s_Item;
		SActorRagdollPoseSaveData::FromSimpleJson(p_Document["m_RagdollPose"], &s_Item);
		s_Object.m_RagdollPose = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aLongTermMemorySaveData"])
	{
		SLongTermMemorySaveData s_ArrayItem0;
		SLongTermMemorySaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aLongTermMemorySaveData.push_back(s_ArrayItem0);
	}

	s_Object.m_AgentData = static_cast<uint32>(int64_t(p_Document["m_AgentData"]));

	s_Object.m_KnockdownsWhileConscious = static_cast<uint32>(int64_t(p_Document["m_KnockdownsWhileConscious"]));

	s_Object.m_SecondaryAIIconState = static_cast<uint32>(int64_t(p_Document["m_SecondaryAIIconState"]));

	s_Object.m_SituationAvailabilityValue = static_cast<int32>(int64_t(p_Document["m_SituationAvailabilityValue"]));

	s_Object.m_HadValidAgent = bool(p_Document["m_HadValidAgent"]);

	s_Object.m_bNude = bool(p_Document["m_bNude"]);

	s_Object.m_bActiveEnforcer = bool(p_Document["m_bActiveEnforcer"]);

	s_Object.m_bIsPotentialEnforcer = bool(p_Document["m_bIsPotentialEnforcer"]);

	s_Object.m_bDynamicEnforcer = bool(p_Document["m_bDynamicEnforcer"]);

	s_Object.m_bIsCrowdCharacter = bool(p_Document["m_bIsCrowdCharacter"]);

	s_Object.m_bIsWoozy = bool(p_Document["m_bIsWoozy"]);

	s_Object.m_bBlendingOrientation = bool(p_Document["m_bBlendingOrientation"]);

	s_Object.m_bMakeMainWeaponUndroppable = bool(p_Document["m_bMakeMainWeaponUndroppable"]);

	s_Object.m_bFinalizePendingSpawnGrenade = bool(p_Document["m_bFinalizePendingSpawnGrenade"]);

	s_Object.m_bWeaponIsHidden = bool(p_Document["m_bWeaponIsHidden"]);

	s_Object.m_bRegisteredForLT = bool(p_Document["m_bRegisteredForLT"]);

	s_Object.m_bKeepOverrideSensorStateAfterBeingUnconscious = bool(p_Document["m_bKeepOverrideSensorStateAfterBeingUnconscious"]);

	s_Object.m_bWeaponReady = bool(p_Document["m_bWeaponReady"]);

	s_Object.m_bDynamicWeaponUnholstered = bool(p_Document["m_bDynamicWeaponUnholstered"]);

	s_Object.m_bForceInteractionGlow = bool(p_Document["m_bForceInteractionGlow"]);

	s_Object.m_bIsOutfitRuined = bool(p_Document["m_bIsOutfitRuined"]);

	s_Object.m_BehaviorSelectDisabled = bool(p_Document["m_BehaviorSelectDisabled"]);

	*reinterpret_cast<SActorSaveData*>(p_Target) = s_Object;
}

void SActorSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vPosition, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_vPosition));
	SVector4::Serialize(&s_Object->m_vQuaternion, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_vQuaternion));
	SActorInventorySaveData::Serialize(&s_Object->m_Inventory, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_Inventory));
	SActorAnimSetSaveData::Serialize(&s_Object->m_AnimSet, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_AnimSet));
	SActorThrowSaveData::Serialize(&s_Object->m_ThrowHandler, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_ThrowHandler));
	ZVariant::Serialize(&s_Object->m_CurrentBehaviorState, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_CurrentBehaviorState));
	TArray<uint32>::Serialize(&s_Object->m_aCurrentBehaviorEntities, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_aCurrentBehaviorEntities));
	TArray<uint32>::Serialize(&s_Object->m_aBehaviorEntities, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_aBehaviorEntities));
	SKnowledgeSaveData::Serialize(&s_Object->m_KnowledgeData, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_KnowledgeData));
	ZRepositoryID::Serialize(&s_Object->m_OutfitRepositoryId, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_OutfitRepositoryId));
	ZGameTime::Serialize(&s_Object->m_tSequenceEndTime, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_tSequenceEndTime));
	SActorDamageControlSaveData::Serialize(&s_Object->m_ActorDamageControlData, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_ActorDamageControlData));
	ZVariant::Serialize(&s_Object->m_AnimatedActorOrderData, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_AnimatedActorOrderData));
	TArray<SActorDynamicTemplateSaveData>::Serialize(&s_Object->m_aDynamicTemplates, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_aDynamicTemplates));
	SMatrix::Serialize(&s_Object->m_sEndOrientation, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_sEndOrientation));
	SEventHistorySaveData::Serialize(&s_Object->m_bumpsHistory, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_bumpsHistory));
	SActorRagdollPoseSaveData::Serialize(&s_Object->m_RagdollPose, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_RagdollPose));
	TArray<SLongTermMemorySaveData>::Serialize(&s_Object->m_aLongTermMemorySaveData, p_Serializer, p_OwnOffset + offsetof(SActorSaveData, m_aLongTermMemorySaveData));
}

ZHMTypeInfo SEntityPath::TypeInfo = ZHMTypeInfo("SEntityPath", sizeof(SEntityPath), alignof(SEntityPath), SEntityPath::WriteJson, SEntityPath::WriteSimpleJson, SEntityPath::FromSimpleJson, SEntityPath::Serialize);

void SEntityPath::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityPath*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nOwnerID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOwnerID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityPath") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint64>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityPath.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityPath[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntityPath.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityPath::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityPath*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nOwnerID") << ":";
	p_Stream << s_Object->m_nOwnerID;
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityPath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityPath.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityPath[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntityPath.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEntityPath::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityPath s_Object;

	s_Object.m_nOwnerID = uint64(p_Document["m_nOwnerID"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntityPath"])
	{
		s_Object.m_aEntityPath.push_back(uint64(s_Item0));
	}

	*reinterpret_cast<SEntityPath*>(p_Target) = s_Object;
}

void SEntityPath::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityPath*>(p_Object);

	TArray<uint64>::Serialize(&s_Object->m_aEntityPath, p_Serializer, p_OwnOffset + offsetof(SEntityPath, m_aEntityPath));
}

ZHMTypeInfo SSaveGameData::TypeInfo = ZHMTypeInfo("SSaveGameData", sizeof(SSaveGameData), alignof(SSaveGameData), SSaveGameData::WriteJson, SSaveGameData::WriteSimpleJson, SSaveGameData::FromSimpleJson, SSaveGameData::Serialize);

void SSaveGameData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSaveGameData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nVersion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nVersion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSavableObjectsData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SSavableData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSavableObjectsData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSavableObjectsData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSavableData") << "," << JsonStr("$val") << ":";
		SSavableData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aSavableObjectsData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityPaths") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityPath>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityPaths.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityPaths[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityPath") << "," << JsonStr("$val") << ":";
		SEntityPath::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEntityPaths.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SSaveGameData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSaveGameData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nVersion") << ":";
	p_Stream << s_Object->m_nVersion;
	p_Stream << ",";

	p_Stream << JsonStr("m_aSavableObjectsData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSavableObjectsData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSavableObjectsData[i];
		SSavableData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aSavableObjectsData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityPaths") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityPaths.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityPaths[i];
		SEntityPath::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aEntityPaths.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SSaveGameData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSaveGameData s_Object;

	s_Object.m_nVersion = static_cast<uint32>(int64_t(p_Document["m_nVersion"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aSavableObjectsData"])
	{
		SSavableData s_ArrayItem0;
		SSavableData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aSavableObjectsData.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntityPaths"])
	{
		SEntityPath s_ArrayItem0;
		SEntityPath::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aEntityPaths.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SSaveGameData*>(p_Target) = s_Object;
}

void SSaveGameData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSaveGameData*>(p_Object);

	TArray<SSavableData>::Serialize(&s_Object->m_aSavableObjectsData, p_Serializer, p_OwnOffset + offsetof(SSaveGameData, m_aSavableObjectsData));
	TArray<SEntityPath>::Serialize(&s_Object->m_aEntityPaths, p_Serializer, p_OwnOffset + offsetof(SSaveGameData, m_aEntityPaths));
}

ZHMTypeInfo AI_Private_Details_SBaseStimulus_Pool_SaveData::TypeInfo = ZHMTypeInfo("AI.Private.Details.SBaseStimulus_Pool_SaveData", sizeof(AI_Private_Details_SBaseStimulus_Pool_SaveData), alignof(AI_Private_Details_SBaseStimulus_Pool_SaveData), AI_Private_Details_SBaseStimulus_Pool_SaveData::WriteJson, AI_Private_Details_SBaseStimulus_Pool_SaveData::WriteSimpleJson, AI_Private_Details_SBaseStimulus_Pool_SaveData::FromSimpleJson, AI_Private_Details_SBaseStimulus_Pool_SaveData::Serialize);

void AI_Private_Details_SBaseStimulus_Pool_SaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_Private_Details_SBaseStimulus_Pool_SaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_SlotDetails") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_SlotDetails.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_SlotDetails[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_SlotDetails.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_UsageRepresentation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<int16>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_UsageRepresentation.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_UsageRepresentation[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_UsageRepresentation.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_FreeIndices") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint16>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_FreeIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_FreeIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_FreeIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void AI_Private_Details_SBaseStimulus_Pool_SaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_Private_Details_SBaseStimulus_Pool_SaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_SlotDetails") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_SlotDetails.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_SlotDetails[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_SlotDetails.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_UsageRepresentation") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_UsageRepresentation.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_UsageRepresentation[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_UsageRepresentation.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_FreeIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_FreeIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_FreeIndices[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_FreeIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void AI_Private_Details_SBaseStimulus_Pool_SaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AI_Private_Details_SBaseStimulus_Pool_SaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_SlotDetails"])
	{
		s_Object.m_SlotDetails.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_UsageRepresentation"])
	{
		s_Object.m_UsageRepresentation.push_back(static_cast<int16>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_FreeIndices"])
	{
		s_Object.m_FreeIndices.push_back(static_cast<uint16>(int64_t(s_Item0)));
	}

	*reinterpret_cast<AI_Private_Details_SBaseStimulus_Pool_SaveData*>(p_Target) = s_Object;
}

void AI_Private_Details_SBaseStimulus_Pool_SaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AI_Private_Details_SBaseStimulus_Pool_SaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_SlotDetails, p_Serializer, p_OwnOffset + offsetof(AI_Private_Details_SBaseStimulus_Pool_SaveData, m_SlotDetails));
	TArray<int16>::Serialize(&s_Object->m_UsageRepresentation, p_Serializer, p_OwnOffset + offsetof(AI_Private_Details_SBaseStimulus_Pool_SaveData, m_UsageRepresentation));
	TArray<uint16>::Serialize(&s_Object->m_FreeIndices, p_Serializer, p_OwnOffset + offsetof(AI_Private_Details_SBaseStimulus_Pool_SaveData, m_FreeIndices));
}

ZHMTypeInfo SMovementDisguiseSafeZoneSaveData::TypeInfo = ZHMTypeInfo("SMovementDisguiseSafeZoneSaveData", sizeof(SMovementDisguiseSafeZoneSaveData), alignof(SMovementDisguiseSafeZoneSaveData), SMovementDisguiseSafeZoneSaveData::WriteJson, SMovementDisguiseSafeZoneSaveData::WriteSimpleJson, SMovementDisguiseSafeZoneSaveData::FromSimpleJson, SMovementDisguiseSafeZoneSaveData::Serialize);

void SMovementDisguiseSafeZoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementDisguiseSafeZoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rSafeZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSafeZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSafeZoneAnimNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSafeZoneAnimNode;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementDisguiseSafeZoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementDisguiseSafeZoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rSafeZone") << ":";
	p_Stream << s_Object->m_rSafeZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_nSafeZoneAnimNode") << ":";
	p_Stream << s_Object->m_nSafeZoneAnimNode;

	p_Stream << "}";
}

void SMovementDisguiseSafeZoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementDisguiseSafeZoneSaveData s_Object;

	s_Object.m_rSafeZone = static_cast<uint32>(int64_t(p_Document["m_rSafeZone"]));

	s_Object.m_nSafeZoneAnimNode = static_cast<uint32>(int64_t(p_Document["m_nSafeZoneAnimNode"]));

	*reinterpret_cast<SMovementDisguiseSafeZoneSaveData*>(p_Target) = s_Object;
}

void SMovementDisguiseSafeZoneSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMovementDisguiseSafeZoneSaveData*>(p_Object);

}

ZHMTypeInfo AI_SFirePattern02_SData::TypeInfo = ZHMTypeInfo("AI.SFirePattern02.SData", sizeof(AI_SFirePattern02_SData), alignof(AI_SFirePattern02_SData), AI_SFirePattern02_SData::WriteJson, AI_SFirePattern02_SData::WriteSimpleJson, AI_SFirePattern02_SData::FromSimpleJson, AI_SFirePattern02_SData::Serialize);

void AI_SFirePattern02_SData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_SFirePattern02_SData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_FireMinSeconds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_FireMinSeconds;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_FireMaxSeconds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_FireMaxSeconds;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_WaitMinSeconds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_WaitMinSeconds;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_WaitMaxSeconds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_WaitMaxSeconds;
	p_Stream << "}";

	p_Stream << "}";
}

void AI_SFirePattern02_SData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_SFirePattern02_SData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_FireMinSeconds") << ":";
	p_Stream << s_Object->m_FireMinSeconds;
	p_Stream << ",";

	p_Stream << JsonStr("m_FireMaxSeconds") << ":";
	p_Stream << s_Object->m_FireMaxSeconds;
	p_Stream << ",";

	p_Stream << JsonStr("m_WaitMinSeconds") << ":";
	p_Stream << s_Object->m_WaitMinSeconds;
	p_Stream << ",";

	p_Stream << JsonStr("m_WaitMaxSeconds") << ":";
	p_Stream << s_Object->m_WaitMaxSeconds;

	p_Stream << "}";
}

void AI_SFirePattern02_SData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AI_SFirePattern02_SData s_Object;

	s_Object.m_FireMinSeconds = static_cast<float32>(double(p_Document["m_FireMinSeconds"]));

	s_Object.m_FireMaxSeconds = static_cast<float32>(double(p_Document["m_FireMaxSeconds"]));

	s_Object.m_WaitMinSeconds = static_cast<float32>(double(p_Document["m_WaitMinSeconds"]));

	s_Object.m_WaitMaxSeconds = static_cast<float32>(double(p_Document["m_WaitMaxSeconds"]));

	*reinterpret_cast<AI_SFirePattern02_SData*>(p_Target) = s_Object;
}

void AI_SFirePattern02_SData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AI_SFirePattern02_SData*>(p_Object);

}

ZHMTypeInfo AI_SFirePattern02::TypeInfo = ZHMTypeInfo("AI.SFirePattern02", sizeof(AI_SFirePattern02), alignof(AI_SFirePattern02), AI_SFirePattern02::WriteJson, AI_SFirePattern02::WriteSimpleJson, AI_SFirePattern02::FromSimpleJson, AI_SFirePattern02::Serialize);

void AI_SFirePattern02::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_SFirePattern02*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_PatternSequenceData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<AI_SFirePattern02_SData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_PatternSequenceData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_PatternSequenceData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("AI_SFirePattern02_SData") << "," << JsonStr("$val") << ":";
		AI_SFirePattern02_SData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_PatternSequenceData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void AI_SFirePattern02::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_SFirePattern02*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_PatternSequenceData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_PatternSequenceData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_PatternSequenceData[i];
		AI_SFirePattern02_SData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_PatternSequenceData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void AI_SFirePattern02::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AI_SFirePattern02 s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_PatternSequenceData"])
	{
		AI_SFirePattern02_SData s_ArrayItem0;
		AI_SFirePattern02_SData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_PatternSequenceData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<AI_SFirePattern02*>(p_Target) = s_Object;
}

void AI_SFirePattern02::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AI_SFirePattern02*>(p_Object);

	TArray<AI_SFirePattern02_SData>::Serialize(&s_Object->m_PatternSequenceData, p_Serializer, p_OwnOffset + offsetof(AI_SFirePattern02, m_PatternSequenceData));
}

ZHMTypeInfo SHeroEscortSituationActors::TypeInfo = ZHMTypeInfo("SHeroEscortSituationActors", sizeof(SHeroEscortSituationActors), alignof(SHeroEscortSituationActors), SHeroEscortSituationActors::WriteJson, SHeroEscortSituationActors::WriteSimpleJson, SHeroEscortSituationActors::FromSimpleJson, SHeroEscortSituationActors::Serialize);

void SHeroEscortSituationActors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituationActors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroEscortSituationActors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituationActors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SHeroEscortSituationActors::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroEscortSituationActors s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SHeroEscortSituationActors*>(p_Target) = s_Object;
}

void SHeroEscortSituationActors::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituationActors*>(p_Object);

}

ZHMTypeInfo ZCrowdGridPoint::TypeInfo = ZHMTypeInfo("ZCrowdGridPoint", sizeof(ZCrowdGridPoint), alignof(ZCrowdGridPoint), ZCrowdGridPoint::WriteJson, ZCrowdGridPoint::WriteSimpleJson, ZCrowdGridPoint::FromSimpleJson, ZCrowdGridPoint::Serialize);

void ZCrowdGridPoint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZCrowdGridPoint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nHeightOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nHeightOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOnNavGrid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_nOnNavGrid);
	p_Stream << "}";

	p_Stream << "}";
}

void ZCrowdGridPoint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZCrowdGridPoint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nHeightOffset") << ":";
	p_Stream << s_Object->m_nHeightOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_nOnNavGrid") << ":";
	p_Stream << static_cast<int>(s_Object->m_nOnNavGrid);

	p_Stream << "}";
}

void ZCrowdGridPoint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZCrowdGridPoint s_Object;

	s_Object.m_nHeightOffset = static_cast<int16>(int64_t(p_Document["m_nHeightOffset"]));

	s_Object.m_nOnNavGrid = static_cast<uint8>(int64_t(p_Document["m_nOnNavGrid"]));

	*reinterpret_cast<ZCrowdGridPoint*>(p_Target) = s_Object;
}

void ZCrowdGridPoint::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZCrowdGridPoint*>(p_Object);

}

ZHMTypeInfo ISoundMaterialDescriptor::TypeInfo = ZHMTypeInfo("ISoundMaterialDescriptor", sizeof(ISoundMaterialDescriptor), alignof(ISoundMaterialDescriptor), ISoundMaterialDescriptor::WriteJson, ISoundMaterialDescriptor::WriteSimpleJson, ISoundMaterialDescriptor::FromSimpleJson, ISoundMaterialDescriptor::Serialize);

void ISoundMaterialDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISoundMaterialDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISoundMaterialDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISoundMaterialDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ISoundMaterialDescriptor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ISoundMaterialDescriptor s_Object;

	*reinterpret_cast<ISoundMaterialDescriptor*>(p_Target) = s_Object;
}

void ISoundMaterialDescriptor::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ISoundMaterialDescriptor*>(p_Object);

}

ZHMTypeInfo SDisturbanceSaveData::TypeInfo = ZHMTypeInfo("SDisturbanceSaveData", sizeof(SDisturbanceSaveData), alignof(SDisturbanceSaveData), SDisturbanceSaveData::WriteJson, SDisturbanceSaveData::WriteSimpleJson, SDisturbanceSaveData::FromSimpleJson, SDisturbanceSaveData::Serialize);

void SDisturbanceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDisturbanceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_object") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_object;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECautiousDisturbanceState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_state) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECautiousDisturbanceState", static_cast<int>(s_Object->m_state))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_started") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_started, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pInvestigateGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pInvestigateGroup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockOnHitmanPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLockOnHitmanPosition;
	p_Stream << "}";

	p_Stream << "}";
}

void SDisturbanceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDisturbanceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_object") << ":";
	p_Stream << s_Object->m_object;
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type)));
	p_Stream << ",";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECautiousDisturbanceState", static_cast<int>(s_Object->m_state)));
	p_Stream << ",";

	p_Stream << JsonStr("m_started") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_started, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_pInvestigateGroup") << ":";
	p_Stream << s_Object->m_pInvestigateGroup;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockOnHitmanPosition") << ":";
	p_Stream << s_Object->m_bLockOnHitmanPosition;

	p_Stream << "}";
}

void SDisturbanceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDisturbanceSaveData s_Object;

	s_Object.m_object = static_cast<int32>(int64_t(p_Document["m_object"]));

	s_Object.m_type = static_cast<EDisturbanceType>(ZHMEnums::GetEnumValueByName("EDisturbanceType", std::string_view(p_Document["m_type"])));

	s_Object.m_state = static_cast<ECautiousDisturbanceState>(ZHMEnums::GetEnumValueByName("ECautiousDisturbanceState", std::string_view(p_Document["m_state"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_started"], &s_Item);
		s_Object.m_started = s_Item;
	}

	s_Object.m_pInvestigateGroup = static_cast<int32>(int64_t(p_Document["m_pInvestigateGroup"]));

	s_Object.m_bLockOnHitmanPosition = bool(p_Document["m_bLockOnHitmanPosition"]);

	*reinterpret_cast<SDisturbanceSaveData*>(p_Target) = s_Object;
}

void SDisturbanceSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDisturbanceSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_started, p_Serializer, p_OwnOffset + offsetof(SDisturbanceSaveData, m_started));
}

ZHMTypeInfo SZHUDIgnoreVisibilitySaveData::TypeInfo = ZHMTypeInfo("SZHUDIgnoreVisibilitySaveData", sizeof(SZHUDIgnoreVisibilitySaveData), alignof(SZHUDIgnoreVisibilitySaveData), SZHUDIgnoreVisibilitySaveData::WriteJson, SZHUDIgnoreVisibilitySaveData::WriteSimpleJson, SZHUDIgnoreVisibilitySaveData::FromSimpleJson, SZHUDIgnoreVisibilitySaveData::Serialize);

void SZHUDIgnoreVisibilitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SZHUDIgnoreVisibilitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("alpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->alpha;
	p_Stream << "}";

	p_Stream << "}";
}

void SZHUDIgnoreVisibilitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SZHUDIgnoreVisibilitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("alpha") << ":";
	p_Stream << s_Object->alpha;

	p_Stream << "}";
}

void SZHUDIgnoreVisibilitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SZHUDIgnoreVisibilitySaveData s_Object;

	s_Object.alpha = static_cast<float32>(double(p_Document["alpha"]));

	*reinterpret_cast<SZHUDIgnoreVisibilitySaveData*>(p_Target) = s_Object;
}

void SZHUDIgnoreVisibilitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SZHUDIgnoreVisibilitySaveData*>(p_Object);

}

ZHMTypeInfo SGameCamProfileEntitySaveData::TypeInfo = ZHMTypeInfo("SGameCamProfileEntitySaveData", sizeof(SGameCamProfileEntitySaveData), alignof(SGameCamProfileEntitySaveData), SGameCamProfileEntitySaveData::WriteJson, SGameCamProfileEntitySaveData::WriteSimpleJson, SGameCamProfileEntitySaveData::FromSimpleJson, SGameCamProfileEntitySaveData::Serialize);

void SGameCamProfileEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameCamProfileEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << "}";

	p_Stream << "}";
}

void SGameCamProfileEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameCamProfileEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << s_Object->m_rHero;

	p_Stream << "}";
}

void SGameCamProfileEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameCamProfileEntitySaveData s_Object;

	s_Object.m_bIsEnabled = bool(p_Document["m_bIsEnabled"]);

	s_Object.m_rHero = static_cast<uint32>(int64_t(p_Document["m_rHero"]));

	*reinterpret_cast<SGameCamProfileEntitySaveData*>(p_Target) = s_Object;
}

void SGameCamProfileEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGameCamProfileEntitySaveData*>(p_Object);

}

ZHMTypeInfo SEntityTemplateExposedEntity::TypeInfo = ZHMTypeInfo("SEntityTemplateExposedEntity", sizeof(SEntityTemplateExposedEntity), alignof(SEntityTemplateExposedEntity), SEntityTemplateExposedEntity::WriteJson, SEntityTemplateExposedEntity::WriteSimpleJson, SEntityTemplateExposedEntity::FromSimpleJson, SEntityTemplateExposedEntity::Serialize);

void SEntityTemplateExposedEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateExposedEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsArray") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsArray;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aTargets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityTemplateReference>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aTargets.size(); ++i)
	{
		auto& s_Item0 = s_Object->aTargets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
		SEntityTemplateReference::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aTargets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplateExposedEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateExposedEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("bIsArray") << ":";
	p_Stream << s_Object->bIsArray;
	p_Stream << ",";

	p_Stream << JsonStr("aTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aTargets.size(); ++i)
	{
		auto& s_Item0 = s_Object->aTargets[i];
		SEntityTemplateReference::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->aTargets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEntityTemplateExposedEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplateExposedEntity s_Object;

	s_Object.sName = std::string_view(p_Document["sName"]);

	s_Object.bIsArray = bool(p_Document["bIsArray"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["aTargets"])
	{
		SEntityTemplateReference s_ArrayItem0;
		SEntityTemplateReference::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.aTargets.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SEntityTemplateExposedEntity*>(p_Target) = s_Object;
}

void SEntityTemplateExposedEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateExposedEntity*>(p_Object);

	ZString::Serialize(&s_Object->sName, p_Serializer, p_OwnOffset + offsetof(SEntityTemplateExposedEntity, sName));
	TArray<SEntityTemplateReference>::Serialize(&s_Object->aTargets, p_Serializer, p_OwnOffset + offsetof(SEntityTemplateExposedEntity, aTargets));
}

ZHMTypeInfo SLightFlickerEntitySaveData::TypeInfo = ZHMTypeInfo("SLightFlickerEntitySaveData", sizeof(SLightFlickerEntitySaveData), alignof(SLightFlickerEntitySaveData), SLightFlickerEntitySaveData::WriteJson, SLightFlickerEntitySaveData::WriteSimpleJson, SLightFlickerEntitySaveData::FromSimpleJson, SLightFlickerEntitySaveData::Serialize);

void SLightFlickerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLightFlickerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bLightOn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLightOn;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFlickerOn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFlickerOn;
	p_Stream << "}";

	p_Stream << "}";
}

void SLightFlickerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLightFlickerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bLightOn") << ":";
	p_Stream << s_Object->m_bLightOn;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFlickerOn") << ":";
	p_Stream << s_Object->m_bFlickerOn;

	p_Stream << "}";
}

void SLightFlickerEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLightFlickerEntitySaveData s_Object;

	s_Object.m_bLightOn = bool(p_Document["m_bLightOn"]);

	s_Object.m_bFlickerOn = bool(p_Document["m_bFlickerOn"]);

	*reinterpret_cast<SLightFlickerEntitySaveData*>(p_Target) = s_Object;
}

void SLightFlickerEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLightFlickerEntitySaveData*>(p_Object);

}

ZHMTypeInfo SColorRGBA::TypeInfo = ZHMTypeInfo("SColorRGBA", sizeof(SColorRGBA), alignof(SColorRGBA), SColorRGBA::WriteJson, SColorRGBA::WriteSimpleJson, SColorRGBA::FromSimpleJson, SColorRGBA::Serialize);

void SColorRGBA::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SColorRGBA*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("r") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->r;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("g") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->g;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->b;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("a") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->a;
	p_Stream << "}";

	p_Stream << "}";
}

void SColorRGBA::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SColorRGBA*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("r") << ":";
	p_Stream << s_Object->r;
	p_Stream << ",";

	p_Stream << JsonStr("g") << ":";
	p_Stream << s_Object->g;
	p_Stream << ",";

	p_Stream << JsonStr("b") << ":";
	p_Stream << s_Object->b;
	p_Stream << ",";

	p_Stream << JsonStr("a") << ":";
	p_Stream << s_Object->a;

	p_Stream << "}";
}

void SColorRGBA::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SColorRGBA s_Object;

	s_Object.r = static_cast<float32>(double(p_Document["r"]));

	s_Object.g = static_cast<float32>(double(p_Document["g"]));

	s_Object.b = static_cast<float32>(double(p_Document["b"]));

	s_Object.a = static_cast<float32>(double(p_Document["a"]));

	*reinterpret_cast<SColorRGBA*>(p_Target) = s_Object;
}

void SColorRGBA::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SColorRGBA*>(p_Object);

}

ZHMTypeInfo SMathLerpSaveData_SColorRGBA::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SColorRGBA", sizeof(SMathLerpSaveData_SColorRGBA), alignof(SMathLerpSaveData_SColorRGBA), SMathLerpSaveData_SColorRGBA::WriteJson, SMathLerpSaveData_SColorRGBA::WriteSimpleJson, SMathLerpSaveData_SColorRGBA::FromSimpleJson, SMathLerpSaveData_SColorRGBA::Serialize);

void SMathLerpSaveData_SColorRGBA::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SColorRGBA*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGBA") << "," << JsonStr("$val") << ":";
	SColorRGBA::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGBA") << "," << JsonStr("$val") << ":";
	SColorRGBA::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SColorRGBA::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SColorRGBA*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SColorRGBA::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SColorRGBA::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

void SMathLerpSaveData_SColorRGBA::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpSaveData_SColorRGBA s_Object;

	{
		SColorRGBA s_Item;
		SColorRGBA::FromSimpleJson(p_Document["m_A"], &s_Item);
		s_Object.m_A = s_Item;
	}

	{
		SColorRGBA s_Item;
		SColorRGBA::FromSimpleJson(p_Document["m_B"], &s_Item);
		s_Object.m_B = s_Item;
	}

	s_Object.m_fT = static_cast<float32>(double(p_Document["m_fT"]));

	*reinterpret_cast<SMathLerpSaveData_SColorRGBA*>(p_Target) = s_Object;
}

void SMathLerpSaveData_SColorRGBA::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SColorRGBA*>(p_Object);

	SColorRGBA::Serialize(&s_Object->m_A, p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SColorRGBA, m_A));
	SColorRGBA::Serialize(&s_Object->m_B, p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SColorRGBA, m_B));
}

ZHMTypeInfo SMathLerpsSaveData_SColorRGBA::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SColorRGBA", sizeof(SMathLerpsSaveData_SColorRGBA), alignof(SMathLerpsSaveData_SColorRGBA), SMathLerpsSaveData_SColorRGBA::WriteJson, SMathLerpsSaveData_SColorRGBA::WriteSimpleJson, SMathLerpsSaveData_SColorRGBA::FromSimpleJson, SMathLerpsSaveData_SColorRGBA::Serialize);

void SMathLerpsSaveData_SColorRGBA::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SColorRGBA*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SMathLerpSaveData_SColorRGBA>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SColorRGBA") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SColorRGBA::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpsSaveData_SColorRGBA::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SColorRGBA*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SMathLerpSaveData_SColorRGBA::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SColorRGBA::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpsSaveData_SColorRGBA s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SMathLerpSaveData_SColorRGBA s_ArrayItem0;
		SMathLerpSaveData_SColorRGBA::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SMathLerpsSaveData_SColorRGBA*>(p_Target) = s_Object;
}

void SMathLerpsSaveData_SColorRGBA::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SColorRGBA*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SColorRGBA, m_aEntities));
	TArray<SMathLerpSaveData_SColorRGBA>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SColorRGBA, m_aData));
}

ZHMTypeInfo SFriskSuspectGroupSaveData::TypeInfo = ZHMTypeInfo("SFriskSuspectGroupSaveData", sizeof(SFriskSuspectGroupSaveData), alignof(SFriskSuspectGroupSaveData), SFriskSuspectGroupSaveData::WriteJson, SFriskSuspectGroupSaveData::WriteSimpleJson, SFriskSuspectGroupSaveData::FromSimpleJson, SFriskSuspectGroupSaveData::Serialize);

void SFriskSuspectGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFriskSuspectGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHitmanIsGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHitmanIsGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAssistantState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZFriskSuspectGroup.EAssistantState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAssistantState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZFriskSuspectGroup.EAssistantState", static_cast<int>(s_Object->m_eAssistantState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eDisturbanceType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eDisturbanceType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_eDisturbanceType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eHitmanGreetState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZFriskSuspectGroup.EHitmanGreetState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eHitmanGreetState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZFriskSuspectGroup.EHitmanGreetState", static_cast<int>(s_Object->m_eHitmanGreetState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tHitmanGreet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tHitmanGreet, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fMovingTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fMovingTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRunningTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRunningTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitToComplyTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tWaitToComplyTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWarnOnWeaponFound") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWarnOnWeaponFound;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeaponFound") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWeaponFound;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMoveWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMoveWarning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirskRequestRepeated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFirskRequestRepeated;
	p_Stream << "}";

	p_Stream << "}";
}

void SFriskSuspectGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFriskSuspectGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bHitmanIsGuard") << ":";
	p_Stream << s_Object->m_bHitmanIsGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << ",";

	p_Stream << JsonStr("m_eAssistantState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZFriskSuspectGroup.EAssistantState", static_cast<int>(s_Object->m_eAssistantState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eDisturbanceType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_eDisturbanceType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eHitmanGreetState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZFriskSuspectGroup.EHitmanGreetState", static_cast<int>(s_Object->m_eHitmanGreetState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_tHitmanGreet") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tHitmanGreet, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fMovingTime") << ":";
	p_Stream << s_Object->m_fMovingTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRunningTime") << ":";
	p_Stream << s_Object->m_fRunningTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitToComplyTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tWaitToComplyTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bWarnOnWeaponFound") << ":";
	p_Stream << s_Object->m_bWarnOnWeaponFound;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWeaponFound") << ":";
	p_Stream << s_Object->m_bWeaponFound;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMoveWarning") << ":";
	p_Stream << s_Object->m_bMoveWarning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirskRequestRepeated") << ":";
	p_Stream << s_Object->m_bFirskRequestRepeated;

	p_Stream << "}";
}

void SFriskSuspectGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFriskSuspectGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_bHitmanIsGuard = bool(p_Document["m_bHitmanIsGuard"]);

	s_Object.m_target = static_cast<int32>(int64_t(p_Document["m_target"]));

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	s_Object.m_pAssistant = static_cast<uint32>(int64_t(p_Document["m_pAssistant"]));

	s_Object.m_eAssistantState = static_cast<ZFriskSuspectGroup_EAssistantState>(ZHMEnums::GetEnumValueByName("ZFriskSuspectGroup.EAssistantState", std::string_view(p_Document["m_eAssistantState"])));

	s_Object.m_eDisturbanceType = static_cast<EDisturbanceType>(ZHMEnums::GetEnumValueByName("EDisturbanceType", std::string_view(p_Document["m_eDisturbanceType"])));

	s_Object.m_eHitmanGreetState = static_cast<ZFriskSuspectGroup_EHitmanGreetState>(ZHMEnums::GetEnumValueByName("ZFriskSuspectGroup.EHitmanGreetState", std::string_view(p_Document["m_eHitmanGreetState"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tHitmanGreet"], &s_Item);
		s_Object.m_tHitmanGreet = s_Item;
	}

	s_Object.m_fMovingTime = static_cast<float32>(double(p_Document["m_fMovingTime"]));

	s_Object.m_fRunningTime = static_cast<float32>(double(p_Document["m_fRunningTime"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tWaitToComplyTime"], &s_Item);
		s_Object.m_tWaitToComplyTime = s_Item;
	}

	s_Object.m_bWarnOnWeaponFound = bool(p_Document["m_bWarnOnWeaponFound"]);

	s_Object.m_bWeaponFound = bool(p_Document["m_bWeaponFound"]);

	s_Object.m_bMoveWarning = bool(p_Document["m_bMoveWarning"]);

	s_Object.m_bFirskRequestRepeated = bool(p_Document["m_bFirskRequestRepeated"]);

	*reinterpret_cast<SFriskSuspectGroupSaveData*>(p_Target) = s_Object;
}

void SFriskSuspectGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SFriskSuspectGroupSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SFriskSuspectGroupSaveData, m_fsmState));
	ZGameTime::Serialize(&s_Object->m_tHitmanGreet, p_Serializer, p_OwnOffset + offsetof(SFriskSuspectGroupSaveData, m_tHitmanGreet));
	ZGameTime::Serialize(&s_Object->m_tWaitToComplyTime, p_Serializer, p_OwnOffset + offsetof(SFriskSuspectGroupSaveData, m_tWaitToComplyTime));
}

ZHMTypeInfo STypeReference::TypeInfo = ZHMTypeInfo("STypeReference", sizeof(STypeReference), alignof(STypeReference), STypeReference::WriteJson, STypeReference::WriteSimpleJson, STypeReference::FromSimpleJson, STypeReference::Serialize);

void STypeReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STypeReference*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sEntityID);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sTypeArgName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sTypeArgName);
	p_Stream << "}";

	p_Stream << "}";
}

void STypeReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STypeReference*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sEntityID") << ":";
	p_Stream << JsonStr(s_Object->sEntityID);
	p_Stream << ",";

	p_Stream << JsonStr("sTypeArgName") << ":";
	p_Stream << JsonStr(s_Object->sTypeArgName);

	p_Stream << "}";
}

void STypeReference::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STypeReference s_Object;

	s_Object.sEntityID = std::string_view(p_Document["sEntityID"]);

	s_Object.sTypeArgName = std::string_view(p_Document["sTypeArgName"]);

	*reinterpret_cast<STypeReference*>(p_Target) = s_Object;
}

void STypeReference::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STypeReference*>(p_Object);

	ZString::Serialize(&s_Object->sEntityID, p_Serializer, p_OwnOffset + offsetof(STypeReference, sEntityID));
	ZString::Serialize(&s_Object->sTypeArgName, p_Serializer, p_OwnOffset + offsetof(STypeReference, sTypeArgName));
}

ZHMTypeInfo SExposedTypeInfo::TypeInfo = ZHMTypeInfo("SExposedTypeInfo", sizeof(SExposedTypeInfo), alignof(SExposedTypeInfo), SExposedTypeInfo::WriteJson, SExposedTypeInfo::WriteSimpleJson, SExposedTypeInfo::FromSimpleJson, SExposedTypeInfo::Serialize);

void SExposedTypeInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExposedTypeInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STypeReference") << "," << JsonStr("$val") << ":";
	STypeReference::WriteJson(&s_Object->target, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SExposedTypeInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExposedTypeInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << ",";

	p_Stream << JsonStr("target") << ":";
	STypeReference::WriteSimpleJson(&s_Object->target, p_Stream);

	p_Stream << "}";
}

void SExposedTypeInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExposedTypeInfo s_Object;

	s_Object.sName = std::string_view(p_Document["sName"]);

	s_Object.sDisplayName = std::string_view(p_Document["sDisplayName"]);

	s_Object.sHelpText = std::string_view(p_Document["sHelpText"]);

	{
		STypeReference s_Item;
		STypeReference::FromSimpleJson(p_Document["target"], &s_Item);
		s_Object.target = s_Item;
	}

	*reinterpret_cast<SExposedTypeInfo*>(p_Target) = s_Object;
}

void SExposedTypeInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SExposedTypeInfo*>(p_Object);

	ZString::Serialize(&s_Object->sName, p_Serializer, p_OwnOffset + offsetof(SExposedTypeInfo, sName));
	ZString::Serialize(&s_Object->sDisplayName, p_Serializer, p_OwnOffset + offsetof(SExposedTypeInfo, sDisplayName));
	ZString::Serialize(&s_Object->sHelpText, p_Serializer, p_OwnOffset + offsetof(SExposedTypeInfo, sHelpText));
	STypeReference::Serialize(&s_Object->target, p_Serializer, p_OwnOffset + offsetof(SExposedTypeInfo, target));
}

ZHMTypeInfo SDynamicEnforcerCandidateSaveData::TypeInfo = ZHMTypeInfo("SDynamicEnforcerCandidateSaveData", sizeof(SDynamicEnforcerCandidateSaveData), alignof(SDynamicEnforcerCandidateSaveData), SDynamicEnforcerCandidateSaveData::WriteJson, SDynamicEnforcerCandidateSaveData::WriteSimpleJson, SDynamicEnforcerCandidateSaveData::FromSimpleJson, SDynamicEnforcerCandidateSaveData::Serialize);

void SDynamicEnforcerCandidateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDynamicEnforcerCandidateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadius") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRadius;
	p_Stream << "}";

	p_Stream << "}";
}

void SDynamicEnforcerCandidateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDynamicEnforcerCandidateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadius") << ":";
	p_Stream << s_Object->m_fRadius;

	p_Stream << "}";
}

void SDynamicEnforcerCandidateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDynamicEnforcerCandidateSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	s_Object.m_eType = static_cast<EAISharedEventType>(ZHMEnums::GetEnumValueByName("EAISharedEventType", std::string_view(p_Document["m_eType"])));

	s_Object.m_fRadius = static_cast<float32>(double(p_Document["m_fRadius"]));

	*reinterpret_cast<SDynamicEnforcerCandidateSaveData*>(p_Target) = s_Object;
}

void SDynamicEnforcerCandidateSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDynamicEnforcerCandidateSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vPosition, p_Serializer, p_OwnOffset + offsetof(SDynamicEnforcerCandidateSaveData, m_vPosition));
}

ZHMTypeInfo SDynamicEnforcerServiceSaveData::TypeInfo = ZHMTypeInfo("SDynamicEnforcerServiceSaveData", sizeof(SDynamicEnforcerServiceSaveData), alignof(SDynamicEnforcerServiceSaveData), SDynamicEnforcerServiceSaveData::WriteJson, SDynamicEnforcerServiceSaveData::WriteSimpleJson, SDynamicEnforcerServiceSaveData::FromSimpleJson, SDynamicEnforcerServiceSaveData::Serialize);

void SDynamicEnforcerServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDynamicEnforcerServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDynamicEnforcerCandidateSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCandidates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDynamicEnforcerCandidateSaveData") << "," << JsonStr("$val") << ":";
		SDynamicEnforcerCandidateSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SDynamicEnforcerServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDynamicEnforcerServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCandidates[i];
		SDynamicEnforcerCandidateSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDynamicEnforcerServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDynamicEnforcerServiceSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aCandidates"])
	{
		SDynamicEnforcerCandidateSaveData s_ArrayItem0;
		SDynamicEnforcerCandidateSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aCandidates.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SDynamicEnforcerServiceSaveData*>(p_Target) = s_Object;
}

void SDynamicEnforcerServiceSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDynamicEnforcerServiceSaveData*>(p_Object);

	TArray<SDynamicEnforcerCandidateSaveData>::Serialize(&s_Object->m_aCandidates, p_Serializer, p_OwnOffset + offsetof(SDynamicEnforcerServiceSaveData, m_aCandidates));
}

ZHMTypeInfo SActorStandInSaveData::TypeInfo = ZHMTypeInfo("SActorStandInSaveData", sizeof(SActorStandInSaveData), alignof(SActorStandInSaveData), SActorStandInSaveData::WriteJson, SActorStandInSaveData::WriteSimpleJson, SActorStandInSaveData::FromSimpleJson, SActorStandInSaveData::Serialize);

void SActorStandInSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorStandInSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorStandInSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorStandInSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SActorStandInSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorStandInSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SActorStandInSaveData*>(p_Target) = s_Object;
}

void SActorStandInSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorStandInSaveData*>(p_Object);

}

ZHMTypeInfo SDynamicRayCastEntitySaveData::TypeInfo = ZHMTypeInfo("SDynamicRayCastEntitySaveData", sizeof(SDynamicRayCastEntitySaveData), alignof(SDynamicRayCastEntitySaveData), SDynamicRayCastEntitySaveData::WriteJson, SDynamicRayCastEntitySaveData::WriteSimpleJson, SDynamicRayCastEntitySaveData::FromSimpleJson, SDynamicRayCastEntitySaveData::Serialize);

void SDynamicRayCastEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDynamicRayCastEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRayIntersecting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsRayIntersecting;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsCurrentlyEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsCurrentlyEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SDynamicRayCastEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDynamicRayCastEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRayIntersecting") << ":";
	p_Stream << s_Object->m_bIsRayIntersecting;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsCurrentlyEnabled") << ":";
	p_Stream << s_Object->m_bIsCurrentlyEnabled;

	p_Stream << "}";
}

void SDynamicRayCastEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDynamicRayCastEntitySaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_bIsRayIntersecting = bool(p_Document["m_bIsRayIntersecting"]);

	s_Object.m_bIsCurrentlyEnabled = bool(p_Document["m_bIsCurrentlyEnabled"]);

	*reinterpret_cast<SDynamicRayCastEntitySaveData*>(p_Target) = s_Object;
}

void SDynamicRayCastEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDynamicRayCastEntitySaveData*>(p_Object);

}

ZHMTypeInfo ZRuntimePinConDesc::TypeInfo = ZHMTypeInfo("ZRuntimePinConDesc", sizeof(ZRuntimePinConDesc), alignof(ZRuntimePinConDesc), ZRuntimePinConDesc::WriteJson, ZRuntimePinConDesc::WriteSimpleJson, ZRuntimePinConDesc::FromSimpleJson, ZRuntimePinConDesc::Serialize);

void ZRuntimePinConDesc::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZRuntimePinConDesc*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nFromEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFromEntityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nToEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nToEntityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFromPinID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFromPinID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nToPinID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nToPinID;
	p_Stream << "}";

	p_Stream << "}";
}

void ZRuntimePinConDesc::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZRuntimePinConDesc*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nFromEntityID") << ":";
	p_Stream << s_Object->m_nFromEntityID;
	p_Stream << ",";

	p_Stream << JsonStr("m_nToEntityID") << ":";
	p_Stream << s_Object->m_nToEntityID;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFromPinID") << ":";
	p_Stream << s_Object->m_nFromPinID;
	p_Stream << ",";

	p_Stream << JsonStr("m_nToPinID") << ":";
	p_Stream << s_Object->m_nToPinID;

	p_Stream << "}";
}

void ZRuntimePinConDesc::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZRuntimePinConDesc s_Object;

	s_Object.m_nFromEntityID = uint64(p_Document["m_nFromEntityID"]);

	s_Object.m_nToEntityID = uint64(p_Document["m_nToEntityID"]);

	s_Object.m_nFromPinID = static_cast<uint32>(int64_t(p_Document["m_nFromPinID"]));

	s_Object.m_nToPinID = static_cast<uint32>(int64_t(p_Document["m_nToPinID"]));

	*reinterpret_cast<ZRuntimePinConDesc*>(p_Target) = s_Object;
}

void ZRuntimePinConDesc::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZRuntimePinConDesc*>(p_Object);

}

ZHMTypeInfo SPostfilterParametersSaveData::TypeInfo = ZHMTypeInfo("SPostfilterParametersSaveData", sizeof(SPostfilterParametersSaveData), alignof(SPostfilterParametersSaveData), SPostfilterParametersSaveData::WriteJson, SPostfilterParametersSaveData::WriteSimpleJson, SPostfilterParametersSaveData::FromSimpleJson, SPostfilterParametersSaveData::Serialize);

void SPostfilterParametersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPostfilterParametersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDepthOfFieldEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDepthOfFieldEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDepthOfFieldBlurriness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDepthOfFieldBlurriness;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRadialBlurEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRadialBlurEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadialBlurriness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRadialBlurriness;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vRadialBlurCenter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vRadialBlurCenter, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadialBlurStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRadialBlurStart;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpatialBlurEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSpatialBlurEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurriness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpatialBlurriness;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vSpatialBlurCenter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vSpatialBlurCenter, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpatialBlurStart;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurFade") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSpatialBlurFade;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDistortionWobbleEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDistortionWobbleEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistortionWobbleScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistortionWobbleScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDistortionWobbleWaveLength") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vDistortionWobbleWaveLength, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDistortionWobbleSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vDistortionWobbleSpeed, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDistortionWobbleUseRealTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDistortionWobbleUseRealTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHDRActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHDRActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHDREnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHDREnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vHDRAdaptationSpeed, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationLuminanceMinMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vHDRAdaptationLuminanceMinMax, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationMiddleGrayMinMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vHDRAdaptationMiddleGrayMinMax, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRWhitePoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHDRWhitePoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRBrightPassThreshold") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHDRBrightPassThreshold;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRBrightPassMaxPercentage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHDRBrightPassMaxPercentage;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_HDRColorTint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_HDRColorTint, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SPostfilterParametersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPostfilterParametersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDepthOfFieldEnabled") << ":";
	p_Stream << s_Object->m_bDepthOfFieldEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDepthOfFieldBlurriness") << ":";
	p_Stream << s_Object->m_fDepthOfFieldBlurriness;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRadialBlurEnabled") << ":";
	p_Stream << s_Object->m_bRadialBlurEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadialBlurriness") << ":";
	p_Stream << s_Object->m_fRadialBlurriness;
	p_Stream << ",";

	p_Stream << JsonStr("m_vRadialBlurCenter") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vRadialBlurCenter, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fRadialBlurStart") << ":";
	p_Stream << s_Object->m_fRadialBlurStart;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpatialBlurEnabled") << ":";
	p_Stream << s_Object->m_bSpatialBlurEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurriness") << ":";
	p_Stream << s_Object->m_fSpatialBlurriness;
	p_Stream << ",";

	p_Stream << JsonStr("m_vSpatialBlurCenter") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vSpatialBlurCenter, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurStart") << ":";
	p_Stream << s_Object->m_fSpatialBlurStart;
	p_Stream << ",";

	p_Stream << JsonStr("m_fSpatialBlurFade") << ":";
	p_Stream << s_Object->m_fSpatialBlurFade;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDistortionWobbleEnabled") << ":";
	p_Stream << s_Object->m_bDistortionWobbleEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistortionWobbleScale") << ":";
	p_Stream << s_Object->m_fDistortionWobbleScale;
	p_Stream << ",";

	p_Stream << JsonStr("m_vDistortionWobbleWaveLength") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vDistortionWobbleWaveLength, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vDistortionWobbleSpeed") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vDistortionWobbleSpeed, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bDistortionWobbleUseRealTime") << ":";
	p_Stream << s_Object->m_bDistortionWobbleUseRealTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHDRActive") << ":";
	p_Stream << s_Object->m_bHDRActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHDREnabled") << ":";
	p_Stream << s_Object->m_bHDREnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationSpeed") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vHDRAdaptationSpeed, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationLuminanceMinMax") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vHDRAdaptationLuminanceMinMax, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vHDRAdaptationMiddleGrayMinMax") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vHDRAdaptationMiddleGrayMinMax, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRWhitePoint") << ":";
	p_Stream << s_Object->m_fHDRWhitePoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRBrightPassThreshold") << ":";
	p_Stream << s_Object->m_fHDRBrightPassThreshold;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHDRBrightPassMaxPercentage") << ":";
	p_Stream << s_Object->m_fHDRBrightPassMaxPercentage;
	p_Stream << ",";

	p_Stream << JsonStr("m_HDRColorTint") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_HDRColorTint, p_Stream);

	p_Stream << "}";
}

void SPostfilterParametersSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPostfilterParametersSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_bDepthOfFieldEnabled = bool(p_Document["m_bDepthOfFieldEnabled"]);

	s_Object.m_fDepthOfFieldBlurriness = static_cast<float32>(double(p_Document["m_fDepthOfFieldBlurriness"]));

	s_Object.m_bRadialBlurEnabled = bool(p_Document["m_bRadialBlurEnabled"]);

	s_Object.m_fRadialBlurriness = static_cast<float32>(double(p_Document["m_fRadialBlurriness"]));

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vRadialBlurCenter"], &s_Item);
		s_Object.m_vRadialBlurCenter = s_Item;
	}

	s_Object.m_fRadialBlurStart = static_cast<float32>(double(p_Document["m_fRadialBlurStart"]));

	s_Object.m_bSpatialBlurEnabled = bool(p_Document["m_bSpatialBlurEnabled"]);

	s_Object.m_fSpatialBlurriness = static_cast<float32>(double(p_Document["m_fSpatialBlurriness"]));

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vSpatialBlurCenter"], &s_Item);
		s_Object.m_vSpatialBlurCenter = s_Item;
	}

	s_Object.m_fSpatialBlurStart = static_cast<float32>(double(p_Document["m_fSpatialBlurStart"]));

	s_Object.m_fSpatialBlurFade = static_cast<float32>(double(p_Document["m_fSpatialBlurFade"]));

	s_Object.m_bDistortionWobbleEnabled = bool(p_Document["m_bDistortionWobbleEnabled"]);

	s_Object.m_fDistortionWobbleScale = static_cast<float32>(double(p_Document["m_fDistortionWobbleScale"]));

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vDistortionWobbleWaveLength"], &s_Item);
		s_Object.m_vDistortionWobbleWaveLength = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vDistortionWobbleSpeed"], &s_Item);
		s_Object.m_vDistortionWobbleSpeed = s_Item;
	}

	s_Object.m_bDistortionWobbleUseRealTime = bool(p_Document["m_bDistortionWobbleUseRealTime"]);

	s_Object.m_bHDRActive = bool(p_Document["m_bHDRActive"]);

	s_Object.m_bHDREnabled = bool(p_Document["m_bHDREnabled"]);

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vHDRAdaptationSpeed"], &s_Item);
		s_Object.m_vHDRAdaptationSpeed = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vHDRAdaptationLuminanceMinMax"], &s_Item);
		s_Object.m_vHDRAdaptationLuminanceMinMax = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vHDRAdaptationMiddleGrayMinMax"], &s_Item);
		s_Object.m_vHDRAdaptationMiddleGrayMinMax = s_Item;
	}

	s_Object.m_fHDRWhitePoint = static_cast<float32>(double(p_Document["m_fHDRWhitePoint"]));

	s_Object.m_fHDRBrightPassThreshold = static_cast<float32>(double(p_Document["m_fHDRBrightPassThreshold"]));

	s_Object.m_fHDRBrightPassMaxPercentage = static_cast<float32>(double(p_Document["m_fHDRBrightPassMaxPercentage"]));

	{
		SColorRGB s_Item;
		SColorRGB::FromSimpleJson(p_Document["m_HDRColorTint"], &s_Item);
		s_Object.m_HDRColorTint = s_Item;
	}

	*reinterpret_cast<SPostfilterParametersSaveData*>(p_Target) = s_Object;
}

void SPostfilterParametersSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SPostfilterParametersSaveData*>(p_Object);

	SVector2::Serialize(&s_Object->m_vRadialBlurCenter, p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vRadialBlurCenter));
	SVector3::Serialize(&s_Object->m_vSpatialBlurCenter, p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vSpatialBlurCenter));
	SVector2::Serialize(&s_Object->m_vDistortionWobbleWaveLength, p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vDistortionWobbleWaveLength));
	SVector2::Serialize(&s_Object->m_vDistortionWobbleSpeed, p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vDistortionWobbleSpeed));
	SVector2::Serialize(&s_Object->m_vHDRAdaptationSpeed, p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vHDRAdaptationSpeed));
	SVector2::Serialize(&s_Object->m_vHDRAdaptationLuminanceMinMax, p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vHDRAdaptationLuminanceMinMax));
	SVector2::Serialize(&s_Object->m_vHDRAdaptationMiddleGrayMinMax, p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_vHDRAdaptationMiddleGrayMinMax));
	SColorRGB::Serialize(&s_Object->m_HDRColorTint, p_Serializer, p_OwnOffset + offsetof(SPostfilterParametersSaveData, m_HDRColorTint));
}

ZHMTypeInfo SMovementAgilitySaveData::TypeInfo = ZHMTypeInfo("SMovementAgilitySaveData", sizeof(SMovementAgilitySaveData), alignof(SMovementAgilitySaveData), SMovementAgilitySaveData::WriteJson, SMovementAgilitySaveData::WriteSimpleJson, SMovementAgilitySaveData::FromSimpleJson, SMovementAgilitySaveData::Serialize);

void SMovementAgilitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementAgilitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rLedgeGuide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rLedgeGuide;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFaceLeftRightTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFaceLeftRightTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ePrevAgilityState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAgilityState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_ePrevAgilityState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAgilityState", static_cast<int>(s_Object->m_ePrevAgilityState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAgilityState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAgilityState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAgilityState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAgilityState", static_cast<int>(s_Object->m_eAgilityState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nActiveAnimNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nActiveAnimNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eCameraOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECameraOffset_old") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eCameraOffset) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECameraOffset_old", static_cast<int>(s_Object->m_eCameraOffset))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementAgilitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementAgilitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rLedgeGuide") << ":";
	p_Stream << s_Object->m_rLedgeGuide;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFaceLeftRightTarget") << ":";
	p_Stream << s_Object->m_fFaceLeftRightTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_ePrevAgilityState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAgilityState", static_cast<int>(s_Object->m_ePrevAgilityState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eAgilityState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAgilityState", static_cast<int>(s_Object->m_eAgilityState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nActiveAnimNode") << ":";
	p_Stream << s_Object->m_nActiveAnimNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_eCameraOffset") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECameraOffset_old", static_cast<int>(s_Object->m_eCameraOffset)));

	p_Stream << "}";
}

void SMovementAgilitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementAgilitySaveData s_Object;

	s_Object.m_rLedgeGuide = static_cast<uint32>(int64_t(p_Document["m_rLedgeGuide"]));

	s_Object.m_fFaceLeftRightTarget = static_cast<float32>(double(p_Document["m_fFaceLeftRightTarget"]));

	s_Object.m_ePrevAgilityState = static_cast<EAgilityState>(ZHMEnums::GetEnumValueByName("EAgilityState", std::string_view(p_Document["m_ePrevAgilityState"])));

	s_Object.m_eAgilityState = static_cast<EAgilityState>(ZHMEnums::GetEnumValueByName("EAgilityState", std::string_view(p_Document["m_eAgilityState"])));

	s_Object.m_nActiveAnimNode = static_cast<uint32>(int64_t(p_Document["m_nActiveAnimNode"]));

	s_Object.m_eCameraOffset = static_cast<ECameraOffset_old>(ZHMEnums::GetEnumValueByName("ECameraOffset_old", std::string_view(p_Document["m_eCameraOffset"])));

	*reinterpret_cast<SMovementAgilitySaveData*>(p_Target) = s_Object;
}

void SMovementAgilitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMovementAgilitySaveData*>(p_Object);

}

ZHMTypeInfo SClothVertex::TypeInfo = ZHMTypeInfo("SClothVertex", sizeof(SClothVertex), alignof(SClothVertex), SClothVertex::WriteJson, SClothVertex::WriteSimpleJson, SClothVertex::FromSimpleJson, SClothVertex::Serialize);

void SClothVertex::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SClothVertex*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nColumn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nColumn;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRow;
	p_Stream << "}";

	p_Stream << "}";
}

void SClothVertex::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SClothVertex*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nColumn") << ":";
	p_Stream << s_Object->m_nColumn;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRow") << ":";
	p_Stream << s_Object->m_nRow;

	p_Stream << "}";
}

void SClothVertex::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SClothVertex s_Object;

	s_Object.m_nColumn = static_cast<uint16>(int64_t(p_Document["m_nColumn"]));

	s_Object.m_nRow = static_cast<uint16>(int64_t(p_Document["m_nRow"]));

	*reinterpret_cast<SClothVertex*>(p_Target) = s_Object;
}

void SClothVertex::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SClothVertex*>(p_Object);

}

ZHMTypeInfo SActorManagerReferencableData::TypeInfo = ZHMTypeInfo("SActorManagerReferencableData", sizeof(SActorManagerReferencableData), alignof(SActorManagerReferencableData), SActorManagerReferencableData::WriteJson, SActorManagerReferencableData::WriteSimpleJson, SActorManagerReferencableData::FromSimpleJson, SActorManagerReferencableData::Serialize);

void SActorManagerReferencableData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorManagerReferencableData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aSituationTypes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ESituationType>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSituationTypes.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSituationTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationType") << "," << JsonStr("$val") << ":";
		p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Item0) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Item0))) << "}";
		p_Stream << "}";

		if (i < s_Object->m_aSituationTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActorManagerReferencableData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorManagerReferencableData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aSituationTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSituationTypes.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSituationTypes[i];
		p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Item0)));

		if (i < s_Object->m_aSituationTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorManagerReferencableData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorManagerReferencableData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aSituationTypes"])
	{
		s_Object.m_aSituationTypes.push_back(static_cast<ESituationType>(ZHMEnums::GetEnumValueByName("ESituationType", std::string_view(s_Item0))));
	}

	*reinterpret_cast<SActorManagerReferencableData*>(p_Target) = s_Object;
}

void SActorManagerReferencableData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorManagerReferencableData*>(p_Object);

	TArray<ESituationType>::Serialize(&s_Object->m_aSituationTypes, p_Serializer, p_OwnOffset + offsetof(SActorManagerReferencableData, m_aSituationTypes));
}

ZHMTypeInfo SSituationOrderSaveData::TypeInfo = ZHMTypeInfo("SSituationOrderSaveData", sizeof(SSituationOrderSaveData), alignof(SSituationOrderSaveData), SSituationOrderSaveData::WriteJson, SSituationOrderSaveData::WriteSimpleJson, SSituationOrderSaveData::FromSimpleJson, SSituationOrderSaveData::Serialize);

void SSituationOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSituationOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sClassTypeName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sClassTypeName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CustomData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSituationOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sClassTypeName") << ":";
	p_Stream << JsonStr(s_Object->m_sClassTypeName);
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nTarget") << ":";
	p_Stream << s_Object->m_nTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasPosition") << ":";
	p_Stream << s_Object->m_bHasPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CustomData, p_Stream);

	p_Stream << "}";
}

void SSituationOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSituationOrderSaveData s_Object;

	s_Object.m_sClassTypeName = std::string_view(p_Document["m_sClassTypeName"]);

	s_Object.m_eType = static_cast<EAISharedEventType>(ZHMEnums::GetEnumValueByName("EAISharedEventType", std::string_view(p_Document["m_eType"])));

	s_Object.m_nTarget = static_cast<int32>(int64_t(p_Document["m_nTarget"]));

	s_Object.m_bHasPosition = bool(p_Document["m_bHasPosition"]);

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_CustomData"], &s_Item);
		s_Object.m_CustomData = s_Item;
	}

	*reinterpret_cast<SSituationOrderSaveData*>(p_Target) = s_Object;
}

void SSituationOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSituationOrderSaveData*>(p_Object);

	ZString::Serialize(&s_Object->m_sClassTypeName, p_Serializer, p_OwnOffset + offsetof(SSituationOrderSaveData, m_sClassTypeName));
	float4::Serialize(&s_Object->m_vPosition, p_Serializer, p_OwnOffset + offsetof(SSituationOrderSaveData, m_vPosition));
	ZVariant::Serialize(&s_Object->m_CustomData, p_Serializer, p_OwnOffset + offsetof(SSituationOrderSaveData, m_CustomData));
}

ZHMTypeInfo SEscortSituation2Actors::TypeInfo = ZHMTypeInfo("SEscortSituation2Actors", sizeof(SEscortSituation2Actors), alignof(SEscortSituation2Actors), SEscortSituation2Actors::WriteJson, SEscortSituation2Actors::WriteSimpleJson, SEscortSituation2Actors::FromSimpleJson, SEscortSituation2Actors::Serialize);

void SEscortSituation2Actors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortSituation2Actors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortSituation2Actors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortSituation2Actors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SEscortSituation2Actors::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEscortSituation2Actors s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SEscortSituation2Actors*>(p_Target) = s_Object;
}

void SEscortSituation2Actors::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEscortSituation2Actors*>(p_Object);

}

ZHMTypeInfo SEscortSituation2ActorStateSaveData::TypeInfo = ZHMTypeInfo("SEscortSituation2ActorStateSaveData", sizeof(SEscortSituation2ActorStateSaveData), alignof(SEscortSituation2ActorStateSaveData), SEscortSituation2ActorStateSaveData::WriteJson, SEscortSituation2ActorStateSaveData::WriteSimpleJson, SEscortSituation2ActorStateSaveData::FromSimpleJson, SEscortSituation2ActorStateSaveData::Serialize);

void SEscortSituation2ActorStateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortSituation2ActorStateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllocatedForSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllocatedForSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZEscortSituation2Entity.EEscortState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZEscortSituation2Entity.EEscortState", static_cast<int>(s_Object->m_eState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eStatePrevious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZEscortSituation2Entity.EEscortState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eStatePrevious) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZEscortSituation2Entity.EEscortState", static_cast<int>(s_Object->m_eStatePrevious))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentScreenplay;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rPreferredIntermediateScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rPreferredIntermediateScreenplay;
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortSituation2ActorStateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortSituation2ActorStateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nID") << ":";
	p_Stream << s_Object->m_nID;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllocatedForSituation") << ":";
	p_Stream << s_Object->m_bAllocatedForSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZEscortSituation2Entity.EEscortState", static_cast<int>(s_Object->m_eState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eStatePrevious") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZEscortSituation2Entity.EEscortState", static_cast<int>(s_Object->m_eStatePrevious)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentScreenplay") << ":";
	p_Stream << s_Object->m_rCurrentScreenplay;
	p_Stream << ",";

	p_Stream << JsonStr("m_rPreferredIntermediateScreenplay") << ":";
	p_Stream << s_Object->m_rPreferredIntermediateScreenplay;

	p_Stream << "}";
}

void SEscortSituation2ActorStateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEscortSituation2ActorStateSaveData s_Object;

	s_Object.m_nID = static_cast<uint32>(int64_t(p_Document["m_nID"]));

	s_Object.m_bAllocatedForSituation = bool(p_Document["m_bAllocatedForSituation"]);

	s_Object.m_eState = static_cast<ZEscortSituation2Entity_EEscortState>(ZHMEnums::GetEnumValueByName("ZEscortSituation2Entity.EEscortState", std::string_view(p_Document["m_eState"])));

	s_Object.m_eStatePrevious = static_cast<ZEscortSituation2Entity_EEscortState>(ZHMEnums::GetEnumValueByName("ZEscortSituation2Entity.EEscortState", std::string_view(p_Document["m_eStatePrevious"])));

	s_Object.m_fDistanceToTarget = static_cast<float32>(double(p_Document["m_fDistanceToTarget"]));

	s_Object.m_rCurrentScreenplay = static_cast<uint32>(int64_t(p_Document["m_rCurrentScreenplay"]));

	s_Object.m_rPreferredIntermediateScreenplay = static_cast<uint32>(int64_t(p_Document["m_rPreferredIntermediateScreenplay"]));

	*reinterpret_cast<SEscortSituation2ActorStateSaveData*>(p_Target) = s_Object;
}

void SEscortSituation2ActorStateSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEscortSituation2ActorStateSaveData*>(p_Object);

}

ZHMTypeInfo SEscortSituation2SaveData::TypeInfo = ZHMTypeInfo("SEscortSituation2SaveData", sizeof(SEscortSituation2SaveData), alignof(SEscortSituation2SaveData), SEscortSituation2SaveData::WriteJson, SEscortSituation2SaveData::WriteSimpleJson, SEscortSituation2SaveData::FromSimpleJson, SEscortSituation2SaveData::Serialize);

void SEscortSituation2SaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortSituation2SaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActivated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMayEscort") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMayEscort;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetDead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetDead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetInRange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllEscortsAreDead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllEscortsAreDead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceSearch") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForceSearch;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vLastPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vLastPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFoundDeadTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFoundDeadTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetDeadTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTargetDeadTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetIsMoving") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetIsMoving;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZEscortSituation2Entity.ETargetState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZEscortSituation2Entity.ETargetState", static_cast<int>(s_Object->m_eTargetState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eTargetEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetActState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZActBehaviorEntity.EState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetActState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZActBehaviorEntity.EState", static_cast<int>(s_Object->m_eTargetActState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetNotMovingTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetNotMovingTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAgitationCooldownTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetAgitationCooldownTimer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAddedActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEscortSituation2Actors>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAddedActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAddedActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEscortSituation2Actors") << "," << JsonStr("$val") << ":";
		SEscortSituation2Actors::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aAddedActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEscortSituation2ActorStateSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEscortSituation2ActorStateSaveData") << "," << JsonStr("$val") << ":";
		SEscortSituation2ActorStateSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEscortActs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEscortActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEscortActs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEscortActs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSearchActs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSearchActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSearchActs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aSearchActs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortSituation2SaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortSituation2SaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bActivated") << ":";
	p_Stream << s_Object->m_bActivated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMayEscort") << ":";
	p_Stream << s_Object->m_bMayEscort;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetDead") << ":";
	p_Stream << s_Object->m_bTargetDead;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInRange") << ":";
	p_Stream << s_Object->m_bTargetInRange;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllEscortsAreDead") << ":";
	p_Stream << s_Object->m_bAllEscortsAreDead;
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceSearch") << ":";
	p_Stream << s_Object->m_bForceSearch;
	p_Stream << ",";

	p_Stream << JsonStr("m_vLastPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vLastPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bFoundDeadTarget") << ":";
	p_Stream << s_Object->m_bFoundDeadTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetDeadTime") << ":";
	p_Stream << s_Object->m_nTargetDeadTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetIsMoving") << ":";
	p_Stream << s_Object->m_bTargetIsMoving;
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZEscortSituation2Entity.ETargetState", static_cast<int>(s_Object->m_eTargetState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eTargetEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetActState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZActBehaviorEntity.EState", static_cast<int>(s_Object->m_eTargetActState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetNotMovingTime") << ":";
	p_Stream << s_Object->m_fTargetNotMovingTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAgitationCooldownTimer") << ":";
	p_Stream << s_Object->m_fTargetAgitationCooldownTimer;
	p_Stream << ",";

	p_Stream << JsonStr("m_aAddedActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAddedActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAddedActors[i];
		SEscortSituation2Actors::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aAddedActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		SEscortSituation2ActorStateSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEscortActs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEscortActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEscortActs[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEscortActs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSearchActs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSearchActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSearchActs[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aSearchActs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEscortSituation2SaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEscortSituation2SaveData s_Object;

	s_Object.m_bActivated = bool(p_Document["m_bActivated"]);

	s_Object.m_bMayEscort = bool(p_Document["m_bMayEscort"]);

	s_Object.m_bTargetDead = bool(p_Document["m_bTargetDead"]);

	s_Object.m_bTargetInRange = bool(p_Document["m_bTargetInRange"]);

	s_Object.m_bAllEscortsAreDead = bool(p_Document["m_bAllEscortsAreDead"]);

	s_Object.m_bForceSearch = bool(p_Document["m_bForceSearch"]);

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vLastPosition"], &s_Item);
		s_Object.m_vLastPosition = s_Item;
	}

	s_Object.m_bFoundDeadTarget = bool(p_Document["m_bFoundDeadTarget"]);

	s_Object.m_nTargetDeadTime = int64(p_Document["m_nTargetDeadTime"]);

	s_Object.m_bTargetIsMoving = bool(p_Document["m_bTargetIsMoving"]);

	s_Object.m_eTargetState = static_cast<ZEscortSituation2Entity_ETargetState>(ZHMEnums::GetEnumValueByName("ZEscortSituation2Entity.ETargetState", std::string_view(p_Document["m_eTargetState"])));

	s_Object.m_eTargetEmotionState = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_eTargetEmotionState"])));

	s_Object.m_eTargetActState = static_cast<ZActBehaviorEntity_EState>(ZHMEnums::GetEnumValueByName("ZActBehaviorEntity.EState", std::string_view(p_Document["m_eTargetActState"])));

	s_Object.m_fTargetNotMovingTime = static_cast<float32>(double(p_Document["m_fTargetNotMovingTime"]));

	s_Object.m_fTargetAgitationCooldownTimer = static_cast<float32>(double(p_Document["m_fTargetAgitationCooldownTimer"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aAddedActors"])
	{
		SEscortSituation2Actors s_ArrayItem0;
		SEscortSituation2Actors::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aAddedActors.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aStates"])
	{
		SEscortSituation2ActorStateSaveData s_ArrayItem0;
		SEscortSituation2ActorStateSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aStates.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEscortActs"])
	{
		s_Object.m_aEscortActs.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aSearchActs"])
	{
		s_Object.m_aSearchActs.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SEscortSituation2SaveData*>(p_Target) = s_Object;
}

void SEscortSituation2SaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEscortSituation2SaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vLastPosition, p_Serializer, p_OwnOffset + offsetof(SEscortSituation2SaveData, m_vLastPosition));
	TArray<SEscortSituation2Actors>::Serialize(&s_Object->m_aAddedActors, p_Serializer, p_OwnOffset + offsetof(SEscortSituation2SaveData, m_aAddedActors));
	TArray<SEscortSituation2ActorStateSaveData>::Serialize(&s_Object->m_aStates, p_Serializer, p_OwnOffset + offsetof(SEscortSituation2SaveData, m_aStates));
	TArray<uint32>::Serialize(&s_Object->m_aEscortActs, p_Serializer, p_OwnOffset + offsetof(SEscortSituation2SaveData, m_aEscortActs));
	TArray<uint32>::Serialize(&s_Object->m_aSearchActs, p_Serializer, p_OwnOffset + offsetof(SEscortSituation2SaveData, m_aSearchActs));
}

ZHMTypeInfo SDeadBodyInfoSaveData::TypeInfo = ZHMTypeInfo("SDeadBodyInfoSaveData", sizeof(SDeadBodyInfoSaveData), alignof(SDeadBodyInfoSaveData), SDeadBodyInfoSaveData::WriteJson, SDeadBodyInfoSaveData::WriteSimpleJson, SDeadBodyInfoSaveData::FromSimpleJson, SDeadBodyInfoSaveData::Serialize);

void SDeadBodyInfoSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDeadBodyInfoSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_knownByActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_knownByActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_knownByActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_knownByActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tKnownSince") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tKnownSince, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tInvestigatedSince") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tInvestigatedSince, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGuarded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGuarded;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBodyInvestigated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBodyInvestigated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHidden;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByAccident") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDeadByAccident;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByUnnoticed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDeadByUnnoticed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHitmanSuspectedInCurrentOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHitmanSuspectedInCurrentOutfit;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByExplosion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDeadByExplosion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IsFoundOutsideNavmeshAndIgnored") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IsFoundOutsideNavmeshAndIgnored;
	p_Stream << "}";

	p_Stream << "}";
}

void SDeadBodyInfoSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDeadBodyInfoSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rGuard") << ":";
	p_Stream << s_Object->m_rGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_knownByActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_knownByActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_knownByActors[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_knownByActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tKnownSince") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tKnownSince, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tInvestigatedSince") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tInvestigatedSince, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bGuarded") << ":";
	p_Stream << s_Object->m_bGuarded;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBodyInvestigated") << ":";
	p_Stream << s_Object->m_bBodyInvestigated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHidden") << ":";
	p_Stream << s_Object->m_bHidden;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByAccident") << ":";
	p_Stream << s_Object->m_bDeadByAccident;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByUnnoticed") << ":";
	p_Stream << s_Object->m_bDeadByUnnoticed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHitmanSuspectedInCurrentOutfit") << ":";
	p_Stream << s_Object->m_bHitmanSuspectedInCurrentOutfit;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadByExplosion") << ":";
	p_Stream << s_Object->m_bDeadByExplosion;
	p_Stream << ",";

	p_Stream << JsonStr("m_IsFoundOutsideNavmeshAndIgnored") << ":";
	p_Stream << s_Object->m_IsFoundOutsideNavmeshAndIgnored;

	p_Stream << "}";
}

void SDeadBodyInfoSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDeadBodyInfoSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_rGuard = static_cast<uint32>(int64_t(p_Document["m_rGuard"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_knownByActors"])
	{
		s_Object.m_knownByActors.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tKnownSince"], &s_Item);
		s_Object.m_tKnownSince = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tInvestigatedSince"], &s_Item);
		s_Object.m_tInvestigatedSince = s_Item;
	}

	s_Object.m_bGuarded = bool(p_Document["m_bGuarded"]);

	s_Object.m_bBodyInvestigated = bool(p_Document["m_bBodyInvestigated"]);

	s_Object.m_bHidden = bool(p_Document["m_bHidden"]);

	s_Object.m_bDeadByAccident = bool(p_Document["m_bDeadByAccident"]);

	s_Object.m_bDeadByUnnoticed = bool(p_Document["m_bDeadByUnnoticed"]);

	s_Object.m_bHitmanSuspectedInCurrentOutfit = bool(p_Document["m_bHitmanSuspectedInCurrentOutfit"]);

	s_Object.m_bDeadByExplosion = bool(p_Document["m_bDeadByExplosion"]);

	s_Object.m_IsFoundOutsideNavmeshAndIgnored = bool(p_Document["m_IsFoundOutsideNavmeshAndIgnored"]);

	*reinterpret_cast<SDeadBodyInfoSaveData*>(p_Target) = s_Object;
}

void SDeadBodyInfoSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDeadBodyInfoSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_knownByActors, p_Serializer, p_OwnOffset + offsetof(SDeadBodyInfoSaveData, m_knownByActors));
	ZGameTime::Serialize(&s_Object->m_tKnownSince, p_Serializer, p_OwnOffset + offsetof(SDeadBodyInfoSaveData, m_tKnownSince));
	ZGameTime::Serialize(&s_Object->m_tInvestigatedSince, p_Serializer, p_OwnOffset + offsetof(SDeadBodyInfoSaveData, m_tInvestigatedSince));
}

ZHMTypeInfo SDeadBodySensorSaveData::TypeInfo = ZHMTypeInfo("SDeadBodySensorSaveData", sizeof(SDeadBodySensorSaveData), alignof(SDeadBodySensorSaveData), SDeadBodySensorSaveData::WriteJson, SDeadBodySensorSaveData::WriteSimpleJson, SDeadBodySensorSaveData::FromSimpleJson, SDeadBodySensorSaveData::Serialize);

void SDeadBodySensorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDeadBodySensorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aBodies") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDeadBodyInfoSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBodies.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBodies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDeadBodyInfoSaveData") << "," << JsonStr("$val") << ":";
		SDeadBodyInfoSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBodies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBodyIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBodyIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SDeadBodySensorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDeadBodySensorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBodies.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBodies[i];
		SDeadBodyInfoSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aBodies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBodyIndex") << ":";
	p_Stream << s_Object->m_nBodyIndex;

	p_Stream << "}";
}

void SDeadBodySensorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDeadBodySensorSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aBodies"])
	{
		SDeadBodyInfoSaveData s_ArrayItem0;
		SDeadBodyInfoSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aBodies.push_back(s_ArrayItem0);
	}

	s_Object.m_nBodyIndex = static_cast<int32>(int64_t(p_Document["m_nBodyIndex"]));

	*reinterpret_cast<SDeadBodySensorSaveData*>(p_Target) = s_Object;
}

void SDeadBodySensorSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDeadBodySensorSaveData*>(p_Object);

	TArray<SDeadBodyInfoSaveData>::Serialize(&s_Object->m_aBodies, p_Serializer, p_OwnOffset + offsetof(SDeadBodySensorSaveData, m_aBodies));
}

ZHMTypeInfo SCheckLastPositionGroupSaveData::TypeInfo = ZHMTypeInfo("SCheckLastPositionGroupSaveData", sizeof(SCheckLastPositionGroupSaveData), alignof(SCheckLastPositionGroupSaveData), SCheckLastPositionGroupSaveData::WriteJson, SCheckLastPositionGroupSaveData::WriteSimpleJson, SCheckLastPositionGroupSaveData::FromSimpleJson, SCheckLastPositionGroupSaveData::Serialize);

void SCheckLastPositionGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCheckLastPositionGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nLeaderTargetNodeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nLeaderTargetNodeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeaderOrderAssigned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLeaderOrderAssigned;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAssistantOrderAssigned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAssistantOrderAssigned;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSearchCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSearchCompleted;
	p_Stream << "}";

	p_Stream << "}";
}

void SCheckLastPositionGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCheckLastPositionGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << ",";

	p_Stream << JsonStr("m_nLeaderTargetNodeIndex") << ":";
	p_Stream << s_Object->m_nLeaderTargetNodeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeaderOrderAssigned") << ":";
	p_Stream << s_Object->m_bLeaderOrderAssigned;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAssistantOrderAssigned") << ":";
	p_Stream << s_Object->m_bAssistantOrderAssigned;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSearchCompleted") << ":";
	p_Stream << s_Object->m_bSearchCompleted;

	p_Stream << "}";
}

void SCheckLastPositionGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCheckLastPositionGroupSaveData s_Object;

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	s_Object.m_pAssistant = static_cast<uint32>(int64_t(p_Document["m_pAssistant"]));

	s_Object.m_nLeaderTargetNodeIndex = static_cast<uint16>(int64_t(p_Document["m_nLeaderTargetNodeIndex"]));

	s_Object.m_bLeaderOrderAssigned = bool(p_Document["m_bLeaderOrderAssigned"]);

	s_Object.m_bAssistantOrderAssigned = bool(p_Document["m_bAssistantOrderAssigned"]);

	s_Object.m_bSearchCompleted = bool(p_Document["m_bSearchCompleted"]);

	*reinterpret_cast<SCheckLastPositionGroupSaveData*>(p_Target) = s_Object;
}

void SCheckLastPositionGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCheckLastPositionGroupSaveData*>(p_Object);

}

ZHMTypeInfo SItemInstanceSaveData::TypeInfo = ZHMTypeInfo("SItemInstanceSaveData", sizeof(SItemInstanceSaveData), alignof(SItemInstanceSaveData), SItemInstanceSaveData::WriteJson, SItemInstanceSaveData::WriteSimpleJson, SItemInstanceSaveData::FromSimpleJson, SItemInstanceSaveData::Serialize);

void SItemInstanceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemInstanceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_repositoryId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_repositoryId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEntityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sOnlineInstanceId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sOnlineInstanceId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aItemModifierIds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZRepositoryID>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItemModifierIds.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aItemModifierIds[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
		ZRepositoryID::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItemModifierIds.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SItemInstanceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemInstanceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_repositoryId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_repositoryId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nEntityID") << ":";
	p_Stream << s_Object->m_nEntityID;
	p_Stream << ",";

	p_Stream << JsonStr("m_sOnlineInstanceId") << ":";
	p_Stream << JsonStr(s_Object->m_sOnlineInstanceId);
	p_Stream << ",";

	p_Stream << JsonStr("m_aItemModifierIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItemModifierIds.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aItemModifierIds[i];
		ZRepositoryID::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aItemModifierIds.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SItemInstanceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemInstanceSaveData s_Object;

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_repositoryId"], &s_Item);
		s_Object.m_repositoryId = s_Item;
	}

	s_Object.m_nEntityID = uint64(p_Document["m_nEntityID"]);

	s_Object.m_sOnlineInstanceId = std::string_view(p_Document["m_sOnlineInstanceId"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aItemModifierIds"])
	{
		ZRepositoryID s_ArrayItem0;
		ZRepositoryID::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aItemModifierIds.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SItemInstanceSaveData*>(p_Target) = s_Object;
}

void SItemInstanceSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItemInstanceSaveData*>(p_Object);

	ZRepositoryID::Serialize(&s_Object->m_repositoryId, p_Serializer, p_OwnOffset + offsetof(SItemInstanceSaveData, m_repositoryId));
	ZString::Serialize(&s_Object->m_sOnlineInstanceId, p_Serializer, p_OwnOffset + offsetof(SItemInstanceSaveData, m_sOnlineInstanceId));
	TArray<ZRepositoryID>::Serialize(&s_Object->m_aItemModifierIds, p_Serializer, p_OwnOffset + offsetof(SItemInstanceSaveData, m_aItemModifierIds));
}

ZHMTypeInfo SWorldInventoryInstanceSaveData::TypeInfo = ZHMTypeInfo("SWorldInventoryInstanceSaveData", sizeof(SWorldInventoryInstanceSaveData), alignof(SWorldInventoryInstanceSaveData), SWorldInventoryInstanceSaveData::WriteJson, SWorldInventoryInstanceSaveData::WriteSimpleJson, SWorldInventoryInstanceSaveData::FromSimpleJson, SWorldInventoryInstanceSaveData::Serialize);

void SWorldInventoryInstanceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWorldInventoryInstanceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aItemInstanceSaveData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SItemInstanceSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItemInstanceSaveData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aItemInstanceSaveData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItemInstanceSaveData") << "," << JsonStr("$val") << ":";
		SItemInstanceSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItemInstanceSaveData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SWorldInventoryInstanceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWorldInventoryInstanceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aItemInstanceSaveData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItemInstanceSaveData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aItemInstanceSaveData[i];
		SItemInstanceSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aItemInstanceSaveData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SWorldInventoryInstanceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SWorldInventoryInstanceSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aItemInstanceSaveData"])
	{
		SItemInstanceSaveData s_ArrayItem0;
		SItemInstanceSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aItemInstanceSaveData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SWorldInventoryInstanceSaveData*>(p_Target) = s_Object;
}

void SWorldInventoryInstanceSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SWorldInventoryInstanceSaveData*>(p_Object);

	TArray<SItemInstanceSaveData>::Serialize(&s_Object->m_aItemInstanceSaveData, p_Serializer, p_OwnOffset + offsetof(SWorldInventoryInstanceSaveData, m_aItemInstanceSaveData));
}

ZHMTypeInfo SEvacuateTrespassGroupSaveData::TypeInfo = ZHMTypeInfo("SEvacuateTrespassGroupSaveData", sizeof(SEvacuateTrespassGroupSaveData), alignof(SEvacuateTrespassGroupSaveData), SEvacuateTrespassGroupSaveData::WriteJson, SEvacuateTrespassGroupSaveData::WriteSimpleJson, SEvacuateTrespassGroupSaveData::FromSimpleJson, SEvacuateTrespassGroupSaveData::Serialize);

void SEvacuateTrespassGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEvacuateTrespassGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_safeRoomNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_safeRoomNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_leader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_leader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_assistant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_assistant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_escalate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_escalate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_completed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_completed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_standDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_standDown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_warningCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_warningCount;
	p_Stream << "}";

	p_Stream << "}";
}

void SEvacuateTrespassGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEvacuateTrespassGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_safeRoomNode") << ":";
	p_Stream << s_Object->m_safeRoomNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_leader") << ":";
	p_Stream << s_Object->m_leader;
	p_Stream << ",";

	p_Stream << JsonStr("m_assistant") << ":";
	p_Stream << s_Object->m_assistant;
	p_Stream << ",";

	p_Stream << JsonStr("m_escalate") << ":";
	p_Stream << s_Object->m_escalate;
	p_Stream << ",";

	p_Stream << JsonStr("m_completed") << ":";
	p_Stream << s_Object->m_completed;
	p_Stream << ",";

	p_Stream << JsonStr("m_standDown") << ":";
	p_Stream << s_Object->m_standDown;
	p_Stream << ",";

	p_Stream << JsonStr("m_warningCount") << ":";
	p_Stream << s_Object->m_warningCount;

	p_Stream << "}";
}

void SEvacuateTrespassGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEvacuateTrespassGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_target = static_cast<int32>(int64_t(p_Document["m_target"]));

	s_Object.m_safeRoomNode = static_cast<uint32>(int64_t(p_Document["m_safeRoomNode"]));

	s_Object.m_leader = static_cast<uint32>(int64_t(p_Document["m_leader"]));

	s_Object.m_assistant = static_cast<uint32>(int64_t(p_Document["m_assistant"]));

	s_Object.m_escalate = bool(p_Document["m_escalate"]);

	s_Object.m_completed = bool(p_Document["m_completed"]);

	s_Object.m_standDown = bool(p_Document["m_standDown"]);

	s_Object.m_warningCount = static_cast<int32>(int64_t(p_Document["m_warningCount"]));

	*reinterpret_cast<SEvacuateTrespassGroupSaveData*>(p_Target) = s_Object;
}

void SEvacuateTrespassGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEvacuateTrespassGroupSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SEvacuateTrespassGroupSaveData, m_fsmState));
}

ZHMTypeInfo SActorSpreadTransitionOperatorMaterialActorSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadTransitionOperatorMaterialActorSaveData", sizeof(SActorSpreadTransitionOperatorMaterialActorSaveData), alignof(SActorSpreadTransitionOperatorMaterialActorSaveData), SActorSpreadTransitionOperatorMaterialActorSaveData::WriteJson, SActorSpreadTransitionOperatorMaterialActorSaveData::WriteSimpleJson, SActorSpreadTransitionOperatorMaterialActorSaveData::FromSimpleJson, SActorSpreadTransitionOperatorMaterialActorSaveData::Serialize);

void SActorSpreadTransitionOperatorMaterialActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSpreadTransitionOperatorMaterialActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Actor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_Actor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpacity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fOpacity;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorSpreadTransitionOperatorMaterialActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSpreadTransitionOperatorMaterialActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Actor") << ":";
	p_Stream << s_Object->m_Actor;
	p_Stream << ",";

	p_Stream << JsonStr("m_fOpacity") << ":";
	p_Stream << s_Object->m_fOpacity;

	p_Stream << "}";
}

void SActorSpreadTransitionOperatorMaterialActorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorSpreadTransitionOperatorMaterialActorSaveData s_Object;

	s_Object.m_Actor = static_cast<uint32>(int64_t(p_Document["m_Actor"]));

	s_Object.m_fOpacity = static_cast<float32>(double(p_Document["m_fOpacity"]));

	*reinterpret_cast<SActorSpreadTransitionOperatorMaterialActorSaveData*>(p_Target) = s_Object;
}

void SActorSpreadTransitionOperatorMaterialActorSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorSpreadTransitionOperatorMaterialActorSaveData*>(p_Object);

}

ZHMTypeInfo IHumanBody::TypeInfo = ZHMTypeInfo("IHumanBody", sizeof(IHumanBody), alignof(IHumanBody), IHumanBody::WriteJson, IHumanBody::WriteSimpleJson, IHumanBody::FromSimpleJson, IHumanBody::Serialize);

void IHumanBody::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IHumanBody*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHumanBody::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IHumanBody*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IHumanBody::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IHumanBody s_Object;

	*reinterpret_cast<IHumanBody*>(p_Target) = s_Object;
}

void IHumanBody::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IHumanBody*>(p_Object);

}

ZHMTypeInfo SHeroCameraStandInSaveState::TypeInfo = ZHMTypeInfo("SHeroCameraStandInSaveState", sizeof(SHeroCameraStandInSaveState), alignof(SHeroCameraStandInSaveState), SHeroCameraStandInSaveState::WriteJson, SHeroCameraStandInSaveState::WriteSimpleJson, SHeroCameraStandInSaveState::FromSimpleJson, SHeroCameraStandInSaveState::Serialize);

void SHeroCameraStandInSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroCameraStandInSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroCameraStandInSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroCameraStandInSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;

	p_Stream << "}";
}

void SHeroCameraStandInSaveState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroCameraStandInSaveState s_Object;

	s_Object.m_rHero = static_cast<uint32>(int64_t(p_Document["m_rHero"]));

	s_Object.m_bPaused = bool(p_Document["m_bPaused"]);

	*reinterpret_cast<SHeroCameraStandInSaveState*>(p_Target) = s_Object;
}

void SHeroCameraStandInSaveState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHeroCameraStandInSaveState*>(p_Object);

}

ZHMTypeInfo SVolumeTriggerListenerSaveData::TypeInfo = ZHMTypeInfo("SVolumeTriggerListenerSaveData", sizeof(SVolumeTriggerListenerSaveData), alignof(SVolumeTriggerListenerSaveData), SVolumeTriggerListenerSaveData::WriteJson, SVolumeTriggerListenerSaveData::WriteSimpleJson, SVolumeTriggerListenerSaveData::FromSimpleJson, SVolumeTriggerListenerSaveData::Serialize);

void SVolumeTriggerListenerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVolumeTriggerListenerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bColliding") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bColliding;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInternalEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInternalEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SVolumeTriggerListenerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVolumeTriggerListenerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bColliding") << ":";
	p_Stream << s_Object->m_bColliding;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInternalEnabled") << ":";
	p_Stream << s_Object->m_bInternalEnabled;

	p_Stream << "}";
}

void SVolumeTriggerListenerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVolumeTriggerListenerSaveData s_Object;

	s_Object.m_bColliding = bool(p_Document["m_bColliding"]);

	s_Object.m_bInternalEnabled = bool(p_Document["m_bInternalEnabled"]);

	*reinterpret_cast<SVolumeTriggerListenerSaveData*>(p_Target) = s_Object;
}

void SVolumeTriggerListenerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVolumeTriggerListenerSaveData*>(p_Object);

}

ZHMTypeInfo SVolumeTriggersSaveData::TypeInfo = ZHMTypeInfo("SVolumeTriggersSaveData", sizeof(SVolumeTriggersSaveData), alignof(SVolumeTriggersSaveData), SVolumeTriggersSaveData::WriteJson, SVolumeTriggersSaveData::WriteSimpleJson, SVolumeTriggersSaveData::FromSimpleJson, SVolumeTriggersSaveData::Serialize);

void SVolumeTriggersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVolumeTriggersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SVolumeTriggerListenerSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVolumeTriggerListenerSaveData") << "," << JsonStr("$val") << ":";
		SVolumeTriggerListenerSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SVolumeTriggersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVolumeTriggersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SVolumeTriggerListenerSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SVolumeTriggersSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVolumeTriggersSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SVolumeTriggerListenerSaveData s_ArrayItem0;
		SVolumeTriggerListenerSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SVolumeTriggersSaveData*>(p_Target) = s_Object;
}

void SVolumeTriggersSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVolumeTriggersSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SVolumeTriggersSaveData, m_aEntities));
	TArray<SVolumeTriggerListenerSaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SVolumeTriggersSaveData, m_aData));
}

ZHMTypeInfo SFaceOrderSaveData::TypeInfo = ZHMTypeInfo("SFaceOrderSaveData", sizeof(SFaceOrderSaveData), alignof(SFaceOrderSaveData), SFaceOrderSaveData::WriteJson, SFaceOrderSaveData::WriteSimpleJson, SFaceOrderSaveData::FromSimpleJson, SFaceOrderSaveData::Serialize);

void SFaceOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFaceOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bLookAt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLookAt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAimAt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAimAt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUpdateKnownPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUpdateKnownPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopActFast") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStopActFast;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDurationVariance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDurationVariance;
	p_Stream << "}";

	p_Stream << "}";
}

void SFaceOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFaceOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bLookAt") << ":";
	p_Stream << s_Object->m_bLookAt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAimAt") << ":";
	p_Stream << s_Object->m_bAimAt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUpdateKnownPosition") << ":";
	p_Stream << s_Object->m_bUpdateKnownPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopActFast") << ":";
	p_Stream << s_Object->m_bStopActFast;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_fDurationVariance") << ":";
	p_Stream << s_Object->m_fDurationVariance;

	p_Stream << "}";
}

void SFaceOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFaceOrderSaveData s_Object;

	s_Object.m_bLookAt = bool(p_Document["m_bLookAt"]);

	s_Object.m_bAimAt = bool(p_Document["m_bAimAt"]);

	s_Object.m_bUpdateKnownPosition = bool(p_Document["m_bUpdateKnownPosition"]);

	s_Object.m_bStopActFast = bool(p_Document["m_bStopActFast"]);

	s_Object.m_fDuration = static_cast<float32>(double(p_Document["m_fDuration"]));

	s_Object.m_fDurationVariance = static_cast<float32>(double(p_Document["m_fDurationVariance"]));

	*reinterpret_cast<SFaceOrderSaveData*>(p_Target) = s_Object;
}

void SFaceOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SFaceOrderSaveData*>(p_Object);

}

ZHMTypeInfo SVIPEvacuationNodeSaveData::TypeInfo = ZHMTypeInfo("SVIPEvacuationNodeSaveData", sizeof(SVIPEvacuationNodeSaveData), alignof(SVIPEvacuationNodeSaveData), SVIPEvacuationNodeSaveData::WriteJson, SVIPEvacuationNodeSaveData::WriteSimpleJson, SVIPEvacuationNodeSaveData::FromSimpleJson, SVIPEvacuationNodeSaveData::Serialize);

void SVIPEvacuationNodeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVIPEvacuationNodeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fPenaltyMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPenaltyMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fPenaltyDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPenaltyDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tPenalty") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tPenalty, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_compromisedOnEnter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_compromisedOnEnter;
	p_Stream << "}";

	p_Stream << "}";
}

void SVIPEvacuationNodeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVIPEvacuationNodeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fPenaltyMultiplier") << ":";
	p_Stream << s_Object->m_fPenaltyMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fPenaltyDuration") << ":";
	p_Stream << s_Object->m_fPenaltyDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_tPenalty") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tPenalty, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_compromisedOnEnter") << ":";
	p_Stream << s_Object->m_compromisedOnEnter;

	p_Stream << "}";
}

void SVIPEvacuationNodeSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVIPEvacuationNodeSaveData s_Object;

	s_Object.m_fPenaltyMultiplier = static_cast<float32>(double(p_Document["m_fPenaltyMultiplier"]));

	s_Object.m_fPenaltyDuration = static_cast<float32>(double(p_Document["m_fPenaltyDuration"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tPenalty"], &s_Item);
		s_Object.m_tPenalty = s_Item;
	}

	s_Object.m_bIsEnabled = bool(p_Document["m_bIsEnabled"]);

	s_Object.m_compromisedOnEnter = bool(p_Document["m_compromisedOnEnter"]);

	*reinterpret_cast<SVIPEvacuationNodeSaveData*>(p_Target) = s_Object;
}

void SVIPEvacuationNodeSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVIPEvacuationNodeSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tPenalty, p_Serializer, p_OwnOffset + offsetof(SVIPEvacuationNodeSaveData, m_tPenalty));
}

ZHMTypeInfo SVIPEvacuationNodesSaveData::TypeInfo = ZHMTypeInfo("SVIPEvacuationNodesSaveData", sizeof(SVIPEvacuationNodesSaveData), alignof(SVIPEvacuationNodesSaveData), SVIPEvacuationNodesSaveData::WriteJson, SVIPEvacuationNodesSaveData::WriteSimpleJson, SVIPEvacuationNodesSaveData::FromSimpleJson, SVIPEvacuationNodesSaveData::Serialize);

void SVIPEvacuationNodesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVIPEvacuationNodesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SVIPEvacuationNodeSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVIPEvacuationNodeSaveData") << "," << JsonStr("$val") << ":";
		SVIPEvacuationNodeSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SVIPEvacuationNodesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVIPEvacuationNodesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SVIPEvacuationNodeSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SVIPEvacuationNodesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVIPEvacuationNodesSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SVIPEvacuationNodeSaveData s_ArrayItem0;
		SVIPEvacuationNodeSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SVIPEvacuationNodesSaveData*>(p_Target) = s_Object;
}

void SVIPEvacuationNodesSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVIPEvacuationNodesSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SVIPEvacuationNodesSaveData, m_aEntities));
	TArray<SVIPEvacuationNodeSaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SVIPEvacuationNodesSaveData, m_aData));
}

ZHMTypeInfo ZInteractionEventConsumer_SInteractionEventData::TypeInfo = ZHMTypeInfo("ZInteractionEventConsumer.SInteractionEventData", sizeof(ZInteractionEventConsumer_SInteractionEventData), alignof(ZInteractionEventConsumer_SInteractionEventData), ZInteractionEventConsumer_SInteractionEventData::WriteJson, ZInteractionEventConsumer_SInteractionEventData::WriteSimpleJson, ZInteractionEventConsumer_SInteractionEventData::FromSimpleJson, ZInteractionEventConsumer_SInteractionEventData::Serialize);

void ZInteractionEventConsumer_SInteractionEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInteractionEventConsumer_SInteractionEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZInteractionEventConsumer.EEvent") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nEvent) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZInteractionEventConsumer.EEvent", static_cast<int>(s_Object->m_nEvent))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZInteractionEventConsumer_SInteractionEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInteractionEventConsumer_SInteractionEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZInteractionEventConsumer.EEvent", static_cast<int>(s_Object->m_nEvent)));

	p_Stream << "}";
}

void ZInteractionEventConsumer_SInteractionEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZInteractionEventConsumer_SInteractionEventData s_Object;

	s_Object.m_nEvent = static_cast<ZInteractionEventConsumer_EEvent>(ZHMEnums::GetEnumValueByName("ZInteractionEventConsumer.EEvent", std::string_view(p_Document["m_nEvent"])));

	*reinterpret_cast<ZInteractionEventConsumer_SInteractionEventData*>(p_Target) = s_Object;
}

void ZInteractionEventConsumer_SInteractionEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZInteractionEventConsumer_SInteractionEventData*>(p_Object);

}

ZHMTypeInfo AI_SEventDescription::TypeInfo = ZHMTypeInfo("AI.SEventDescription", sizeof(AI_SEventDescription), alignof(AI_SEventDescription), AI_SEventDescription::WriteJson, AI_SEventDescription::WriteSimpleJson, AI_SEventDescription::FromSimpleJson, AI_SEventDescription::Serialize);

void AI_SEventDescription::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_SEventDescription*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eEventType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAIEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEventType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->m_eEventType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPulsing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPulsing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLoudness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLoudness;
	p_Stream << "}";

	p_Stream << "}";
}

void AI_SEventDescription::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_SEventDescription*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eEventType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAIEventType", static_cast<int>(s_Object->m_eEventType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bPulsing") << ":";
	p_Stream << s_Object->m_bPulsing;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRange") << ":";
	p_Stream << s_Object->m_fRange;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLoudness") << ":";
	p_Stream << s_Object->m_fLoudness;

	p_Stream << "}";
}

void AI_SEventDescription::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AI_SEventDescription s_Object;

	s_Object.m_eEventType = static_cast<EAIEventType>(ZHMEnums::GetEnumValueByName("EAIEventType", std::string_view(p_Document["m_eEventType"])));

	s_Object.m_bPulsing = bool(p_Document["m_bPulsing"]);

	s_Object.m_fRange = static_cast<float32>(double(p_Document["m_fRange"]));

	s_Object.m_fLoudness = static_cast<float32>(double(p_Document["m_fLoudness"]));

	*reinterpret_cast<AI_SEventDescription*>(p_Target) = s_Object;
}

void AI_SEventDescription::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AI_SEventDescription*>(p_Object);

}

ZHMTypeInfo SExactCompressedGridFloatField::TypeInfo = ZHMTypeInfo("SExactCompressedGridFloatField", sizeof(SExactCompressedGridFloatField), alignof(SExactCompressedGridFloatField), SExactCompressedGridFloatField::WriteJson, SExactCompressedGridFloatField::WriteSimpleJson, SExactCompressedGridFloatField::FromSimpleJson, SExactCompressedGridFloatField::Serialize);

void SExactCompressedGridFloatField::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExactCompressedGridFloatField*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFieldSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFieldSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCRC") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridCRC;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint16>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<float32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SExactCompressedGridFloatField::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExactCompressedGridFloatField*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFieldSize") << ":";
	p_Stream << s_Object->m_nFieldSize;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCRC") << ":";
	p_Stream << s_Object->m_nGridCRC;
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aIndices[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aValues[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SExactCompressedGridFloatField::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExactCompressedGridFloatField s_Object;

	s_Object.m_fInitialValue = static_cast<float32>(double(p_Document["m_fInitialValue"]));

	s_Object.m_nFieldSize = static_cast<uint32>(int64_t(p_Document["m_nFieldSize"]));

	s_Object.m_nGridCRC = static_cast<uint32>(int64_t(p_Document["m_nGridCRC"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aIndices"])
	{
		s_Object.m_aIndices.push_back(static_cast<uint16>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aValues"])
	{
		s_Object.m_aValues.push_back(static_cast<float32>(double(s_Item0)));
	}

	*reinterpret_cast<SExactCompressedGridFloatField*>(p_Target) = s_Object;
}

void SExactCompressedGridFloatField::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SExactCompressedGridFloatField*>(p_Object);

	TArray<uint16>::Serialize(&s_Object->m_aIndices, p_Serializer, p_OwnOffset + offsetof(SExactCompressedGridFloatField, m_aIndices));
	TArray<float32>::Serialize(&s_Object->m_aValues, p_Serializer, p_OwnOffset + offsetof(SExactCompressedGridFloatField, m_aValues));
}

ZHMTypeInfo SIntelData::TypeInfo = ZHMTypeInfo("SIntelData", sizeof(SIntelData), alignof(SIntelData), SIntelData::WriteJson, SIntelData::WriteSimpleJson, SIntelData::FromSimpleJson, SIntelData::Serialize);

void SIntelData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sHeadline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sHeadline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodyHeadline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sBodyHeadline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodytext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sBodytext);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sImage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sImage);
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sHeadline") << ":";
	p_Stream << JsonStr(s_Object->m_sHeadline);
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodyHeadline") << ":";
	p_Stream << JsonStr(s_Object->m_sBodyHeadline);
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodytext") << ":";
	p_Stream << JsonStr(s_Object->m_sBodytext);
	p_Stream << ",";

	p_Stream << JsonStr("m_sImage") << ":";
	p_Stream << JsonStr(s_Object->m_sImage);

	p_Stream << "}";
}

void SIntelData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelData s_Object;

	s_Object.m_sHeadline = std::string_view(p_Document["m_sHeadline"]);

	s_Object.m_sBodyHeadline = std::string_view(p_Document["m_sBodyHeadline"]);

	s_Object.m_sBodytext = std::string_view(p_Document["m_sBodytext"]);

	s_Object.m_sImage = std::string_view(p_Document["m_sImage"]);

	*reinterpret_cast<SIntelData*>(p_Target) = s_Object;
}

void SIntelData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SIntelData*>(p_Object);

	ZString::Serialize(&s_Object->m_sHeadline, p_Serializer, p_OwnOffset + offsetof(SIntelData, m_sHeadline));
	ZString::Serialize(&s_Object->m_sBodyHeadline, p_Serializer, p_OwnOffset + offsetof(SIntelData, m_sBodyHeadline));
	ZString::Serialize(&s_Object->m_sBodytext, p_Serializer, p_OwnOffset + offsetof(SIntelData, m_sBodytext));
	ZString::Serialize(&s_Object->m_sImage, p_Serializer, p_OwnOffset + offsetof(SIntelData, m_sImage));
}

ZHMTypeInfo SMathMultiplyDivideSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_SVector3", sizeof(SMathMultiplyDivideSaveData_SVector3), alignof(SMathMultiplyDivideSaveData_SVector3), SMathMultiplyDivideSaveData_SVector3::WriteJson, SMathMultiplyDivideSaveData_SVector3::WriteSimpleJson, SMathMultiplyDivideSaveData_SVector3::FromSimpleJson, SMathMultiplyDivideSaveData_SVector3::Serialize);

void SMathMultiplyDivideSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultiplyDivideSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDivide;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultiplyDivideSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_fB, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << s_Object->m_bDivide;

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultiplyDivideSaveData_SVector3 s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_fA"], &s_Item);
		s_Object.m_fA = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_fB"], &s_Item);
		s_Object.m_fB = s_Item;
	}

	s_Object.m_bDivide = bool(p_Document["m_bDivide"]);

	*reinterpret_cast<SMathMultiplyDivideSaveData_SVector3*>(p_Target) = s_Object;
}

void SMathMultiplyDivideSaveData_SVector3::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathMultiplyDivideSaveData_SVector3*>(p_Object);

	SVector3::Serialize(&s_Object->m_fA, p_Serializer, p_OwnOffset + offsetof(SMathMultiplyDivideSaveData_SVector3, m_fA));
	SVector3::Serialize(&s_Object->m_fB, p_Serializer, p_OwnOffset + offsetof(SMathMultiplyDivideSaveData_SVector3, m_fB));
}

ZHMTypeInfo SMathMultipliesSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_SVector3", sizeof(SMathMultipliesSaveData_SVector3), alignof(SMathMultipliesSaveData_SVector3), SMathMultipliesSaveData_SVector3::WriteJson, SMathMultipliesSaveData_SVector3::WriteSimpleJson, SMathMultipliesSaveData_SVector3::FromSimpleJson, SMathMultipliesSaveData_SVector3::Serialize);

void SMathMultipliesSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultipliesSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SMathMultiplyDivideSaveData_SVector3>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultiplyDivideSaveData_SVector3") << "," << JsonStr("$val") << ":";
		SMathMultiplyDivideSaveData_SVector3::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultipliesSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SMathMultiplyDivideSaveData_SVector3::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultipliesSaveData_SVector3 s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SMathMultiplyDivideSaveData_SVector3 s_ArrayItem0;
		SMathMultiplyDivideSaveData_SVector3::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SMathMultipliesSaveData_SVector3*>(p_Target) = s_Object;
}

void SMathMultipliesSaveData_SVector3::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathMultipliesSaveData_SVector3*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_SVector3, m_aEntities));
	TArray<SMathMultiplyDivideSaveData_SVector3>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_SVector3, m_aData));
}

ZHMTypeInfo SMapMarkerData::TypeInfo = ZHMTypeInfo("SMapMarkerData", sizeof(SMapMarkerData), alignof(SMapMarkerData), SMapMarkerData::WriteJson, SMapMarkerData::WriteSimpleJson, SMapMarkerData::FromSimpleJson, SMapMarkerData::Serialize);

void SMapMarkerData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMapMarkerData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("pathPoints") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SVector2>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pathPoints.size(); ++i)
	{
		auto& s_Item0 = s_Object->pathPoints[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
		SVector2::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->pathPoints.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SMapMarkerData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMapMarkerData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("pathPoints") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pathPoints.size(); ++i)
	{
		auto& s_Item0 = s_Object->pathPoints[i];
		SVector2::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->pathPoints.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMapMarkerData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMapMarkerData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["pathPoints"])
	{
		SVector2 s_ArrayItem0;
		SVector2::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.pathPoints.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SMapMarkerData*>(p_Target) = s_Object;
}

void SMapMarkerData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMapMarkerData*>(p_Object);

	TArray<SVector2>::Serialize(&s_Object->pathPoints, p_Serializer, p_OwnOffset + offsetof(SMapMarkerData, pathPoints));
}

ZHMTypeInfo SDramaSituationSaveData::TypeInfo = ZHMTypeInfo("SDramaSituationSaveData", sizeof(SDramaSituationSaveData), alignof(SDramaSituationSaveData), SDramaSituationSaveData::WriteJson, SDramaSituationSaveData::WriteSimpleJson, SDramaSituationSaveData::FromSimpleJson, SDramaSituationSaveData::Serialize);

void SDramaSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bSituationRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSituationRunning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTerminated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsTerminated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPriorityModifier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPriorityModifier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentDrama") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCurrentDrama;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bProvidersStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bProvidersStarted;
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bSituationRunning") << ":";
	p_Stream << s_Object->m_bSituationRunning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTerminated") << ":";
	p_Stream << s_Object->m_bIsTerminated;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPriorityModifier") << ":";
	p_Stream << s_Object->m_nPriorityModifier;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentDrama") << ":";
	p_Stream << s_Object->m_nCurrentDrama;
	p_Stream << ",";

	p_Stream << JsonStr("m_bProvidersStarted") << ":";
	p_Stream << s_Object->m_bProvidersStarted;

	p_Stream << "}";
}

void SDramaSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDramaSituationSaveData s_Object;

	s_Object.m_bSituationRunning = bool(p_Document["m_bSituationRunning"]);

	s_Object.m_bIsTerminated = bool(p_Document["m_bIsTerminated"]);

	s_Object.m_nPriorityModifier = static_cast<float32>(double(p_Document["m_nPriorityModifier"]));

	s_Object.m_nCurrentDrama = static_cast<int32>(int64_t(p_Document["m_nCurrentDrama"]));

	s_Object.m_bProvidersStarted = bool(p_Document["m_bProvidersStarted"]);

	*reinterpret_cast<SDramaSituationSaveData*>(p_Target) = s_Object;
}

void SDramaSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDramaSituationSaveData*>(p_Object);

}

ZHMTypeInfo SDrama2SituationSaveData::TypeInfo = ZHMTypeInfo("SDrama2SituationSaveData", sizeof(SDrama2SituationSaveData), alignof(SDrama2SituationSaveData), SDrama2SituationSaveData::WriteJson, SDrama2SituationSaveData::WriteSimpleJson, SDrama2SituationSaveData::FromSimpleJson, SDrama2SituationSaveData::Serialize);

void SDrama2SituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDrama2SituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nPriorityModifier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPriorityModifier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentDrama") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCurrentDrama;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nDoneTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nDoneTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOnCooldown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOnCooldown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bProvidersStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bProvidersStarted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSituationRunning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTerminated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsTerminated;
	p_Stream << "}";

	p_Stream << "}";
}

void SDrama2SituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDrama2SituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nPriorityModifier") << ":";
	p_Stream << s_Object->m_nPriorityModifier;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentDrama") << ":";
	p_Stream << s_Object->m_nCurrentDrama;
	p_Stream << ",";

	p_Stream << JsonStr("m_nDoneTime") << ":";
	p_Stream << s_Object->m_nDoneTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOnCooldown") << ":";
	p_Stream << s_Object->m_bIsOnCooldown;
	p_Stream << ",";

	p_Stream << JsonStr("m_bProvidersStarted") << ":";
	p_Stream << s_Object->m_bProvidersStarted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationRunning") << ":";
	p_Stream << s_Object->m_bSituationRunning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsTerminated") << ":";
	p_Stream << s_Object->m_bIsTerminated;

	p_Stream << "}";
}

void SDrama2SituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDrama2SituationSaveData s_Object;

	s_Object.m_nPriorityModifier = static_cast<float32>(double(p_Document["m_nPriorityModifier"]));

	s_Object.m_nCurrentDrama = static_cast<int32>(int64_t(p_Document["m_nCurrentDrama"]));

	s_Object.m_nDoneTime = static_cast<float32>(double(p_Document["m_nDoneTime"]));

	s_Object.m_bIsOnCooldown = bool(p_Document["m_bIsOnCooldown"]);

	s_Object.m_bProvidersStarted = bool(p_Document["m_bProvidersStarted"]);

	s_Object.m_bSituationRunning = bool(p_Document["m_bSituationRunning"]);

	s_Object.m_bIsTerminated = bool(p_Document["m_bIsTerminated"]);

	*reinterpret_cast<SDrama2SituationSaveData*>(p_Target) = s_Object;
}

void SDrama2SituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDrama2SituationSaveData*>(p_Object);

}

ZHMTypeInfo SDrama2SituationCollectionSaveData::TypeInfo = ZHMTypeInfo("SDrama2SituationCollectionSaveData", sizeof(SDrama2SituationCollectionSaveData), alignof(SDrama2SituationCollectionSaveData), SDrama2SituationCollectionSaveData::WriteJson, SDrama2SituationCollectionSaveData::WriteSimpleJson, SDrama2SituationCollectionSaveData::FromSimpleJson, SDrama2SituationCollectionSaveData::Serialize);

void SDrama2SituationCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDrama2SituationCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDrama2SituationSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDrama2SituationSaveData") << "," << JsonStr("$val") << ":";
		SDrama2SituationSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SDrama2SituationCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDrama2SituationCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		SDrama2SituationSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDrama2SituationCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDrama2SituationCollectionSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aStates"])
	{
		SDrama2SituationSaveData s_ArrayItem0;
		SDrama2SituationSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aStates.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SDrama2SituationCollectionSaveData*>(p_Target) = s_Object;
}

void SDrama2SituationCollectionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDrama2SituationCollectionSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SDrama2SituationCollectionSaveData, m_aEntities));
	TArray<SDrama2SituationSaveData>::Serialize(&s_Object->m_aStates, p_Serializer, p_OwnOffset + offsetof(SDrama2SituationCollectionSaveData, m_aStates));
}

ZHMTypeInfo SActorVisibilityConditionSaveData::TypeInfo = ZHMTypeInfo("SActorVisibilityConditionSaveData", sizeof(SActorVisibilityConditionSaveData), alignof(SActorVisibilityConditionSaveData), SActorVisibilityConditionSaveData::WriteJson, SActorVisibilityConditionSaveData::WriteSimpleJson, SActorVisibilityConditionSaveData::FromSimpleJson, SActorVisibilityConditionSaveData::Serialize);

void SActorVisibilityConditionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorVisibilityConditionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorVisibilityConditionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorVisibilityConditionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pActor") << ":";
	p_Stream << s_Object->m_pActor;

	p_Stream << "}";
}

void SActorVisibilityConditionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorVisibilityConditionSaveData s_Object;

	s_Object.m_pActor = static_cast<uint32>(int64_t(p_Document["m_pActor"]));

	*reinterpret_cast<SActorVisibilityConditionSaveData*>(p_Target) = s_Object;
}

void SActorVisibilityConditionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorVisibilityConditionSaveData*>(p_Object);

}

ZHMTypeInfo SCollisionControllerAspectSaveData::TypeInfo = ZHMTypeInfo("SCollisionControllerAspectSaveData", sizeof(SCollisionControllerAspectSaveData), alignof(SCollisionControllerAspectSaveData), SCollisionControllerAspectSaveData::WriteJson, SCollisionControllerAspectSaveData::WriteSimpleJson, SCollisionControllerAspectSaveData::FromSimpleJson, SCollisionControllerAspectSaveData::Serialize);

void SCollisionControllerAspectSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCollisionControllerAspectSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bCollideHitman") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCollideHitman;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCollideCamera") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCollideCamera;
	p_Stream << "}";

	p_Stream << "}";
}

void SCollisionControllerAspectSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCollisionControllerAspectSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bCollideHitman") << ":";
	p_Stream << s_Object->m_bCollideHitman;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCollideCamera") << ":";
	p_Stream << s_Object->m_bCollideCamera;

	p_Stream << "}";
}

void SCollisionControllerAspectSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCollisionControllerAspectSaveData s_Object;

	s_Object.m_bCollideHitman = bool(p_Document["m_bCollideHitman"]);

	s_Object.m_bCollideCamera = bool(p_Document["m_bCollideCamera"]);

	*reinterpret_cast<SCollisionControllerAspectSaveData*>(p_Target) = s_Object;
}

void SCollisionControllerAspectSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCollisionControllerAspectSaveData*>(p_Object);

}

ZHMTypeInfo SCollisionControllerAspectsSaveData::TypeInfo = ZHMTypeInfo("SCollisionControllerAspectsSaveData", sizeof(SCollisionControllerAspectsSaveData), alignof(SCollisionControllerAspectsSaveData), SCollisionControllerAspectsSaveData::WriteJson, SCollisionControllerAspectsSaveData::WriteSimpleJson, SCollisionControllerAspectsSaveData::FromSimpleJson, SCollisionControllerAspectsSaveData::Serialize);

void SCollisionControllerAspectsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCollisionControllerAspectsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SCollisionControllerAspectSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCollisionControllerAspectSaveData") << "," << JsonStr("$val") << ":";
		SCollisionControllerAspectSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCollisionControllerAspectsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCollisionControllerAspectsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SCollisionControllerAspectSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCollisionControllerAspectsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCollisionControllerAspectsSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SCollisionControllerAspectSaveData s_ArrayItem0;
		SCollisionControllerAspectSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SCollisionControllerAspectsSaveData*>(p_Target) = s_Object;
}

void SCollisionControllerAspectsSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCollisionControllerAspectsSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SCollisionControllerAspectsSaveData, m_aEntities));
	TArray<SCollisionControllerAspectSaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SCollisionControllerAspectsSaveData, m_aData));
}

ZHMTypeInfo SMathLerpSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SVector3", sizeof(SMathLerpSaveData_SVector3), alignof(SMathLerpSaveData_SVector3), SMathLerpSaveData_SVector3::WriteJson, SMathLerpSaveData_SVector3::WriteSimpleJson, SMathLerpSaveData_SVector3::FromSimpleJson, SMathLerpSaveData_SVector3::Serialize);

void SMathLerpSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

void SMathLerpSaveData_SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpSaveData_SVector3 s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_A"], &s_Item);
		s_Object.m_A = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_B"], &s_Item);
		s_Object.m_B = s_Item;
	}

	s_Object.m_fT = static_cast<float32>(double(p_Document["m_fT"]));

	*reinterpret_cast<SMathLerpSaveData_SVector3*>(p_Target) = s_Object;
}

void SMathLerpSaveData_SVector3::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SVector3*>(p_Object);

	SVector3::Serialize(&s_Object->m_A, p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SVector3, m_A));
	SVector3::Serialize(&s_Object->m_B, p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SVector3, m_B));
}

ZHMTypeInfo SMathMultiplyDivideSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_SVector4", sizeof(SMathMultiplyDivideSaveData_SVector4), alignof(SMathMultiplyDivideSaveData_SVector4), SMathMultiplyDivideSaveData_SVector4::WriteJson, SMathMultiplyDivideSaveData_SVector4::WriteSimpleJson, SMathMultiplyDivideSaveData_SVector4::FromSimpleJson, SMathMultiplyDivideSaveData_SVector4::Serialize);

void SMathMultiplyDivideSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultiplyDivideSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDivide;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultiplyDivideSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_fB, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << s_Object->m_bDivide;

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultiplyDivideSaveData_SVector4 s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_fA"], &s_Item);
		s_Object.m_fA = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_fB"], &s_Item);
		s_Object.m_fB = s_Item;
	}

	s_Object.m_bDivide = bool(p_Document["m_bDivide"]);

	*reinterpret_cast<SMathMultiplyDivideSaveData_SVector4*>(p_Target) = s_Object;
}

void SMathMultiplyDivideSaveData_SVector4::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathMultiplyDivideSaveData_SVector4*>(p_Object);

	SVector4::Serialize(&s_Object->m_fA, p_Serializer, p_OwnOffset + offsetof(SMathMultiplyDivideSaveData_SVector4, m_fA));
	SVector4::Serialize(&s_Object->m_fB, p_Serializer, p_OwnOffset + offsetof(SMathMultiplyDivideSaveData_SVector4, m_fB));
}

ZHMTypeInfo IMorphemeCutSequenceAnimatable::TypeInfo = ZHMTypeInfo("IMorphemeCutSequenceAnimatable", sizeof(IMorphemeCutSequenceAnimatable), alignof(IMorphemeCutSequenceAnimatable), IMorphemeCutSequenceAnimatable::WriteJson, IMorphemeCutSequenceAnimatable::WriteSimpleJson, IMorphemeCutSequenceAnimatable::FromSimpleJson, IMorphemeCutSequenceAnimatable::Serialize);

void IMorphemeCutSequenceAnimatable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IMorphemeCutSequenceAnimatable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMorphemeCutSequenceAnimatable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IMorphemeCutSequenceAnimatable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IMorphemeCutSequenceAnimatable::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IMorphemeCutSequenceAnimatable s_Object;

	*reinterpret_cast<IMorphemeCutSequenceAnimatable*>(p_Target) = s_Object;
}

void IMorphemeCutSequenceAnimatable::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IMorphemeCutSequenceAnimatable*>(p_Object);

}

ZHMTypeInfo SOptionValueSaveData::TypeInfo = ZHMTypeInfo("SOptionValueSaveData", sizeof(SOptionValueSaveData), alignof(SOptionValueSaveData), SOptionValueSaveData::WriteJson, SOptionValueSaveData::WriteSimpleJson, SOptionValueSaveData::FromSimpleJson, SOptionValueSaveData::Serialize);

void SOptionValueSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SOptionValueSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Value") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Value, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SOptionValueSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SOptionValueSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Value") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Value, p_Stream);

	p_Stream << "}";
}

void SOptionValueSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SOptionValueSaveData s_Object;

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_Value"], &s_Item);
		s_Object.m_Value = s_Item;
	}

	*reinterpret_cast<SOptionValueSaveData*>(p_Target) = s_Object;
}

void SOptionValueSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SOptionValueSaveData*>(p_Object);

	ZVariant::Serialize(&s_Object->m_Value, p_Serializer, p_OwnOffset + offsetof(SOptionValueSaveData, m_Value));
}

ZHMTypeInfo SFontDefinition::TypeInfo = ZHMTypeInfo("SFontDefinition", sizeof(SFontDefinition), alignof(SFontDefinition), SFontDefinition::WriteJson, SFontDefinition::WriteSimpleJson, SFontDefinition::FromSimpleJson, SFontDefinition::Serialize);

void SFontDefinition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFontDefinition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sFontId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sFontId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sFontName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sFontName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eFontFlags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EFontFlags") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eFontFlags) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EFontFlags", static_cast<int>(s_Object->eFontFlags))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fScaleFactor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fScaleFactor;
	p_Stream << "}";

	p_Stream << "}";
}

void SFontDefinition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFontDefinition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sFontId") << ":";
	p_Stream << JsonStr(s_Object->sFontId);
	p_Stream << ",";

	p_Stream << JsonStr("sFontName") << ":";
	p_Stream << JsonStr(s_Object->sFontName);
	p_Stream << ",";

	p_Stream << JsonStr("eFontFlags") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EFontFlags", static_cast<int>(s_Object->eFontFlags)));
	p_Stream << ",";

	p_Stream << JsonStr("fScaleFactor") << ":";
	p_Stream << s_Object->fScaleFactor;

	p_Stream << "}";
}

void SFontDefinition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFontDefinition s_Object;

	s_Object.sFontId = std::string_view(p_Document["sFontId"]);

	s_Object.sFontName = std::string_view(p_Document["sFontName"]);

	s_Object.eFontFlags = static_cast<EFontFlags>(ZHMEnums::GetEnumValueByName("EFontFlags", std::string_view(p_Document["eFontFlags"])));

	s_Object.fScaleFactor = static_cast<float32>(double(p_Document["fScaleFactor"]));

	*reinterpret_cast<SFontDefinition*>(p_Target) = s_Object;
}

void SFontDefinition::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SFontDefinition*>(p_Object);

	ZString::Serialize(&s_Object->sFontId, p_Serializer, p_OwnOffset + offsetof(SFontDefinition, sFontId));
	ZString::Serialize(&s_Object->sFontName, p_Serializer, p_OwnOffset + offsetof(SFontDefinition, sFontName));
}

ZHMTypeInfo SFontLibraryDefinition::TypeInfo = ZHMTypeInfo("SFontLibraryDefinition", sizeof(SFontLibraryDefinition), alignof(SFontLibraryDefinition), SFontLibraryDefinition::WriteJson, SFontLibraryDefinition::WriteSimpleJson, SFontLibraryDefinition::FromSimpleJson, SFontLibraryDefinition::Serialize);

void SFontLibraryDefinition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFontLibraryDefinition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sFontLocaleID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sFontLocaleID);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aFontDefinitions") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SFontDefinition>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFontDefinitions.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aFontDefinitions[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFontDefinition") << "," << JsonStr("$val") << ":";
		SFontDefinition::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aFontDefinitions.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SFontLibraryDefinition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFontLibraryDefinition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sFontLocaleID") << ":";
	p_Stream << JsonStr(s_Object->sFontLocaleID);
	p_Stream << ",";

	p_Stream << JsonStr("m_aFontDefinitions") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFontDefinitions.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aFontDefinitions[i];
		SFontDefinition::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aFontDefinitions.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SFontLibraryDefinition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFontLibraryDefinition s_Object;

	s_Object.sFontLocaleID = std::string_view(p_Document["sFontLocaleID"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aFontDefinitions"])
	{
		SFontDefinition s_ArrayItem0;
		SFontDefinition::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aFontDefinitions.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SFontLibraryDefinition*>(p_Target) = s_Object;
}

void SFontLibraryDefinition::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SFontLibraryDefinition*>(p_Object);

	ZString::Serialize(&s_Object->sFontLocaleID, p_Serializer, p_OwnOffset + offsetof(SFontLibraryDefinition, sFontLocaleID));
	TArray<SFontDefinition>::Serialize(&s_Object->m_aFontDefinitions, p_Serializer, p_OwnOffset + offsetof(SFontLibraryDefinition, m_aFontDefinitions));
}

ZHMTypeInfo SAccessoryItemSaveData::TypeInfo = ZHMTypeInfo("SAccessoryItemSaveData", sizeof(SAccessoryItemSaveData), alignof(SAccessoryItemSaveData), SAccessoryItemSaveData::WriteJson, SAccessoryItemSaveData::WriteSimpleJson, SAccessoryItemSaveData::FromSimpleJson, SAccessoryItemSaveData::Serialize);

void SAccessoryItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAccessoryItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nBoneId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nBoneId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAttached;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SAccessoryItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAccessoryItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_nBoneId") << ":";
	p_Stream << s_Object->m_nBoneId;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttached") << ":";
	p_Stream << s_Object->m_bAttached;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;

	p_Stream << "}";
}

void SAccessoryItemSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAccessoryItemSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_nBoneId = static_cast<uint32>(int64_t(p_Document["m_nBoneId"]));

	s_Object.m_bAttached = bool(p_Document["m_bAttached"]);

	s_Object.m_bVisible = bool(p_Document["m_bVisible"]);

	*reinterpret_cast<SAccessoryItemSaveData*>(p_Target) = s_Object;
}

void SAccessoryItemSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAccessoryItemSaveData*>(p_Object);

}

ZHMTypeInfo ZUIDataProvider::TypeInfo = ZHMTypeInfo("ZUIDataProvider", sizeof(ZUIDataProvider), alignof(ZUIDataProvider), ZUIDataProvider::WriteJson, ZUIDataProvider::WriteSimpleJson, ZUIDataProvider::FromSimpleJson, ZUIDataProvider::Serialize);

void ZUIDataProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZUIDataProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZUIDataProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZUIDataProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZUIDataProvider::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZUIDataProvider s_Object;

	*reinterpret_cast<ZUIDataProvider*>(p_Target) = s_Object;
}

void ZUIDataProvider::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZUIDataProvider*>(p_Object);

}

ZHMTypeInfo SSentryZoneSaveData::TypeInfo = ZHMTypeInfo("SSentryZoneSaveData", sizeof(SSentryZoneSaveData), alignof(SSentryZoneSaveData), SSentryZoneSaveData::WriteJson, SSentryZoneSaveData::WriteSimpleJson, SSentryZoneSaveData::FromSimpleJson, SSentryZoneSaveData::Serialize);

void SSentryZoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSentryZoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tGreetingCooldown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tGreetingCooldown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLoiteringCooldown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLoiteringCooldown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowingWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowingWarning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bLeftThroughWarningZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bLeftThroughWarningZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bEnteredThroughEntranceZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bEnteredThroughEntranceZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInEntranceZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInEntranceZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInWarningZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInWarningZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInGreetingZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInGreetingZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInReFriskZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInReFriskZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInRequiredDisguise") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInRequiredDisguise;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInFriskExemptDisguise") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInFriskExemptDisguise;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasRequiredItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasRequiredItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanShowActionPrompt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCanShowActionPrompt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInAnyZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetInAnyZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSituationActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFrisked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFrisked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bItemChecked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bItemChecked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreeted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGreeted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedInstruction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGreetedInstruction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedLoitering") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGreetedLoitering;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedUnexpected") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGreetedUnexpected;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInFriskWarningZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInFriskWarningZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesAllowedDisabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<bool>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesAllowedDisabled.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDisguisesAllowedDisabled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aDisguisesAllowedDisabled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesFriskExemptDisabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<bool>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesFriskExemptDisabled.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDisguisesFriskExemptDisabled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aDisguisesFriskExemptDisabled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesDontEscalateOnLineCrossingDisabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<bool>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ItemsDroppedInZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_ItemsDroppedInZone.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_ItemsDroppedInZone[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_ItemsDroppedInZone.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SSentryZoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSentryZoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tGreetingCooldown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tGreetingCooldown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLoiteringCooldown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLoiteringCooldown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowingWarning") << ":";
	p_Stream << s_Object->m_bShowingWarning;
	p_Stream << ",";

	p_Stream << JsonStr("bLeftThroughWarningZone") << ":";
	p_Stream << s_Object->bLeftThroughWarningZone;
	p_Stream << ",";

	p_Stream << JsonStr("bEnteredThroughEntranceZone") << ":";
	p_Stream << s_Object->bEnteredThroughEntranceZone;
	p_Stream << ",";

	p_Stream << JsonStr("bInEntranceZone") << ":";
	p_Stream << s_Object->bInEntranceZone;
	p_Stream << ",";

	p_Stream << JsonStr("bInWarningZone") << ":";
	p_Stream << s_Object->bInWarningZone;
	p_Stream << ",";

	p_Stream << JsonStr("bInGreetingZone") << ":";
	p_Stream << s_Object->bInGreetingZone;
	p_Stream << ",";

	p_Stream << JsonStr("bInReFriskZone") << ":";
	p_Stream << s_Object->bInReFriskZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInRequiredDisguise") << ":";
	p_Stream << s_Object->m_bInRequiredDisguise;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInFriskExemptDisguise") << ":";
	p_Stream << s_Object->m_bInFriskExemptDisguise;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasRequiredItem") << ":";
	p_Stream << s_Object->m_bHasRequiredItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanShowActionPrompt") << ":";
	p_Stream << s_Object->m_bCanShowActionPrompt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInAnyZone") << ":";
	p_Stream << s_Object->m_bTargetInAnyZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationActive") << ":";
	p_Stream << s_Object->m_bSituationActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFrisked") << ":";
	p_Stream << s_Object->m_bFrisked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bItemChecked") << ":";
	p_Stream << s_Object->m_bItemChecked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreeted") << ":";
	p_Stream << s_Object->m_bGreeted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedInstruction") << ":";
	p_Stream << s_Object->m_bGreetedInstruction;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedLoitering") << ":";
	p_Stream << s_Object->m_bGreetedLoitering;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGreetedUnexpected") << ":";
	p_Stream << s_Object->m_bGreetedUnexpected;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInFriskWarningZone") << ":";
	p_Stream << s_Object->m_bInFriskWarningZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesAllowedDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesAllowedDisabled.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDisguisesAllowedDisabled[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aDisguisesAllowedDisabled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesFriskExemptDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesFriskExemptDisabled.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDisguisesFriskExemptDisabled[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aDisguisesFriskExemptDisabled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDisguisesDontEscalateOnLineCrossingDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_ItemsDroppedInZone") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_ItemsDroppedInZone.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_ItemsDroppedInZone[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_ItemsDroppedInZone.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SSentryZoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSentryZoneSaveData s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tGreetingCooldown"], &s_Item);
		s_Object.m_tGreetingCooldown = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLoiteringCooldown"], &s_Item);
		s_Object.m_tLoiteringCooldown = s_Item;
	}

	s_Object.m_nWarningCount = static_cast<int32>(int64_t(p_Document["m_nWarningCount"]));

	s_Object.m_bShowingWarning = bool(p_Document["m_bShowingWarning"]);

	s_Object.bLeftThroughWarningZone = bool(p_Document["bLeftThroughWarningZone"]);

	s_Object.bEnteredThroughEntranceZone = bool(p_Document["bEnteredThroughEntranceZone"]);

	s_Object.bInEntranceZone = bool(p_Document["bInEntranceZone"]);

	s_Object.bInWarningZone = bool(p_Document["bInWarningZone"]);

	s_Object.bInGreetingZone = bool(p_Document["bInGreetingZone"]);

	s_Object.bInReFriskZone = bool(p_Document["bInReFriskZone"]);

	s_Object.m_bInRequiredDisguise = bool(p_Document["m_bInRequiredDisguise"]);

	s_Object.m_bInFriskExemptDisguise = bool(p_Document["m_bInFriskExemptDisguise"]);

	s_Object.m_bHasRequiredItem = bool(p_Document["m_bHasRequiredItem"]);

	s_Object.m_bCanShowActionPrompt = bool(p_Document["m_bCanShowActionPrompt"]);

	s_Object.m_bTargetInAnyZone = bool(p_Document["m_bTargetInAnyZone"]);

	s_Object.m_bSituationActive = bool(p_Document["m_bSituationActive"]);

	s_Object.m_bFrisked = bool(p_Document["m_bFrisked"]);

	s_Object.m_bItemChecked = bool(p_Document["m_bItemChecked"]);

	s_Object.m_bGreeted = bool(p_Document["m_bGreeted"]);

	s_Object.m_bGreetedInstruction = bool(p_Document["m_bGreetedInstruction"]);

	s_Object.m_bGreetedLoitering = bool(p_Document["m_bGreetedLoitering"]);

	s_Object.m_bGreetedUnexpected = bool(p_Document["m_bGreetedUnexpected"]);

	s_Object.m_bInFriskWarningZone = bool(p_Document["m_bInFriskWarningZone"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aDisguisesAllowedDisabled"])
	{
		s_Object.m_aDisguisesAllowedDisabled.push_back(bool(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aDisguisesFriskExemptDisabled"])
	{
		s_Object.m_aDisguisesFriskExemptDisabled.push_back(bool(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aDisguisesDontEscalateOnLineCrossingDisabled"])
	{
		s_Object.m_aDisguisesDontEscalateOnLineCrossingDisabled.push_back(bool(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_ItemsDroppedInZone"])
	{
		s_Object.m_ItemsDroppedInZone.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SSentryZoneSaveData*>(p_Target) = s_Object;
}

void SSentryZoneSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSentryZoneSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tGreetingCooldown, p_Serializer, p_OwnOffset + offsetof(SSentryZoneSaveData, m_tGreetingCooldown));
	ZGameTime::Serialize(&s_Object->m_tLoiteringCooldown, p_Serializer, p_OwnOffset + offsetof(SSentryZoneSaveData, m_tLoiteringCooldown));
	TArray<bool>::Serialize(&s_Object->m_aDisguisesAllowedDisabled, p_Serializer, p_OwnOffset + offsetof(SSentryZoneSaveData, m_aDisguisesAllowedDisabled));
	TArray<bool>::Serialize(&s_Object->m_aDisguisesFriskExemptDisabled, p_Serializer, p_OwnOffset + offsetof(SSentryZoneSaveData, m_aDisguisesFriskExemptDisabled));
	TArray<bool>::Serialize(&s_Object->m_aDisguisesDontEscalateOnLineCrossingDisabled, p_Serializer, p_OwnOffset + offsetof(SSentryZoneSaveData, m_aDisguisesDontEscalateOnLineCrossingDisabled));
	TArray<uint32>::Serialize(&s_Object->m_ItemsDroppedInZone, p_Serializer, p_OwnOffset + offsetof(SSentryZoneSaveData, m_ItemsDroppedInZone));
}

ZHMTypeInfo ZHUDHintController_SData::TypeInfo = ZHMTypeInfo("ZHUDHintController.SData", sizeof(ZHUDHintController_SData), alignof(ZHUDHintController_SData), ZHUDHintController_SData::WriteJson, ZHUDHintController_SData::WriteSimpleJson, ZHUDHintController_SData::FromSimpleJson, ZHUDHintController_SData::Serialize);

void ZHUDHintController_SData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDHintController_SData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sTitleText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sTitleText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodyText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sBodyText);
	p_Stream << "}";

	p_Stream << "}";
}

void ZHUDHintController_SData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDHintController_SData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sTitleText") << ":";
	p_Stream << JsonStr(s_Object->m_sTitleText);
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodyText") << ":";
	p_Stream << JsonStr(s_Object->m_sBodyText);

	p_Stream << "}";
}

void ZHUDHintController_SData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHUDHintController_SData s_Object;

	s_Object.m_sTitleText = std::string_view(p_Document["m_sTitleText"]);

	s_Object.m_sBodyText = std::string_view(p_Document["m_sBodyText"]);

	*reinterpret_cast<ZHUDHintController_SData*>(p_Target) = s_Object;
}

void ZHUDHintController_SData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHUDHintController_SData*>(p_Object);

	ZString::Serialize(&s_Object->m_sTitleText, p_Serializer, p_OwnOffset + offsetof(ZHUDHintController_SData, m_sTitleText));
	ZString::Serialize(&s_Object->m_sBodyText, p_Serializer, p_OwnOffset + offsetof(ZHUDHintController_SData, m_sBodyText));
}

ZHMTypeInfo SCautiousVIPGroupSaveData::TypeInfo = ZHMTypeInfo("SCautiousVIPGroupSaveData", sizeof(SCautiousVIPGroupSaveData), alignof(SCautiousVIPGroupSaveData), SCautiousVIPGroupSaveData::WriteJson, SCautiousVIPGroupSaveData::WriteSimpleJson, SCautiousVIPGroupSaveData::FromSimpleJson, SCautiousVIPGroupSaveData::Serialize);

void SCautiousVIPGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousVIPGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vip") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_vip;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_stateData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCautiousVIPGroupState") << "," << JsonStr("$val") << ":";
	SCautiousVIPGroupState::WriteJson(&s_Object->m_stateData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vipTargetNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_vipTargetNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_occupancyNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_occupancyNode;
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousVIPGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousVIPGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vip") << ":";
	p_Stream << s_Object->m_vip;
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_stateData") << ":";
	SCautiousVIPGroupState::WriteSimpleJson(&s_Object->m_stateData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vipTargetNode") << ":";
	p_Stream << s_Object->m_vipTargetNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_occupancyNode") << ":";
	p_Stream << s_Object->m_occupancyNode;

	p_Stream << "}";
}

void SCautiousVIPGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCautiousVIPGroupSaveData s_Object;

	s_Object.m_vip = static_cast<uint32>(int64_t(p_Document["m_vip"]));

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	{
		SCautiousVIPGroupState s_Item;
		SCautiousVIPGroupState::FromSimpleJson(p_Document["m_stateData"], &s_Item);
		s_Object.m_stateData = s_Item;
	}

	s_Object.m_vipTargetNode = static_cast<int32>(int64_t(p_Document["m_vipTargetNode"]));

	s_Object.m_occupancyNode = static_cast<int32>(int64_t(p_Document["m_occupancyNode"]));

	*reinterpret_cast<SCautiousVIPGroupSaveData*>(p_Target) = s_Object;
}

void SCautiousVIPGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCautiousVIPGroupSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SCautiousVIPGroupSaveData, m_fsmState));
	SCautiousVIPGroupState::Serialize(&s_Object->m_stateData, p_Serializer, p_OwnOffset + offsetof(SCautiousVIPGroupSaveData, m_stateData));
}

ZHMTypeInfo SSituationGroupSaveData::TypeInfo = ZHMTypeInfo("SSituationGroupSaveData", sizeof(SSituationGroupSaveData), alignof(SSituationGroupSaveData), SSituationGroupSaveData::WriteJson, SSituationGroupSaveData::WriteSimpleJson, SSituationGroupSaveData::FromSimpleJson, SSituationGroupSaveData::Serialize);

void SSituationGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSituationGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sClassTypeName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sClassTypeName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGroupID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CustomData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSituationGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sClassTypeName") << ":";
	p_Stream << JsonStr(s_Object->m_sClassTypeName);
	p_Stream << ",";

	p_Stream << JsonStr("m_nSituation") << ":";
	p_Stream << s_Object->m_nSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_aActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aActors[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupID") << ":";
	p_Stream << s_Object->m_nGroupID;
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CustomData, p_Stream);

	p_Stream << "}";
}

void SSituationGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSituationGroupSaveData s_Object;

	s_Object.m_sClassTypeName = std::string_view(p_Document["m_sClassTypeName"]);

	s_Object.m_nSituation = static_cast<uint32>(int64_t(p_Document["m_nSituation"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aActors"])
	{
		s_Object.m_aActors.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	s_Object.m_nGroupID = static_cast<int32>(int64_t(p_Document["m_nGroupID"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_CustomData"], &s_Item);
		s_Object.m_CustomData = s_Item;
	}

	*reinterpret_cast<SSituationGroupSaveData*>(p_Target) = s_Object;
}

void SSituationGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSituationGroupSaveData*>(p_Object);

	ZString::Serialize(&s_Object->m_sClassTypeName, p_Serializer, p_OwnOffset + offsetof(SSituationGroupSaveData, m_sClassTypeName));
	TArray<uint32>::Serialize(&s_Object->m_aActors, p_Serializer, p_OwnOffset + offsetof(SSituationGroupSaveData, m_aActors));
	ZVariant::Serialize(&s_Object->m_CustomData, p_Serializer, p_OwnOffset + offsetof(SSituationGroupSaveData, m_CustomData));
}

ZHMTypeInfo SMathLerpSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SVector2", sizeof(SMathLerpSaveData_SVector2), alignof(SMathLerpSaveData_SVector2), SMathLerpSaveData_SVector2::WriteJson, SMathLerpSaveData_SVector2::WriteSimpleJson, SMathLerpSaveData_SVector2::FromSimpleJson, SMathLerpSaveData_SVector2::Serialize);

void SMathLerpSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

void SMathLerpSaveData_SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpSaveData_SVector2 s_Object;

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_A"], &s_Item);
		s_Object.m_A = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_B"], &s_Item);
		s_Object.m_B = s_Item;
	}

	s_Object.m_fT = static_cast<float32>(double(p_Document["m_fT"]));

	*reinterpret_cast<SMathLerpSaveData_SVector2*>(p_Target) = s_Object;
}

void SMathLerpSaveData_SVector2::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SVector2*>(p_Object);

	SVector2::Serialize(&s_Object->m_A, p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SVector2, m_A));
	SVector2::Serialize(&s_Object->m_B, p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SVector2, m_B));
}

ZHMTypeInfo SMathLerpsSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SVector2", sizeof(SMathLerpsSaveData_SVector2), alignof(SMathLerpsSaveData_SVector2), SMathLerpsSaveData_SVector2::WriteJson, SMathLerpsSaveData_SVector2::WriteSimpleJson, SMathLerpsSaveData_SVector2::FromSimpleJson, SMathLerpsSaveData_SVector2::Serialize);

void SMathLerpsSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SMathLerpSaveData_SVector2>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SVector2") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SVector2::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SMathLerpSaveData_SVector2::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpsSaveData_SVector2 s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SMathLerpSaveData_SVector2 s_ArrayItem0;
		SMathLerpSaveData_SVector2::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SMathLerpsSaveData_SVector2*>(p_Target) = s_Object;
}

void SMathLerpsSaveData_SVector2::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SVector2*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SVector2, m_aEntities));
	TArray<SMathLerpSaveData_SVector2>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SVector2, m_aData));
}

ZHMTypeInfo ZPlanningObjectiveInfoBuilder::TypeInfo = ZHMTypeInfo("ZPlanningObjectiveInfoBuilder", sizeof(ZPlanningObjectiveInfoBuilder), alignof(ZPlanningObjectiveInfoBuilder), ZPlanningObjectiveInfoBuilder::WriteJson, ZPlanningObjectiveInfoBuilder::WriteSimpleJson, ZPlanningObjectiveInfoBuilder::FromSimpleJson, ZPlanningObjectiveInfoBuilder::Serialize);

void ZPlanningObjectiveInfoBuilder::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZPlanningObjectiveInfoBuilder*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZPlanningObjectiveInfoBuilder::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZPlanningObjectiveInfoBuilder*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZPlanningObjectiveInfoBuilder::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZPlanningObjectiveInfoBuilder s_Object;

	*reinterpret_cast<ZPlanningObjectiveInfoBuilder*>(p_Target) = s_Object;
}

void ZPlanningObjectiveInfoBuilder::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZPlanningObjectiveInfoBuilder*>(p_Object);

}

ZHMTypeInfo STestStruct::TypeInfo = ZHMTypeInfo("STestStruct", sizeof(STestStruct), alignof(STestStruct), STestStruct::WriteJson, STestStruct::WriteSimpleJson, STestStruct::FromSimpleJson, STestStruct::Serialize);

void STestStruct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STestStruct*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("stringField") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->stringField);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("intField") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->intField;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("floatField") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->floatField;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("enumField") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STestStruct.ETestEnum") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->enumField) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("STestStruct.ETestEnum", static_cast<int>(s_Object->enumField))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void STestStruct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STestStruct*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("stringField") << ":";
	p_Stream << JsonStr(s_Object->stringField);
	p_Stream << ",";

	p_Stream << JsonStr("intField") << ":";
	p_Stream << s_Object->intField;
	p_Stream << ",";

	p_Stream << JsonStr("floatField") << ":";
	p_Stream << s_Object->floatField;
	p_Stream << ",";

	p_Stream << JsonStr("enumField") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("STestStruct.ETestEnum", static_cast<int>(s_Object->enumField)));

	p_Stream << "}";
}

void STestStruct::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STestStruct s_Object;

	s_Object.stringField = std::string_view(p_Document["stringField"]);

	s_Object.intField = static_cast<uint32>(int64_t(p_Document["intField"]));

	s_Object.floatField = static_cast<float32>(double(p_Document["floatField"]));

	s_Object.enumField = static_cast<STestStruct_ETestEnum>(ZHMEnums::GetEnumValueByName("STestStruct.ETestEnum", std::string_view(p_Document["enumField"])));

	*reinterpret_cast<STestStruct*>(p_Target) = s_Object;
}

void STestStruct::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STestStruct*>(p_Object);

	ZString::Serialize(&s_Object->stringField, p_Serializer, p_OwnOffset + offsetof(STestStruct, stringField));
}

ZHMTypeInfo STestStruct2::TypeInfo = ZHMTypeInfo("STestStruct2", sizeof(STestStruct2), alignof(STestStruct2), STestStruct2::WriteJson, STestStruct2::WriteSimpleJson, STestStruct2::FromSimpleJson, STestStruct2::Serialize);

void STestStruct2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STestStruct2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("arrayField") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<STestStruct>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->arrayField.size(); ++i)
	{
		auto& s_Item0 = s_Object->arrayField[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STestStruct") << "," << JsonStr("$val") << ":";
		STestStruct::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->arrayField.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("variantField") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->variantField, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STestStruct2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STestStruct2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("arrayField") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->arrayField.size(); ++i)
	{
		auto& s_Item0 = s_Object->arrayField[i];
		STestStruct::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->arrayField.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("variantField") << ":";
	ZVariant::WriteSimpleJson(&s_Object->variantField, p_Stream);

	p_Stream << "}";
}

void STestStruct2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STestStruct2 s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["arrayField"])
	{
		STestStruct s_ArrayItem0;
		STestStruct::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.arrayField.push_back(s_ArrayItem0);
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["variantField"], &s_Item);
		s_Object.variantField = s_Item;
	}

	*reinterpret_cast<STestStruct2*>(p_Target) = s_Object;
}

void STestStruct2::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STestStruct2*>(p_Object);

	TArray<STestStruct>::Serialize(&s_Object->arrayField, p_Serializer, p_OwnOffset + offsetof(STestStruct2, arrayField));
	ZVariant::Serialize(&s_Object->variantField, p_Serializer, p_OwnOffset + offsetof(STestStruct2, variantField));
}

ZHMTypeInfo SAnimatedActorStandOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorStandOrderSaveData", sizeof(SAnimatedActorStandOrderSaveData), alignof(SAnimatedActorStandOrderSaveData), SAnimatedActorStandOrderSaveData::WriteJson, SAnimatedActorStandOrderSaveData::WriteSimpleJson, SAnimatedActorStandOrderSaveData::FromSimpleJson, SAnimatedActorStandOrderSaveData::Serialize);

void SAnimatedActorStandOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorStandOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vFacingDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vFacingDirection, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorStandOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorStandOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vFacingDirection") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vFacingDirection, p_Stream);

	p_Stream << "}";
}

void SAnimatedActorStandOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAnimatedActorStandOrderSaveData s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vFacingDirection"], &s_Item);
		s_Object.m_vFacingDirection = s_Item;
	}

	*reinterpret_cast<SAnimatedActorStandOrderSaveData*>(p_Target) = s_Object;
}

void SAnimatedActorStandOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorStandOrderSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vFacingDirection, p_Serializer, p_OwnOffset + offsetof(SAnimatedActorStandOrderSaveData, m_vFacingDirection));
}

ZHMTypeInfo SInventoryUISlotSlim::TypeInfo = ZHMTypeInfo("SInventoryUISlotSlim", sizeof(SInventoryUISlotSlim), alignof(SInventoryUISlotSlim), SInventoryUISlotSlim::WriteJson, SInventoryUISlotSlim::WriteSimpleJson, SInventoryUISlotSlim::FromSimpleJson, SInventoryUISlotSlim::Serialize);

void SInventoryUISlotSlim::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryUISlotSlim*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("containedIcon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->containedIcon, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryUISlotSlim::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryUISlotSlim*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZVariant::WriteSimpleJson(&s_Object->icon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("containedIcon") << ":";
	ZVariant::WriteSimpleJson(&s_Object->containedIcon, p_Stream);

	p_Stream << "}";
}

void SInventoryUISlotSlim::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryUISlotSlim s_Object;

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["icon"], &s_Item);
		s_Object.icon = s_Item;
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["containedIcon"], &s_Item);
		s_Object.containedIcon = s_Item;
	}

	*reinterpret_cast<SInventoryUISlotSlim*>(p_Target) = s_Object;
}

void SInventoryUISlotSlim::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SInventoryUISlotSlim*>(p_Object);

	ZVariant::Serialize(&s_Object->icon, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlotSlim, icon));
	ZVariant::Serialize(&s_Object->containedIcon, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlotSlim, containedIcon));
}

ZHMTypeInfo SIntelDataArray_dummy::TypeInfo = ZHMTypeInfo("SIntelDataArray_dummy", sizeof(SIntelDataArray_dummy), alignof(SIntelDataArray_dummy), SIntelDataArray_dummy::WriteJson, SIntelDataArray_dummy::WriteSimpleJson, SIntelDataArray_dummy::FromSimpleJson, SIntelDataArray_dummy::Serialize);

void SIntelDataArray_dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelDataArray_dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SIntelData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SIntelData") << "," << JsonStr("$val") << ":";
		SIntelData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelDataArray_dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelDataArray_dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->dummy[i];
		SIntelData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SIntelDataArray_dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelDataArray_dummy s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["dummy"])
	{
		SIntelData s_ArrayItem0;
		SIntelData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.dummy.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SIntelDataArray_dummy*>(p_Target) = s_Object;
}

void SIntelDataArray_dummy::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SIntelDataArray_dummy*>(p_Object);

	TArray<SIntelData>::Serialize(&s_Object->dummy, p_Serializer, p_OwnOffset + offsetof(SIntelDataArray_dummy, dummy));
}

ZHMTypeInfo SItemSaveData::TypeInfo = ZHMTypeInfo("SItemSaveData", sizeof(SItemSaveData), alignof(SItemSaveData), SItemSaveData::WriteJson, SItemSaveData::WriteSimpleJson, SItemSaveData::FromSimpleJson, SItemSaveData::Serialize);

void SItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vRotation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnablePickup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnablePickup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bKinematic") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bKinematic;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSleeping") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSleeping;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPerceptible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsPerceptible;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDestroyed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vVelocity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vVelocity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rTransformParent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTransformParent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSpawner") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSpawner;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rOwner") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rOwner;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rHoldingContainer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rHoldingContainer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pPreviousOwner") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pPreviousOwner;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTurnedOn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTurnedOn;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEverOwnedByHitman") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEverOwnedByHitman;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasPlacedAndAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasPlacedAndAttached;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bObjectInPhysicsWorld") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bObjectInPhysicsWorld;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nQuantity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nQuantity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eGlowType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ERenderGlowTypes") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eGlowType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ERenderGlowTypes", static_cast<int>(s_Object->m_eGlowType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vRotation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowItem") << ":";
	p_Stream << s_Object->m_bShowItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnablePickup") << ":";
	p_Stream << s_Object->m_bEnablePickup;
	p_Stream << ",";

	p_Stream << JsonStr("m_bKinematic") << ":";
	p_Stream << s_Object->m_bKinematic;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSleeping") << ":";
	p_Stream << s_Object->m_bSleeping;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsPerceptible") << ":";
	p_Stream << s_Object->m_bIsPerceptible;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << s_Object->m_bDestroyed;
	p_Stream << ",";

	p_Stream << JsonStr("m_vVelocity") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vVelocity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rTransformParent") << ":";
	p_Stream << s_Object->m_rTransformParent;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSpawner") << ":";
	p_Stream << s_Object->m_rSpawner;
	p_Stream << ",";

	p_Stream << JsonStr("m_rOwner") << ":";
	p_Stream << s_Object->m_rOwner;
	p_Stream << ",";

	p_Stream << JsonStr("m_rHoldingContainer") << ":";
	p_Stream << s_Object->m_rHoldingContainer;
	p_Stream << ",";

	p_Stream << JsonStr("m_pPreviousOwner") << ":";
	p_Stream << s_Object->m_pPreviousOwner;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTurnedOn") << ":";
	p_Stream << s_Object->m_bTurnedOn;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEverOwnedByHitman") << ":";
	p_Stream << s_Object->m_bEverOwnedByHitman;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasPlacedAndAttached") << ":";
	p_Stream << s_Object->m_bWasPlacedAndAttached;
	p_Stream << ",";

	p_Stream << JsonStr("m_bObjectInPhysicsWorld") << ":";
	p_Stream << s_Object->m_bObjectInPhysicsWorld;
	p_Stream << ",";

	p_Stream << JsonStr("m_nQuantity") << ":";
	p_Stream << s_Object->m_nQuantity;
	p_Stream << ",";

	p_Stream << JsonStr("m_eGlowType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ERenderGlowTypes", static_cast<int>(s_Object->m_eGlowType)));

	p_Stream << "}";
}

void SItemSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemSaveData s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vRotation"], &s_Item);
		s_Object.m_vRotation = s_Item;
	}

	s_Object.m_bShowItem = bool(p_Document["m_bShowItem"]);

	s_Object.m_bEnablePickup = bool(p_Document["m_bEnablePickup"]);

	s_Object.m_bKinematic = bool(p_Document["m_bKinematic"]);

	s_Object.m_bSleeping = bool(p_Document["m_bSleeping"]);

	s_Object.m_bIsPerceptible = bool(p_Document["m_bIsPerceptible"]);

	s_Object.m_bDestroyed = bool(p_Document["m_bDestroyed"]);

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vVelocity"], &s_Item);
		s_Object.m_vVelocity = s_Item;
	}

	s_Object.m_rTransformParent = static_cast<uint32>(int64_t(p_Document["m_rTransformParent"]));

	s_Object.m_rSpawner = static_cast<uint32>(int64_t(p_Document["m_rSpawner"]));

	s_Object.m_rOwner = static_cast<uint32>(int64_t(p_Document["m_rOwner"]));

	s_Object.m_rHoldingContainer = static_cast<uint32>(int64_t(p_Document["m_rHoldingContainer"]));

	s_Object.m_pPreviousOwner = static_cast<uint32>(int64_t(p_Document["m_pPreviousOwner"]));

	s_Object.m_bTurnedOn = bool(p_Document["m_bTurnedOn"]);

	s_Object.m_bEverOwnedByHitman = bool(p_Document["m_bEverOwnedByHitman"]);

	s_Object.m_bWasPlacedAndAttached = bool(p_Document["m_bWasPlacedAndAttached"]);

	s_Object.m_bObjectInPhysicsWorld = bool(p_Document["m_bObjectInPhysicsWorld"]);

	s_Object.m_nQuantity = static_cast<int32>(int64_t(p_Document["m_nQuantity"]));

	s_Object.m_eGlowType = static_cast<ERenderGlowTypes>(ZHMEnums::GetEnumValueByName("ERenderGlowTypes", std::string_view(p_Document["m_eGlowType"])));

	*reinterpret_cast<SItemSaveData*>(p_Target) = s_Object;
}

void SItemSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItemSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vPosition, p_Serializer, p_OwnOffset + offsetof(SItemSaveData, m_vPosition));
	SVector4::Serialize(&s_Object->m_vRotation, p_Serializer, p_OwnOffset + offsetof(SItemSaveData, m_vRotation));
	SVector3::Serialize(&s_Object->m_vVelocity, p_Serializer, p_OwnOffset + offsetof(SItemSaveData, m_vVelocity));
}

ZHMTypeInfo SAnimatedActorReactOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorReactOrderSaveData", sizeof(SAnimatedActorReactOrderSaveData), alignof(SAnimatedActorReactOrderSaveData), SAnimatedActorReactOrderSaveData::WriteJson, SAnimatedActorReactOrderSaveData::WriteSimpleJson, SAnimatedActorReactOrderSaveData::FromSimpleJson, SAnimatedActorReactOrderSaveData::Serialize);

void SAnimatedActorReactOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorReactOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vFaceTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vFaceTarget, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vLookAtTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vLookAtTarget, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rChildNetworkEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_targetEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_targetEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_targetEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadbody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDeadbody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bExplosion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bExplosion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTrespassing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTrespassing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropCarriedItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropCarriedItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFaceTargetSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFaceTargetSet;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLookAtTargetSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLookAtTargetSet;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sAct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sAct);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorReactOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorReactOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vFaceTarget") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vFaceTarget, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vLookAtTarget") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vLookAtTarget, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkEntity") << ":";
	p_Stream << s_Object->m_rChildNetworkEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_targetEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_targetEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bDeadbody") << ":";
	p_Stream << s_Object->m_bDeadbody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bExplosion") << ":";
	p_Stream << s_Object->m_bExplosion;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTrespassing") << ":";
	p_Stream << s_Object->m_bTrespassing;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropCarriedItems") << ":";
	p_Stream << s_Object->m_bDropCarriedItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFaceTargetSet") << ":";
	p_Stream << s_Object->m_bFaceTargetSet;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLookAtTargetSet") << ":";
	p_Stream << s_Object->m_bLookAtTargetSet;
	p_Stream << ",";

	p_Stream << JsonStr("m_sAct") << ":";
	p_Stream << JsonStr(s_Object->m_sAct);

	p_Stream << "}";
}

void SAnimatedActorReactOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAnimatedActorReactOrderSaveData s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vFaceTarget"], &s_Item);
		s_Object.m_vFaceTarget = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vLookAtTarget"], &s_Item);
		s_Object.m_vLookAtTarget = s_Item;
	}

	s_Object.m_rChildNetworkEntity = static_cast<uint32>(int64_t(p_Document["m_rChildNetworkEntity"]));

	s_Object.m_targetEmotionState = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_targetEmotionState"])));

	s_Object.m_bDeadbody = bool(p_Document["m_bDeadbody"]);

	s_Object.m_bExplosion = bool(p_Document["m_bExplosion"]);

	s_Object.m_bTrespassing = bool(p_Document["m_bTrespassing"]);

	s_Object.m_bDropCarriedItems = bool(p_Document["m_bDropCarriedItems"]);

	s_Object.m_bFaceTargetSet = bool(p_Document["m_bFaceTargetSet"]);

	s_Object.m_bLookAtTargetSet = bool(p_Document["m_bLookAtTargetSet"]);

	s_Object.m_sAct = std::string_view(p_Document["m_sAct"]);

	*reinterpret_cast<SAnimatedActorReactOrderSaveData*>(p_Target) = s_Object;
}

void SAnimatedActorReactOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorReactOrderSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vFaceTarget, p_Serializer, p_OwnOffset + offsetof(SAnimatedActorReactOrderSaveData, m_vFaceTarget));
	SVector3::Serialize(&s_Object->m_vLookAtTarget, p_Serializer, p_OwnOffset + offsetof(SAnimatedActorReactOrderSaveData, m_vLookAtTarget));
	ZString::Serialize(&s_Object->m_sAct, p_Serializer, p_OwnOffset + offsetof(SAnimatedActorReactOrderSaveData, m_sAct));
}

ZHMTypeInfo SSaveGameHeader::TypeInfo = ZHMTypeInfo("SSaveGameHeader", sizeof(SSaveGameHeader), alignof(SSaveGameHeader), SSaveGameHeader::WriteJson, SSaveGameHeader::WriteSimpleJson, SSaveGameHeader::FromSimpleJson, SSaveGameHeader::Serialize);

void SSaveGameHeader::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSaveGameHeader*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nFourCC") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nFourCC;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nVersion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nVersion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nCrc32") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nCrc32;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nTimeStamp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nTimeStamp;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("MetaData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSaveGameMetaData") << "," << JsonStr("$val") << ":";
	SSaveGameMetaData::WriteJson(&s_Object->MetaData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSaveGameHeader::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSaveGameHeader*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nFourCC") << ":";
	p_Stream << s_Object->nFourCC;
	p_Stream << ",";

	p_Stream << JsonStr("nVersion") << ":";
	p_Stream << s_Object->nVersion;
	p_Stream << ",";

	p_Stream << JsonStr("nCrc32") << ":";
	p_Stream << s_Object->nCrc32;
	p_Stream << ",";

	p_Stream << JsonStr("nSize") << ":";
	p_Stream << s_Object->nSize;
	p_Stream << ",";

	p_Stream << JsonStr("nTimeStamp") << ":";
	p_Stream << s_Object->nTimeStamp;
	p_Stream << ",";

	p_Stream << JsonStr("MetaData") << ":";
	SSaveGameMetaData::WriteSimpleJson(&s_Object->MetaData, p_Stream);

	p_Stream << "}";
}

void SSaveGameHeader::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSaveGameHeader s_Object;

	s_Object.nFourCC = static_cast<uint32>(int64_t(p_Document["nFourCC"]));

	s_Object.nVersion = static_cast<uint32>(int64_t(p_Document["nVersion"]));

	s_Object.nCrc32 = static_cast<uint32>(int64_t(p_Document["nCrc32"]));

	s_Object.nSize = static_cast<uint32>(int64_t(p_Document["nSize"]));

	s_Object.nTimeStamp = int64(p_Document["nTimeStamp"]);

	{
		SSaveGameMetaData s_Item;
		SSaveGameMetaData::FromSimpleJson(p_Document["MetaData"], &s_Item);
		s_Object.MetaData = s_Item;
	}

	*reinterpret_cast<SSaveGameHeader*>(p_Target) = s_Object;
}

void SSaveGameHeader::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSaveGameHeader*>(p_Object);

	SSaveGameMetaData::Serialize(&s_Object->MetaData, p_Serializer, p_OwnOffset + offsetof(SSaveGameHeader, MetaData));
}

ZHMTypeInfo SVoidSignalEntitySaveData::TypeInfo = ZHMTypeInfo("SVoidSignalEntitySaveData", sizeof(SVoidSignalEntitySaveData), alignof(SVoidSignalEntitySaveData), SVoidSignalEntitySaveData::WriteJson, SVoidSignalEntitySaveData::WriteSimpleJson, SVoidSignalEntitySaveData::FromSimpleJson, SVoidSignalEntitySaveData::Serialize);

void SVoidSignalEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVoidSignalEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bSignaling") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSignaling;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFiredAtTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFiredAtTime;
	p_Stream << "}";

	p_Stream << "}";
}

void SVoidSignalEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVoidSignalEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bSignaling") << ":";
	p_Stream << s_Object->m_bSignaling;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFiredAtTime") << ":";
	p_Stream << s_Object->m_fFiredAtTime;

	p_Stream << "}";
}

void SVoidSignalEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVoidSignalEntitySaveData s_Object;

	s_Object.m_bSignaling = bool(p_Document["m_bSignaling"]);

	s_Object.m_fFiredAtTime = static_cast<float32>(double(p_Document["m_fFiredAtTime"]));

	*reinterpret_cast<SVoidSignalEntitySaveData*>(p_Target) = s_Object;
}

void SVoidSignalEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVoidSignalEntitySaveData*>(p_Object);

}

ZHMTypeInfo SRenderMaterialSaveData::TypeInfo = ZHMTypeInfo("SRenderMaterialSaveData", sizeof(SRenderMaterialSaveData), alignof(SRenderMaterialSaveData), SRenderMaterialSaveData::WriteJson, SRenderMaterialSaveData::WriteSimpleJson, SRenderMaterialSaveData::FromSimpleJson, SRenderMaterialSaveData::Serialize);

void SRenderMaterialSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRenderMaterialSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDynamicParametersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint8>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDynamicParametersData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDynamicParametersData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item0);
		p_Stream << "}";

		if (i < s_Object->m_aDynamicParametersData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << "}";

	p_Stream << "}";
}

void SRenderMaterialSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRenderMaterialSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_aDynamicParametersData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDynamicParametersData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDynamicParametersData[i];
		p_Stream << static_cast<int>(s_Item0);

		if (i < s_Object->m_aDynamicParametersData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << s_Object->m_bActive;

	p_Stream << "}";
}

void SRenderMaterialSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRenderMaterialSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aDynamicParametersData"])
	{
		s_Object.m_aDynamicParametersData.push_back(static_cast<uint8>(int64_t(s_Item0)));
	}

	s_Object.m_bActive = bool(p_Document["m_bActive"]);

	*reinterpret_cast<SRenderMaterialSaveData*>(p_Target) = s_Object;
}

void SRenderMaterialSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRenderMaterialSaveData*>(p_Object);

	TArray<uint8>::Serialize(&s_Object->m_aDynamicParametersData, p_Serializer, p_OwnOffset + offsetof(SRenderMaterialSaveData, m_aDynamicParametersData));
}

ZHMTypeInfo SContractObjectiveSaveData::TypeInfo = ZHMTypeInfo("SContractObjectiveSaveData", sizeof(SContractObjectiveSaveData), alignof(SContractObjectiveSaveData), SContractObjectiveSaveData::WriteJson, SContractObjectiveSaveData::WriteSimpleJson, SContractObjectiveSaveData::FromSimpleJson, SContractObjectiveSaveData::Serialize);

void SContractObjectiveSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContractObjectiveSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGuid") << "," << JsonStr("$val") << ":";
	ZGuid::WriteJson(&s_Object->m_Id, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eCategory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("IContractObjective.Category") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eCategory) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("IContractObjective.Category", static_cast<int>(s_Object->m_eCategory))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCompleted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFailed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFailed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsHidden;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sSuccessEventName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sSuccessEventName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_SuccessEventValues") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_SuccessEventValues, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sFailedEventName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sFailedEventName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_FailedEventValues") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_FailedEventValues, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sResetEventName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sResetEventName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ResetEventValues") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_ResetEventValues, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sBriefingText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_sBriefingText, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sLongBriefingText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_sLongBriefingText, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sHUDText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_sHUDText, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iRepeatSuccess") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iRepeatSuccess;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iRepeatFailed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iRepeatFailed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iCurrentSuccess") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iCurrentSuccess;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iCurrentFailed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iCurrentFailed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ActivationCondition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_ActivationCondition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ActivationValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_ActivationValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUpdateActivationOnCompleted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUpdateActivationOnCompleted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDisplayAsKill") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDisplayAsKill;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIgnoreIfInactive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIgnoreIfInactive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowInHud") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowInHud;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCombinedDisplayInHud") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCombinedDisplayInHud;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OnInactive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_OnInactive, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OnActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_OnActive, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aExits") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_aExits, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sImage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sImage);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sObjectiveType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sObjectiveType);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sBriefingName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sBriefingName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceShowOnLoadingScreen") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForceShowOnLoadingScreen;
	p_Stream << "}";

	p_Stream << "}";
}

void SContractObjectiveSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContractObjectiveSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Id") << ":";
	ZGuid::WriteSimpleJson(&s_Object->m_Id, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_sText") << ":";
	p_Stream << JsonStr(s_Object->m_sText);
	p_Stream << ",";

	p_Stream << JsonStr("m_eCategory") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("IContractObjective.Category", static_cast<int>(s_Object->m_eCategory)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bCompleted") << ":";
	p_Stream << s_Object->m_bCompleted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFailed") << ":";
	p_Stream << s_Object->m_bFailed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsHidden") << ":";
	p_Stream << s_Object->m_bIsHidden;
	p_Stream << ",";

	p_Stream << JsonStr("m_sSuccessEventName") << ":";
	p_Stream << JsonStr(s_Object->m_sSuccessEventName);
	p_Stream << ",";

	p_Stream << JsonStr("m_SuccessEventValues") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_SuccessEventValues, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_sFailedEventName") << ":";
	p_Stream << JsonStr(s_Object->m_sFailedEventName);
	p_Stream << ",";

	p_Stream << JsonStr("m_FailedEventValues") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_FailedEventValues, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_sResetEventName") << ":";
	p_Stream << JsonStr(s_Object->m_sResetEventName);
	p_Stream << ",";

	p_Stream << JsonStr("m_ResetEventValues") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_ResetEventValues, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_sBriefingText") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_sBriefingText, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_sLongBriefingText") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_sLongBriefingText, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_sHUDText") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_sHUDText, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_iRepeatSuccess") << ":";
	p_Stream << s_Object->m_iRepeatSuccess;
	p_Stream << ",";

	p_Stream << JsonStr("m_iRepeatFailed") << ":";
	p_Stream << s_Object->m_iRepeatFailed;
	p_Stream << ",";

	p_Stream << JsonStr("m_iCurrentSuccess") << ":";
	p_Stream << s_Object->m_iCurrentSuccess;
	p_Stream << ",";

	p_Stream << JsonStr("m_iCurrentFailed") << ":";
	p_Stream << s_Object->m_iCurrentFailed;
	p_Stream << ",";

	p_Stream << JsonStr("m_ActivationCondition") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_ActivationCondition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ActivationValue") << ":";
	p_Stream << s_Object->m_ActivationValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUpdateActivationOnCompleted") << ":";
	p_Stream << s_Object->m_bUpdateActivationOnCompleted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDisplayAsKill") << ":";
	p_Stream << s_Object->m_bDisplayAsKill;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIgnoreIfInactive") << ":";
	p_Stream << s_Object->m_bIgnoreIfInactive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowInHud") << ":";
	p_Stream << s_Object->m_bShowInHud;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCombinedDisplayInHud") << ":";
	p_Stream << s_Object->m_bCombinedDisplayInHud;
	p_Stream << ",";

	p_Stream << JsonStr("m_OnInactive") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_OnInactive, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_OnActive") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_OnActive, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aExits") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_aExits, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_sImage") << ":";
	p_Stream << JsonStr(s_Object->m_sImage);
	p_Stream << ",";

	p_Stream << JsonStr("m_sObjectiveType") << ":";
	p_Stream << JsonStr(s_Object->m_sObjectiveType);
	p_Stream << ",";

	p_Stream << JsonStr("m_sBriefingName") << ":";
	p_Stream << JsonStr(s_Object->m_sBriefingName);
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceShowOnLoadingScreen") << ":";
	p_Stream << s_Object->m_bForceShowOnLoadingScreen;

	p_Stream << "}";
}

void SContractObjectiveSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SContractObjectiveSaveData s_Object;

	{
		ZGuid s_Item;
		ZGuid::FromSimpleJson(p_Document["m_Id"], &s_Item);
		s_Object.m_Id = s_Item;
	}

	s_Object.m_sText = std::string_view(p_Document["m_sText"]);

	s_Object.m_eCategory = static_cast<IContractObjective_Category>(ZHMEnums::GetEnumValueByName("IContractObjective.Category", std::string_view(p_Document["m_eCategory"])));

	s_Object.m_bCompleted = bool(p_Document["m_bCompleted"]);

	s_Object.m_bFailed = bool(p_Document["m_bFailed"]);

	s_Object.m_bIsHidden = bool(p_Document["m_bIsHidden"]);

	s_Object.m_sSuccessEventName = std::string_view(p_Document["m_sSuccessEventName"]);

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_SuccessEventValues"], &s_Item);
		s_Object.m_SuccessEventValues = s_Item;
	}

	s_Object.m_sFailedEventName = std::string_view(p_Document["m_sFailedEventName"]);

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_FailedEventValues"], &s_Item);
		s_Object.m_FailedEventValues = s_Item;
	}

	s_Object.m_sResetEventName = std::string_view(p_Document["m_sResetEventName"]);

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_ResetEventValues"], &s_Item);
		s_Object.m_ResetEventValues = s_Item;
	}

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_sBriefingText"], &s_Item);
		s_Object.m_sBriefingText = s_Item;
	}

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_sLongBriefingText"], &s_Item);
		s_Object.m_sLongBriefingText = s_Item;
	}

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_sHUDText"], &s_Item);
		s_Object.m_sHUDText = s_Item;
	}

	s_Object.m_iRepeatSuccess = static_cast<int32>(int64_t(p_Document["m_iRepeatSuccess"]));

	s_Object.m_iRepeatFailed = static_cast<int32>(int64_t(p_Document["m_iRepeatFailed"]));

	s_Object.m_iCurrentSuccess = static_cast<int32>(int64_t(p_Document["m_iCurrentSuccess"]));

	s_Object.m_iCurrentFailed = static_cast<int32>(int64_t(p_Document["m_iCurrentFailed"]));

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_ActivationCondition"], &s_Item);
		s_Object.m_ActivationCondition = s_Item;
	}

	s_Object.m_ActivationValue = bool(p_Document["m_ActivationValue"]);

	s_Object.m_bUpdateActivationOnCompleted = bool(p_Document["m_bUpdateActivationOnCompleted"]);

	s_Object.m_bDisplayAsKill = bool(p_Document["m_bDisplayAsKill"]);

	s_Object.m_bIgnoreIfInactive = bool(p_Document["m_bIgnoreIfInactive"]);

	s_Object.m_bShowInHud = bool(p_Document["m_bShowInHud"]);

	s_Object.m_bCombinedDisplayInHud = bool(p_Document["m_bCombinedDisplayInHud"]);

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_OnInactive"], &s_Item);
		s_Object.m_OnInactive = s_Item;
	}

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_OnActive"], &s_Item);
		s_Object.m_OnActive = s_Item;
	}

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_aExits"], &s_Item);
		s_Object.m_aExits = s_Item;
	}

	s_Object.m_sImage = std::string_view(p_Document["m_sImage"]);

	s_Object.m_sObjectiveType = std::string_view(p_Document["m_sObjectiveType"]);

	s_Object.m_sBriefingName = std::string_view(p_Document["m_sBriefingName"]);

	s_Object.m_bForceShowOnLoadingScreen = bool(p_Document["m_bForceShowOnLoadingScreen"]);

	*reinterpret_cast<SContractObjectiveSaveData*>(p_Target) = s_Object;
}

void SContractObjectiveSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SContractObjectiveSaveData*>(p_Object);

	ZGuid::Serialize(&s_Object->m_Id, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_Id));
	ZString::Serialize(&s_Object->m_sText, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_sText));
	ZString::Serialize(&s_Object->m_sSuccessEventName, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_sSuccessEventName));
	ZDynamicObject::Serialize(&s_Object->m_SuccessEventValues, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_SuccessEventValues));
	ZString::Serialize(&s_Object->m_sFailedEventName, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_sFailedEventName));
	ZDynamicObject::Serialize(&s_Object->m_FailedEventValues, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_FailedEventValues));
	ZString::Serialize(&s_Object->m_sResetEventName, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_sResetEventName));
	ZDynamicObject::Serialize(&s_Object->m_ResetEventValues, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_ResetEventValues));
	ZDynamicObject::Serialize(&s_Object->m_sBriefingText, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_sBriefingText));
	ZDynamicObject::Serialize(&s_Object->m_sLongBriefingText, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_sLongBriefingText));
	ZDynamicObject::Serialize(&s_Object->m_sHUDText, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_sHUDText));
	ZDynamicObject::Serialize(&s_Object->m_ActivationCondition, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_ActivationCondition));
	ZDynamicObject::Serialize(&s_Object->m_OnInactive, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_OnInactive));
	ZDynamicObject::Serialize(&s_Object->m_OnActive, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_OnActive));
	ZDynamicObject::Serialize(&s_Object->m_aExits, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_aExits));
	ZString::Serialize(&s_Object->m_sImage, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_sImage));
	ZString::Serialize(&s_Object->m_sObjectiveType, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_sObjectiveType));
	ZString::Serialize(&s_Object->m_sBriefingName, p_Serializer, p_OwnOffset + offsetof(SContractObjectiveSaveData, m_sBriefingName));
}

ZHMTypeInfo SCrowdReactionSaveData::TypeInfo = ZHMTypeInfo("SCrowdReactionSaveData", sizeof(SCrowdReactionSaveData), alignof(SCrowdReactionSaveData), SCrowdReactionSaveData::WriteJson, SCrowdReactionSaveData::WriteSimpleJson, SCrowdReactionSaveData::FromSimpleJson, SCrowdReactionSaveData::Serialize);

void SCrowdReactionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdReactionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nNumPacify") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumPacify;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumShotsFired") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumShotsFired;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumDeaths") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumDeaths;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumScared") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumScared;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWarzoneSpawned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWarzoneSpawned;
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdReactionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdReactionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nNumPacify") << ":";
	p_Stream << s_Object->m_nNumPacify;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumShotsFired") << ":";
	p_Stream << s_Object->m_nNumShotsFired;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumDeaths") << ":";
	p_Stream << s_Object->m_nNumDeaths;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumScared") << ":";
	p_Stream << s_Object->m_nNumScared;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWarzoneSpawned") << ":";
	p_Stream << s_Object->m_bWarzoneSpawned;

	p_Stream << "}";
}

void SCrowdReactionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdReactionSaveData s_Object;

	s_Object.m_nNumPacify = static_cast<uint32>(int64_t(p_Document["m_nNumPacify"]));

	s_Object.m_nNumShotsFired = static_cast<uint32>(int64_t(p_Document["m_nNumShotsFired"]));

	s_Object.m_nNumDeaths = static_cast<uint32>(int64_t(p_Document["m_nNumDeaths"]));

	s_Object.m_nNumScared = static_cast<uint32>(int64_t(p_Document["m_nNumScared"]));

	s_Object.m_bWarzoneSpawned = bool(p_Document["m_bWarzoneSpawned"]);

	*reinterpret_cast<SCrowdReactionSaveData*>(p_Target) = s_Object;
}

void SCrowdReactionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdReactionSaveData*>(p_Object);

}

ZHMTypeInfo SInvestigateWeaponGroupSaveData::TypeInfo = ZHMTypeInfo("SInvestigateWeaponGroupSaveData", sizeof(SInvestigateWeaponGroupSaveData), alignof(SInvestigateWeaponGroupSaveData), SInvestigateWeaponGroupSaveData::WriteJson, SInvestigateWeaponGroupSaveData::WriteSimpleJson, SInvestigateWeaponGroupSaveData::FromSimpleJson, SInvestigateWeaponGroupSaveData::Serialize);

void SInvestigateWeaponGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInvestigateWeaponGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rReporter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rReporter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInvestigator") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInvestigator;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rGuard") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rGuard;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ReporterIsVIPWithAmbientEscort") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_ReporterIsVIPWithAmbientEscort;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastGuardSearch") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastGuardSearch, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aUnconsciousGuards") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aUnconsciousGuards.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aUnconsciousGuards[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aUnconsciousGuards.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SInvestigateWeaponGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInvestigateWeaponGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_rReporter") << ":";
	p_Stream << s_Object->m_rReporter;
	p_Stream << ",";

	p_Stream << JsonStr("m_rInvestigator") << ":";
	p_Stream << s_Object->m_rInvestigator;
	p_Stream << ",";

	p_Stream << JsonStr("m_rGuard") << ":";
	p_Stream << s_Object->m_rGuard;
	p_Stream << ",";

	p_Stream << JsonStr("m_ReporterIsVIPWithAmbientEscort") << ":";
	p_Stream << s_Object->m_ReporterIsVIPWithAmbientEscort;
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastGuardSearch") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastGuardSearch, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aUnconsciousGuards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aUnconsciousGuards.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aUnconsciousGuards[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aUnconsciousGuards.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SInvestigateWeaponGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInvestigateWeaponGroupSaveData s_Object;

	s_Object.m_rTarget = static_cast<uint32>(int64_t(p_Document["m_rTarget"]));

	s_Object.m_rReporter = static_cast<uint32>(int64_t(p_Document["m_rReporter"]));

	s_Object.m_rInvestigator = static_cast<uint32>(int64_t(p_Document["m_rInvestigator"]));

	s_Object.m_rGuard = static_cast<uint32>(int64_t(p_Document["m_rGuard"]));

	s_Object.m_ReporterIsVIPWithAmbientEscort = bool(p_Document["m_ReporterIsVIPWithAmbientEscort"]);

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastGuardSearch"], &s_Item);
		s_Object.m_tLastGuardSearch = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aUnconsciousGuards"])
	{
		s_Object.m_aUnconsciousGuards.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SInvestigateWeaponGroupSaveData*>(p_Target) = s_Object;
}

void SInvestigateWeaponGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SInvestigateWeaponGroupSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SInvestigateWeaponGroupSaveData, m_fsmState));
	ZGameTime::Serialize(&s_Object->m_tLastGuardSearch, p_Serializer, p_OwnOffset + offsetof(SInvestigateWeaponGroupSaveData, m_tLastGuardSearch));
	TArray<uint32>::Serialize(&s_Object->m_aUnconsciousGuards, p_Serializer, p_OwnOffset + offsetof(SInvestigateWeaponGroupSaveData, m_aUnconsciousGuards));
}

ZHMTypeInfo SAttentionHUDUIElement::TypeInfo = ZHMTypeInfo("SAttentionHUDUIElement", sizeof(SAttentionHUDUIElement), alignof(SAttentionHUDUIElement), SAttentionHUDUIElement::WriteJson, SAttentionHUDUIElement::WriteSimpleJson, SAttentionHUDUIElement::FromSimpleJson, SAttentionHUDUIElement::Serialize);

void SAttentionHUDUIElement::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAttentionHUDUIElement*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAttention") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAttention;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fRadius") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fRadius;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nColor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nColor;
	p_Stream << "}";

	p_Stream << "}";
}

void SAttentionHUDUIElement::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAttentionHUDUIElement*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fAngle") << ":";
	p_Stream << s_Object->fAngle;
	p_Stream << ",";

	p_Stream << JsonStr("fAttention") << ":";
	p_Stream << s_Object->fAttention;
	p_Stream << ",";

	p_Stream << JsonStr("fAlpha") << ":";
	p_Stream << s_Object->fAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("fRadius") << ":";
	p_Stream << s_Object->fRadius;
	p_Stream << ",";

	p_Stream << JsonStr("nColor") << ":";
	p_Stream << s_Object->nColor;

	p_Stream << "}";
}

void SAttentionHUDUIElement::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAttentionHUDUIElement s_Object;

	s_Object.fAngle = static_cast<float32>(double(p_Document["fAngle"]));

	s_Object.fAttention = static_cast<float32>(double(p_Document["fAttention"]));

	s_Object.fAlpha = static_cast<float32>(double(p_Document["fAlpha"]));

	s_Object.fRadius = static_cast<float32>(double(p_Document["fRadius"]));

	s_Object.nColor = static_cast<int32>(int64_t(p_Document["nColor"]));

	*reinterpret_cast<SAttentionHUDUIElement*>(p_Target) = s_Object;
}

void SAttentionHUDUIElement::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAttentionHUDUIElement*>(p_Object);

}

ZHMTypeInfo SItemLeftHandUIData::TypeInfo = ZHMTypeInfo("SItemLeftHandUIData", sizeof(SItemLeftHandUIData), alignof(SItemLeftHandUIData), SItemLeftHandUIData::WriteJson, SItemLeftHandUIData::WriteSimpleJson, SItemLeftHandUIData::FromSimpleJson, SItemLeftHandUIData::Serialize);

void SItemLeftHandUIData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemLeftHandUIData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIllegal;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemLeftHandUIData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemLeftHandUIData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->icon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << s_Object->bIllegal;

	p_Stream << "}";
}

void SItemLeftHandUIData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemLeftHandUIData s_Object;

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["icon"], &s_Item);
		s_Object.icon = s_Item;
	}

	s_Object.nItemHUDType = static_cast<int32>(int64_t(p_Document["nItemHUDType"]));

	s_Object.bHasItemToShow = bool(p_Document["bHasItemToShow"]);

	s_Object.bSuspicious = bool(p_Document["bSuspicious"]);

	s_Object.bIllegal = bool(p_Document["bIllegal"]);

	*reinterpret_cast<SItemLeftHandUIData*>(p_Target) = s_Object;
}

void SItemLeftHandUIData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItemLeftHandUIData*>(p_Object);

	ZRuntimeResourceID::Serialize(&s_Object->icon, p_Serializer, p_OwnOffset + offsetof(SItemLeftHandUIData, icon));
}

ZHMTypeInfo SItemOnBackUIData::TypeInfo = ZHMTypeInfo("SItemOnBackUIData", sizeof(SItemOnBackUIData), alignof(SItemOnBackUIData), SItemOnBackUIData::WriteJson, SItemOnBackUIData::WriteSimpleJson, SItemOnBackUIData::FromSimpleJson, SItemOnBackUIData::Serialize);

void SItemOnBackUIData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemOnBackUIData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIllegal;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemOnBackUIData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemOnBackUIData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->icon, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("bHasItemToShow") << ":";
	p_Stream << s_Object->bHasItemToShow;
	p_Stream << ",";

	p_Stream << JsonStr("bSuspicious") << ":";
	p_Stream << s_Object->bSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bIllegal") << ":";
	p_Stream << s_Object->bIllegal;

	p_Stream << "}";
}

void SItemOnBackUIData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemOnBackUIData s_Object;

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["icon"], &s_Item);
		s_Object.icon = s_Item;
	}

	s_Object.nItemHUDType = static_cast<int32>(int64_t(p_Document["nItemHUDType"]));

	s_Object.bHasItemToShow = bool(p_Document["bHasItemToShow"]);

	s_Object.bSuspicious = bool(p_Document["bSuspicious"]);

	s_Object.bIllegal = bool(p_Document["bIllegal"]);

	*reinterpret_cast<SItemOnBackUIData*>(p_Target) = s_Object;
}

void SItemOnBackUIData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItemOnBackUIData*>(p_Object);

	ZRuntimeResourceID::Serialize(&s_Object->icon, p_Serializer, p_OwnOffset + offsetof(SItemOnBackUIData, icon));
}

ZHMTypeInfo ZHUDUIControllerEntity_SWeaponViewData::TypeInfo = ZHMTypeInfo("ZHUDUIControllerEntity.SWeaponViewData", sizeof(ZHUDUIControllerEntity_SWeaponViewData), alignof(ZHUDUIControllerEntity_SWeaponViewData), ZHUDUIControllerEntity_SWeaponViewData::WriteJson, ZHUDUIControllerEntity_SWeaponViewData::WriteSimpleJson, ZHUDUIControllerEntity_SWeaponViewData::FromSimpleJson, ZHUDUIControllerEntity_SWeaponViewData::Serialize);

void ZHUDUIControllerEntity_SWeaponViewData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDUIControllerEntity_SWeaponViewData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("weaponStatus") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SWeaponStatusUIData") << "," << JsonStr("$val") << ":";
	SWeaponStatusUIData::WriteJson(&s_Object->weaponStatus, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("itemLeftHandStatus") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItemLeftHandUIData") << "," << JsonStr("$val") << ":";
	SItemLeftHandUIData::WriteJson(&s_Object->itemLeftHandStatus, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("itemOnBackStatus") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItemOnBackUIData") << "," << JsonStr("$val") << ":";
	SItemOnBackUIData::WriteJson(&s_Object->itemOnBackStatus, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bShowHolstered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bShowHolstered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nDisplayMode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nDisplayMode;
	p_Stream << "}";

	p_Stream << "}";
}

void ZHUDUIControllerEntity_SWeaponViewData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDUIControllerEntity_SWeaponViewData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("weaponStatus") << ":";
	SWeaponStatusUIData::WriteSimpleJson(&s_Object->weaponStatus, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("itemLeftHandStatus") << ":";
	SItemLeftHandUIData::WriteSimpleJson(&s_Object->itemLeftHandStatus, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("itemOnBackStatus") << ":";
	SItemOnBackUIData::WriteSimpleJson(&s_Object->itemOnBackStatus, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("bShowHolstered") << ":";
	p_Stream << s_Object->bShowHolstered;
	p_Stream << ",";

	p_Stream << JsonStr("nDisplayMode") << ":";
	p_Stream << s_Object->nDisplayMode;

	p_Stream << "}";
}

void ZHUDUIControllerEntity_SWeaponViewData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHUDUIControllerEntity_SWeaponViewData s_Object;

	{
		SWeaponStatusUIData s_Item;
		SWeaponStatusUIData::FromSimpleJson(p_Document["weaponStatus"], &s_Item);
		s_Object.weaponStatus = s_Item;
	}

	{
		SItemLeftHandUIData s_Item;
		SItemLeftHandUIData::FromSimpleJson(p_Document["itemLeftHandStatus"], &s_Item);
		s_Object.itemLeftHandStatus = s_Item;
	}

	{
		SItemOnBackUIData s_Item;
		SItemOnBackUIData::FromSimpleJson(p_Document["itemOnBackStatus"], &s_Item);
		s_Object.itemOnBackStatus = s_Item;
	}

	s_Object.bShowHolstered = bool(p_Document["bShowHolstered"]);

	s_Object.nDisplayMode = static_cast<int32>(int64_t(p_Document["nDisplayMode"]));

	*reinterpret_cast<ZHUDUIControllerEntity_SWeaponViewData*>(p_Target) = s_Object;
}

void ZHUDUIControllerEntity_SWeaponViewData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHUDUIControllerEntity_SWeaponViewData*>(p_Object);

	SWeaponStatusUIData::Serialize(&s_Object->weaponStatus, p_Serializer, p_OwnOffset + offsetof(ZHUDUIControllerEntity_SWeaponViewData, weaponStatus));
	SItemLeftHandUIData::Serialize(&s_Object->itemLeftHandStatus, p_Serializer, p_OwnOffset + offsetof(ZHUDUIControllerEntity_SWeaponViewData, itemLeftHandStatus));
	SItemOnBackUIData::Serialize(&s_Object->itemOnBackStatus, p_Serializer, p_OwnOffset + offsetof(ZHUDUIControllerEntity_SWeaponViewData, itemOnBackStatus));
}

ZHMTypeInfo SValueBoolDelayedEntitySaveData::TypeInfo = ZHMTypeInfo("SValueBoolDelayedEntitySaveData", sizeof(SValueBoolDelayedEntitySaveData), alignof(SValueBoolDelayedEntitySaveData), SValueBoolDelayedEntitySaveData::WriteJson, SValueBoolDelayedEntitySaveData::WriteSimpleJson, SValueBoolDelayedEntitySaveData::FromSimpleJson, SValueBoolDelayedEntitySaveData::Serialize);

void SValueBoolDelayedEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SValueBoolDelayedEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWaitingValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWaitingValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeToNextEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimeToNextEvent;
	p_Stream << "}";

	p_Stream << "}";
}

void SValueBoolDelayedEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SValueBoolDelayedEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << s_Object->m_bValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWaitingValue") << ":";
	p_Stream << s_Object->m_bWaitingValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeToNextEvent") << ":";
	p_Stream << s_Object->m_fTimeToNextEvent;

	p_Stream << "}";
}

void SValueBoolDelayedEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SValueBoolDelayedEntitySaveData s_Object;

	s_Object.m_bValue = bool(p_Document["m_bValue"]);

	s_Object.m_bWaitingValue = bool(p_Document["m_bWaitingValue"]);

	s_Object.m_fTimeToNextEvent = static_cast<float32>(double(p_Document["m_fTimeToNextEvent"]));

	*reinterpret_cast<SValueBoolDelayedEntitySaveData*>(p_Target) = s_Object;
}

void SValueBoolDelayedEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SValueBoolDelayedEntitySaveData*>(p_Object);

}

ZHMTypeInfo IActorProvider::TypeInfo = ZHMTypeInfo("IActorProvider", sizeof(IActorProvider), alignof(IActorProvider), IActorProvider::WriteJson, IActorProvider::WriteSimpleJson, IActorProvider::FromSimpleJson, IActorProvider::Serialize);

void IActorProvider::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IActorProvider*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActorProvider::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IActorProvider*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IActorProvider::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IActorProvider s_Object;

	*reinterpret_cast<IActorProvider*>(p_Target) = s_Object;
}

void IActorProvider::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IActorProvider*>(p_Object);

}

ZHMTypeInfo SDrama2ActorCollectionSaveData::TypeInfo = ZHMTypeInfo("SDrama2ActorCollectionSaveData", sizeof(SDrama2ActorCollectionSaveData), alignof(SDrama2ActorCollectionSaveData), SDrama2ActorCollectionSaveData::WriteJson, SDrama2ActorCollectionSaveData::WriteSimpleJson, SDrama2ActorCollectionSaveData::FromSimpleJson, SDrama2ActorCollectionSaveData::Serialize);

void SDrama2ActorCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDrama2ActorCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDrama2ActorSaveState>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDrama2ActorSaveState") << "," << JsonStr("$val") << ":";
		SDrama2ActorSaveState::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SDrama2ActorCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDrama2ActorCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		SDrama2ActorSaveState::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDrama2ActorCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDrama2ActorCollectionSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aStates"])
	{
		SDrama2ActorSaveState s_ArrayItem0;
		SDrama2ActorSaveState::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aStates.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SDrama2ActorCollectionSaveData*>(p_Target) = s_Object;
}

void SDrama2ActorCollectionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDrama2ActorCollectionSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SDrama2ActorCollectionSaveData, m_aEntities));
	TArray<SDrama2ActorSaveState>::Serialize(&s_Object->m_aStates, p_Serializer, p_OwnOffset + offsetof(SDrama2ActorCollectionSaveData, m_aStates));
}

ZHMTypeInfo SDramaActorCollectionSaveData::TypeInfo = ZHMTypeInfo("SDramaActorCollectionSaveData", sizeof(SDramaActorCollectionSaveData), alignof(SDramaActorCollectionSaveData), SDramaActorCollectionSaveData::WriteJson, SDramaActorCollectionSaveData::WriteSimpleJson, SDramaActorCollectionSaveData::FromSimpleJson, SDramaActorCollectionSaveData::Serialize);

void SDramaActorCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaActorCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDramaActorSaveState>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaActorSaveState") << "," << JsonStr("$val") << ":";
		SDramaActorSaveState::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaActorCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaActorCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		SDramaActorSaveState::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDramaActorCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDramaActorCollectionSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aStates"])
	{
		SDramaActorSaveState s_ArrayItem0;
		SDramaActorSaveState::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aStates.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SDramaActorCollectionSaveData*>(p_Target) = s_Object;
}

void SDramaActorCollectionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDramaActorCollectionSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SDramaActorCollectionSaveData, m_aEntities));
	TArray<SDramaActorSaveState>::Serialize(&s_Object->m_aStates, p_Serializer, p_OwnOffset + offsetof(SDramaActorCollectionSaveData, m_aStates));
}

ZHMTypeInfo SDramaSituationCollectionSaveData::TypeInfo = ZHMTypeInfo("SDramaSituationCollectionSaveData", sizeof(SDramaSituationCollectionSaveData), alignof(SDramaSituationCollectionSaveData), SDramaSituationCollectionSaveData::WriteJson, SDramaSituationCollectionSaveData::WriteSimpleJson, SDramaSituationCollectionSaveData::FromSimpleJson, SDramaSituationCollectionSaveData::Serialize);

void SDramaSituationCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaSituationCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDramaSituationSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaSituationSaveData") << "," << JsonStr("$val") << ":";
		SDramaSituationSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaSituationCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaSituationCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		SDramaSituationSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDramaSituationCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDramaSituationCollectionSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aStates"])
	{
		SDramaSituationSaveData s_ArrayItem0;
		SDramaSituationSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aStates.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SDramaSituationCollectionSaveData*>(p_Target) = s_Object;
}

void SDramaSituationCollectionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDramaSituationCollectionSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SDramaSituationCollectionSaveData, m_aEntities));
	TArray<SDramaSituationSaveData>::Serialize(&s_Object->m_aStates, p_Serializer, p_OwnOffset + offsetof(SDramaSituationCollectionSaveData, m_aStates));
}

ZHMTypeInfo SDramaSetupSaveData::TypeInfo = ZHMTypeInfo("SDramaSetupSaveData", sizeof(SDramaSetupSaveData), alignof(SDramaSetupSaveData), SDramaSetupSaveData::WriteJson, SDramaSetupSaveData::WriteSimpleJson, SDramaSetupSaveData::FromSimpleJson, SDramaSetupSaveData::Serialize);

void SDramaSetupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaSetupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bDoneTriggered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDoneTriggered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZScreenplay.EState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZScreenplay.EState", static_cast<int>(s_Object->m_eState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSituation;
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaSetupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaSetupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bDoneTriggered") << ":";
	p_Stream << s_Object->m_bDoneTriggered;
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZScreenplay.EState", static_cast<int>(s_Object->m_eState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << s_Object->m_rSituation;

	p_Stream << "}";
}

void SDramaSetupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDramaSetupSaveData s_Object;

	s_Object.m_bDoneTriggered = bool(p_Document["m_bDoneTriggered"]);

	s_Object.m_eState = static_cast<ZScreenplay_EState>(ZHMEnums::GetEnumValueByName("ZScreenplay.EState", std::string_view(p_Document["m_eState"])));

	s_Object.m_rSituation = static_cast<uint32>(int64_t(p_Document["m_rSituation"]));

	*reinterpret_cast<SDramaSetupSaveData*>(p_Target) = s_Object;
}

void SDramaSetupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDramaSetupSaveData*>(p_Object);

}

ZHMTypeInfo SDramaSetupCollectionSaveData::TypeInfo = ZHMTypeInfo("SDramaSetupCollectionSaveData", sizeof(SDramaSetupCollectionSaveData), alignof(SDramaSetupCollectionSaveData), SDramaSetupCollectionSaveData::WriteJson, SDramaSetupCollectionSaveData::WriteSimpleJson, SDramaSetupCollectionSaveData::FromSimpleJson, SDramaSetupCollectionSaveData::Serialize);

void SDramaSetupCollectionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaSetupCollectionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDramaSetupSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaSetupSaveData") << "," << JsonStr("$val") << ":";
		SDramaSetupSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaSetupCollectionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaSetupCollectionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		SDramaSetupSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDramaSetupCollectionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDramaSetupCollectionSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aStates"])
	{
		SDramaSetupSaveData s_ArrayItem0;
		SDramaSetupSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aStates.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SDramaSetupCollectionSaveData*>(p_Target) = s_Object;
}

void SDramaSetupCollectionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDramaSetupCollectionSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SDramaSetupCollectionSaveData, m_aEntities));
	TArray<SDramaSetupSaveData>::Serialize(&s_Object->m_aStates, p_Serializer, p_OwnOffset + offsetof(SDramaSetupCollectionSaveData, m_aStates));
}

ZHMTypeInfo SScreenplay2ManagerSaveData::TypeInfo = ZHMTypeInfo("SScreenplay2ManagerSaveData", sizeof(SScreenplay2ManagerSaveData), alignof(SScreenplay2ManagerSaveData), SScreenplay2ManagerSaveData::WriteJson, SScreenplay2ManagerSaveData::WriteSimpleJson, SScreenplay2ManagerSaveData::FromSimpleJson, SScreenplay2ManagerSaveData::Serialize);

void SScreenplay2ManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SScreenplay2ManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_DramaActorData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaActorCollectionSaveData") << "," << JsonStr("$val") << ":";
	SDramaActorCollectionSaveData::WriteJson(&s_Object->m_DramaActorData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DramaSituationData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaSituationCollectionSaveData") << "," << JsonStr("$val") << ":";
	SDramaSituationCollectionSaveData::WriteJson(&s_Object->m_DramaSituationData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DramaSetupData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaSetupCollectionSaveData") << "," << JsonStr("$val") << ":";
	SDramaSetupCollectionSaveData::WriteJson(&s_Object->m_DramaSetupData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Drama2ActorData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDrama2ActorCollectionSaveData") << "," << JsonStr("$val") << ":";
	SDrama2ActorCollectionSaveData::WriteJson(&s_Object->m_Drama2ActorData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Drama2SituationData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDrama2SituationCollectionSaveData") << "," << JsonStr("$val") << ":";
	SDrama2SituationCollectionSaveData::WriteJson(&s_Object->m_Drama2SituationData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Drama2SetupData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDrama2SetupCollectionSaveData") << "," << JsonStr("$val") << ":";
	SDrama2SetupCollectionSaveData::WriteJson(&s_Object->m_Drama2SetupData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SScreenplay2ManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SScreenplay2ManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_DramaActorData") << ":";
	SDramaActorCollectionSaveData::WriteSimpleJson(&s_Object->m_DramaActorData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_DramaSituationData") << ":";
	SDramaSituationCollectionSaveData::WriteSimpleJson(&s_Object->m_DramaSituationData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_DramaSetupData") << ":";
	SDramaSetupCollectionSaveData::WriteSimpleJson(&s_Object->m_DramaSetupData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Drama2ActorData") << ":";
	SDrama2ActorCollectionSaveData::WriteSimpleJson(&s_Object->m_Drama2ActorData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Drama2SituationData") << ":";
	SDrama2SituationCollectionSaveData::WriteSimpleJson(&s_Object->m_Drama2SituationData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Drama2SetupData") << ":";
	SDrama2SetupCollectionSaveData::WriteSimpleJson(&s_Object->m_Drama2SetupData, p_Stream);

	p_Stream << "}";
}

void SScreenplay2ManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SScreenplay2ManagerSaveData s_Object;

	{
		SDramaActorCollectionSaveData s_Item;
		SDramaActorCollectionSaveData::FromSimpleJson(p_Document["m_DramaActorData"], &s_Item);
		s_Object.m_DramaActorData = s_Item;
	}

	{
		SDramaSituationCollectionSaveData s_Item;
		SDramaSituationCollectionSaveData::FromSimpleJson(p_Document["m_DramaSituationData"], &s_Item);
		s_Object.m_DramaSituationData = s_Item;
	}

	{
		SDramaSetupCollectionSaveData s_Item;
		SDramaSetupCollectionSaveData::FromSimpleJson(p_Document["m_DramaSetupData"], &s_Item);
		s_Object.m_DramaSetupData = s_Item;
	}

	{
		SDrama2ActorCollectionSaveData s_Item;
		SDrama2ActorCollectionSaveData::FromSimpleJson(p_Document["m_Drama2ActorData"], &s_Item);
		s_Object.m_Drama2ActorData = s_Item;
	}

	{
		SDrama2SituationCollectionSaveData s_Item;
		SDrama2SituationCollectionSaveData::FromSimpleJson(p_Document["m_Drama2SituationData"], &s_Item);
		s_Object.m_Drama2SituationData = s_Item;
	}

	{
		SDrama2SetupCollectionSaveData s_Item;
		SDrama2SetupCollectionSaveData::FromSimpleJson(p_Document["m_Drama2SetupData"], &s_Item);
		s_Object.m_Drama2SetupData = s_Item;
	}

	*reinterpret_cast<SScreenplay2ManagerSaveData*>(p_Target) = s_Object;
}

void SScreenplay2ManagerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SScreenplay2ManagerSaveData*>(p_Object);

	SDramaActorCollectionSaveData::Serialize(&s_Object->m_DramaActorData, p_Serializer, p_OwnOffset + offsetof(SScreenplay2ManagerSaveData, m_DramaActorData));
	SDramaSituationCollectionSaveData::Serialize(&s_Object->m_DramaSituationData, p_Serializer, p_OwnOffset + offsetof(SScreenplay2ManagerSaveData, m_DramaSituationData));
	SDramaSetupCollectionSaveData::Serialize(&s_Object->m_DramaSetupData, p_Serializer, p_OwnOffset + offsetof(SScreenplay2ManagerSaveData, m_DramaSetupData));
	SDrama2ActorCollectionSaveData::Serialize(&s_Object->m_Drama2ActorData, p_Serializer, p_OwnOffset + offsetof(SScreenplay2ManagerSaveData, m_Drama2ActorData));
	SDrama2SituationCollectionSaveData::Serialize(&s_Object->m_Drama2SituationData, p_Serializer, p_OwnOffset + offsetof(SScreenplay2ManagerSaveData, m_Drama2SituationData));
	SDrama2SetupCollectionSaveData::Serialize(&s_Object->m_Drama2SetupData, p_Serializer, p_OwnOffset + offsetof(SScreenplay2ManagerSaveData, m_Drama2SetupData));
}

ZHMTypeInfo SInventoryUI::TypeInfo = ZHMTypeInfo("SInventoryUI", sizeof(SInventoryUI), alignof(SInventoryUI), SInventoryUI::WriteJson, SInventoryUI::WriteSimpleJson, SInventoryUI::FromSimpleJson, SInventoryUI::Serialize);

void SInventoryUI::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryUI*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mainslotsSlim") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SInventoryUISlotSlim>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->mainslotsSlim.size(); ++i)
	{
		auto& s_Item0 = s_Object->mainslotsSlim[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryUISlotSlim") << "," << JsonStr("$val") << ":";
		SInventoryUISlotSlim::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->mainslotsSlim.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("otherslotsCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->otherslotsCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("selectedIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->selectedIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("isActionInventory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->isActionInventory;
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryUI::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryUI*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mainslotsSlim") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->mainslotsSlim.size(); ++i)
	{
		auto& s_Item0 = s_Object->mainslotsSlim[i];
		SInventoryUISlotSlim::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->mainslotsSlim.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("otherslotsCount") << ":";
	p_Stream << s_Object->otherslotsCount;
	p_Stream << ",";

	p_Stream << JsonStr("selectedIndex") << ":";
	p_Stream << s_Object->selectedIndex;
	p_Stream << ",";

	p_Stream << JsonStr("isActionInventory") << ":";
	p_Stream << s_Object->isActionInventory;

	p_Stream << "}";
}

void SInventoryUI::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryUI s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["mainslotsSlim"])
	{
		SInventoryUISlotSlim s_ArrayItem0;
		SInventoryUISlotSlim::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.mainslotsSlim.push_back(s_ArrayItem0);
	}

	s_Object.otherslotsCount = static_cast<int32>(int64_t(p_Document["otherslotsCount"]));

	s_Object.selectedIndex = static_cast<int32>(int64_t(p_Document["selectedIndex"]));

	s_Object.isActionInventory = bool(p_Document["isActionInventory"]);

	*reinterpret_cast<SInventoryUI*>(p_Target) = s_Object;
}

void SInventoryUI::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SInventoryUI*>(p_Object);

	TArray<SInventoryUISlotSlim>::Serialize(&s_Object->mainslotsSlim, p_Serializer, p_OwnOffset + offsetof(SInventoryUI, mainslotsSlim));
}

ZHMTypeInfo SActorBoneAttachSaveData::TypeInfo = ZHMTypeInfo("SActorBoneAttachSaveData", sizeof(SActorBoneAttachSaveData), alignof(SActorBoneAttachSaveData), SActorBoneAttachSaveData::WriteJson, SActorBoneAttachSaveData::WriteSimpleJson, SActorBoneAttachSaveData::FromSimpleJson, SActorBoneAttachSaveData::Serialize);

void SActorBoneAttachSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorBoneAttachSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rAttachmentTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rAttachmentTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsAttached;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorBoneAttachSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorBoneAttachSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rAttachmentTarget") << ":";
	p_Stream << s_Object->m_rAttachmentTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAttached") << ":";
	p_Stream << s_Object->m_bIsAttached;

	p_Stream << "}";
}

void SActorBoneAttachSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorBoneAttachSaveData s_Object;

	s_Object.m_rAttachmentTarget = static_cast<uint32>(int64_t(p_Document["m_rAttachmentTarget"]));

	s_Object.m_bIsAttached = bool(p_Document["m_bIsAttached"]);

	*reinterpret_cast<SActorBoneAttachSaveData*>(p_Target) = s_Object;
}

void SActorBoneAttachSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorBoneAttachSaveData*>(p_Object);

}

ZHMTypeInfo SActorBoneAttachmentsSaveData::TypeInfo = ZHMTypeInfo("SActorBoneAttachmentsSaveData", sizeof(SActorBoneAttachmentsSaveData), alignof(SActorBoneAttachmentsSaveData), SActorBoneAttachmentsSaveData::WriteJson, SActorBoneAttachmentsSaveData::WriteSimpleJson, SActorBoneAttachmentsSaveData::FromSimpleJson, SActorBoneAttachmentsSaveData::Serialize);

void SActorBoneAttachmentsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorBoneAttachmentsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorBoneAttachSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorBoneAttachSaveData") << "," << JsonStr("$val") << ":";
		SActorBoneAttachSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActorBoneAttachmentsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorBoneAttachmentsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SActorBoneAttachSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorBoneAttachmentsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorBoneAttachmentsSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SActorBoneAttachSaveData s_ArrayItem0;
		SActorBoneAttachSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SActorBoneAttachmentsSaveData*>(p_Target) = s_Object;
}

void SActorBoneAttachmentsSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorBoneAttachmentsSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SActorBoneAttachmentsSaveData, m_aEntities));
	TArray<SActorBoneAttachSaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SActorBoneAttachmentsSaveData, m_aData));
}

ZHMTypeInfo SUIBreadcrumbDataSaveData::TypeInfo = ZHMTypeInfo("SUIBreadcrumbDataSaveData", sizeof(SUIBreadcrumbDataSaveData), alignof(SUIBreadcrumbDataSaveData), SUIBreadcrumbDataSaveData::WriteJson, SUIBreadcrumbDataSaveData::WriteSimpleJson, SUIBreadcrumbDataSaveData::FromSimpleJson, SUIBreadcrumbDataSaveData::Serialize);

void SUIBreadcrumbDataSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SUIBreadcrumbDataSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nState;
	p_Stream << "}";

	p_Stream << "}";
}

void SUIBreadcrumbDataSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SUIBreadcrumbDataSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fProgress") << ":";
	p_Stream << s_Object->m_fProgress;
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << s_Object->m_nState;

	p_Stream << "}";
}

void SUIBreadcrumbDataSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SUIBreadcrumbDataSaveData s_Object;

	s_Object.m_fProgress = static_cast<float32>(double(p_Document["m_fProgress"]));

	s_Object.m_nState = static_cast<int32>(int64_t(p_Document["m_nState"]));

	*reinterpret_cast<SUIBreadcrumbDataSaveData*>(p_Target) = s_Object;
}

void SUIBreadcrumbDataSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SUIBreadcrumbDataSaveData*>(p_Object);

}

ZHMTypeInfo SGeomScaleSaveData::TypeInfo = ZHMTypeInfo("SGeomScaleSaveData", sizeof(SGeomScaleSaveData), alignof(SGeomScaleSaveData), SGeomScaleSaveData::WriteJson, SGeomScaleSaveData::WriteSimpleJson, SGeomScaleSaveData::FromSimpleJson, SGeomScaleSaveData::Serialize);

void SGeomScaleSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGeomScaleSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPrimitiveScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vPrimitiveScale, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SGeomScaleSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGeomScaleSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPrimitiveScale") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vPrimitiveScale, p_Stream);

	p_Stream << "}";
}

void SGeomScaleSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGeomScaleSaveData s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vPrimitiveScale"], &s_Item);
		s_Object.m_vPrimitiveScale = s_Item;
	}

	*reinterpret_cast<SGeomScaleSaveData*>(p_Target) = s_Object;
}

void SGeomScaleSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGeomScaleSaveData*>(p_Object);

	SVector4::Serialize(&s_Object->m_vPrimitiveScale, p_Serializer, p_OwnOffset + offsetof(SGeomScaleSaveData, m_vPrimitiveScale));
}

ZHMTypeInfo SCamBone::TypeInfo = ZHMTypeInfo("SCamBone", sizeof(SCamBone), alignof(SCamBone), SCamBone::WriteJson, SCamBone::WriteSimpleJson, SCamBone::FromSimpleJson, SCamBone::Serialize);

void SCamBone::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCamBone*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eBoneId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("BoneId.Enum") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eBoneId) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("BoneId.Enum", static_cast<int>(s_Object->m_eBoneId))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fWeight;
	p_Stream << "}";

	p_Stream << "}";
}

void SCamBone::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCamBone*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eBoneId") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("BoneId.Enum", static_cast<int>(s_Object->m_eBoneId)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fWeight") << ":";
	p_Stream << s_Object->m_fWeight;

	p_Stream << "}";
}

void SCamBone::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCamBone s_Object;

	s_Object.m_eBoneId = static_cast<BoneId_Enum>(ZHMEnums::GetEnumValueByName("BoneId.Enum", std::string_view(p_Document["m_eBoneId"])));

	s_Object.m_fWeight = static_cast<float32>(double(p_Document["m_fWeight"]));

	*reinterpret_cast<SCamBone*>(p_Target) = s_Object;
}

void SCamBone::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCamBone*>(p_Object);

}

ZHMTypeInfo IBoneCollidable::TypeInfo = ZHMTypeInfo("IBoneCollidable", sizeof(IBoneCollidable), alignof(IBoneCollidable), IBoneCollidable::WriteJson, IBoneCollidable::WriteSimpleJson, IBoneCollidable::FromSimpleJson, IBoneCollidable::Serialize);

void IBoneCollidable::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IBoneCollidable*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoneCollidable::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IBoneCollidable*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IBoneCollidable::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IBoneCollidable s_Object;

	*reinterpret_cast<IBoneCollidable*>(p_Target) = s_Object;
}

void IBoneCollidable::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IBoneCollidable*>(p_Object);

}

ZHMTypeInfo SEntityTemplateEntitySubset::TypeInfo = ZHMTypeInfo("SEntityTemplateEntitySubset", sizeof(SEntityTemplateEntitySubset), alignof(SEntityTemplateEntitySubset), SEntityTemplateEntitySubset::WriteJson, SEntityTemplateEntitySubset::WriteSimpleJson, SEntityTemplateEntitySubset::FromSimpleJson, SEntityTemplateEntitySubset::Serialize);

void SEntityTemplateEntitySubset::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateEntitySubset*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("entities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<int32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->entities.size(); ++i)
	{
		auto& s_Item0 = s_Object->entities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->entities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplateEntitySubset::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateEntitySubset*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("entities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->entities.size(); ++i)
	{
		auto& s_Item0 = s_Object->entities[i];
		p_Stream << s_Item0;

		if (i < s_Object->entities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEntityTemplateEntitySubset::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplateEntitySubset s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["entities"])
	{
		s_Object.entities.push_back(static_cast<int32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SEntityTemplateEntitySubset*>(p_Target) = s_Object;
}

void SEntityTemplateEntitySubset::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplateEntitySubset*>(p_Object);

	TArray<int32>::Serialize(&s_Object->entities, p_Serializer, p_OwnOffset + offsetof(SEntityTemplateEntitySubset, entities));
}

ZHMTypeInfo STemplateBlueprintSubEntity::TypeInfo = ZHMTypeInfo("STemplateBlueprintSubEntity", sizeof(STemplateBlueprintSubEntity), alignof(STemplateBlueprintSubEntity), STemplateBlueprintSubEntity::WriteJson, STemplateBlueprintSubEntity::WriteSimpleJson, STemplateBlueprintSubEntity::FromSimpleJson, STemplateBlueprintSubEntity::Serialize);

void STemplateBlueprintSubEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateBlueprintSubEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("logicalParent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->logicalParent, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityTypeResourceIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityTypeResourceIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->entityId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("editorOnly") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->editorOnly;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entityName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->entityName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyAliases") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityTemplatePropertyAlias>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyAliases.size(); ++i)
	{
		auto& s_Item0 = s_Object->propertyAliases[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePropertyAlias") << "," << JsonStr("$val") << ":";
		SEntityTemplatePropertyAlias::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->propertyAliases.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityTemplateExposedEntity>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->exposedEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateExposedEntity") << "," << JsonStr("$val") << ":";
		SEntityTemplateExposedEntity::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->exposedEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("exposedInterfaces") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<TPair<ZString,int32>>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedInterfaces.size(); ++i)
	{
		auto& s_Item0 = s_Object->exposedInterfaces[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TPair<ZString,int32>") << "," << JsonStr("$val") << ":";
		TPair<ZString,int32>::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->exposedInterfaces.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("entitySubsets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<TPair<ZString,SEntityTemplateEntitySubset>>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->entitySubsets.size(); ++i)
	{
		auto& s_Item0 = s_Object->entitySubsets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TPair<ZString,SEntityTemplateEntitySubset>") << "," << JsonStr("$val") << ":";
		TPair<ZString,SEntityTemplateEntitySubset>::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->entitySubsets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STemplateBlueprintSubEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateBlueprintSubEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("logicalParent") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->logicalParent, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("entityTypeResourceIndex") << ":";
	p_Stream << s_Object->entityTypeResourceIndex;
	p_Stream << ",";

	p_Stream << JsonStr("entityId") << ":";
	p_Stream << s_Object->entityId;
	p_Stream << ",";

	p_Stream << JsonStr("editorOnly") << ":";
	p_Stream << s_Object->editorOnly;
	p_Stream << ",";

	p_Stream << JsonStr("entityName") << ":";
	p_Stream << JsonStr(s_Object->entityName);
	p_Stream << ",";

	p_Stream << JsonStr("propertyAliases") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyAliases.size(); ++i)
	{
		auto& s_Item0 = s_Object->propertyAliases[i];
		SEntityTemplatePropertyAlias::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->propertyAliases.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->exposedEntities[i];
		SEntityTemplateExposedEntity::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->exposedEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("exposedInterfaces") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->exposedInterfaces.size(); ++i)
	{
		auto& s_Item0 = s_Object->exposedInterfaces[i];
		TPair<ZString,int32>::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->exposedInterfaces.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("entitySubsets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->entitySubsets.size(); ++i)
	{
		auto& s_Item0 = s_Object->entitySubsets[i];
		TPair<ZString,SEntityTemplateEntitySubset>::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->entitySubsets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STemplateBlueprintSubEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STemplateBlueprintSubEntity s_Object;

	{
		SEntityTemplateReference s_Item;
		SEntityTemplateReference::FromSimpleJson(p_Document["logicalParent"], &s_Item);
		s_Object.logicalParent = s_Item;
	}

	s_Object.entityTypeResourceIndex = static_cast<int32>(int64_t(p_Document["entityTypeResourceIndex"]));

	s_Object.entityId = uint64(p_Document["entityId"]);

	s_Object.editorOnly = bool(p_Document["editorOnly"]);

	s_Object.entityName = std::string_view(p_Document["entityName"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["propertyAliases"])
	{
		SEntityTemplatePropertyAlias s_ArrayItem0;
		SEntityTemplatePropertyAlias::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.propertyAliases.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["exposedEntities"])
	{
		SEntityTemplateExposedEntity s_ArrayItem0;
		SEntityTemplateExposedEntity::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.exposedEntities.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["exposedInterfaces"])
	{
		TPair<ZString,int32> s_ArrayItem0;
		TPair<ZString,int32>::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.exposedInterfaces.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["entitySubsets"])
	{
		TPair<ZString,SEntityTemplateEntitySubset> s_ArrayItem0;
		TPair<ZString,SEntityTemplateEntitySubset>::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.entitySubsets.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<STemplateBlueprintSubEntity*>(p_Target) = s_Object;
}

void STemplateBlueprintSubEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STemplateBlueprintSubEntity*>(p_Object);

	SEntityTemplateReference::Serialize(&s_Object->logicalParent, p_Serializer, p_OwnOffset + offsetof(STemplateBlueprintSubEntity, logicalParent));
	ZString::Serialize(&s_Object->entityName, p_Serializer, p_OwnOffset + offsetof(STemplateBlueprintSubEntity, entityName));
	TArray<SEntityTemplatePropertyAlias>::Serialize(&s_Object->propertyAliases, p_Serializer, p_OwnOffset + offsetof(STemplateBlueprintSubEntity, propertyAliases));
	TArray<SEntityTemplateExposedEntity>::Serialize(&s_Object->exposedEntities, p_Serializer, p_OwnOffset + offsetof(STemplateBlueprintSubEntity, exposedEntities));
	TArray<TPair<ZString,int32>>::Serialize(&s_Object->exposedInterfaces, p_Serializer, p_OwnOffset + offsetof(STemplateBlueprintSubEntity, exposedInterfaces));
	TArray<TPair<ZString,SEntityTemplateEntitySubset>>::Serialize(&s_Object->entitySubsets, p_Serializer, p_OwnOffset + offsetof(STemplateBlueprintSubEntity, entitySubsets));
}

ZHMTypeInfo ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule::TypeInfo = ZHMTypeInfo("ZSecuritySystemCameraConfiguration.SDeadBodyVisibleEscalationRule", sizeof(ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule), alignof(ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule), ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule::WriteJson, ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule::WriteSimpleJson, ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule::FromSimpleJson, ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule::Serialize);

void ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_NrGuardsToSend") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_NrGuardsToSend;
	p_Stream << "}";

	p_Stream << "}";
}

void ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_NrGuardsToSend") << ":";
	p_Stream << s_Object->m_NrGuardsToSend;

	p_Stream << "}";
}

void ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule s_Object;

	s_Object.m_NrGuardsToSend = static_cast<int32>(int64_t(p_Document["m_NrGuardsToSend"]));

	*reinterpret_cast<ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule*>(p_Target) = s_Object;
}

void ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule*>(p_Object);

}

ZHMTypeInfo SValueBoolsSaveData::TypeInfo = ZHMTypeInfo("SValueBoolsSaveData", sizeof(SValueBoolsSaveData), alignof(SValueBoolsSaveData), SValueBoolsSaveData::WriteJson, SValueBoolsSaveData::WriteSimpleJson, SValueBoolsSaveData::FromSimpleJson, SValueBoolsSaveData::Serialize);

void SValueBoolsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SValueBoolsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<bool>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SValueBoolsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SValueBoolsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SValueBoolsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SValueBoolsSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		s_Object.m_aData.push_back(bool(s_Item0));
	}

	*reinterpret_cast<SValueBoolsSaveData*>(p_Target) = s_Object;
}

void SValueBoolsSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SValueBoolsSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SValueBoolsSaveData, m_aEntities));
	TArray<bool>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SValueBoolsSaveData, m_aData));
}

ZHMTypeInfo SSerializedValue::TypeInfo = ZHMTypeInfo("SSerializedValue", sizeof(SSerializedValue), alignof(SSerializedValue), SSerializedValue::WriteJson, SSerializedValue::WriteSimpleJson, SSerializedValue::FromSimpleJson, SSerializedValue::Serialize);

void SSerializedValue::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSerializedValue*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SSerializedValue::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSerializedValue*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SSerializedValue::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSerializedValue s_Object;

	*reinterpret_cast<SSerializedValue*>(p_Target) = s_Object;
}

void SSerializedValue::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSerializedValue*>(p_Object);

}

ZHMTypeInfo ZComponentCreator::TypeInfo = ZHMTypeInfo("ZComponentCreator", sizeof(ZComponentCreator), alignof(ZComponentCreator), ZComponentCreator::WriteJson, ZComponentCreator::WriteSimpleJson, ZComponentCreator::FromSimpleJson, ZComponentCreator::Serialize);

void ZComponentCreator::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZComponentCreator*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sComponentName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sComponentName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aArgs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZVariant>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aArgs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aArgs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
		ZVariant::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aArgs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void ZComponentCreator::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZComponentCreator*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sComponentName") << ":";
	p_Stream << JsonStr(s_Object->m_sComponentName);
	p_Stream << ",";

	p_Stream << JsonStr("m_aArgs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aArgs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aArgs[i];
		ZVariant::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aArgs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZComponentCreator::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZComponentCreator s_Object;

	s_Object.m_sComponentName = std::string_view(p_Document["m_sComponentName"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aArgs"])
	{
		ZVariant s_ArrayItem0;
		ZVariant::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aArgs.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<ZComponentCreator*>(p_Target) = s_Object;
}

void ZComponentCreator::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZComponentCreator*>(p_Object);

	ZString::Serialize(&s_Object->m_sComponentName, p_Serializer, p_OwnOffset + offsetof(ZComponentCreator, m_sComponentName));
	TArray<ZVariant>::Serialize(&s_Object->m_aArgs, p_Serializer, p_OwnOffset + offsetof(ZComponentCreator, m_aArgs));
}

ZHMTypeInfo SStashPointSaveData::TypeInfo = ZHMTypeInfo("SStashPointSaveData", sizeof(SStashPointSaveData), alignof(SStashPointSaveData), SStashPointSaveData::WriteJson, SStashPointSaveData::WriteSimpleJson, SStashPointSaveData::FromSimpleJson, SStashPointSaveData::Serialize);

void SStashPointSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SStashPointSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_arItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_arItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_arItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_arItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pSuitcase") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pSuitcase;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pMainItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pMainItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eContainedType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EStashpointContainedEntityType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eContainedType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EStashpointContainedEntityType", static_cast<int>(s_Object->m_eContainedType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MainItemID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_MainItemID, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SStashPointSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SStashPointSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_arItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_arItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_arItems[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_arItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_pSuitcase") << ":";
	p_Stream << s_Object->m_pSuitcase;
	p_Stream << ",";

	p_Stream << JsonStr("m_pMainItem") << ":";
	p_Stream << s_Object->m_pMainItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_eContainedType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EStashpointContainedEntityType", static_cast<int>(s_Object->m_eContainedType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_MainItemID") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_MainItemID, p_Stream);

	p_Stream << "}";
}

void SStashPointSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SStashPointSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_arItems"])
	{
		s_Object.m_arItems.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	s_Object.m_pSuitcase = static_cast<uint32>(int64_t(p_Document["m_pSuitcase"]));

	s_Object.m_pMainItem = static_cast<uint32>(int64_t(p_Document["m_pMainItem"]));

	s_Object.m_eContainedType = static_cast<EStashpointContainedEntityType>(ZHMEnums::GetEnumValueByName("EStashpointContainedEntityType", std::string_view(p_Document["m_eContainedType"])));

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_MainItemID"], &s_Item);
		s_Object.m_MainItemID = s_Item;
	}

	*reinterpret_cast<SStashPointSaveData*>(p_Target) = s_Object;
}

void SStashPointSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SStashPointSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_arItems, p_Serializer, p_OwnOffset + offsetof(SStashPointSaveData, m_arItems));
	ZRepositoryID::Serialize(&s_Object->m_MainItemID, p_Serializer, p_OwnOffset + offsetof(SStashPointSaveData, m_MainItemID));
}

ZHMTypeInfo SComboDeviceBinding::TypeInfo = ZHMTypeInfo("SComboDeviceBinding", sizeof(SComboDeviceBinding), alignof(SComboDeviceBinding), SComboDeviceBinding::WriteJson, SComboDeviceBinding::WriteSimpleJson, SComboDeviceBinding::FromSimpleJson, SComboDeviceBinding::Serialize);

void SComboDeviceBinding::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SComboDeviceBinding*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->type;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("button") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->button;
	p_Stream << "}";

	p_Stream << "}";
}

void SComboDeviceBinding::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SComboDeviceBinding*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << s_Object->type;
	p_Stream << ",";

	p_Stream << JsonStr("button") << ":";
	p_Stream << s_Object->button;

	p_Stream << "}";
}

void SComboDeviceBinding::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SComboDeviceBinding s_Object;

	s_Object.type = static_cast<uint32>(int64_t(p_Document["type"]));

	s_Object.button = static_cast<uint32>(int64_t(p_Document["button"]));

	*reinterpret_cast<SComboDeviceBinding*>(p_Target) = s_Object;
}

void SComboDeviceBinding::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SComboDeviceBinding*>(p_Object);

}

ZHMTypeInfo SActorSpreadTransitionOperatorMaterialSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadTransitionOperatorMaterialSaveData", sizeof(SActorSpreadTransitionOperatorMaterialSaveData), alignof(SActorSpreadTransitionOperatorMaterialSaveData), SActorSpreadTransitionOperatorMaterialSaveData::WriteJson, SActorSpreadTransitionOperatorMaterialSaveData::WriteSimpleJson, SActorSpreadTransitionOperatorMaterialSaveData::FromSimpleJson, SActorSpreadTransitionOperatorMaterialSaveData::Serialize);

void SActorSpreadTransitionOperatorMaterialSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSpreadTransitionOperatorMaterialSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aActorMaterialOverrides") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorSpreadTransitionOperatorMaterialActorSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorMaterialOverrides.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aActorMaterialOverrides[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorSpreadTransitionOperatorMaterialActorSaveData") << "," << JsonStr("$val") << ":";
		SActorSpreadTransitionOperatorMaterialActorSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aActorMaterialOverrides.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActorSpreadTransitionOperatorMaterialSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSpreadTransitionOperatorMaterialSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aActorMaterialOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorMaterialOverrides.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aActorMaterialOverrides[i];
		SActorSpreadTransitionOperatorMaterialActorSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aActorMaterialOverrides.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorSpreadTransitionOperatorMaterialSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorSpreadTransitionOperatorMaterialSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aActorMaterialOverrides"])
	{
		SActorSpreadTransitionOperatorMaterialActorSaveData s_ArrayItem0;
		SActorSpreadTransitionOperatorMaterialActorSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aActorMaterialOverrides.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SActorSpreadTransitionOperatorMaterialSaveData*>(p_Target) = s_Object;
}

void SActorSpreadTransitionOperatorMaterialSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorSpreadTransitionOperatorMaterialSaveData*>(p_Object);

	TArray<SActorSpreadTransitionOperatorMaterialActorSaveData>::Serialize(&s_Object->m_aActorMaterialOverrides, p_Serializer, p_OwnOffset + offsetof(SActorSpreadTransitionOperatorMaterialSaveData, m_aActorMaterialOverrides));
}

ZHMTypeInfo SSentryOrderSaveData::TypeInfo = ZHMTypeInfo("SSentryOrderSaveData", sizeof(SSentryOrderSaveData), alignof(SSentryOrderSaveData), SSentryOrderSaveData::WriteJson, SSentryOrderSaveData::WriteSimpleJson, SSentryOrderSaveData::FromSimpleJson, SSentryOrderSaveData::Serialize);

void SSentryOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSentryOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rSentryZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSentryZone;
	p_Stream << "}";

	p_Stream << "}";
}

void SSentryOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSentryOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rSentryZone") << ":";
	p_Stream << s_Object->m_rSentryZone;

	p_Stream << "}";
}

void SSentryOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSentryOrderSaveData s_Object;

	s_Object.m_rSentryZone = static_cast<uint32>(int64_t(p_Document["m_rSentryZone"]));

	*reinterpret_cast<SSentryOrderSaveData*>(p_Target) = s_Object;
}

void SSentryOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSentryOrderSaveData*>(p_Object);

}

ZHMTypeInfo SMathLerpSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SVector4", sizeof(SMathLerpSaveData_SVector4), alignof(SMathLerpSaveData_SVector4), SMathLerpSaveData_SVector4::WriteJson, SMathLerpSaveData_SVector4::WriteSimpleJson, SMathLerpSaveData_SVector4::FromSimpleJson, SMathLerpSaveData_SVector4::Serialize);

void SMathLerpSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

void SMathLerpSaveData_SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpSaveData_SVector4 s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_A"], &s_Item);
		s_Object.m_A = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_B"], &s_Item);
		s_Object.m_B = s_Item;
	}

	s_Object.m_fT = static_cast<float32>(double(p_Document["m_fT"]));

	*reinterpret_cast<SMathLerpSaveData_SVector4*>(p_Target) = s_Object;
}

void SMathLerpSaveData_SVector4::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SVector4*>(p_Object);

	SVector4::Serialize(&s_Object->m_A, p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SVector4, m_A));
	SVector4::Serialize(&s_Object->m_B, p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SVector4, m_B));
}

ZHMTypeInfo SMathLerpsSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SVector4", sizeof(SMathLerpsSaveData_SVector4), alignof(SMathLerpsSaveData_SVector4), SMathLerpsSaveData_SVector4::WriteJson, SMathLerpsSaveData_SVector4::WriteSimpleJson, SMathLerpsSaveData_SVector4::FromSimpleJson, SMathLerpsSaveData_SVector4::Serialize);

void SMathLerpsSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SMathLerpSaveData_SVector4>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SVector4") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SVector4::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SMathLerpSaveData_SVector4::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpsSaveData_SVector4 s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SMathLerpSaveData_SVector4 s_ArrayItem0;
		SMathLerpSaveData_SVector4::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SMathLerpsSaveData_SVector4*>(p_Target) = s_Object;
}

void SMathLerpsSaveData_SVector4::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SVector4*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SVector4, m_aEntities));
	TArray<SMathLerpSaveData_SVector4>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SVector4, m_aData));
}

ZHMTypeInfo ZSniperCombatSituation_SSniperSuspiciousArea::TypeInfo = ZHMTypeInfo("ZSniperCombatSituation.SSniperSuspiciousArea", sizeof(ZSniperCombatSituation_SSniperSuspiciousArea), alignof(ZSniperCombatSituation_SSniperSuspiciousArea), ZSniperCombatSituation_SSniperSuspiciousArea::WriteJson, ZSniperCombatSituation_SSniperSuspiciousArea::WriteSimpleJson, ZSniperCombatSituation_SSniperSuspiciousArea::FromSimpleJson, ZSniperCombatSituation_SSniperSuspiciousArea::Serialize);

void ZSniperCombatSituation_SSniperSuspiciousArea::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSniperCombatSituation_SSniperSuspiciousArea*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsIslandEntrance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsIslandEntrance;
	p_Stream << "}";

	p_Stream << "}";
}

void ZSniperCombatSituation_SSniperSuspiciousArea::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSniperCombatSituation_SSniperSuspiciousArea*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fRange") << ":";
	p_Stream << s_Object->m_fRange;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsIslandEntrance") << ":";
	p_Stream << s_Object->m_bIsIslandEntrance;

	p_Stream << "}";
}

void ZSniperCombatSituation_SSniperSuspiciousArea::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSniperCombatSituation_SSniperSuspiciousArea s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	s_Object.m_fRange = static_cast<float32>(double(p_Document["m_fRange"]));

	s_Object.m_bIsIslandEntrance = bool(p_Document["m_bIsIslandEntrance"]);

	*reinterpret_cast<ZSniperCombatSituation_SSniperSuspiciousArea*>(p_Target) = s_Object;
}

void ZSniperCombatSituation_SSniperSuspiciousArea::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZSniperCombatSituation_SSniperSuspiciousArea*>(p_Object);

	float4::Serialize(&s_Object->m_vPosition, p_Serializer, p_OwnOffset + offsetof(ZSniperCombatSituation_SSniperSuspiciousArea, m_vPosition));
}

ZHMTypeInfo SAgitatedBystanderOrderSaveData::TypeInfo = ZHMTypeInfo("SAgitatedBystanderOrderSaveData", sizeof(SAgitatedBystanderOrderSaveData), alignof(SAgitatedBystanderOrderSaveData), SAgitatedBystanderOrderSaveData::WriteJson, SAgitatedBystanderOrderSaveData::WriteSimpleJson, SAgitatedBystanderOrderSaveData::FromSimpleJson, SAgitatedBystanderOrderSaveData::Serialize);

void SAgitatedBystanderOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAgitatedBystanderOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rBystanderPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBystanderPoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vCover") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vCover, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vCoverDir") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vCoverDir, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAgitatedBystanderOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAgitatedBystanderOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rBystanderPoint") << ":";
	p_Stream << s_Object->m_rBystanderPoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_vCover") << ":";
	float4::WriteSimpleJson(&s_Object->m_vCover, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vCoverDir") << ":";
	float4::WriteSimpleJson(&s_Object->m_vCoverDir, p_Stream);

	p_Stream << "}";
}

void SAgitatedBystanderOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAgitatedBystanderOrderSaveData s_Object;

	s_Object.m_rBystanderPoint = static_cast<uint32>(int64_t(p_Document["m_rBystanderPoint"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vCover"], &s_Item);
		s_Object.m_vCover = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vCoverDir"], &s_Item);
		s_Object.m_vCoverDir = s_Item;
	}

	*reinterpret_cast<SAgitatedBystanderOrderSaveData*>(p_Target) = s_Object;
}

void SAgitatedBystanderOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAgitatedBystanderOrderSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vCover, p_Serializer, p_OwnOffset + offsetof(SAgitatedBystanderOrderSaveData, m_vCover));
	float4::Serialize(&s_Object->m_vCoverDir, p_Serializer, p_OwnOffset + offsetof(SAgitatedBystanderOrderSaveData, m_vCoverDir));
}

ZHMTypeInfo SActorAccessoryItemActionSaveData::TypeInfo = ZHMTypeInfo("SActorAccessoryItemActionSaveData", sizeof(SActorAccessoryItemActionSaveData), alignof(SActorAccessoryItemActionSaveData), SActorAccessoryItemActionSaveData::WriteJson, SActorAccessoryItemActionSaveData::WriteSimpleJson, SActorAccessoryItemActionSaveData::FromSimpleJson, SActorAccessoryItemActionSaveData::Serialize);

void SActorAccessoryItemActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorAccessoryItemActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorAccessoryItemActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorAccessoryItemActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SActorAccessoryItemActionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorAccessoryItemActionSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SActorAccessoryItemActionSaveData*>(p_Target) = s_Object;
}

void SActorAccessoryItemActionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorAccessoryItemActionSaveData*>(p_Object);

}

ZHMTypeInfo SGameStatsWeapon::TypeInfo = ZHMTypeInfo("SGameStatsWeapon", sizeof(SGameStatsWeapon), alignof(SGameStatsWeapon), SGameStatsWeapon::WriteJson, SGameStatsWeapon::WriteSimpleJson, SGameStatsWeapon::FromSimpleJson, SGameStatsWeapon::Serialize);

void SGameStatsWeapon::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameStatsWeapon*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_WeaponRepositoryID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_WeaponRepositoryID, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eItemWeapon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("eItemType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eItemWeapon) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("eItemType", static_cast<int>(s_Object->m_eItemWeapon))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eSpecialSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EWeaponSpecialSituation") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eSpecialSituation) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EWeaponSpecialSituation", static_cast<int>(s_Object->m_eSpecialSituation))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAmmoType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("eAmmoType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAmmoType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("eAmmoType", static_cast<int>(s_Object->m_eAmmoType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SGameStatsWeapon::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameStatsWeapon*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_WeaponRepositoryID") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_WeaponRepositoryID, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eItemWeapon") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("eItemType", static_cast<int>(s_Object->m_eItemWeapon)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eSpecialSituation") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EWeaponSpecialSituation", static_cast<int>(s_Object->m_eSpecialSituation)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eAmmoType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("eAmmoType", static_cast<int>(s_Object->m_eAmmoType)));

	p_Stream << "}";
}

void SGameStatsWeapon::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameStatsWeapon s_Object;

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_WeaponRepositoryID"], &s_Item);
		s_Object.m_WeaponRepositoryID = s_Item;
	}

	s_Object.m_eItemWeapon = static_cast<eItemType>(ZHMEnums::GetEnumValueByName("eItemType", std::string_view(p_Document["m_eItemWeapon"])));

	s_Object.m_eSpecialSituation = static_cast<EWeaponSpecialSituation>(ZHMEnums::GetEnumValueByName("EWeaponSpecialSituation", std::string_view(p_Document["m_eSpecialSituation"])));

	s_Object.m_eAmmoType = static_cast<eAmmoType>(ZHMEnums::GetEnumValueByName("eAmmoType", std::string_view(p_Document["m_eAmmoType"])));

	*reinterpret_cast<SGameStatsWeapon*>(p_Target) = s_Object;
}

void SGameStatsWeapon::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGameStatsWeapon*>(p_Object);

	ZRepositoryID::Serialize(&s_Object->m_WeaponRepositoryID, p_Serializer, p_OwnOffset + offsetof(SGameStatsWeapon, m_WeaponRepositoryID));
}

ZHMTypeInfo SGUIViewPort::TypeInfo = ZHMTypeInfo("SGUIViewPort", sizeof(SGUIViewPort), alignof(SGUIViewPort), SGUIViewPort::WriteJson, SGUIViewPort::WriteSimpleJson, SGUIViewPort::FromSimpleJson, SGUIViewPort::Serialize);

void SGUIViewPort::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGUIViewPort*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("x") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->x;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->y;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("h") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->h;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->w;
	p_Stream << "}";

	p_Stream << "}";
}

void SGUIViewPort::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGUIViewPort*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("x") << ":";
	p_Stream << s_Object->x;
	p_Stream << ",";

	p_Stream << JsonStr("y") << ":";
	p_Stream << s_Object->y;
	p_Stream << ",";

	p_Stream << JsonStr("h") << ":";
	p_Stream << s_Object->h;
	p_Stream << ",";

	p_Stream << JsonStr("w") << ":";
	p_Stream << s_Object->w;

	p_Stream << "}";
}

void SGUIViewPort::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGUIViewPort s_Object;

	s_Object.x = static_cast<uint32>(int64_t(p_Document["x"]));

	s_Object.y = static_cast<uint32>(int64_t(p_Document["y"]));

	s_Object.h = static_cast<uint32>(int64_t(p_Document["h"]));

	s_Object.w = static_cast<uint32>(int64_t(p_Document["w"]));

	*reinterpret_cast<SGUIViewPort*>(p_Target) = s_Object;
}

void SGUIViewPort::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGUIViewPort*>(p_Object);

}

ZHMTypeInfo SShotListenersSaveData::TypeInfo = ZHMTypeInfo("SShotListenersSaveData", sizeof(SShotListenersSaveData), alignof(SShotListenersSaveData), SShotListenersSaveData::WriteJson, SShotListenersSaveData::WriteSimpleJson, SShotListenersSaveData::FromSimpleJson, SShotListenersSaveData::Serialize);

void SShotListenersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SShotListenersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SShotListenerSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SShotListenerSaveData") << "," << JsonStr("$val") << ":";
		SShotListenerSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SShotListenersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SShotListenersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SShotListenerSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SShotListenersSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SShotListenersSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SShotListenerSaveData s_ArrayItem0;
		SShotListenerSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SShotListenersSaveData*>(p_Target) = s_Object;
}

void SShotListenersSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SShotListenersSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SShotListenersSaveData, m_aEntities));
	TArray<SShotListenerSaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SShotListenersSaveData, m_aData));
}

ZHMTypeInfo SBoneTransformSaveData::TypeInfo = ZHMTypeInfo("SBoneTransformSaveData", sizeof(SBoneTransformSaveData), alignof(SBoneTransformSaveData), SBoneTransformSaveData::WriteJson, SBoneTransformSaveData::WriteSimpleJson, SBoneTransformSaveData::FromSimpleJson, SBoneTransformSaveData::Serialize);

void SBoneTransformSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBoneTransformSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTranslation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SBoneTransformSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBoneTransformSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTranslation, p_Stream);

	p_Stream << "}";
}

void SBoneTransformSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBoneTransformSaveData s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mQuaterion"], &s_Item);
		s_Object.mQuaterion = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mTranslation"], &s_Item);
		s_Object.mTranslation = s_Item;
	}

	*reinterpret_cast<SBoneTransformSaveData*>(p_Target) = s_Object;
}

void SBoneTransformSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBoneTransformSaveData*>(p_Object);

	SVector4::Serialize(&s_Object->mQuaterion, p_Serializer, p_OwnOffset + offsetof(SBoneTransformSaveData, mQuaterion));
	SVector4::Serialize(&s_Object->mTranslation, p_Serializer, p_OwnOffset + offsetof(SBoneTransformSaveData, mTranslation));
}

ZHMTypeInfo ZAvoidDangerousAreaSituation_SSituationSaveData::TypeInfo = ZHMTypeInfo("ZAvoidDangerousAreaSituation.SSituationSaveData", sizeof(ZAvoidDangerousAreaSituation_SSituationSaveData), alignof(ZAvoidDangerousAreaSituation_SSituationSaveData), ZAvoidDangerousAreaSituation_SSituationSaveData::WriteJson, ZAvoidDangerousAreaSituation_SSituationSaveData::WriteSimpleJson, ZAvoidDangerousAreaSituation_SSituationSaveData::FromSimpleJson, ZAvoidDangerousAreaSituation_SSituationSaveData::Serialize);

void ZAvoidDangerousAreaSituation_SSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAvoidDangerousAreaSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aAvoidDangerousAreaGroups") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<int32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAvoidDangerousAreaGroups.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAvoidDangerousAreaGroups[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aAvoidDangerousAreaGroups.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void ZAvoidDangerousAreaSituation_SSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAvoidDangerousAreaSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aAvoidDangerousAreaGroups") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAvoidDangerousAreaGroups.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAvoidDangerousAreaGroups[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aAvoidDangerousAreaGroups.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZAvoidDangerousAreaSituation_SSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZAvoidDangerousAreaSituation_SSituationSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aAvoidDangerousAreaGroups"])
	{
		s_Object.m_aAvoidDangerousAreaGroups.push_back(static_cast<int32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<ZAvoidDangerousAreaSituation_SSituationSaveData*>(p_Target) = s_Object;
}

void ZAvoidDangerousAreaSituation_SSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZAvoidDangerousAreaSituation_SSituationSaveData*>(p_Object);

	TArray<int32>::Serialize(&s_Object->m_aAvoidDangerousAreaGroups, p_Serializer, p_OwnOffset + offsetof(ZAvoidDangerousAreaSituation_SSituationSaveData, m_aAvoidDangerousAreaGroups));
}

ZHMTypeInfo SActorProviderApproachSaveData::TypeInfo = ZHMTypeInfo("SActorProviderApproachSaveData", sizeof(SActorProviderApproachSaveData), alignof(SActorProviderApproachSaveData), SActorProviderApproachSaveData::WriteJson, SActorProviderApproachSaveData::WriteSimpleJson, SActorProviderApproachSaveData::FromSimpleJson, SActorProviderApproachSaveData::Serialize);

void SActorProviderApproachSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorProviderApproachSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCastActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCastActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorProviderApproachSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorProviderApproachSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCastActor") << ":";
	p_Stream << s_Object->m_rCastActor;

	p_Stream << "}";
}

void SActorProviderApproachSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorProviderApproachSaveData s_Object;

	s_Object.m_rCastActor = static_cast<uint32>(int64_t(p_Document["m_rCastActor"]));

	*reinterpret_cast<SActorProviderApproachSaveData*>(p_Target) = s_Object;
}

void SActorProviderApproachSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorProviderApproachSaveData*>(p_Object);

}

ZHMTypeInfo SBodyContainersSaveData::TypeInfo = ZHMTypeInfo("SBodyContainersSaveData", sizeof(SBodyContainersSaveData), alignof(SBodyContainersSaveData), SBodyContainersSaveData::WriteJson, SBodyContainersSaveData::WriteSimpleJson, SBodyContainersSaveData::FromSimpleJson, SBodyContainersSaveData::Serialize);

void SBodyContainersSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBodyContainersSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SBodyContainerSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBodyContainerSaveData") << "," << JsonStr("$val") << ":";
		SBodyContainerSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SBodyContainersSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBodyContainersSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SBodyContainerSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SBodyContainersSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBodyContainersSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SBodyContainerSaveData s_ArrayItem0;
		SBodyContainerSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SBodyContainersSaveData*>(p_Target) = s_Object;
}

void SBodyContainersSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBodyContainersSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SBodyContainersSaveData, m_aEntities));
	TArray<SBodyContainerSaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SBodyContainersSaveData, m_aData));
}

ZHMTypeInfo ZAutoNullEntityRef::TypeInfo = ZHMTypeInfo("ZAutoNullEntityRef", sizeof(ZAutoNullEntityRef), alignof(ZAutoNullEntityRef), ZAutoNullEntityRef::WriteJson, ZAutoNullEntityRef::WriteSimpleJson, ZAutoNullEntityRef::FromSimpleJson, ZAutoNullEntityRef::Serialize);

void ZAutoNullEntityRef::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAutoNullEntityRef*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZAutoNullEntityRef::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAutoNullEntityRef*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZAutoNullEntityRef::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZAutoNullEntityRef s_Object;

	*reinterpret_cast<ZAutoNullEntityRef*>(p_Target) = s_Object;
}

void ZAutoNullEntityRef::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZAutoNullEntityRef*>(p_Object);

}

ZHMTypeInfo SOnlineSaveData::TypeInfo = ZHMTypeInfo("SOnlineSaveData", sizeof(SOnlineSaveData), alignof(SOnlineSaveData), SOnlineSaveData::WriteJson, SOnlineSaveData::WriteSimpleJson, SOnlineSaveData::FromSimpleJson, SOnlineSaveData::Serialize);

void SOnlineSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SOnlineSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeStamp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTimeStamp;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOnline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOnline;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sContractSessionId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sContractSessionId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sLastEventToken") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sLastEventToken);
	p_Stream << "}";

	p_Stream << "}";
}

void SOnlineSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SOnlineSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << ",";

	p_Stream << JsonStr("m_nTimeStamp") << ":";
	p_Stream << s_Object->m_nTimeStamp;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOnline") << ":";
	p_Stream << s_Object->m_bIsOnline;
	p_Stream << ",";

	p_Stream << JsonStr("m_sContractSessionId") << ":";
	p_Stream << JsonStr(s_Object->m_sContractSessionId);
	p_Stream << ",";

	p_Stream << JsonStr("m_sLastEventToken") << ":";
	p_Stream << JsonStr(s_Object->m_sLastEventToken);

	p_Stream << "}";
}

void SOnlineSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SOnlineSaveData s_Object;

	s_Object.m_sName = std::string_view(p_Document["m_sName"]);

	s_Object.m_nTimeStamp = int64(p_Document["m_nTimeStamp"]);

	s_Object.m_bIsOnline = bool(p_Document["m_bIsOnline"]);

	s_Object.m_sContractSessionId = std::string_view(p_Document["m_sContractSessionId"]);

	s_Object.m_sLastEventToken = std::string_view(p_Document["m_sLastEventToken"]);

	*reinterpret_cast<SOnlineSaveData*>(p_Target) = s_Object;
}

void SOnlineSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SOnlineSaveData*>(p_Object);

	ZString::Serialize(&s_Object->m_sName, p_Serializer, p_OwnOffset + offsetof(SOnlineSaveData, m_sName));
	ZString::Serialize(&s_Object->m_sContractSessionId, p_Serializer, p_OwnOffset + offsetof(SOnlineSaveData, m_sContractSessionId));
	ZString::Serialize(&s_Object->m_sLastEventToken, p_Serializer, p_OwnOffset + offsetof(SOnlineSaveData, m_sLastEventToken));
}

ZHMTypeInfo SMathLerpsSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SVector3", sizeof(SMathLerpsSaveData_SVector3), alignof(SMathLerpsSaveData_SVector3), SMathLerpsSaveData_SVector3::WriteJson, SMathLerpsSaveData_SVector3::WriteSimpleJson, SMathLerpsSaveData_SVector3::FromSimpleJson, SMathLerpsSaveData_SVector3::Serialize);

void SMathLerpsSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SMathLerpSaveData_SVector3>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SVector3") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SVector3::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SMathLerpSaveData_SVector3::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpsSaveData_SVector3 s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SMathLerpSaveData_SVector3 s_ArrayItem0;
		SMathLerpSaveData_SVector3::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SMathLerpsSaveData_SVector3*>(p_Target) = s_Object;
}

void SMathLerpsSaveData_SVector3::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SVector3*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SVector3, m_aEntities));
	TArray<SMathLerpSaveData_SVector3>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SVector3, m_aData));
}

ZHMTypeInfo SValueFloatSaveData::TypeInfo = ZHMTypeInfo("SValueFloatSaveData", sizeof(SValueFloatSaveData), alignof(SValueFloatSaveData), SValueFloatSaveData::WriteJson, SValueFloatSaveData::WriteSimpleJson, SValueFloatSaveData::FromSimpleJson, SValueFloatSaveData::Serialize);

void SValueFloatSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SValueFloatSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<float32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SValueFloatSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SValueFloatSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SValueFloatSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SValueFloatSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		s_Object.m_aData.push_back(static_cast<float32>(double(s_Item0)));
	}

	*reinterpret_cast<SValueFloatSaveData*>(p_Target) = s_Object;
}

void SValueFloatSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SValueFloatSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SValueFloatSaveData, m_aEntities));
	TArray<float32>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SValueFloatSaveData, m_aData));
}

ZHMTypeInfo ZDeadBodySituation_SIncidentSaveData::TypeInfo = ZHMTypeInfo("ZDeadBodySituation.SIncidentSaveData", sizeof(ZDeadBodySituation_SIncidentSaveData), alignof(ZDeadBodySituation_SIncidentSaveData), ZDeadBodySituation_SIncidentSaveData::WriteJson, ZDeadBodySituation_SIncidentSaveData::WriteSimpleJson, ZDeadBodySituation_SIncidentSaveData::FromSimpleJson, ZDeadBodySituation_SIncidentSaveData::Serialize);

void ZDeadBodySituation_SIncidentSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDeadBodySituation_SIncidentSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_body") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_body;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAccident") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAccident;
	p_Stream << "}";

	p_Stream << "}";
}

void ZDeadBodySituation_SIncidentSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDeadBodySituation_SIncidentSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_body") << ":";
	p_Stream << s_Object->m_body;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAccident") << ":";
	p_Stream << s_Object->m_bAccident;

	p_Stream << "}";
}

void ZDeadBodySituation_SIncidentSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZDeadBodySituation_SIncidentSaveData s_Object;

	s_Object.m_body = static_cast<uint32>(int64_t(p_Document["m_body"]));

	s_Object.m_bAccident = bool(p_Document["m_bAccident"]);

	*reinterpret_cast<ZDeadBodySituation_SIncidentSaveData*>(p_Target) = s_Object;
}

void ZDeadBodySituation_SIncidentSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZDeadBodySituation_SIncidentSaveData*>(p_Object);

}

ZHMTypeInfo SHUDTimerControllerSaveData::TypeInfo = ZHMTypeInfo("SHUDTimerControllerSaveData", sizeof(SHUDTimerControllerSaveData), alignof(SHUDTimerControllerSaveData), SHUDTimerControllerSaveData::WriteJson, SHUDTimerControllerSaveData::WriteSimpleJson, SHUDTimerControllerSaveData::FromSimpleJson, SHUDTimerControllerSaveData::Serialize);

void SHUDTimerControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHUDTimerControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pCurrentInstance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pCurrentInstance;
	p_Stream << "}";

	p_Stream << "}";
}

void SHUDTimerControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHUDTimerControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pCurrentInstance") << ":";
	p_Stream << s_Object->m_pCurrentInstance;

	p_Stream << "}";
}

void SHUDTimerControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHUDTimerControllerSaveData s_Object;

	s_Object.m_pCurrentInstance = static_cast<uint32>(int64_t(p_Document["m_pCurrentInstance"]));

	*reinterpret_cast<SHUDTimerControllerSaveData*>(p_Target) = s_Object;
}

void SHUDTimerControllerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHUDTimerControllerSaveData*>(p_Object);

}

ZHMTypeInfo ZEntityPath::TypeInfo = ZHMTypeInfo("ZEntityPath", sizeof(ZEntityPath), alignof(ZEntityPath), ZEntityPath::WriteJson, ZEntityPath::WriteSimpleJson, ZEntityPath::FromSimpleJson, ZEntityPath::Serialize);

void ZEntityPath::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityPath*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZEntityPath::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityPath*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZEntityPath::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZEntityPath s_Object;

	*reinterpret_cast<ZEntityPath*>(p_Target) = s_Object;
}

void ZEntityPath::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZEntityPath*>(p_Object);

}

ZHMTypeInfo SSituationConversationGroupSaveData::TypeInfo = ZHMTypeInfo("SSituationConversationGroupSaveData", sizeof(SSituationConversationGroupSaveData), alignof(SSituationConversationGroupSaveData), SSituationConversationGroupSaveData::WriteJson, SSituationConversationGroupSaveData::WriteSimpleJson, SSituationConversationGroupSaveData::FromSimpleJson, SSituationConversationGroupSaveData::Serialize);

void SSituationConversationGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSituationConversationGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_members") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_members.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_members[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_members.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationConversationGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSituationConversationGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_members") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_members.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_members[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_members.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SSituationConversationGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSituationConversationGroupSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_members"])
	{
		s_Object.m_members.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SSituationConversationGroupSaveData*>(p_Target) = s_Object;
}

void SSituationConversationGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSituationConversationGroupSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_members, p_Serializer, p_OwnOffset + offsetof(SSituationConversationGroupSaveData, m_members));
}

ZHMTypeInfo ZPostfilterGraphBaseNode::TypeInfo = ZHMTypeInfo("ZPostfilterGraphBaseNode", sizeof(ZPostfilterGraphBaseNode), alignof(ZPostfilterGraphBaseNode), ZPostfilterGraphBaseNode::WriteJson, ZPostfilterGraphBaseNode::WriteSimpleJson, ZPostfilterGraphBaseNode::FromSimpleJson, ZPostfilterGraphBaseNode::Serialize);

void ZPostfilterGraphBaseNode::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZPostfilterGraphBaseNode*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZPostfilterGraphBaseNode::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZPostfilterGraphBaseNode*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZPostfilterGraphBaseNode::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZPostfilterGraphBaseNode s_Object;

	*reinterpret_cast<ZPostfilterGraphBaseNode*>(p_Target) = s_Object;
}

void ZPostfilterGraphBaseNode::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZPostfilterGraphBaseNode*>(p_Object);

}

ZHMTypeInfo SDangerousAreaSaveData::TypeInfo = ZHMTypeInfo("SDangerousAreaSaveData", sizeof(SDangerousAreaSaveData), alignof(SDangerousAreaSaveData), SDangerousAreaSaveData::WriteJson, SDangerousAreaSaveData::WriteSimpleJson, SDangerousAreaSaveData::FromSimpleJson, SDangerousAreaSaveData::Serialize);

void SDangerousAreaSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDangerousAreaSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bDangerous") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDangerous;
	p_Stream << "}";

	p_Stream << "}";
}

void SDangerousAreaSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDangerousAreaSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bDangerous") << ":";
	p_Stream << s_Object->m_bDangerous;

	p_Stream << "}";
}

void SDangerousAreaSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDangerousAreaSaveData s_Object;

	s_Object.m_bDangerous = bool(p_Document["m_bDangerous"]);

	*reinterpret_cast<SDangerousAreaSaveData*>(p_Target) = s_Object;
}

void SDangerousAreaSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDangerousAreaSaveData*>(p_Object);

}

ZHMTypeInfo SLampCoreSaveState::TypeInfo = ZHMTypeInfo("SLampCoreSaveState", sizeof(SLampCoreSaveState), alignof(SLampCoreSaveState), SLampCoreSaveState::WriteJson, SLampCoreSaveState::WriteSimpleJson, SLampCoreSaveState::FromSimpleJson, SLampCoreSaveState::Serialize);

void SLampCoreSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLampCoreSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fDiffusePower") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDiffusePower;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSwitchState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSwitchState;
	p_Stream << "}";

	p_Stream << "}";
}

void SLampCoreSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLampCoreSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fDiffusePower") << ":";
	p_Stream << s_Object->m_fDiffusePower;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSwitchState") << ":";
	p_Stream << s_Object->m_bSwitchState;

	p_Stream << "}";
}

void SLampCoreSaveState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLampCoreSaveState s_Object;

	s_Object.m_fDiffusePower = static_cast<float32>(double(p_Document["m_fDiffusePower"]));

	s_Object.m_bSwitchState = bool(p_Document["m_bSwitchState"]);

	*reinterpret_cast<SLampCoreSaveState*>(p_Target) = s_Object;
}

void SLampCoreSaveState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLampCoreSaveState*>(p_Object);

}

ZHMTypeInfo SLampCoreSaveData::TypeInfo = ZHMTypeInfo("SLampCoreSaveData", sizeof(SLampCoreSaveData), alignof(SLampCoreSaveData), SLampCoreSaveData::WriteJson, SLampCoreSaveData::WriteSimpleJson, SLampCoreSaveData::FromSimpleJson, SLampCoreSaveData::Serialize);

void SLampCoreSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLampCoreSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SLampCoreSaveState>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLampCoreSaveState") << "," << JsonStr("$val") << ":";
		SLampCoreSaveState::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SLampCoreSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLampCoreSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SLampCoreSaveState::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SLampCoreSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLampCoreSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SLampCoreSaveState s_ArrayItem0;
		SLampCoreSaveState::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SLampCoreSaveData*>(p_Target) = s_Object;
}

void SLampCoreSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLampCoreSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SLampCoreSaveData, m_aEntities));
	TArray<SLampCoreSaveState>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SLampCoreSaveData, m_aData));
}

ZHMTypeInfo SSecuritySystemCameraSaveData::TypeInfo = ZHMTypeInfo("SSecuritySystemCameraSaveData", sizeof(SSecuritySystemCameraSaveData), alignof(SSecuritySystemCameraSaveData), SSecuritySystemCameraSaveData::WriteJson, SSecuritySystemCameraSaveData::WriteSimpleJson, SSecuritySystemCameraSaveData::FromSimpleJson, SSecuritySystemCameraSaveData::Serialize);

void SSecuritySystemCameraSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSecuritySystemCameraSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEscalation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEscalation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFunctional") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsFunctional;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasEnteredOnce") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasEnteredOnce;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasInvestigated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasInvestigated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDestroyed;
	p_Stream << "}";

	p_Stream << "}";
}

void SSecuritySystemCameraSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSecuritySystemCameraSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEscalation") << ":";
	p_Stream << s_Object->m_nEscalation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFunctional") << ":";
	p_Stream << s_Object->m_bIsFunctional;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasEnteredOnce") << ":";
	p_Stream << s_Object->m_bHasEnteredOnce;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasInvestigated") << ":";
	p_Stream << s_Object->m_bWasInvestigated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDestroyed") << ":";
	p_Stream << s_Object->m_bDestroyed;

	p_Stream << "}";
}

void SSecuritySystemCameraSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSecuritySystemCameraSaveData s_Object;

	s_Object.m_nEscalation = static_cast<uint16>(int64_t(p_Document["m_nEscalation"]));

	s_Object.m_bIsFunctional = bool(p_Document["m_bIsFunctional"]);

	s_Object.m_bHasEnteredOnce = bool(p_Document["m_bHasEnteredOnce"]);

	s_Object.m_bWasInvestigated = bool(p_Document["m_bWasInvestigated"]);

	s_Object.m_bDestroyed = bool(p_Document["m_bDestroyed"]);

	*reinterpret_cast<SSecuritySystemCameraSaveData*>(p_Target) = s_Object;
}

void SSecuritySystemCameraSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSecuritySystemCameraSaveData*>(p_Object);

}

ZHMTypeInfo SRotateEntitySaveData::TypeInfo = ZHMTypeInfo("SRotateEntitySaveData", sizeof(SRotateEntitySaveData), alignof(SRotateEntitySaveData), SRotateEntitySaveData::WriteJson, SRotateEntitySaveData::WriteSimpleJson, SRotateEntitySaveData::FromSimpleJson, SRotateEntitySaveData::Serialize);

void SRotateEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRotateEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fXAxisSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fXAxisSpeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fYAxisSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fYAxisSpeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fZAxisSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fZAxisSpeed;
	p_Stream << "}";

	p_Stream << "}";
}

void SRotateEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRotateEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fXAxisSpeed") << ":";
	p_Stream << s_Object->m_fXAxisSpeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_fYAxisSpeed") << ":";
	p_Stream << s_Object->m_fYAxisSpeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_fZAxisSpeed") << ":";
	p_Stream << s_Object->m_fZAxisSpeed;

	p_Stream << "}";
}

void SRotateEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRotateEntitySaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_fXAxisSpeed = static_cast<float32>(double(p_Document["m_fXAxisSpeed"]));

	s_Object.m_fYAxisSpeed = static_cast<float32>(double(p_Document["m_fYAxisSpeed"]));

	s_Object.m_fZAxisSpeed = static_cast<float32>(double(p_Document["m_fZAxisSpeed"]));

	*reinterpret_cast<SRotateEntitySaveData*>(p_Target) = s_Object;
}

void SRotateEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRotateEntitySaveData*>(p_Object);

}

ZHMTypeInfo IFreeCameraControl::TypeInfo = ZHMTypeInfo("IFreeCameraControl", sizeof(IFreeCameraControl), alignof(IFreeCameraControl), IFreeCameraControl::WriteJson, IFreeCameraControl::WriteSimpleJson, IFreeCameraControl::FromSimpleJson, IFreeCameraControl::Serialize);

void IFreeCameraControl::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IFreeCameraControl*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IFreeCameraControl::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IFreeCameraControl*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IFreeCameraControl::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IFreeCameraControl s_Object;

	*reinterpret_cast<IFreeCameraControl*>(p_Target) = s_Object;
}

void IFreeCameraControl::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IFreeCameraControl*>(p_Object);

}

ZHMTypeInfo ZPhotoModeMenuDataProvider_SMenuEntry::TypeInfo = ZHMTypeInfo("ZPhotoModeMenuDataProvider.SMenuEntry", sizeof(ZPhotoModeMenuDataProvider_SMenuEntry), alignof(ZPhotoModeMenuDataProvider_SMenuEntry), ZPhotoModeMenuDataProvider_SMenuEntry::WriteJson, ZPhotoModeMenuDataProvider_SMenuEntry::WriteSimpleJson, ZPhotoModeMenuDataProvider_SMenuEntry::FromSimpleJson, ZPhotoModeMenuDataProvider_SMenuEntry::Serialize);

void ZPhotoModeMenuDataProvider_SMenuEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZPhotoModeMenuDataProvider_SMenuEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sLabel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sLabel);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsHighlighted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsHighlighted;
	p_Stream << "}";

	p_Stream << "}";
}

void ZPhotoModeMenuDataProvider_SMenuEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZPhotoModeMenuDataProvider_SMenuEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sLabel") << ":";
	p_Stream << JsonStr(s_Object->sLabel);
	p_Stream << ",";

	p_Stream << JsonStr("bIsEnabled") << ":";
	p_Stream << s_Object->bIsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("bIsHighlighted") << ":";
	p_Stream << s_Object->bIsHighlighted;

	p_Stream << "}";
}

void ZPhotoModeMenuDataProvider_SMenuEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZPhotoModeMenuDataProvider_SMenuEntry s_Object;

	s_Object.sLabel = std::string_view(p_Document["sLabel"]);

	s_Object.bIsEnabled = bool(p_Document["bIsEnabled"]);

	s_Object.bIsHighlighted = bool(p_Document["bIsHighlighted"]);

	*reinterpret_cast<ZPhotoModeMenuDataProvider_SMenuEntry*>(p_Target) = s_Object;
}

void ZPhotoModeMenuDataProvider_SMenuEntry::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZPhotoModeMenuDataProvider_SMenuEntry*>(p_Object);

	ZString::Serialize(&s_Object->sLabel, p_Serializer, p_OwnOffset + offsetof(ZPhotoModeMenuDataProvider_SMenuEntry, sLabel));
}

ZHMTypeInfo SSpeakEntitySaveData::TypeInfo = ZHMTypeInfo("SSpeakEntitySaveData", sizeof(SSpeakEntitySaveData), alignof(SSpeakEntitySaveData), SSpeakEntitySaveData::WriteJson, SSpeakEntitySaveData::WriteSimpleJson, SSpeakEntitySaveData::FromSimpleJson, SSpeakEntitySaveData::Serialize);

void SSpeakEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSpeakEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fSeekPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSeekPosition;
	p_Stream << "}";

	p_Stream << "}";
}

void SSpeakEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSpeakEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fSeekPosition") << ":";
	p_Stream << s_Object->m_fSeekPosition;

	p_Stream << "}";
}

void SSpeakEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSpeakEntitySaveData s_Object;

	s_Object.m_fSeekPosition = static_cast<float32>(double(p_Document["m_fSeekPosition"]));

	*reinterpret_cast<SSpeakEntitySaveData*>(p_Target) = s_Object;
}

void SSpeakEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSpeakEntitySaveData*>(p_Object);

}

ZHMTypeInfo IContractModule::TypeInfo = ZHMTypeInfo("IContractModule", sizeof(IContractModule), alignof(IContractModule), IContractModule::WriteJson, IContractModule::WriteSimpleJson, IContractModule::FromSimpleJson, IContractModule::Serialize);

void IContractModule::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IContractModule*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IContractModule::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IContractModule*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IContractModule::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IContractModule s_Object;

	*reinterpret_cast<IContractModule*>(p_Target) = s_Object;
}

void IContractModule::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IContractModule*>(p_Object);

}

ZHMTypeInfo SCombatOrderSaveData::TypeInfo = ZHMTypeInfo("SCombatOrderSaveData", sizeof(SCombatOrderSaveData), alignof(SCombatOrderSaveData), SCombatOrderSaveData::WriteJson, SCombatOrderSaveData::WriteSimpleJson, SCombatOrderSaveData::FromSimpleJson, SCombatOrderSaveData::Serialize);

void SCombatOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCombatOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPos") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPos, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_coverPlane") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_coverPlane;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInteraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInteraction;
	p_Stream << "}";

	p_Stream << "}";
}

void SCombatOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCombatOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPos") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPos, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_coverPlane") << ":";
	p_Stream << s_Object->m_coverPlane;
	p_Stream << ",";

	p_Stream << JsonStr("m_rInteraction") << ":";
	p_Stream << s_Object->m_rInteraction;

	p_Stream << "}";
}

void SCombatOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCombatOrderSaveData s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vPos"], &s_Item);
		s_Object.m_vPos = s_Item;
	}

	s_Object.m_coverPlane = static_cast<uint32>(int64_t(p_Document["m_coverPlane"]));

	s_Object.m_rInteraction = static_cast<uint32>(int64_t(p_Document["m_rInteraction"]));

	*reinterpret_cast<SCombatOrderSaveData*>(p_Target) = s_Object;
}

void SCombatOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCombatOrderSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vPos, p_Serializer, p_OwnOffset + offsetof(SCombatOrderSaveData, m_vPos));
}

ZHMTypeInfo SHintEntrySaveData::TypeInfo = ZHMTypeInfo("SHintEntrySaveData", sizeof(SHintEntrySaveData), alignof(SHintEntrySaveData), SHintEntrySaveData::WriteJson, SHintEntrySaveData::WriteSimpleJson, SHintEntrySaveData::FromSimpleJson, SHintEntrySaveData::Serialize);

void SHintEntrySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHintEntrySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsValid;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_hint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_hint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_context") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_context;
	p_Stream << "}";

	p_Stream << "}";
}

void SHintEntrySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHintEntrySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsValid") << ":";
	p_Stream << s_Object->m_bIsValid;
	p_Stream << ",";

	p_Stream << JsonStr("m_hint") << ":";
	p_Stream << s_Object->m_hint;
	p_Stream << ",";

	p_Stream << JsonStr("m_context") << ":";
	p_Stream << s_Object->m_context;

	p_Stream << "}";
}

void SHintEntrySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHintEntrySaveData s_Object;

	s_Object.m_bIsValid = bool(p_Document["m_bIsValid"]);

	s_Object.m_hint = static_cast<uint32>(int64_t(p_Document["m_hint"]));

	s_Object.m_context = static_cast<uint32>(int64_t(p_Document["m_context"]));

	*reinterpret_cast<SHintEntrySaveData*>(p_Target) = s_Object;
}

void SHintEntrySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHintEntrySaveData*>(p_Object);

}

ZHMTypeInfo SHintManagerSaveData::TypeInfo = ZHMTypeInfo("SHintManagerSaveData", sizeof(SHintManagerSaveData), alignof(SHintManagerSaveData), SHintManagerSaveData::WriteJson, SHintManagerSaveData::WriteSimpleJson, SHintManagerSaveData::FromSimpleJson, SHintManagerSaveData::Serialize);

void SHintManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHintManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_activeHint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHintEntrySaveData") << "," << JsonStr("$val") << ":";
	SHintEntrySaveData::WriteJson(&s_Object->m_activeHint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aQueue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SHintEntrySaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aQueue.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aQueue[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHintEntrySaveData") << "," << JsonStr("$val") << ":";
		SHintEntrySaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aQueue.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsRunning;
	p_Stream << "}";

	p_Stream << "}";
}

void SHintManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHintManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_activeHint") << ":";
	SHintEntrySaveData::WriteSimpleJson(&s_Object->m_activeHint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aQueue") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aQueue.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aQueue[i];
		SHintEntrySaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aQueue.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRunning") << ":";
	p_Stream << s_Object->m_bIsRunning;

	p_Stream << "}";
}

void SHintManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHintManagerSaveData s_Object;

	{
		SHintEntrySaveData s_Item;
		SHintEntrySaveData::FromSimpleJson(p_Document["m_activeHint"], &s_Item);
		s_Object.m_activeHint = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aQueue"])
	{
		SHintEntrySaveData s_ArrayItem0;
		SHintEntrySaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aQueue.push_back(s_ArrayItem0);
	}

	s_Object.m_bIsRunning = bool(p_Document["m_bIsRunning"]);

	*reinterpret_cast<SHintManagerSaveData*>(p_Target) = s_Object;
}

void SHintManagerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHintManagerSaveData*>(p_Object);

	SHintEntrySaveData::Serialize(&s_Object->m_activeHint, p_Serializer, p_OwnOffset + offsetof(SHintManagerSaveData, m_activeHint));
	TArray<SHintEntrySaveData>::Serialize(&s_Object->m_aQueue, p_Serializer, p_OwnOffset + offsetof(SHintManagerSaveData, m_aQueue));
}

ZHMTypeInfo ZHM5FaceFXReactionEventConsumer_SFaceFXEventData::TypeInfo = ZHMTypeInfo("ZHM5FaceFXReactionEventConsumer.SFaceFXEventData", sizeof(ZHM5FaceFXReactionEventConsumer_SFaceFXEventData), alignof(ZHM5FaceFXReactionEventConsumer_SFaceFXEventData), ZHM5FaceFXReactionEventConsumer_SFaceFXEventData::WriteJson, ZHM5FaceFXReactionEventConsumer_SFaceFXEventData::WriteSimpleJson, ZHM5FaceFXReactionEventConsumer_SFaceFXEventData::FromSimpleJson, ZHM5FaceFXReactionEventConsumer_SFaceFXEventData::Serialize);

void ZHM5FaceFXReactionEventConsumer_SFaceFXEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5FaceFXReactionEventConsumer_SFaceFXEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHM5FaceFXReactionEventConsumer.EEvent") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nEvent) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHM5FaceFXReactionEventConsumer.EEvent", static_cast<int>(s_Object->m_nEvent))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5FaceFXReactionEventConsumer_SFaceFXEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5FaceFXReactionEventConsumer_SFaceFXEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHM5FaceFXReactionEventConsumer.EEvent", static_cast<int>(s_Object->m_nEvent)));

	p_Stream << "}";
}

void ZHM5FaceFXReactionEventConsumer_SFaceFXEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5FaceFXReactionEventConsumer_SFaceFXEventData s_Object;

	s_Object.m_nEvent = static_cast<ZHM5FaceFXReactionEventConsumer_EEvent>(ZHMEnums::GetEnumValueByName("ZHM5FaceFXReactionEventConsumer.EEvent", std::string_view(p_Document["m_nEvent"])));

	*reinterpret_cast<ZHM5FaceFXReactionEventConsumer_SFaceFXEventData*>(p_Target) = s_Object;
}

void ZHM5FaceFXReactionEventConsumer_SFaceFXEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5FaceFXReactionEventConsumer_SFaceFXEventData*>(p_Object);

}

ZHMTypeInfo SCppEntity::TypeInfo = ZHMTypeInfo("SCppEntity", sizeof(SCppEntity), alignof(SCppEntity), SCppEntity::WriteJson, SCppEntity::WriteSimpleJson, SCppEntity::FromSimpleJson, SCppEntity::Serialize);

void SCppEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("blueprintIndexInResourceHeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->blueprintIndexInResourceHeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("propertyValues") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityTemplateProperty>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->propertyValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateProperty") << "," << JsonStr("$val") << ":";
		SEntityTemplateProperty::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->propertyValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCppEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCppEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("blueprintIndexInResourceHeader") << ":";
	p_Stream << s_Object->blueprintIndexInResourceHeader;
	p_Stream << ",";

	p_Stream << JsonStr("propertyValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->propertyValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->propertyValues[i];
		SEntityTemplateProperty::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->propertyValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCppEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCppEntity s_Object;

	s_Object.blueprintIndexInResourceHeader = static_cast<int32>(int64_t(p_Document["blueprintIndexInResourceHeader"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["propertyValues"])
	{
		SEntityTemplateProperty s_ArrayItem0;
		SEntityTemplateProperty::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.propertyValues.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SCppEntity*>(p_Target) = s_Object;
}

void SCppEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCppEntity*>(p_Object);

	TArray<SEntityTemplateProperty>::Serialize(&s_Object->propertyValues, p_Serializer, p_OwnOffset + offsetof(SCppEntity, propertyValues));
}

ZHMTypeInfo SClothWireEntitySaveData::TypeInfo = ZHMTypeInfo("SClothWireEntitySaveData", sizeof(SClothWireEntitySaveData), alignof(SClothWireEntitySaveData), SClothWireEntitySaveData::WriteJson, SClothWireEntitySaveData::WriteSimpleJson, SClothWireEntitySaveData::FromSimpleJson, SClothWireEntitySaveData::Serialize);

void SClothWireEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SClothWireEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fWireLength") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fWireLength;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttachToAnchorTransform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAttachToAnchorTransform;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSimulationEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSimulationEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SClothWireEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SClothWireEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fWireLength") << ":";
	p_Stream << s_Object->m_fWireLength;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttachToAnchorTransform") << ":";
	p_Stream << s_Object->m_bAttachToAnchorTransform;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSimulationEnabled") << ":";
	p_Stream << s_Object->m_bSimulationEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;

	p_Stream << "}";
}

void SClothWireEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SClothWireEntitySaveData s_Object;

	s_Object.m_fWireLength = static_cast<float32>(double(p_Document["m_fWireLength"]));

	s_Object.m_bAttachToAnchorTransform = bool(p_Document["m_bAttachToAnchorTransform"]);

	s_Object.m_bSimulationEnabled = bool(p_Document["m_bSimulationEnabled"]);

	s_Object.m_bVisible = bool(p_Document["m_bVisible"]);

	*reinterpret_cast<SClothWireEntitySaveData*>(p_Target) = s_Object;
}

void SClothWireEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SClothWireEntitySaveData*>(p_Object);

}

ZHMTypeInfo SParticleEmitterSaveData::TypeInfo = ZHMTypeInfo("SParticleEmitterSaveData", sizeof(SParticleEmitterSaveData), alignof(SParticleEmitterSaveData), SParticleEmitterSaveData::WriteJson, SParticleEmitterSaveData::WriteSimpleJson, SParticleEmitterSaveData::FromSimpleJson, SParticleEmitterSaveData::Serialize);

void SParticleEmitterSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SParticleEmitterSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsActivated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionTimeLeft") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fEmissionTimeLeft;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionTimeFraction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fEmissionTimeFraction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionCntLeft") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fEmissionCntLeft;
	p_Stream << "}";

	p_Stream << "}";
}

void SParticleEmitterSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SParticleEmitterSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsActivated") << ":";
	p_Stream << s_Object->m_bIsActivated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionTimeLeft") << ":";
	p_Stream << s_Object->m_fEmissionTimeLeft;
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionTimeFraction") << ":";
	p_Stream << s_Object->m_fEmissionTimeFraction;
	p_Stream << ",";

	p_Stream << JsonStr("m_fEmissionCntLeft") << ":";
	p_Stream << s_Object->m_fEmissionCntLeft;

	p_Stream << "}";
}

void SParticleEmitterSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SParticleEmitterSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_bIsActivated = bool(p_Document["m_bIsActivated"]);

	s_Object.m_bIsVisible = bool(p_Document["m_bIsVisible"]);

	s_Object.m_fEmissionTimeLeft = static_cast<float32>(double(p_Document["m_fEmissionTimeLeft"]));

	s_Object.m_fEmissionTimeFraction = static_cast<float32>(double(p_Document["m_fEmissionTimeFraction"]));

	s_Object.m_fEmissionCntLeft = static_cast<float32>(double(p_Document["m_fEmissionCntLeft"]));

	*reinterpret_cast<SParticleEmitterSaveData*>(p_Target) = s_Object;
}

void SParticleEmitterSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SParticleEmitterSaveData*>(p_Object);

}

ZHMTypeInfo SBoneAttachSaveData::TypeInfo = ZHMTypeInfo("SBoneAttachSaveData", sizeof(SBoneAttachSaveData), alignof(SBoneAttachSaveData), SBoneAttachSaveData::WriteJson, SBoneAttachSaveData::WriteSimpleJson, SBoneAttachSaveData::FromSimpleJson, SBoneAttachSaveData::Serialize);

void SBoneAttachSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBoneAttachSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsAttached;
	p_Stream << "}";

	p_Stream << "}";
}

void SBoneAttachSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBoneAttachSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsAttached") << ":";
	p_Stream << s_Object->m_bIsAttached;

	p_Stream << "}";
}

void SBoneAttachSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBoneAttachSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	s_Object.m_bIsAttached = bool(p_Document["m_bIsAttached"]);

	*reinterpret_cast<SBoneAttachSaveData*>(p_Target) = s_Object;
}

void SBoneAttachSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBoneAttachSaveData*>(p_Object);

}

ZHMTypeInfo SGameplayRenderablesSaveData::TypeInfo = ZHMTypeInfo("SGameplayRenderablesSaveData", sizeof(SGameplayRenderablesSaveData), alignof(SGameplayRenderablesSaveData), SGameplayRenderablesSaveData::WriteJson, SGameplayRenderablesSaveData::WriteSimpleJson, SGameplayRenderablesSaveData::FromSimpleJson, SGameplayRenderablesSaveData::Serialize);

void SGameplayRenderablesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameplayRenderablesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aLightData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SLightSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLightData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aLightData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLightSaveData") << "," << JsonStr("$val") << ":";
		SLightSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aLightData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aMaterialData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SRenderMaterialSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMaterialData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aMaterialData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRenderMaterialSaveData") << "," << JsonStr("$val") << ":";
		SRenderMaterialSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aMaterialData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aParticleData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SParticleEmitterSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aParticleData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aParticleData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SParticleEmitterSaveData") << "," << JsonStr("$val") << ":";
		SParticleEmitterSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aParticleData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneAttachData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SBoneAttachSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneAttachData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBoneAttachData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBoneAttachSaveData") << "," << JsonStr("$val") << ":";
		SBoneAttachSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBoneAttachData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPostFilterParametersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SPostfilterParametersSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPostFilterParametersData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPostFilterParametersData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SPostfilterParametersSaveData") << "," << JsonStr("$val") << ":";
		SPostfilterParametersSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aPostFilterParametersData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGateData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SGateSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGateData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGateData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SGateSaveData") << "," << JsonStr("$val") << ":";
		SGateSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGateData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SGameplayRenderablesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameplayRenderablesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aLightData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aLightData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aLightData[i];
		SLightSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aLightData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aMaterialData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMaterialData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aMaterialData[i];
		SRenderMaterialSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aMaterialData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aParticleData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aParticleData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aParticleData[i];
		SParticleEmitterSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aParticleData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneAttachData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneAttachData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBoneAttachData[i];
		SBoneAttachSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aBoneAttachData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPostFilterParametersData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPostFilterParametersData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPostFilterParametersData[i];
		SPostfilterParametersSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aPostFilterParametersData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGateData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGateData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGateData[i];
		SGateSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aGateData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SGameplayRenderablesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameplayRenderablesSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aLightData"])
	{
		SLightSaveData s_ArrayItem0;
		SLightSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aLightData.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aMaterialData"])
	{
		SRenderMaterialSaveData s_ArrayItem0;
		SRenderMaterialSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aMaterialData.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aParticleData"])
	{
		SParticleEmitterSaveData s_ArrayItem0;
		SParticleEmitterSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aParticleData.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aBoneAttachData"])
	{
		SBoneAttachSaveData s_ArrayItem0;
		SBoneAttachSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aBoneAttachData.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aPostFilterParametersData"])
	{
		SPostfilterParametersSaveData s_ArrayItem0;
		SPostfilterParametersSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aPostFilterParametersData.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aGateData"])
	{
		SGateSaveData s_ArrayItem0;
		SGateSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aGateData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SGameplayRenderablesSaveData*>(p_Target) = s_Object;
}

void SGameplayRenderablesSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGameplayRenderablesSaveData*>(p_Object);

	TArray<SLightSaveData>::Serialize(&s_Object->m_aLightData, p_Serializer, p_OwnOffset + offsetof(SGameplayRenderablesSaveData, m_aLightData));
	TArray<SRenderMaterialSaveData>::Serialize(&s_Object->m_aMaterialData, p_Serializer, p_OwnOffset + offsetof(SGameplayRenderablesSaveData, m_aMaterialData));
	TArray<SParticleEmitterSaveData>::Serialize(&s_Object->m_aParticleData, p_Serializer, p_OwnOffset + offsetof(SGameplayRenderablesSaveData, m_aParticleData));
	TArray<SBoneAttachSaveData>::Serialize(&s_Object->m_aBoneAttachData, p_Serializer, p_OwnOffset + offsetof(SGameplayRenderablesSaveData, m_aBoneAttachData));
	TArray<SPostfilterParametersSaveData>::Serialize(&s_Object->m_aPostFilterParametersData, p_Serializer, p_OwnOffset + offsetof(SGameplayRenderablesSaveData, m_aPostFilterParametersData));
	TArray<SGateSaveData>::Serialize(&s_Object->m_aGateData, p_Serializer, p_OwnOffset + offsetof(SGameplayRenderablesSaveData, m_aGateData));
}

ZHMTypeInfo ZHM5ItemInteractionEventConsumer_SItemInteractionEventData::TypeInfo = ZHMTypeInfo("ZHM5ItemInteractionEventConsumer.SItemInteractionEventData", sizeof(ZHM5ItemInteractionEventConsumer_SItemInteractionEventData), alignof(ZHM5ItemInteractionEventConsumer_SItemInteractionEventData), ZHM5ItemInteractionEventConsumer_SItemInteractionEventData::WriteJson, ZHM5ItemInteractionEventConsumer_SItemInteractionEventData::WriteSimpleJson, ZHM5ItemInteractionEventConsumer_SItemInteractionEventData::FromSimpleJson, ZHM5ItemInteractionEventConsumer_SItemInteractionEventData::Serialize);

void ZHM5ItemInteractionEventConsumer_SItemInteractionEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5ItemInteractionEventConsumer_SItemInteractionEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHM5ItemInteractionEventConsumer.EHM5SoundItemInteractionEvent") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nEvent) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHM5ItemInteractionEventConsumer.EHM5SoundItemInteractionEvent", static_cast<int>(s_Object->m_nEvent))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5ItemInteractionEventConsumer_SItemInteractionEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5ItemInteractionEventConsumer_SItemInteractionEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHM5ItemInteractionEventConsumer.EHM5SoundItemInteractionEvent", static_cast<int>(s_Object->m_nEvent)));

	p_Stream << "}";
}

void ZHM5ItemInteractionEventConsumer_SItemInteractionEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5ItemInteractionEventConsumer_SItemInteractionEventData s_Object;

	s_Object.m_nEvent = static_cast<ZHM5ItemInteractionEventConsumer_EHM5SoundItemInteractionEvent>(ZHMEnums::GetEnumValueByName("ZHM5ItemInteractionEventConsumer.EHM5SoundItemInteractionEvent", std::string_view(p_Document["m_nEvent"])));

	*reinterpret_cast<ZHM5ItemInteractionEventConsumer_SItemInteractionEventData*>(p_Target) = s_Object;
}

void ZHM5ItemInteractionEventConsumer_SItemInteractionEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5ItemInteractionEventConsumer_SItemInteractionEventData*>(p_Object);

}

ZHMTypeInfo SDoorSoundDefs::TypeInfo = ZHMTypeInfo("SDoorSoundDefs", sizeof(SDoorSoundDefs), alignof(SDoorSoundDefs), SDoorSoundDefs::WriteJson, SDoorSoundDefs::WriteSimpleJson, SDoorSoundDefs::FromSimpleJson, SDoorSoundDefs::Serialize);

void SDoorSoundDefs::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDoorSoundDefs*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SDoorSoundDefs::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDoorSoundDefs*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SDoorSoundDefs::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDoorSoundDefs s_Object;

	*reinterpret_cast<SDoorSoundDefs*>(p_Target) = s_Object;
}

void SDoorSoundDefs::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDoorSoundDefs*>(p_Object);

}

ZHMTypeInfo SItsATrapSaveData::TypeInfo = ZHMTypeInfo("SItsATrapSaveData", sizeof(SItsATrapSaveData), alignof(SItsATrapSaveData), SItsATrapSaveData::WriteJson, SItsATrapSaveData::WriteSimpleJson, SItsATrapSaveData::FromSimpleJson, SItsATrapSaveData::Serialize);

void SItsATrapSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItsATrapSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimer;
	p_Stream << "}";

	p_Stream << "}";
}

void SItsATrapSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItsATrapSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimer") << ":";
	p_Stream << s_Object->m_fTimer;

	p_Stream << "}";
}

void SItsATrapSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItsATrapSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_fTimer = static_cast<float32>(double(p_Document["m_fTimer"]));

	*reinterpret_cast<SItsATrapSaveData*>(p_Target) = s_Object;
}

void SItsATrapSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItsATrapSaveData*>(p_Object);

}

ZHMTypeInfo SMovementLocomotionSaveData::TypeInfo = ZHMTypeInfo("SMovementLocomotionSaveData", sizeof(SMovementLocomotionSaveData), alignof(SMovementLocomotionSaveData), SMovementLocomotionSaveData::WriteJson, SMovementLocomotionSaveData::WriteSimpleJson, SMovementLocomotionSaveData::FromSimpleJson, SMovementLocomotionSaveData::Serialize);

void SMovementLocomotionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementLocomotionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsSneaking") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsSneaking;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementLocomotionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementLocomotionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsSneaking") << ":";
	p_Stream << s_Object->m_bIsSneaking;

	p_Stream << "}";
}

void SMovementLocomotionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementLocomotionSaveData s_Object;

	s_Object.m_bIsSneaking = bool(p_Document["m_bIsSneaking"]);

	*reinterpret_cast<SMovementLocomotionSaveData*>(p_Target) = s_Object;
}

void SMovementLocomotionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMovementLocomotionSaveData*>(p_Object);

}

ZHMTypeInfo SEventSaveData::TypeInfo = ZHMTypeInfo("SEventSaveData", sizeof(SEventSaveData), alignof(SEventSaveData), SEventSaveData::WriteJson, SEventSaveData::WriteSimpleJson, SEventSaveData::FromSimpleJson, SEventSaveData::Serialize);

void SEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAISharedEventType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_nType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nEnd") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_nEnd, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAISharedEventType", static_cast<int>(s_Object->m_nType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nEnd") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_nEnd, p_Stream);

	p_Stream << "}";
}

void SEventSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEventSaveData s_Object;

	s_Object.m_nType = static_cast<EAISharedEventType>(ZHMEnums::GetEnumValueByName("EAISharedEventType", std::string_view(p_Document["m_nType"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_nStart"], &s_Item);
		s_Object.m_nStart = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_nEnd"], &s_Item);
		s_Object.m_nEnd = s_Item;
	}

	*reinterpret_cast<SEventSaveData*>(p_Target) = s_Object;
}

void SEventSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEventSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_nStart, p_Serializer, p_OwnOffset + offsetof(SEventSaveData, m_nStart));
	ZGameTime::Serialize(&s_Object->m_nEnd, p_Serializer, p_OwnOffset + offsetof(SEventSaveData, m_nEnd));
}

ZHMTypeInfo SSharedKnowledgeSaveData::TypeInfo = ZHMTypeInfo("SSharedKnowledgeSaveData", sizeof(SSharedKnowledgeSaveData), alignof(SSharedKnowledgeSaveData), SSharedKnowledgeSaveData::WriteJson, SSharedKnowledgeSaveData::WriteSimpleJson, SSharedKnowledgeSaveData::FromSimpleJson, SSharedKnowledgeSaveData::Serialize);

void SSharedKnowledgeSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSharedKnowledgeSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OutfitId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_OutfitId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ActualMatrix") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_ActualMatrix, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEventSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEvents.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEventSaveData") << "," << JsonStr("$val") << ":";
		SEventSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SSharedKnowledgeSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSharedKnowledgeSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEntity") << ":";
	p_Stream << s_Object->m_rEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_OutfitId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_OutfitId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ActualMatrix") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_ActualMatrix, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEvents.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEvents[i];
		SEventSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SSharedKnowledgeSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSharedKnowledgeSaveData s_Object;

	s_Object.m_rEntity = static_cast<uint32>(int64_t(p_Document["m_rEntity"]));

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_OutfitId"], &s_Item);
		s_Object.m_OutfitId = s_Item;
	}

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_ActualMatrix"], &s_Item);
		s_Object.m_ActualMatrix = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEvents"])
	{
		SEventSaveData s_ArrayItem0;
		SEventSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aEvents.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SSharedKnowledgeSaveData*>(p_Target) = s_Object;
}

void SSharedKnowledgeSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSharedKnowledgeSaveData*>(p_Object);

	ZRepositoryID::Serialize(&s_Object->m_OutfitId, p_Serializer, p_OwnOffset + offsetof(SSharedKnowledgeSaveData, m_OutfitId));
	SMatrix::Serialize(&s_Object->m_ActualMatrix, p_Serializer, p_OwnOffset + offsetof(SSharedKnowledgeSaveData, m_ActualMatrix));
	TArray<SEventSaveData>::Serialize(&s_Object->m_aEvents, p_Serializer, p_OwnOffset + offsetof(SSharedKnowledgeSaveData, m_aEvents));
}

ZHMTypeInfo SSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SSituationMemberSaveData", sizeof(SSituationMemberSaveData), alignof(SSituationMemberSaveData), SSituationMemberSaveData::WriteJson, SSituationMemberSaveData::WriteSimpleJson, SSituationMemberSaveData::FromSimpleJson, SSituationMemberSaveData::Serialize);

void SSituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eJoinReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationJoinReason") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eJoinReason) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationJoinReason", static_cast<int>(s_Object->m_eJoinReason))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOrderValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsOrderValid;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OrderData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_OrderData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_PendingOrderData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_PendingOrderData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDramaRole") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDramaRole;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CustomData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_eJoinReason") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationJoinReason", static_cast<int>(s_Object->m_eJoinReason)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsOrderValid") << ":";
	p_Stream << s_Object->m_bIsOrderValid;
	p_Stream << ",";

	p_Stream << JsonStr("m_OrderData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_OrderData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_PendingOrderData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_PendingOrderData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rDramaRole") << ":";
	p_Stream << s_Object->m_rDramaRole;
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CustomData, p_Stream);

	p_Stream << "}";
}

void SSituationMemberSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSituationMemberSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_eJoinReason = static_cast<ESituationJoinReason>(ZHMEnums::GetEnumValueByName("ESituationJoinReason", std::string_view(p_Document["m_eJoinReason"])));

	s_Object.m_bIsOrderValid = bool(p_Document["m_bIsOrderValid"]);

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_OrderData"], &s_Item);
		s_Object.m_OrderData = s_Item;
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_PendingOrderData"], &s_Item);
		s_Object.m_PendingOrderData = s_Item;
	}

	s_Object.m_rDramaRole = static_cast<uint32>(int64_t(p_Document["m_rDramaRole"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_CustomData"], &s_Item);
		s_Object.m_CustomData = s_Item;
	}

	*reinterpret_cast<SSituationMemberSaveData*>(p_Target) = s_Object;
}

void SSituationMemberSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSituationMemberSaveData*>(p_Object);

	ZVariant::Serialize(&s_Object->m_OrderData, p_Serializer, p_OwnOffset + offsetof(SSituationMemberSaveData, m_OrderData));
	ZVariant::Serialize(&s_Object->m_PendingOrderData, p_Serializer, p_OwnOffset + offsetof(SSituationMemberSaveData, m_PendingOrderData));
	ZVariant::Serialize(&s_Object->m_CustomData, p_Serializer, p_OwnOffset + offsetof(SSituationMemberSaveData, m_CustomData));
}

ZHMTypeInfo SSituationSaveData::TypeInfo = ZHMTypeInfo("SSituationSaveData", sizeof(SSituationSaveData), alignof(SSituationSaveData), SSituationSaveData::WriteJson, SSituationSaveData::WriteSimpleJson, SSituationSaveData::FromSimpleJson, SSituationSaveData::Serialize);

void SSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESituationType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetSharedEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTargetSharedEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Data, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aMemberData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SSituationMemberSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMemberData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aMemberData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSituationMemberSaveData") << "," << JsonStr("$val") << ":";
		SSituationMemberSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aMemberData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGroupData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SSituationGroupSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGroupData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGroupData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSituationGroupSaveData") << "," << JsonStr("$val") << ":";
		SSituationGroupSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGroupData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNextGroupID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNextGroupID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_situationStartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_situationStartTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationEnded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSituationEnded;
	p_Stream << "}";

	p_Stream << "}";
}

void SSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rSituation") << ":";
	p_Stream << s_Object->m_rSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESituationType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetSharedEntity") << ":";
	p_Stream << s_Object->m_nTargetSharedEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_Data") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Data, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aMemberData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMemberData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aMemberData[i];
		SSituationMemberSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aMemberData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGroupData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGroupData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGroupData[i];
		SSituationGroupSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aGroupData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNextGroupID") << ":";
	p_Stream << s_Object->m_nNextGroupID;
	p_Stream << ",";

	p_Stream << JsonStr("m_situationStartTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_situationStartTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bSituationEnded") << ":";
	p_Stream << s_Object->m_bSituationEnded;

	p_Stream << "}";
}

void SSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSituationSaveData s_Object;

	s_Object.m_rSituation = static_cast<uint32>(int64_t(p_Document["m_rSituation"]));

	s_Object.m_eType = static_cast<ESituationType>(ZHMEnums::GetEnumValueByName("ESituationType", std::string_view(p_Document["m_eType"])));

	s_Object.m_nTargetSharedEntity = static_cast<int32>(int64_t(p_Document["m_nTargetSharedEntity"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_Data"], &s_Item);
		s_Object.m_Data = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aMemberData"])
	{
		SSituationMemberSaveData s_ArrayItem0;
		SSituationMemberSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aMemberData.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aGroupData"])
	{
		SSituationGroupSaveData s_ArrayItem0;
		SSituationGroupSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aGroupData.push_back(s_ArrayItem0);
	}

	s_Object.m_nNextGroupID = static_cast<int32>(int64_t(p_Document["m_nNextGroupID"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_situationStartTime"], &s_Item);
		s_Object.m_situationStartTime = s_Item;
	}

	s_Object.m_bSituationEnded = bool(p_Document["m_bSituationEnded"]);

	*reinterpret_cast<SSituationSaveData*>(p_Target) = s_Object;
}

void SSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSituationSaveData*>(p_Object);

	ZVariant::Serialize(&s_Object->m_Data, p_Serializer, p_OwnOffset + offsetof(SSituationSaveData, m_Data));
	TArray<SSituationMemberSaveData>::Serialize(&s_Object->m_aMemberData, p_Serializer, p_OwnOffset + offsetof(SSituationSaveData, m_aMemberData));
	TArray<SSituationGroupSaveData>::Serialize(&s_Object->m_aGroupData, p_Serializer, p_OwnOffset + offsetof(SSituationSaveData, m_aGroupData));
	ZGameTime::Serialize(&s_Object->m_situationStartTime, p_Serializer, p_OwnOffset + offsetof(SSituationSaveData, m_situationStartTime));
}

ZHMTypeInfo SSniperCombatGroupSaveData::TypeInfo = ZHMTypeInfo("SSniperCombatGroupSaveData", sizeof(SSniperCombatGroupSaveData), alignof(SSniperCombatGroupSaveData), SSniperCombatGroupSaveData::WriteJson, SSniperCombatGroupSaveData::WriteSimpleJson, SSniperCombatGroupSaveData::FromSimpleJson, SSniperCombatGroupSaveData::Serialize);

void SSniperCombatGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSniperCombatGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFailed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFailed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEscapeTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tEscapeTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTauntTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastTauntTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSniperCombatGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSniperCombatGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFailed") << ":";
	p_Stream << s_Object->m_bFailed;
	p_Stream << ",";

	p_Stream << JsonStr("m_tEscapeTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tEscapeTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastTauntTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastTauntTime, p_Stream);

	p_Stream << "}";
}

void SSniperCombatGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSniperCombatGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_target = static_cast<int32>(int64_t(p_Document["m_target"]));

	s_Object.m_bFailed = bool(p_Document["m_bFailed"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tEscapeTime"], &s_Item);
		s_Object.m_tEscapeTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastTauntTime"], &s_Item);
		s_Object.m_tLastTauntTime = s_Item;
	}

	*reinterpret_cast<SSniperCombatGroupSaveData*>(p_Target) = s_Object;
}

void SSniperCombatGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSniperCombatGroupSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SSniperCombatGroupSaveData, m_fsmState));
	ZGameTime::Serialize(&s_Object->m_tEscapeTime, p_Serializer, p_OwnOffset + offsetof(SSniperCombatGroupSaveData, m_tEscapeTime));
	ZGameTime::Serialize(&s_Object->m_tLastTauntTime, p_Serializer, p_OwnOffset + offsetof(SSniperCombatGroupSaveData, m_tLastTauntTime));
}

ZHMTypeInfo SMovementCoverSaveData::TypeInfo = ZHMTypeInfo("SMovementCoverSaveData", sizeof(SMovementCoverSaveData), alignof(SMovementCoverSaveData), SMovementCoverSaveData::WriteJson, SMovementCoverSaveData::WriteSimpleJson, SMovementCoverSaveData::FromSimpleJson, SMovementCoverSaveData::Serialize);

void SMovementCoverSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementCoverSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCoverPlane") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCoverPlane;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCoverAnimNodeID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCoverAnimNodeID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeftSideFacing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLeftSideFacing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCrouched") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCrouched;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_mPositionInCover") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_mPositionInCover, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementCoverSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementCoverSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCoverPlane") << ":";
	p_Stream << s_Object->m_rCoverPlane;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCoverAnimNodeID") << ":";
	p_Stream << s_Object->m_nCoverAnimNodeID;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLeftSideFacing") << ":";
	p_Stream << s_Object->m_bLeftSideFacing;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCrouched") << ":";
	p_Stream << s_Object->m_bCrouched;
	p_Stream << ",";

	p_Stream << JsonStr("m_mPositionInCover") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_mPositionInCover, p_Stream);

	p_Stream << "}";
}

void SMovementCoverSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementCoverSaveData s_Object;

	s_Object.m_rCoverPlane = static_cast<uint32>(int64_t(p_Document["m_rCoverPlane"]));

	s_Object.m_nCoverAnimNodeID = static_cast<uint32>(int64_t(p_Document["m_nCoverAnimNodeID"]));

	s_Object.m_bLeftSideFacing = bool(p_Document["m_bLeftSideFacing"]);

	s_Object.m_bCrouched = bool(p_Document["m_bCrouched"]);

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_mPositionInCover"], &s_Item);
		s_Object.m_mPositionInCover = s_Item;
	}

	*reinterpret_cast<SMovementCoverSaveData*>(p_Target) = s_Object;
}

void SMovementCoverSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMovementCoverSaveData*>(p_Object);

	SMatrix::Serialize(&s_Object->m_mPositionInCover, p_Serializer, p_OwnOffset + offsetof(SMovementCoverSaveData, m_mPositionInCover));
}

ZHMTypeInfo ZEntityID::TypeInfo = ZHMTypeInfo("ZEntityID", sizeof(ZEntityID), alignof(ZEntityID), ZEntityID::WriteJson, ZEntityID::WriteSimpleJson, ZEntityID::FromSimpleJson, ZEntityID::Serialize);

void ZEntityID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityID*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sStr") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sStr);
	p_Stream << "}";

	p_Stream << "}";
}

void ZEntityID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityID*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sStr") << ":";
	p_Stream << JsonStr(s_Object->m_sStr);

	p_Stream << "}";
}

void ZEntityID::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZEntityID s_Object;

	s_Object.m_sStr = std::string_view(p_Document["m_sStr"]);

	*reinterpret_cast<ZEntityID*>(p_Target) = s_Object;
}

void ZEntityID::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZEntityID*>(p_Object);

	ZString::Serialize(&s_Object->m_sStr, p_Serializer, p_OwnOffset + offsetof(ZEntityID, m_sStr));
}

ZHMTypeInfo ZGridFloatField::TypeInfo = ZHMTypeInfo("ZGridFloatField", sizeof(ZGridFloatField), alignof(ZGridFloatField), ZGridFloatField::WriteJson, ZGridFloatField::WriteSimpleJson, ZGridFloatField::FromSimpleJson, ZGridFloatField::Serialize);

void ZGridFloatField::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZGridFloatField*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_field") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<float32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_field.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_field[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_field.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void ZGridFloatField::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZGridFloatField*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_field") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_field.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_field[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_field.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZGridFloatField::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZGridFloatField s_Object;

	s_Object.m_fInitialValue = static_cast<float32>(double(p_Document["m_fInitialValue"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_field"])
	{
		s_Object.m_field.push_back(static_cast<float32>(double(s_Item0)));
	}

	*reinterpret_cast<ZGridFloatField*>(p_Target) = s_Object;
}

void ZGridFloatField::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZGridFloatField*>(p_Object);

	TArray<float32>::Serialize(&s_Object->m_field, p_Serializer, p_OwnOffset + offsetof(ZGridFloatField, m_field));
}

ZHMTypeInfo SCrowdActivitySaveData::TypeInfo = ZHMTypeInfo("SCrowdActivitySaveData", sizeof(SCrowdActivitySaveData), alignof(SCrowdActivitySaveData), SCrowdActivitySaveData::WriteJson, SCrowdActivitySaveData::WriteSimpleJson, SCrowdActivitySaveData::FromSimpleJson, SCrowdActivitySaveData::Serialize);

void SCrowdActivitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdActivitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eGait") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGait") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eGait) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_eGait))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxEnterDelaySec") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nMaxEnterDelaySec;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxLeaveDelaySec") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nMaxLeaveDelaySec;
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdActivitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdActivitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_eGait") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_eGait)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxEnterDelaySec") << ":";
	p_Stream << s_Object->m_nMaxEnterDelaySec;
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxLeaveDelaySec") << ":";
	p_Stream << s_Object->m_nMaxLeaveDelaySec;

	p_Stream << "}";
}

void SCrowdActivitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdActivitySaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_eGait = static_cast<EGait>(ZHMEnums::GetEnumValueByName("EGait", std::string_view(p_Document["m_eGait"])));

	s_Object.m_nMaxEnterDelaySec = static_cast<float32>(double(p_Document["m_nMaxEnterDelaySec"]));

	s_Object.m_nMaxLeaveDelaySec = static_cast<float32>(double(p_Document["m_nMaxLeaveDelaySec"]));

	*reinterpret_cast<SCrowdActivitySaveData*>(p_Target) = s_Object;
}

void SCrowdActivitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdActivitySaveData*>(p_Object);

}

ZHMTypeInfo SMathMultipliesSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_SVector4", sizeof(SMathMultipliesSaveData_SVector4), alignof(SMathMultipliesSaveData_SVector4), SMathMultipliesSaveData_SVector4::WriteJson, SMathMultipliesSaveData_SVector4::WriteSimpleJson, SMathMultipliesSaveData_SVector4::FromSimpleJson, SMathMultipliesSaveData_SVector4::Serialize);

void SMathMultipliesSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultipliesSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SMathMultiplyDivideSaveData_SVector4>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultiplyDivideSaveData_SVector4") << "," << JsonStr("$val") << ":";
		SMathMultiplyDivideSaveData_SVector4::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultipliesSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SMathMultiplyDivideSaveData_SVector4::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultipliesSaveData_SVector4 s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SMathMultiplyDivideSaveData_SVector4 s_ArrayItem0;
		SMathMultiplyDivideSaveData_SVector4::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SMathMultipliesSaveData_SVector4*>(p_Target) = s_Object;
}

void SMathMultipliesSaveData_SVector4::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathMultipliesSaveData_SVector4*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_SVector4, m_aEntities));
	TArray<SMathMultiplyDivideSaveData_SVector4>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_SVector4, m_aData));
}

ZHMTypeInfo S25DProjectionSettingsCurveEntry::TypeInfo = ZHMTypeInfo("S25DProjectionSettingsCurveEntry", sizeof(S25DProjectionSettingsCurveEntry), alignof(S25DProjectionSettingsCurveEntry), S25DProjectionSettingsCurveEntry::WriteJson, S25DProjectionSettingsCurveEntry::WriteSimpleJson, S25DProjectionSettingsCurveEntry::FromSimpleJson, S25DProjectionSettingsCurveEntry::Serialize);

void S25DProjectionSettingsCurveEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<S25DProjectionSettingsCurveEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fValue;
	p_Stream << "}";

	p_Stream << "}";
}

void S25DProjectionSettingsCurveEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<S25DProjectionSettingsCurveEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fDistance") << ":";
	p_Stream << s_Object->fDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fValue") << ":";
	p_Stream << s_Object->fValue;

	p_Stream << "}";
}

void S25DProjectionSettingsCurveEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	S25DProjectionSettingsCurveEntry s_Object;

	s_Object.fDistance = static_cast<float32>(double(p_Document["fDistance"]));

	s_Object.fValue = static_cast<float32>(double(p_Document["fValue"]));

	*reinterpret_cast<S25DProjectionSettingsCurveEntry*>(p_Target) = s_Object;
}

void S25DProjectionSettingsCurveEntry::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<S25DProjectionSettingsCurveEntry*>(p_Object);

}

ZHMTypeInfo IContractObjective_SCounterData::TypeInfo = ZHMTypeInfo("IContractObjective.SCounterData", sizeof(IContractObjective_SCounterData), alignof(IContractObjective_SCounterData), IContractObjective_SCounterData::WriteJson, IContractObjective_SCounterData::WriteSimpleJson, IContractObjective_SCounterData::FromSimpleJson, IContractObjective_SCounterData::Serialize);

void IContractObjective_SCounterData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IContractObjective_SCounterData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sHeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sHeader);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nDeactivate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nDeactivate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_dExtraData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->m_dExtraData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("IContractObjective.SCounterData.ECounterType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("IContractObjective.SCounterData.ECounterType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void IContractObjective_SCounterData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IContractObjective_SCounterData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sHeader") << ":";
	p_Stream << JsonStr(s_Object->m_sHeader);
	p_Stream << ",";

	p_Stream << JsonStr("m_nCount") << ":";
	p_Stream << s_Object->m_nCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_nDeactivate") << ":";
	p_Stream << s_Object->m_nDeactivate;
	p_Stream << ",";

	p_Stream << JsonStr("m_dExtraData") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->m_dExtraData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("IContractObjective.SCounterData.ECounterType", static_cast<int>(s_Object->m_eType)));

	p_Stream << "}";
}

void IContractObjective_SCounterData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IContractObjective_SCounterData s_Object;

	s_Object.m_sHeader = std::string_view(p_Document["m_sHeader"]);

	s_Object.m_nCount = static_cast<int32>(int64_t(p_Document["m_nCount"]));

	s_Object.m_nDeactivate = static_cast<int32>(int64_t(p_Document["m_nDeactivate"]));

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["m_dExtraData"], &s_Item);
		s_Object.m_dExtraData = s_Item;
	}

	s_Object.m_eType = static_cast<IContractObjective_SCounterData_ECounterType>(ZHMEnums::GetEnumValueByName("IContractObjective.SCounterData.ECounterType", std::string_view(p_Document["m_eType"])));

	*reinterpret_cast<IContractObjective_SCounterData*>(p_Target) = s_Object;
}

void IContractObjective_SCounterData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IContractObjective_SCounterData*>(p_Object);

	ZString::Serialize(&s_Object->m_sHeader, p_Serializer, p_OwnOffset + offsetof(IContractObjective_SCounterData, m_sHeader));
	ZDynamicObject::Serialize(&s_Object->m_dExtraData, p_Serializer, p_OwnOffset + offsetof(IContractObjective_SCounterData, m_dExtraData));
}

ZHMTypeInfo SMovementDragBodySaveData::TypeInfo = ZHMTypeInfo("SMovementDragBodySaveData", sizeof(SMovementDragBodySaveData), alignof(SMovementDragBodySaveData), SMovementDragBodySaveData::WriteJson, SMovementDragBodySaveData::WriteSimpleJson, SMovementDragBodySaveData::FromSimpleJson, SMovementDragBodySaveData::Serialize);

void SMovementDragBodySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementDragBodySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rDraggedActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDraggedActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGrabBoneID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGrabBoneID;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementDragBodySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementDragBodySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rDraggedActor") << ":";
	p_Stream << s_Object->m_rDraggedActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGrabBoneID") << ":";
	p_Stream << s_Object->m_nGrabBoneID;

	p_Stream << "}";
}

void SMovementDragBodySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementDragBodySaveData s_Object;

	s_Object.m_rDraggedActor = static_cast<uint32>(int64_t(p_Document["m_rDraggedActor"]));

	s_Object.m_nGrabBoneID = static_cast<uint32>(int64_t(p_Document["m_nGrabBoneID"]));

	*reinterpret_cast<SMovementDragBodySaveData*>(p_Target) = s_Object;
}

void SMovementDragBodySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMovementDragBodySaveData*>(p_Object);

}

ZHMTypeInfo SMathLerpSaveData_float32::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_float32", sizeof(SMathLerpSaveData_float32), alignof(SMathLerpSaveData_float32), SMathLerpSaveData_float32::WriteJson, SMathLerpSaveData_float32::WriteSimpleJson, SMathLerpSaveData_float32::FromSimpleJson, SMathLerpSaveData_float32::Serialize);

void SMathLerpSaveData_float32::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_float32*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_A;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_B;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_float32::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_float32*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	p_Stream << s_Object->m_A;
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << s_Object->m_B;
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

void SMathLerpSaveData_float32::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpSaveData_float32 s_Object;

	s_Object.m_A = static_cast<float32>(double(p_Document["m_A"]));

	s_Object.m_B = static_cast<float32>(double(p_Document["m_B"]));

	s_Object.m_fT = static_cast<float32>(double(p_Document["m_fT"]));

	*reinterpret_cast<SMathLerpSaveData_float32*>(p_Target) = s_Object;
}

void SMathLerpSaveData_float32::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_float32*>(p_Object);

}

ZHMTypeInfo SManHuntServiceSaveData::TypeInfo = ZHMTypeInfo("SManHuntServiceSaveData", sizeof(SManHuntServiceSaveData), alignof(SManHuntServiceSaveData), SManHuntServiceSaveData::WriteJson, SManHuntServiceSaveData::WriteSimpleJson, SManHuntServiceSaveData::FromSimpleJson, SManHuntServiceSaveData::Serialize);

void SManHuntServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SManHuntServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rGuardNodes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint16>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_rGuardNodes.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_rGuardNodes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_rGuardNodes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInitialNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rInitialNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fGuardSightRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGuardSightRange;
	p_Stream << "}";

	p_Stream << "}";
}

void SManHuntServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SManHuntServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rGuardNodes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_rGuardNodes.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_rGuardNodes[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_rGuardNodes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rInitialNode") << ":";
	p_Stream << s_Object->m_rInitialNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_fGuardSightRange") << ":";
	p_Stream << s_Object->m_fGuardSightRange;

	p_Stream << "}";
}

void SManHuntServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SManHuntServiceSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_rGuardNodes"])
	{
		s_Object.m_rGuardNodes.push_back(static_cast<uint16>(int64_t(s_Item0)));
	}

	s_Object.m_rInitialNode = static_cast<uint16>(int64_t(p_Document["m_rInitialNode"]));

	s_Object.m_fGuardSightRange = static_cast<float32>(double(p_Document["m_fGuardSightRange"]));

	*reinterpret_cast<SManHuntServiceSaveData*>(p_Target) = s_Object;
}

void SManHuntServiceSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SManHuntServiceSaveData*>(p_Object);

	TArray<uint16>::Serialize(&s_Object->m_rGuardNodes, p_Serializer, p_OwnOffset + offsetof(SManHuntServiceSaveData, m_rGuardNodes));
}

ZHMTypeInfo ZUIMapLegendDataProvider_SLegendTracker::TypeInfo = ZHMTypeInfo("ZUIMapLegendDataProvider.SLegendTracker", sizeof(ZUIMapLegendDataProvider_SLegendTracker), alignof(ZUIMapLegendDataProvider_SLegendTracker), ZUIMapLegendDataProvider_SLegendTracker::WriteJson, ZUIMapLegendDataProvider_SLegendTracker::WriteSimpleJson, ZUIMapLegendDataProvider_SLegendTracker::FromSimpleJson, ZUIMapLegendDataProvider_SLegendTracker::Serialize);

void ZUIMapLegendDataProvider_SLegendTracker::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZUIMapLegendDataProvider_SLegendTracker*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("ControlName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->ControlName);
	p_Stream << "}";

	p_Stream << "}";
}

void ZUIMapLegendDataProvider_SLegendTracker::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZUIMapLegendDataProvider_SLegendTracker*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("ControlName") << ":";
	p_Stream << JsonStr(s_Object->ControlName);

	p_Stream << "}";
}

void ZUIMapLegendDataProvider_SLegendTracker::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZUIMapLegendDataProvider_SLegendTracker s_Object;

	s_Object.ControlName = std::string_view(p_Document["ControlName"]);

	*reinterpret_cast<ZUIMapLegendDataProvider_SLegendTracker*>(p_Target) = s_Object;
}

void ZUIMapLegendDataProvider_SLegendTracker::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZUIMapLegendDataProvider_SLegendTracker*>(p_Object);

	ZString::Serialize(&s_Object->ControlName, p_Serializer, p_OwnOffset + offsetof(ZUIMapLegendDataProvider_SLegendTracker, ControlName));
}

ZHMTypeInfo SFootIKEventData::TypeInfo = ZHMTypeInfo("SFootIKEventData", sizeof(SFootIKEventData), alignof(SFootIKEventData), SFootIKEventData::WriteJson, SFootIKEventData::WriteSimpleJson, SFootIKEventData::FromSimpleJson, SFootIKEventData::Serialize);

void SFootIKEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFootIKEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Foot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFootIKEventData.EFoot") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_Foot) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("SFootIKEventData.EFoot", static_cast<int>(s_Object->m_Foot))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SFootIKEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFootIKEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Foot") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("SFootIKEventData.EFoot", static_cast<int>(s_Object->m_Foot)));

	p_Stream << "}";
}

void SFootIKEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFootIKEventData s_Object;

	s_Object.m_Foot = static_cast<SFootIKEventData_EFoot>(ZHMEnums::GetEnumValueByName("SFootIKEventData.EFoot", std::string_view(p_Document["m_Foot"])));

	*reinterpret_cast<SFootIKEventData*>(p_Target) = s_Object;
}

void SFootIKEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SFootIKEventData*>(p_Object);

}

ZHMTypeInfo SEventChannelSaveData::TypeInfo = ZHMTypeInfo("SEventChannelSaveData", sizeof(SEventChannelSaveData), alignof(SEventChannelSaveData), SEventChannelSaveData::WriteJson, SEventChannelSaveData::WriteSimpleJson, SEventChannelSaveData::FromSimpleJson, SEventChannelSaveData::Serialize);

void SEventChannelSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEventChannelSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SEventChannelSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEventChannelSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SEventChannelSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEventChannelSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SEventChannelSaveData*>(p_Target) = s_Object;
}

void SEventChannelSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEventChannelSaveData*>(p_Object);

}

ZHMTypeInfo SCCEffectSet::TypeInfo = ZHMTypeInfo("SCCEffectSet", sizeof(SCCEffectSet), alignof(SCCEffectSet), SCCEffectSet::WriteJson, SCCEffectSet::WriteSimpleJson, SCCEffectSet::FromSimpleJson, SCCEffectSet::Serialize);

void SCCEffectSet::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCCEffectSet*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eDecalEffect") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECCDecalEffect") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eDecalEffect) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECCDecalEffect", static_cast<int>(s_Object->m_eDecalEffect))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmitterEffect") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECCEmitterEffect") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eEmitterEffect) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECCEmitterEffect", static_cast<int>(s_Object->m_eEmitterEffect))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SCCEffectSet::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCCEffectSet*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eDecalEffect") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECCDecalEffect", static_cast<int>(s_Object->m_eDecalEffect)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eEmitterEffect") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECCEmitterEffect", static_cast<int>(s_Object->m_eEmitterEffect)));

	p_Stream << "}";
}

void SCCEffectSet::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCCEffectSet s_Object;

	s_Object.m_eDecalEffect = static_cast<ECCDecalEffect>(ZHMEnums::GetEnumValueByName("ECCDecalEffect", std::string_view(p_Document["m_eDecalEffect"])));

	s_Object.m_eEmitterEffect = static_cast<ECCEmitterEffect>(ZHMEnums::GetEnumValueByName("ECCEmitterEffect", std::string_view(p_Document["m_eEmitterEffect"])));

	*reinterpret_cast<SCCEffectSet*>(p_Target) = s_Object;
}

void SCCEffectSet::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCCEffectSet*>(p_Object);

}

ZHMTypeInfo SHeroStandInSaveState::TypeInfo = ZHMTypeInfo("SHeroStandInSaveState", sizeof(SHeroStandInSaveState), alignof(SHeroStandInSaveState), SHeroStandInSaveState::WriteJson, SHeroStandInSaveState::WriteSimpleJson, SHeroStandInSaveState::FromSimpleJson, SHeroStandInSaveState::Serialize);

void SHeroStandInSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroStandInSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroStandInSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroStandInSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rHero") << ":";
	p_Stream << s_Object->m_rHero;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;

	p_Stream << "}";
}

void SHeroStandInSaveState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroStandInSaveState s_Object;

	s_Object.m_rHero = static_cast<uint32>(int64_t(p_Document["m_rHero"]));

	s_Object.m_rCurrentSpeakEntity = static_cast<uint32>(int64_t(p_Document["m_rCurrentSpeakEntity"]));

	s_Object.m_bPaused = bool(p_Document["m_bPaused"]);

	*reinterpret_cast<SHeroStandInSaveState*>(p_Target) = s_Object;
}

void SHeroStandInSaveState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHeroStandInSaveState*>(p_Object);

}

ZHMTypeInfo AI_SSoundEventModifierState::TypeInfo = ZHMTypeInfo("AI.SSoundEventModifierState", sizeof(AI_SSoundEventModifierState), alignof(AI_SSoundEventModifierState), AI_SSoundEventModifierState::WriteJson, AI_SSoundEventModifierState::WriteSimpleJson, AI_SSoundEventModifierState::FromSimpleJson, AI_SSoundEventModifierState::Serialize);

void AI_SSoundEventModifierState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_SSoundEventModifierState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fRangeModifier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRangeModifier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLoudnessModifier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLoudnessModifier;
	p_Stream << "}";

	p_Stream << "}";
}

void AI_SSoundEventModifierState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_SSoundEventModifierState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fRangeModifier") << ":";
	p_Stream << s_Object->m_fRangeModifier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLoudnessModifier") << ":";
	p_Stream << s_Object->m_fLoudnessModifier;

	p_Stream << "}";
}

void AI_SSoundEventModifierState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AI_SSoundEventModifierState s_Object;

	s_Object.m_fRangeModifier = static_cast<float32>(double(p_Document["m_fRangeModifier"]));

	s_Object.m_fLoudnessModifier = static_cast<float32>(double(p_Document["m_fLoudnessModifier"]));

	*reinterpret_cast<AI_SSoundEventModifierState*>(p_Target) = s_Object;
}

void AI_SSoundEventModifierState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AI_SSoundEventModifierState*>(p_Object);

}

ZHMTypeInfo SActionRadialArcDisplayInfo::TypeInfo = ZHMTypeInfo("SActionRadialArcDisplayInfo", sizeof(SActionRadialArcDisplayInfo), alignof(SActionRadialArcDisplayInfo), SActionRadialArcDisplayInfo::WriteJson, SActionRadialArcDisplayInfo::WriteSimpleJson, SActionRadialArcDisplayInfo::FromSimpleJson, SActionRadialArcDisplayInfo::Serialize);

void SActionRadialArcDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActionRadialArcDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("hidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->hidden;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("locked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->locked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->active;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("illegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->illegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->icon;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("label") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << "}";

	p_Stream << "}";
}

void SActionRadialArcDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActionRadialArcDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("hidden") << ":";
	p_Stream << s_Object->hidden;
	p_Stream << ",";

	p_Stream << JsonStr("locked") << ":";
	p_Stream << s_Object->locked;
	p_Stream << ",";

	p_Stream << JsonStr("active") << ":";
	p_Stream << s_Object->active;
	p_Stream << ",";

	p_Stream << JsonStr("illegal") << ":";
	p_Stream << s_Object->illegal;
	p_Stream << ",";

	p_Stream << JsonStr("icon") << ":";
	p_Stream << s_Object->icon;
	p_Stream << ",";

	p_Stream << JsonStr("label") << ":";
	p_Stream << JsonStr(s_Object->label);

	p_Stream << "}";
}

void SActionRadialArcDisplayInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActionRadialArcDisplayInfo s_Object;

	s_Object.hidden = bool(p_Document["hidden"]);

	s_Object.locked = bool(p_Document["locked"]);

	s_Object.active = bool(p_Document["active"]);

	s_Object.illegal = bool(p_Document["illegal"]);

	s_Object.icon = static_cast<int32>(int64_t(p_Document["icon"]));

	s_Object.label = std::string_view(p_Document["label"]);

	*reinterpret_cast<SActionRadialArcDisplayInfo*>(p_Target) = s_Object;
}

void SActionRadialArcDisplayInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActionRadialArcDisplayInfo*>(p_Object);

	ZString::Serialize(&s_Object->label, p_Serializer, p_OwnOffset + offsetof(SActionRadialArcDisplayInfo, label));
}

ZHMTypeInfo SBodybagBoneSaveData::TypeInfo = ZHMTypeInfo("SBodybagBoneSaveData", sizeof(SBodybagBoneSaveData), alignof(SBodybagBoneSaveData), SBodybagBoneSaveData::WriteJson, SBodybagBoneSaveData::WriteSimpleJson, SBodybagBoneSaveData::FromSimpleJson, SBodybagBoneSaveData::Serialize);

void SBodybagBoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBodybagBoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTranslation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SBodybagBoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBodybagBoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTranslation, p_Stream);

	p_Stream << "}";
}

void SBodybagBoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBodybagBoneSaveData s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mQuaterion"], &s_Item);
		s_Object.mQuaterion = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mTranslation"], &s_Item);
		s_Object.mTranslation = s_Item;
	}

	*reinterpret_cast<SBodybagBoneSaveData*>(p_Target) = s_Object;
}

void SBodybagBoneSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBodybagBoneSaveData*>(p_Object);

	SVector4::Serialize(&s_Object->mQuaterion, p_Serializer, p_OwnOffset + offsetof(SBodybagBoneSaveData, mQuaterion));
	SVector4::Serialize(&s_Object->mTranslation, p_Serializer, p_OwnOffset + offsetof(SBodybagBoneSaveData, mTranslation));
}

ZHMTypeInfo SAIPerceptibleEntitySaveData::TypeInfo = ZHMTypeInfo("SAIPerceptibleEntitySaveData", sizeof(SAIPerceptibleEntitySaveData), alignof(SAIPerceptibleEntitySaveData), SAIPerceptibleEntitySaveData::WriteJson, SAIPerceptibleEntitySaveData::WriteSimpleJson, SAIPerceptibleEntitySaveData::FromSimpleJson, SAIPerceptibleEntitySaveData::Serialize);

void SAIPerceptibleEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAIPerceptibleEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bPerceptibleEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPerceptibleEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SAIPerceptibleEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAIPerceptibleEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bPerceptibleEnabled") << ":";
	p_Stream << s_Object->m_bPerceptibleEnabled;

	p_Stream << "}";
}

void SAIPerceptibleEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAIPerceptibleEntitySaveData s_Object;

	s_Object.m_bPerceptibleEnabled = bool(p_Document["m_bPerceptibleEnabled"]);

	*reinterpret_cast<SAIPerceptibleEntitySaveData*>(p_Target) = s_Object;
}

void SAIPerceptibleEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAIPerceptibleEntitySaveData*>(p_Object);

}

ZHMTypeInfo SDecalSpawnSaveData::TypeInfo = ZHMTypeInfo("SDecalSpawnSaveData", sizeof(SDecalSpawnSaveData), alignof(SDecalSpawnSaveData), SDecalSpawnSaveData::WriteJson, SDecalSpawnSaveData::WriteSimpleJson, SDecalSpawnSaveData::FromSimpleJson, SDecalSpawnSaveData::Serialize);

void SDecalSpawnSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDecalSpawnSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bWasSpawned") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasSpawned;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vNormal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vNormal, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vDirection, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vSize, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Color") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_Color, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vUVOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vUVOffset, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vTiling") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_vTiling, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBlockingSpatialEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBlockingSpatialEntity;
	p_Stream << "}";

	p_Stream << "}";
}

void SDecalSpawnSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDecalSpawnSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bWasSpawned") << ":";
	p_Stream << s_Object->m_bWasSpawned;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vNormal") << ":";
	float4::WriteSimpleJson(&s_Object->m_vNormal, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vDirection") << ":";
	float4::WriteSimpleJson(&s_Object->m_vDirection, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vSize") << ":";
	float4::WriteSimpleJson(&s_Object->m_vSize, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Color") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_Color, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fAlpha") << ":";
	p_Stream << s_Object->m_fAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("m_fAngle") << ":";
	p_Stream << s_Object->m_fAngle;
	p_Stream << ",";

	p_Stream << JsonStr("m_vUVOffset") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vUVOffset, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vTiling") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_vTiling, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rBlockingSpatialEntity") << ":";
	p_Stream << s_Object->m_rBlockingSpatialEntity;

	p_Stream << "}";
}

void SDecalSpawnSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDecalSpawnSaveData s_Object;

	s_Object.m_bWasSpawned = bool(p_Document["m_bWasSpawned"]);

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vNormal"], &s_Item);
		s_Object.m_vNormal = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vDirection"], &s_Item);
		s_Object.m_vDirection = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vSize"], &s_Item);
		s_Object.m_vSize = s_Item;
	}

	{
		SColorRGB s_Item;
		SColorRGB::FromSimpleJson(p_Document["m_Color"], &s_Item);
		s_Object.m_Color = s_Item;
	}

	s_Object.m_fAlpha = static_cast<float32>(double(p_Document["m_fAlpha"]));

	s_Object.m_fAngle = static_cast<float32>(double(p_Document["m_fAngle"]));

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vUVOffset"], &s_Item);
		s_Object.m_vUVOffset = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_vTiling"], &s_Item);
		s_Object.m_vTiling = s_Item;
	}

	s_Object.m_rBlockingSpatialEntity = static_cast<uint32>(int64_t(p_Document["m_rBlockingSpatialEntity"]));

	*reinterpret_cast<SDecalSpawnSaveData*>(p_Target) = s_Object;
}

void SDecalSpawnSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDecalSpawnSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vPosition, p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_vPosition));
	float4::Serialize(&s_Object->m_vNormal, p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_vNormal));
	float4::Serialize(&s_Object->m_vDirection, p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_vDirection));
	float4::Serialize(&s_Object->m_vSize, p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_vSize));
	SColorRGB::Serialize(&s_Object->m_Color, p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_Color));
	SVector2::Serialize(&s_Object->m_vUVOffset, p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_vUVOffset));
	SVector2::Serialize(&s_Object->m_vTiling, p_Serializer, p_OwnOffset + offsetof(SDecalSpawnSaveData, m_vTiling));
}

ZHMTypeInfo ZFormationMoveOrder_SFormationMoveOrderSaveData::TypeInfo = ZHMTypeInfo("ZFormationMoveOrder.SFormationMoveOrderSaveData", sizeof(ZFormationMoveOrder_SFormationMoveOrderSaveData), alignof(ZFormationMoveOrder_SFormationMoveOrderSaveData), ZFormationMoveOrder_SFormationMoveOrderSaveData::WriteJson, ZFormationMoveOrder_SFormationMoveOrderSaveData::WriteSimpleJson, ZFormationMoveOrder_SFormationMoveOrderSaveData::FromSimpleJson, ZFormationMoveOrder_SFormationMoveOrderSaveData::Serialize);

void ZFormationMoveOrder_SFormationMoveOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZFormationMoveOrder_SFormationMoveOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vStopDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vStopDirection, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nObstacleBlockageFlags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nObstacleBlockageFlags;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eMoveSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EMoveSpeed") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eMoveSpeed) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EMoveSpeed", static_cast<int>(s_Object->m_eMoveSpeed))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZFormationMoveOrder_SFormationMoveOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZFormationMoveOrder_SFormationMoveOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vStopDirection") << ":";
	float4::WriteSimpleJson(&s_Object->m_vStopDirection, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nObstacleBlockageFlags") << ":";
	p_Stream << s_Object->m_nObstacleBlockageFlags;
	p_Stream << ",";

	p_Stream << JsonStr("m_eMoveSpeed") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EMoveSpeed", static_cast<int>(s_Object->m_eMoveSpeed)));

	p_Stream << "}";
}

void ZFormationMoveOrder_SFormationMoveOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZFormationMoveOrder_SFormationMoveOrderSaveData s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vStopDirection"], &s_Item);
		s_Object.m_vStopDirection = s_Item;
	}

	s_Object.m_nObstacleBlockageFlags = static_cast<uint32>(int64_t(p_Document["m_nObstacleBlockageFlags"]));

	s_Object.m_eMoveSpeed = static_cast<EMoveSpeed>(ZHMEnums::GetEnumValueByName("EMoveSpeed", std::string_view(p_Document["m_eMoveSpeed"])));

	*reinterpret_cast<ZFormationMoveOrder_SFormationMoveOrderSaveData*>(p_Target) = s_Object;
}

void ZFormationMoveOrder_SFormationMoveOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZFormationMoveOrder_SFormationMoveOrderSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vStopDirection, p_Serializer, p_OwnOffset + offsetof(ZFormationMoveOrder_SFormationMoveOrderSaveData, m_vStopDirection));
}

ZHMTypeInfo SClothBundleSaveData::TypeInfo = ZHMTypeInfo("SClothBundleSaveData", sizeof(SClothBundleSaveData), alignof(SClothBundleSaveData), SClothBundleSaveData::WriteJson, SClothBundleSaveData::WriteSimpleJson, SClothBundleSaveData::FromSimpleJson, SClothBundleSaveData::Serialize);

void SClothBundleSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SClothBundleSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vQuaternion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OutfitID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_OutfitID, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitVariation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOutfitVariation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitCharset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOutfitCharset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bSpawnedByHitman") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bSpawnedByHitman;
	p_Stream << "}";

	p_Stream << "}";
}

void SClothBundleSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SClothBundleSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vQuaternion") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vQuaternion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_OutfitID") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_OutfitID, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitVariation") << ":";
	p_Stream << s_Object->m_nOutfitVariation;
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitCharset") << ":";
	p_Stream << s_Object->m_nOutfitCharset;
	p_Stream << ",";

	p_Stream << JsonStr("bSpawnedByHitman") << ":";
	p_Stream << s_Object->bSpawnedByHitman;

	p_Stream << "}";
}

void SClothBundleSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SClothBundleSaveData s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vQuaternion"], &s_Item);
		s_Object.m_vQuaternion = s_Item;
	}

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_OutfitID"], &s_Item);
		s_Object.m_OutfitID = s_Item;
	}

	s_Object.m_nOutfitVariation = static_cast<int32>(int64_t(p_Document["m_nOutfitVariation"]));

	s_Object.m_nOutfitCharset = static_cast<int32>(int64_t(p_Document["m_nOutfitCharset"]));

	s_Object.bSpawnedByHitman = bool(p_Document["bSpawnedByHitman"]);

	*reinterpret_cast<SClothBundleSaveData*>(p_Target) = s_Object;
}

void SClothBundleSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SClothBundleSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vPosition, p_Serializer, p_OwnOffset + offsetof(SClothBundleSaveData, m_vPosition));
	SVector4::Serialize(&s_Object->m_vQuaternion, p_Serializer, p_OwnOffset + offsetof(SClothBundleSaveData, m_vQuaternion));
	ZRepositoryID::Serialize(&s_Object->m_OutfitID, p_Serializer, p_OwnOffset + offsetof(SClothBundleSaveData, m_OutfitID));
}

ZHMTypeInfo SBodyPartDamageMultipliers::TypeInfo = ZHMTypeInfo("SBodyPartDamageMultipliers", sizeof(SBodyPartDamageMultipliers), alignof(SBodyPartDamageMultipliers), SBodyPartDamageMultipliers::WriteJson, SBodyPartDamageMultipliers::WriteSimpleJson, SBodyPartDamageMultipliers::FromSimpleJson, SBodyPartDamageMultipliers::Serialize);

void SBodyPartDamageMultipliers::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBodyPartDamageMultipliers*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fHeadDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHeadDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFaceDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFaceDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fArmDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fArmDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLArmDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLArmDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRArmDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRArmDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHandDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHandDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLHandDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLHandDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRHandDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRHandDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLegDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLegDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLLegDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLLegDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRLegDamageScalar") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRLegDamageScalar;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTorsoDamageMultiplier") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTorsoDamageMultiplier;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bApplyLeftRightScalars") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bApplyLeftRightScalars;
	p_Stream << "}";

	p_Stream << "}";
}

void SBodyPartDamageMultipliers::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBodyPartDamageMultipliers*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fHeadDamageMultiplier") << ":";
	p_Stream << s_Object->m_fHeadDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFaceDamageMultiplier") << ":";
	p_Stream << s_Object->m_fFaceDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fArmDamageMultiplier") << ":";
	p_Stream << s_Object->m_fArmDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLArmDamageScalar") << ":";
	p_Stream << s_Object->m_fLArmDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRArmDamageScalar") << ":";
	p_Stream << s_Object->m_fRArmDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHandDamageMultiplier") << ":";
	p_Stream << s_Object->m_fHandDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLHandDamageScalar") << ":";
	p_Stream << s_Object->m_fLHandDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRHandDamageScalar") << ":";
	p_Stream << s_Object->m_fRHandDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLegDamageMultiplier") << ":";
	p_Stream << s_Object->m_fLegDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLLegDamageScalar") << ":";
	p_Stream << s_Object->m_fLLegDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRLegDamageScalar") << ":";
	p_Stream << s_Object->m_fRLegDamageScalar;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTorsoDamageMultiplier") << ":";
	p_Stream << s_Object->m_fTorsoDamageMultiplier;
	p_Stream << ",";

	p_Stream << JsonStr("m_bApplyLeftRightScalars") << ":";
	p_Stream << s_Object->m_bApplyLeftRightScalars;

	p_Stream << "}";
}

void SBodyPartDamageMultipliers::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBodyPartDamageMultipliers s_Object;

	s_Object.m_fHeadDamageMultiplier = static_cast<float32>(double(p_Document["m_fHeadDamageMultiplier"]));

	s_Object.m_fFaceDamageMultiplier = static_cast<float32>(double(p_Document["m_fFaceDamageMultiplier"]));

	s_Object.m_fArmDamageMultiplier = static_cast<float32>(double(p_Document["m_fArmDamageMultiplier"]));

	s_Object.m_fLArmDamageScalar = static_cast<float32>(double(p_Document["m_fLArmDamageScalar"]));

	s_Object.m_fRArmDamageScalar = static_cast<float32>(double(p_Document["m_fRArmDamageScalar"]));

	s_Object.m_fHandDamageMultiplier = static_cast<float32>(double(p_Document["m_fHandDamageMultiplier"]));

	s_Object.m_fLHandDamageScalar = static_cast<float32>(double(p_Document["m_fLHandDamageScalar"]));

	s_Object.m_fRHandDamageScalar = static_cast<float32>(double(p_Document["m_fRHandDamageScalar"]));

	s_Object.m_fLegDamageMultiplier = static_cast<float32>(double(p_Document["m_fLegDamageMultiplier"]));

	s_Object.m_fLLegDamageScalar = static_cast<float32>(double(p_Document["m_fLLegDamageScalar"]));

	s_Object.m_fRLegDamageScalar = static_cast<float32>(double(p_Document["m_fRLegDamageScalar"]));

	s_Object.m_fTorsoDamageMultiplier = static_cast<float32>(double(p_Document["m_fTorsoDamageMultiplier"]));

	s_Object.m_bApplyLeftRightScalars = bool(p_Document["m_bApplyLeftRightScalars"]);

	*reinterpret_cast<SBodyPartDamageMultipliers*>(p_Target) = s_Object;
}

void SBodyPartDamageMultipliers::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBodyPartDamageMultipliers*>(p_Object);

}

ZHMTypeInfo SColorRGBSaveData::TypeInfo = ZHMTypeInfo("SColorRGBSaveData", sizeof(SColorRGBSaveData), alignof(SColorRGBSaveData), SColorRGBSaveData::WriteJson, SColorRGBSaveData::WriteSimpleJson, SColorRGBSaveData::FromSimpleJson, SColorRGBSaveData::Serialize);

void SColorRGBSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SColorRGBSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SColorRGB>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
		SColorRGB::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SColorRGBSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SColorRGBSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SColorRGB::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SColorRGBSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SColorRGBSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SColorRGB s_ArrayItem0;
		SColorRGB::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SColorRGBSaveData*>(p_Target) = s_Object;
}

void SColorRGBSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SColorRGBSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SColorRGBSaveData, m_aEntities));
	TArray<SColorRGB>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SColorRGBSaveData, m_aData));
}

ZHMTypeInfo SStateControllerSaveDataStruct::TypeInfo = ZHMTypeInfo("SStateControllerSaveDataStruct", sizeof(SStateControllerSaveDataStruct), alignof(SStateControllerSaveDataStruct), SStateControllerSaveDataStruct::WriteJson, SStateControllerSaveDataStruct::WriteSimpleJson, SStateControllerSaveDataStruct::FromSimpleJson, SStateControllerSaveDataStruct::Serialize);

void SStateControllerSaveDataStruct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SStateControllerSaveDataStruct*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SStateControllerSaveDataStruct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SStateControllerSaveDataStruct*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SStateControllerSaveDataStruct::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SStateControllerSaveDataStruct s_Object;

	s_Object.m_nIndex = static_cast<int32>(int64_t(p_Document["m_nIndex"]));

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SStateControllerSaveDataStruct*>(p_Target) = s_Object;
}

void SStateControllerSaveDataStruct::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SStateControllerSaveDataStruct*>(p_Object);

}

ZHMTypeInfo SStateControllerSaveData::TypeInfo = ZHMTypeInfo("SStateControllerSaveData", sizeof(SStateControllerSaveData), alignof(SStateControllerSaveData), SStateControllerSaveData::WriteJson, SStateControllerSaveData::WriteSimpleJson, SStateControllerSaveData::FromSimpleJson, SStateControllerSaveData::Serialize);

void SStateControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SStateControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SStateControllerSaveDataStruct>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SStateControllerSaveDataStruct") << "," << JsonStr("$val") << ":";
		SStateControllerSaveDataStruct::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SStateControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SStateControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SStateControllerSaveDataStruct::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SStateControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SStateControllerSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SStateControllerSaveDataStruct s_ArrayItem0;
		SStateControllerSaveDataStruct::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SStateControllerSaveData*>(p_Target) = s_Object;
}

void SStateControllerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SStateControllerSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SStateControllerSaveData, m_aEntities));
	TArray<SStateControllerSaveDataStruct>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SStateControllerSaveData, m_aData));
}

ZHMTypeInfo SValueSaveData::TypeInfo = ZHMTypeInfo("SValueSaveData", sizeof(SValueSaveData), alignof(SValueSaveData), SValueSaveData::WriteJson, SValueSaveData::WriteSimpleJson, SValueSaveData::FromSimpleJson, SValueSaveData::Serialize);

void SValueSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SValueSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_ValueBool") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SValueBoolsSaveData") << "," << JsonStr("$val") << ":";
	SValueBoolsSaveData::WriteJson(&s_Object->m_ValueBool, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueFloat") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SValueFloatSaveData") << "," << JsonStr("$val") << ":";
	SValueFloatSaveData::WriteJson(&s_Object->m_ValueFloat, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueInt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SValueIntSaveData") << "," << JsonStr("$val") << ":";
	SValueIntSaveData::WriteJson(&s_Object->m_ValueInt, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_StateController") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SStateControllerSaveData") << "," << JsonStr("$val") << ":";
	SStateControllerSaveData::WriteJson(&s_Object->m_StateController, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueColorRGB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGBSaveData") << "," << JsonStr("$val") << ":";
	SColorRGBSaveData::WriteJson(&s_Object->m_ValueColorRGB, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SValueSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SValueSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_ValueBool") << ":";
	SValueBoolsSaveData::WriteSimpleJson(&s_Object->m_ValueBool, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueFloat") << ":";
	SValueFloatSaveData::WriteSimpleJson(&s_Object->m_ValueFloat, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueInt") << ":";
	SValueIntSaveData::WriteSimpleJson(&s_Object->m_ValueInt, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_StateController") << ":";
	SStateControllerSaveData::WriteSimpleJson(&s_Object->m_StateController, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ValueColorRGB") << ":";
	SColorRGBSaveData::WriteSimpleJson(&s_Object->m_ValueColorRGB, p_Stream);

	p_Stream << "}";
}

void SValueSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SValueSaveData s_Object;

	{
		SValueBoolsSaveData s_Item;
		SValueBoolsSaveData::FromSimpleJson(p_Document["m_ValueBool"], &s_Item);
		s_Object.m_ValueBool = s_Item;
	}

	{
		SValueFloatSaveData s_Item;
		SValueFloatSaveData::FromSimpleJson(p_Document["m_ValueFloat"], &s_Item);
		s_Object.m_ValueFloat = s_Item;
	}

	{
		SValueIntSaveData s_Item;
		SValueIntSaveData::FromSimpleJson(p_Document["m_ValueInt"], &s_Item);
		s_Object.m_ValueInt = s_Item;
	}

	{
		SStateControllerSaveData s_Item;
		SStateControllerSaveData::FromSimpleJson(p_Document["m_StateController"], &s_Item);
		s_Object.m_StateController = s_Item;
	}

	{
		SColorRGBSaveData s_Item;
		SColorRGBSaveData::FromSimpleJson(p_Document["m_ValueColorRGB"], &s_Item);
		s_Object.m_ValueColorRGB = s_Item;
	}

	*reinterpret_cast<SValueSaveData*>(p_Target) = s_Object;
}

void SValueSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SValueSaveData*>(p_Object);

	SValueBoolsSaveData::Serialize(&s_Object->m_ValueBool, p_Serializer, p_OwnOffset + offsetof(SValueSaveData, m_ValueBool));
	SValueFloatSaveData::Serialize(&s_Object->m_ValueFloat, p_Serializer, p_OwnOffset + offsetof(SValueSaveData, m_ValueFloat));
	SValueIntSaveData::Serialize(&s_Object->m_ValueInt, p_Serializer, p_OwnOffset + offsetof(SValueSaveData, m_ValueInt));
	SStateControllerSaveData::Serialize(&s_Object->m_StateController, p_Serializer, p_OwnOffset + offsetof(SValueSaveData, m_StateController));
	SColorRGBSaveData::Serialize(&s_Object->m_ValueColorRGB, p_Serializer, p_OwnOffset + offsetof(SValueSaveData, m_ValueColorRGB));
}

ZHMTypeInfo ZSharedSensorDef_SVisibilitySetting::TypeInfo = ZHMTypeInfo("ZSharedSensorDef.SVisibilitySetting", sizeof(ZSharedSensorDef_SVisibilitySetting), alignof(ZSharedSensorDef_SVisibilitySetting), ZSharedSensorDef_SVisibilitySetting::WriteJson, ZSharedSensorDef_SVisibilitySetting::WriteSimpleJson, ZSharedSensorDef_SVisibilitySetting::FromSimpleJson, ZSharedSensorDef_SVisibilitySetting::Serialize);

void ZSharedSensorDef_SVisibilitySetting::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSharedSensorDef_SVisibilitySetting*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eSensitivity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorPerceptionSensitivity") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eSensitivity) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorPerceptionSensitivity", static_cast<int>(s_Object->m_eSensitivity))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fCloseRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fCloseRange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fPeripheralAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPeripheralAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fPeripheralAngleWhileMoving") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPeripheralAngleWhileMoving;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fPeripheralHigh") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPeripheralHigh;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fPeripheralLow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPeripheralLow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFocusConeWidthAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFocusConeWidthAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFocusConeHeightAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFocusConeHeightAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFocusConeRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFocusConeRange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFocusConeBackWidth") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFocusConeBackWidth;
	p_Stream << "}";

	p_Stream << "}";
}

void ZSharedSensorDef_SVisibilitySetting::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSharedSensorDef_SVisibilitySetting*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eSensitivity") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorPerceptionSensitivity", static_cast<int>(s_Object->m_eSensitivity)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fCloseRange") << ":";
	p_Stream << s_Object->m_fCloseRange;
	p_Stream << ",";

	p_Stream << JsonStr("m_fPeripheralAngle") << ":";
	p_Stream << s_Object->m_fPeripheralAngle;
	p_Stream << ",";

	p_Stream << JsonStr("m_fPeripheralAngleWhileMoving") << ":";
	p_Stream << s_Object->m_fPeripheralAngleWhileMoving;
	p_Stream << ",";

	p_Stream << JsonStr("m_fPeripheralHigh") << ":";
	p_Stream << s_Object->m_fPeripheralHigh;
	p_Stream << ",";

	p_Stream << JsonStr("m_fPeripheralLow") << ":";
	p_Stream << s_Object->m_fPeripheralLow;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFocusConeWidthAngle") << ":";
	p_Stream << s_Object->m_fFocusConeWidthAngle;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFocusConeHeightAngle") << ":";
	p_Stream << s_Object->m_fFocusConeHeightAngle;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFocusConeRange") << ":";
	p_Stream << s_Object->m_fFocusConeRange;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFocusConeBackWidth") << ":";
	p_Stream << s_Object->m_fFocusConeBackWidth;

	p_Stream << "}";
}

void ZSharedSensorDef_SVisibilitySetting::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSharedSensorDef_SVisibilitySetting s_Object;

	s_Object.m_eSensitivity = static_cast<EActorPerceptionSensitivity>(ZHMEnums::GetEnumValueByName("EActorPerceptionSensitivity", std::string_view(p_Document["m_eSensitivity"])));

	s_Object.m_fCloseRange = static_cast<float32>(double(p_Document["m_fCloseRange"]));

	s_Object.m_fPeripheralAngle = static_cast<float32>(double(p_Document["m_fPeripheralAngle"]));

	s_Object.m_fPeripheralAngleWhileMoving = static_cast<float32>(double(p_Document["m_fPeripheralAngleWhileMoving"]));

	s_Object.m_fPeripheralHigh = static_cast<float32>(double(p_Document["m_fPeripheralHigh"]));

	s_Object.m_fPeripheralLow = static_cast<float32>(double(p_Document["m_fPeripheralLow"]));

	s_Object.m_fFocusConeWidthAngle = static_cast<float32>(double(p_Document["m_fFocusConeWidthAngle"]));

	s_Object.m_fFocusConeHeightAngle = static_cast<float32>(double(p_Document["m_fFocusConeHeightAngle"]));

	s_Object.m_fFocusConeRange = static_cast<float32>(double(p_Document["m_fFocusConeRange"]));

	s_Object.m_fFocusConeBackWidth = static_cast<float32>(double(p_Document["m_fFocusConeBackWidth"]));

	*reinterpret_cast<ZSharedSensorDef_SVisibilitySetting*>(p_Target) = s_Object;
}

void ZSharedSensorDef_SVisibilitySetting::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZSharedSensorDef_SVisibilitySetting*>(p_Object);

}

ZHMTypeInfo SHeroItemActionSaveData::TypeInfo = ZHMTypeInfo("SHeroItemActionSaveData", sizeof(SHeroItemActionSaveData), alignof(SHeroItemActionSaveData), SHeroItemActionSaveData::WriteJson, SHeroItemActionSaveData::WriteSimpleJson, SHeroItemActionSaveData::FromSimpleJson, SHeroItemActionSaveData::Serialize);

void SHeroItemActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroItemActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroItemActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroItemActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

void SHeroItemActionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroItemActionSaveData s_Object;

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	*reinterpret_cast<SHeroItemActionSaveData*>(p_Target) = s_Object;
}

void SHeroItemActionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHeroItemActionSaveData*>(p_Object);

}

ZHMTypeInfo ZInteractionData::TypeInfo = ZHMTypeInfo("ZInteractionData", sizeof(ZInteractionData), alignof(ZInteractionData), ZInteractionData::WriteJson, ZInteractionData::WriteSimpleJson, ZInteractionData::FromSimpleJson, ZInteractionData::Serialize);

void ZInteractionData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInteractionData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZInteractionData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInteractionData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZInteractionData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZInteractionData s_Object;

	*reinterpret_cast<ZInteractionData*>(p_Target) = s_Object;
}

void ZInteractionData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZInteractionData*>(p_Object);

}

ZHMTypeInfo SBodybagSaveData::TypeInfo = ZHMTypeInfo("SBodybagSaveData", sizeof(SBodybagSaveData), alignof(SBodybagSaveData), SBodybagSaveData::WriteJson, SBodybagSaveData::WriteSimpleJson, SBodybagSaveData::FromSimpleJson, SBodybagSaveData::Serialize);

void SBodybagSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBodybagSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vLinkedPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vLinkedPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vLinkedQuaternionRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vLinkedQuaternionRotation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SBodybagBoneSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBodybagBoneSaveData") << "," << JsonStr("$val") << ":";
		SBodybagBoneSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneIndices") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBoneIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aBoneIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDeadActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDeadActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IsInMorgue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IsInMorgue;
	p_Stream << "}";

	p_Stream << "}";
}

void SBodybagSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBodybagSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vLinkedPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vLinkedPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vLinkedQuaternionRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vLinkedQuaternionRotation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBones[i];
		SBodybagBoneSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBoneIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBoneIndices[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aBoneIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDeadActor") << ":";
	p_Stream << s_Object->m_rDeadActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_IsInMorgue") << ":";
	p_Stream << s_Object->m_IsInMorgue;

	p_Stream << "}";
}

void SBodybagSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBodybagSaveData s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vLinkedPosition"], &s_Item);
		s_Object.m_vLinkedPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vLinkedQuaternionRotation"], &s_Item);
		s_Object.m_vLinkedQuaternionRotation = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aBones"])
	{
		SBodybagBoneSaveData s_ArrayItem0;
		SBodybagBoneSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aBones.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aBoneIndices"])
	{
		s_Object.m_aBoneIndices.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	s_Object.m_rDeadActor = static_cast<uint32>(int64_t(p_Document["m_rDeadActor"]));

	s_Object.m_IsInMorgue = bool(p_Document["m_IsInMorgue"]);

	*reinterpret_cast<SBodybagSaveData*>(p_Target) = s_Object;
}

void SBodybagSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBodybagSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vLinkedPosition, p_Serializer, p_OwnOffset + offsetof(SBodybagSaveData, m_vLinkedPosition));
	SVector4::Serialize(&s_Object->m_vLinkedQuaternionRotation, p_Serializer, p_OwnOffset + offsetof(SBodybagSaveData, m_vLinkedQuaternionRotation));
	TArray<SBodybagBoneSaveData>::Serialize(&s_Object->m_aBones, p_Serializer, p_OwnOffset + offsetof(SBodybagSaveData, m_aBones));
	TArray<uint32>::Serialize(&s_Object->m_aBoneIndices, p_Serializer, p_OwnOffset + offsetof(SBodybagSaveData, m_aBoneIndices));
}

ZHMTypeInfo SAudioEmitterStateSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterStateSaveData", sizeof(SAudioEmitterStateSaveData), alignof(SAudioEmitterStateSaveData), SAudioEmitterStateSaveData::WriteJson, SAudioEmitterStateSaveData::WriteSimpleJson, SAudioEmitterStateSaveData::FromSimpleJson, SAudioEmitterStateSaveData::Serialize);

void SAudioEmitterStateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterStateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nGroupId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGroupId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStateId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nStateId;
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterStateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterStateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nGroupId") << ":";
	p_Stream << s_Object->m_nGroupId;
	p_Stream << ",";

	p_Stream << JsonStr("m_nStateId") << ":";
	p_Stream << s_Object->m_nStateId;

	p_Stream << "}";
}

void SAudioEmitterStateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioEmitterStateSaveData s_Object;

	s_Object.m_nGroupId = static_cast<uint32>(int64_t(p_Document["m_nGroupId"]));

	s_Object.m_nStateId = static_cast<uint32>(int64_t(p_Document["m_nStateId"]));

	*reinterpret_cast<SAudioEmitterStateSaveData*>(p_Target) = s_Object;
}

void SAudioEmitterStateSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterStateSaveData*>(p_Object);

}

ZHMTypeInfo SEntityTemplatePinConnection::TypeInfo = ZHMTypeInfo("SEntityTemplatePinConnection", sizeof(SEntityTemplatePinConnection), alignof(SEntityTemplatePinConnection), SEntityTemplatePinConnection::WriteJson, SEntityTemplatePinConnection::WriteSimpleJson, SEntityTemplatePinConnection::FromSimpleJson, SEntityTemplatePinConnection::Serialize);

void SEntityTemplatePinConnection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fromID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fromID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("toID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->toID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fromPinName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->fromPinName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("toPinName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->toPinName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("constantPinValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->constantPinValue, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityTemplatePinConnection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fromID") << ":";
	p_Stream << s_Object->fromID;
	p_Stream << ",";

	p_Stream << JsonStr("toID") << ":";
	p_Stream << s_Object->toID;
	p_Stream << ",";

	p_Stream << JsonStr("fromPinName") << ":";
	p_Stream << JsonStr(s_Object->fromPinName);
	p_Stream << ",";

	p_Stream << JsonStr("toPinName") << ":";
	p_Stream << JsonStr(s_Object->toPinName);
	p_Stream << ",";

	p_Stream << JsonStr("constantPinValue") << ":";
	ZVariant::WriteSimpleJson(&s_Object->constantPinValue, p_Stream);

	p_Stream << "}";
}

void SEntityTemplatePinConnection::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityTemplatePinConnection s_Object;

	s_Object.fromID = static_cast<int32>(int64_t(p_Document["fromID"]));

	s_Object.toID = static_cast<int32>(int64_t(p_Document["toID"]));

	s_Object.fromPinName = std::string_view(p_Document["fromPinName"]);

	s_Object.toPinName = std::string_view(p_Document["toPinName"]);

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["constantPinValue"], &s_Item);
		s_Object.constantPinValue = s_Item;
	}

	*reinterpret_cast<SEntityTemplatePinConnection*>(p_Target) = s_Object;
}

void SEntityTemplatePinConnection::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityTemplatePinConnection*>(p_Object);

	ZString::Serialize(&s_Object->fromPinName, p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePinConnection, fromPinName));
	ZString::Serialize(&s_Object->toPinName, p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePinConnection, toPinName));
	ZVariant::Serialize(&s_Object->constantPinValue, p_Serializer, p_OwnOffset + offsetof(SEntityTemplatePinConnection, constantPinValue));
}

ZHMTypeInfo SEvacuateVIPGroupSaveData::TypeInfo = ZHMTypeInfo("SEvacuateVIPGroupSaveData", sizeof(SEvacuateVIPGroupSaveData), alignof(SEvacuateVIPGroupSaveData), SEvacuateVIPGroupSaveData::WriteJson, SEvacuateVIPGroupSaveData::WriteSimpleJson, SEvacuateVIPGroupSaveData::FromSimpleJson, SEvacuateVIPGroupSaveData::Serialize);

void SEvacuateVIPGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEvacuateVIPGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rVIP") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rVIP;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rVIPActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rVIPActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rEvacuationNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEvacuationNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSafeRoomNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSafeRoomNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCompromisedEvacNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCompromisedEvacNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_assignedBodyguards") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_assignedBodyguards.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_assignedBodyguards[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_assignedBodyguards.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEvacuationStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tEvacuationStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tCornered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tCornered, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tTacticalPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tTacticalPoint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tSafeRoom") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tSafeRoom, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tSafeRoomStandDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tSafeRoomStandDown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInitialFlee") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInitialFlee;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_safeRoomVIPSentActingStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_safeRoomVIPSentActingStarted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_isSetupPhaseComplete") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_isSetupPhaseComplete;
	p_Stream << "}";

	p_Stream << "}";
}

void SEvacuateVIPGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEvacuateVIPGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rVIP") << ":";
	p_Stream << s_Object->m_rVIP;
	p_Stream << ",";

	p_Stream << JsonStr("m_rVIPActor") << ":";
	p_Stream << s_Object->m_rVIPActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rEvacuationNode") << ":";
	p_Stream << s_Object->m_rEvacuationNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSafeRoomNode") << ":";
	p_Stream << s_Object->m_rSafeRoomNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCompromisedEvacNode") << ":";
	p_Stream << s_Object->m_rCompromisedEvacNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_assignedBodyguards") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_assignedBodyguards.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_assignedBodyguards[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_assignedBodyguards.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEvacuationStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tEvacuationStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tCornered") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tCornered, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tTacticalPoint") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tTacticalPoint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tSafeRoom") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tSafeRoom, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tSafeRoomStandDown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tSafeRoomStandDown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bInitialFlee") << ":";
	p_Stream << s_Object->m_bInitialFlee;
	p_Stream << ",";

	p_Stream << JsonStr("m_safeRoomVIPSentActingStarted") << ":";
	p_Stream << s_Object->m_safeRoomVIPSentActingStarted;
	p_Stream << ",";

	p_Stream << JsonStr("m_isSetupPhaseComplete") << ":";
	p_Stream << s_Object->m_isSetupPhaseComplete;

	p_Stream << "}";
}

void SEvacuateVIPGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEvacuateVIPGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_rVIP = static_cast<uint32>(int64_t(p_Document["m_rVIP"]));

	s_Object.m_rVIPActor = static_cast<uint32>(int64_t(p_Document["m_rVIPActor"]));

	s_Object.m_rEvacuationNode = static_cast<uint32>(int64_t(p_Document["m_rEvacuationNode"]));

	s_Object.m_rSafeRoomNode = static_cast<uint32>(int64_t(p_Document["m_rSafeRoomNode"]));

	s_Object.m_rCompromisedEvacNode = static_cast<uint32>(int64_t(p_Document["m_rCompromisedEvacNode"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_assignedBodyguards"])
	{
		s_Object.m_assignedBodyguards.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tEvacuationStart"], &s_Item);
		s_Object.m_tEvacuationStart = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tCornered"], &s_Item);
		s_Object.m_tCornered = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tTacticalPoint"], &s_Item);
		s_Object.m_tTacticalPoint = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tSafeRoom"], &s_Item);
		s_Object.m_tSafeRoom = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tSafeRoomStandDown"], &s_Item);
		s_Object.m_tSafeRoomStandDown = s_Item;
	}

	s_Object.m_bInitialFlee = bool(p_Document["m_bInitialFlee"]);

	s_Object.m_safeRoomVIPSentActingStarted = bool(p_Document["m_safeRoomVIPSentActingStarted"]);

	s_Object.m_isSetupPhaseComplete = bool(p_Document["m_isSetupPhaseComplete"]);

	*reinterpret_cast<SEvacuateVIPGroupSaveData*>(p_Target) = s_Object;
}

void SEvacuateVIPGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEvacuateVIPGroupSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_fsmState));
	TArray<uint32>::Serialize(&s_Object->m_assignedBodyguards, p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_assignedBodyguards));
	ZGameTime::Serialize(&s_Object->m_tEvacuationStart, p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_tEvacuationStart));
	ZGameTime::Serialize(&s_Object->m_tCornered, p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_tCornered));
	ZGameTime::Serialize(&s_Object->m_tTacticalPoint, p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_tTacticalPoint));
	ZGameTime::Serialize(&s_Object->m_tSafeRoom, p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_tSafeRoom));
	ZGameTime::Serialize(&s_Object->m_tSafeRoomStandDown, p_Serializer, p_OwnOffset + offsetof(SEvacuateVIPGroupSaveData, m_tSafeRoomStandDown));
}

ZHMTypeInfo ZJumpToOrder_SJumpToOrderSaveData::TypeInfo = ZHMTypeInfo("ZJumpToOrder.SJumpToOrderSaveData", sizeof(ZJumpToOrder_SJumpToOrderSaveData), alignof(ZJumpToOrder_SJumpToOrderSaveData), ZJumpToOrder_SJumpToOrderSaveData::WriteJson, ZJumpToOrder_SJumpToOrderSaveData::WriteSimpleJson, ZJumpToOrder_SJumpToOrderSaveData::FromSimpleJson, ZJumpToOrder_SJumpToOrderSaveData::Serialize);

void ZJumpToOrder_SJumpToOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZJumpToOrder_SJumpToOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vStopDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vStopDirection, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vTargetPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vTargetPosition, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZJumpToOrder_SJumpToOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZJumpToOrder_SJumpToOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vStopDirection") << ":";
	float4::WriteSimpleJson(&s_Object->m_vStopDirection, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vTargetPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vTargetPosition, p_Stream);

	p_Stream << "}";
}

void ZJumpToOrder_SJumpToOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZJumpToOrder_SJumpToOrderSaveData s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vStopDirection"], &s_Item);
		s_Object.m_vStopDirection = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vTargetPosition"], &s_Item);
		s_Object.m_vTargetPosition = s_Item;
	}

	*reinterpret_cast<ZJumpToOrder_SJumpToOrderSaveData*>(p_Target) = s_Object;
}

void ZJumpToOrder_SJumpToOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZJumpToOrder_SJumpToOrderSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vStopDirection, p_Serializer, p_OwnOffset + offsetof(ZJumpToOrder_SJumpToOrderSaveData, m_vStopDirection));
	float4::Serialize(&s_Object->m_vTargetPosition, p_Serializer, p_OwnOffset + offsetof(ZJumpToOrder_SJumpToOrderSaveData, m_vTargetPosition));
}

ZHMTypeInfo IRenderCompositorEntity::TypeInfo = ZHMTypeInfo("IRenderCompositorEntity", sizeof(IRenderCompositorEntity), alignof(IRenderCompositorEntity), IRenderCompositorEntity::WriteJson, IRenderCompositorEntity::WriteSimpleJson, IRenderCompositorEntity::FromSimpleJson, IRenderCompositorEntity::Serialize);

void IRenderCompositorEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IRenderCompositorEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IRenderCompositorEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IRenderCompositorEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IRenderCompositorEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IRenderCompositorEntity s_Object;

	*reinterpret_cast<IRenderCompositorEntity*>(p_Target) = s_Object;
}

void IRenderCompositorEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IRenderCompositorEntity*>(p_Object);

}

ZHMTypeInfo SWorldSpaceSettings::TypeInfo = ZHMTypeInfo("SWorldSpaceSettings", sizeof(SWorldSpaceSettings), alignof(SWorldSpaceSettings), SWorldSpaceSettings::WriteJson, SWorldSpaceSettings::WriteSimpleJson, SWorldSpaceSettings::FromSimpleJson, SWorldSpaceSettings::Serialize);

void SWorldSpaceSettings::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWorldSpaceSettings*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fCloseupDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fCloseupDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bDynamicScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bDynamicScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDynamicScaleAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleNearDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDynamicScaleNearDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleBlendRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fDynamicScaleBlendRange;
	p_Stream << "}";

	p_Stream << "}";
}

void SWorldSpaceSettings::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWorldSpaceSettings*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fCloseupDistance") << ":";
	p_Stream << s_Object->fCloseupDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fScale") << ":";
	p_Stream << s_Object->fScale;
	p_Stream << ",";

	p_Stream << JsonStr("bDynamicScale") << ":";
	p_Stream << s_Object->bDynamicScale;
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleAlpha") << ":";
	p_Stream << s_Object->fDynamicScaleAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleNearDistance") << ":";
	p_Stream << s_Object->fDynamicScaleNearDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fDynamicScaleBlendRange") << ":";
	p_Stream << s_Object->fDynamicScaleBlendRange;

	p_Stream << "}";
}

void SWorldSpaceSettings::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SWorldSpaceSettings s_Object;

	s_Object.fCloseupDistance = static_cast<float32>(double(p_Document["fCloseupDistance"]));

	s_Object.fScale = static_cast<float32>(double(p_Document["fScale"]));

	s_Object.bDynamicScale = bool(p_Document["bDynamicScale"]);

	s_Object.fDynamicScaleAlpha = static_cast<float32>(double(p_Document["fDynamicScaleAlpha"]));

	s_Object.fDynamicScaleNearDistance = static_cast<float32>(double(p_Document["fDynamicScaleNearDistance"]));

	s_Object.fDynamicScaleBlendRange = static_cast<float32>(double(p_Document["fDynamicScaleBlendRange"]));

	*reinterpret_cast<SWorldSpaceSettings*>(p_Target) = s_Object;
}

void SWorldSpaceSettings::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SWorldSpaceSettings*>(p_Object);

}

ZHMTypeInfo S25DProjectionSettings::TypeInfo = ZHMTypeInfo("S25DProjectionSettings", sizeof(S25DProjectionSettings), alignof(S25DProjectionSettings), S25DProjectionSettings::WriteJson, S25DProjectionSettings::WriteSimpleJson, S25DProjectionSettings::FromSimpleJson, S25DProjectionSettings::Serialize);

void S25DProjectionSettings::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<S25DProjectionSettings*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fNearDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fNearScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fNearFov") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearFov;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarFov") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarFov;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fNearScaleFov") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearScaleFov;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarScaleFov") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarScaleFov;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fScaleFactor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fScaleFactor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fNearAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fNearAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fFarAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fFarAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fAlphaFactor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fAlphaFactor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aScaleCurve") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<S25DProjectionSettingsCurveEntry>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aScaleCurve.size(); ++i)
	{
		auto& s_Item0 = s_Object->aScaleCurve[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("S25DProjectionSettingsCurveEntry") << "," << JsonStr("$val") << ":";
		S25DProjectionSettingsCurveEntry::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aScaleCurve.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aAlphaCurve") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<S25DProjectionSettingsCurveEntry>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aAlphaCurve.size(); ++i)
	{
		auto& s_Item0 = s_Object->aAlphaCurve[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("S25DProjectionSettingsCurveEntry") << "," << JsonStr("$val") << ":";
		S25DProjectionSettingsCurveEntry::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aAlphaCurve.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("eViewportLock") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EViewportLock") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eViewportLock) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EViewportLock", static_cast<int>(s_Object->eViewportLock))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fViewportGutter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fViewportGutter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sWorldSpaceSettings") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SWorldSpaceSettings") << "," << JsonStr("$val") << ":";
	SWorldSpaceSettings::WriteJson(&s_Object->sWorldSpaceSettings, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void S25DProjectionSettings::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<S25DProjectionSettings*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fNearDistance") << ":";
	p_Stream << s_Object->fNearDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fFarDistance") << ":";
	p_Stream << s_Object->fFarDistance;
	p_Stream << ",";

	p_Stream << JsonStr("fNearScale") << ":";
	p_Stream << s_Object->fNearScale;
	p_Stream << ",";

	p_Stream << JsonStr("fFarScale") << ":";
	p_Stream << s_Object->fFarScale;
	p_Stream << ",";

	p_Stream << JsonStr("fNearFov") << ":";
	p_Stream << s_Object->fNearFov;
	p_Stream << ",";

	p_Stream << JsonStr("fFarFov") << ":";
	p_Stream << s_Object->fFarFov;
	p_Stream << ",";

	p_Stream << JsonStr("fNearScaleFov") << ":";
	p_Stream << s_Object->fNearScaleFov;
	p_Stream << ",";

	p_Stream << JsonStr("fFarScaleFov") << ":";
	p_Stream << s_Object->fFarScaleFov;
	p_Stream << ",";

	p_Stream << JsonStr("fScaleFactor") << ":";
	p_Stream << s_Object->fScaleFactor;
	p_Stream << ",";

	p_Stream << JsonStr("fNearAlpha") << ":";
	p_Stream << s_Object->fNearAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("fFarAlpha") << ":";
	p_Stream << s_Object->fFarAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("fAlphaFactor") << ":";
	p_Stream << s_Object->fAlphaFactor;
	p_Stream << ",";

	p_Stream << JsonStr("aScaleCurve") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aScaleCurve.size(); ++i)
	{
		auto& s_Item0 = s_Object->aScaleCurve[i];
		S25DProjectionSettingsCurveEntry::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->aScaleCurve.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aAlphaCurve") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aAlphaCurve.size(); ++i)
	{
		auto& s_Item0 = s_Object->aAlphaCurve[i];
		S25DProjectionSettingsCurveEntry::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->aAlphaCurve.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("eViewportLock") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EViewportLock", static_cast<int>(s_Object->eViewportLock)));
	p_Stream << ",";

	p_Stream << JsonStr("fViewportGutter") << ":";
	p_Stream << s_Object->fViewportGutter;
	p_Stream << ",";

	p_Stream << JsonStr("sWorldSpaceSettings") << ":";
	SWorldSpaceSettings::WriteSimpleJson(&s_Object->sWorldSpaceSettings, p_Stream);

	p_Stream << "}";
}

void S25DProjectionSettings::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	S25DProjectionSettings s_Object;

	s_Object.fNearDistance = static_cast<float32>(double(p_Document["fNearDistance"]));

	s_Object.fFarDistance = static_cast<float32>(double(p_Document["fFarDistance"]));

	s_Object.fNearScale = static_cast<float32>(double(p_Document["fNearScale"]));

	s_Object.fFarScale = static_cast<float32>(double(p_Document["fFarScale"]));

	s_Object.fNearFov = static_cast<float32>(double(p_Document["fNearFov"]));

	s_Object.fFarFov = static_cast<float32>(double(p_Document["fFarFov"]));

	s_Object.fNearScaleFov = static_cast<float32>(double(p_Document["fNearScaleFov"]));

	s_Object.fFarScaleFov = static_cast<float32>(double(p_Document["fFarScaleFov"]));

	s_Object.fScaleFactor = static_cast<float32>(double(p_Document["fScaleFactor"]));

	s_Object.fNearAlpha = static_cast<float32>(double(p_Document["fNearAlpha"]));

	s_Object.fFarAlpha = static_cast<float32>(double(p_Document["fFarAlpha"]));

	s_Object.fAlphaFactor = static_cast<float32>(double(p_Document["fAlphaFactor"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["aScaleCurve"])
	{
		S25DProjectionSettingsCurveEntry s_ArrayItem0;
		S25DProjectionSettingsCurveEntry::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.aScaleCurve.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["aAlphaCurve"])
	{
		S25DProjectionSettingsCurveEntry s_ArrayItem0;
		S25DProjectionSettingsCurveEntry::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.aAlphaCurve.push_back(s_ArrayItem0);
	}

	s_Object.eViewportLock = static_cast<EViewportLock>(ZHMEnums::GetEnumValueByName("EViewportLock", std::string_view(p_Document["eViewportLock"])));

	s_Object.fViewportGutter = static_cast<float32>(double(p_Document["fViewportGutter"]));

	{
		SWorldSpaceSettings s_Item;
		SWorldSpaceSettings::FromSimpleJson(p_Document["sWorldSpaceSettings"], &s_Item);
		s_Object.sWorldSpaceSettings = s_Item;
	}

	*reinterpret_cast<S25DProjectionSettings*>(p_Target) = s_Object;
}

void S25DProjectionSettings::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<S25DProjectionSettings*>(p_Object);

	TArray<S25DProjectionSettingsCurveEntry>::Serialize(&s_Object->aScaleCurve, p_Serializer, p_OwnOffset + offsetof(S25DProjectionSettings, aScaleCurve));
	TArray<S25DProjectionSettingsCurveEntry>::Serialize(&s_Object->aAlphaCurve, p_Serializer, p_OwnOffset + offsetof(S25DProjectionSettings, aAlphaCurve));
	SWorldSpaceSettings::Serialize(&s_Object->sWorldSpaceSettings, p_Serializer, p_OwnOffset + offsetof(S25DProjectionSettings, sWorldSpaceSettings));
}

ZHMTypeInfo SMathMultiplyDivideSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_SVector2", sizeof(SMathMultiplyDivideSaveData_SVector2), alignof(SMathMultiplyDivideSaveData_SVector2), SMathMultiplyDivideSaveData_SVector2::WriteJson, SMathMultiplyDivideSaveData_SVector2::WriteSimpleJson, SMathMultiplyDivideSaveData_SVector2::FromSimpleJson, SMathMultiplyDivideSaveData_SVector2::Serialize);

void SMathMultiplyDivideSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultiplyDivideSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector2") << "," << JsonStr("$val") << ":";
	SVector2::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDivide;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultiplyDivideSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector2::WriteSimpleJson(&s_Object->m_fB, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << s_Object->m_bDivide;

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultiplyDivideSaveData_SVector2 s_Object;

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_fA"], &s_Item);
		s_Object.m_fA = s_Item;
	}

	{
		SVector2 s_Item;
		SVector2::FromSimpleJson(p_Document["m_fB"], &s_Item);
		s_Object.m_fB = s_Item;
	}

	s_Object.m_bDivide = bool(p_Document["m_bDivide"]);

	*reinterpret_cast<SMathMultiplyDivideSaveData_SVector2*>(p_Target) = s_Object;
}

void SMathMultiplyDivideSaveData_SVector2::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathMultiplyDivideSaveData_SVector2*>(p_Object);

	SVector2::Serialize(&s_Object->m_fA, p_Serializer, p_OwnOffset + offsetof(SMathMultiplyDivideSaveData_SVector2, m_fA));
	SVector2::Serialize(&s_Object->m_fB, p_Serializer, p_OwnOffset + offsetof(SMathMultiplyDivideSaveData_SVector2, m_fB));
}

ZHMTypeInfo SInventoryUISlot::TypeInfo = ZHMTypeInfo("SInventoryUISlot", sizeof(SInventoryUISlot), alignof(SInventoryUISlot), SInventoryUISlot::WriteJson, SInventoryUISlot::WriteSimpleJson, SInventoryUISlot::FromSimpleJson, SInventoryUISlot::Serialize);

void SInventoryUISlot::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryUISlot*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("label") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("containedLabel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->containedLabel);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("description") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->description);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("perks") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->perks.size(); ++i)
	{
		auto& s_Item0 = s_Object->perks[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->perks.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("silencer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->silencer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("count") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->count;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ammo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->ammo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->id, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("weaponCategory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->weaponCategory);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("itemCategory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->itemCategory);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("itemCategoryLKey") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->itemCategoryLKey);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("inventoryCategoryIcon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->inventoryCategoryIcon);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("isDroppable") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->isDroppable;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("isContainer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->isContainer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("containsItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->containsItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nContainedItemHUDType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nContainedItemHUDType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemIllegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemDetectedDuringFrisk") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bContainedItemDetectedDuringFrisk;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("detectedDuringFrisk") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->detectedDuringFrisk;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("actionAndKillTypes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->actionAndKillTypes.size(); ++i)
	{
		auto& s_Item0 = s_Object->actionAndKillTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->actionAndKillTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("suspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->suspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("illegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->illegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("canReload") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->canReload;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sPoisonType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sPoisonType);
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryUISlot::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryUISlot*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("label") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << ",";

	p_Stream << JsonStr("containedLabel") << ":";
	p_Stream << JsonStr(s_Object->containedLabel);
	p_Stream << ",";

	p_Stream << JsonStr("description") << ":";
	p_Stream << JsonStr(s_Object->description);
	p_Stream << ",";

	p_Stream << JsonStr("perks") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->perks.size(); ++i)
	{
		auto& s_Item0 = s_Object->perks[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->perks.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("silencer") << ":";
	p_Stream << s_Object->silencer;
	p_Stream << ",";

	p_Stream << JsonStr("count") << ":";
	p_Stream << s_Object->count;
	p_Stream << ",";

	p_Stream << JsonStr("ammo") << ":";
	p_Stream << s_Object->ammo;
	p_Stream << ",";

	p_Stream << JsonStr("id") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->id, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("weaponCategory") << ":";
	p_Stream << JsonStr(s_Object->weaponCategory);
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << ",";

	p_Stream << JsonStr("nItemHUDType") << ":";
	p_Stream << s_Object->nItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("itemCategory") << ":";
	p_Stream << JsonStr(s_Object->itemCategory);
	p_Stream << ",";

	p_Stream << JsonStr("itemCategoryLKey") << ":";
	p_Stream << JsonStr(s_Object->itemCategoryLKey);
	p_Stream << ",";

	p_Stream << JsonStr("inventoryCategoryIcon") << ":";
	p_Stream << JsonStr(s_Object->inventoryCategoryIcon);
	p_Stream << ",";

	p_Stream << JsonStr("isDroppable") << ":";
	p_Stream << s_Object->isDroppable;
	p_Stream << ",";

	p_Stream << JsonStr("isContainer") << ":";
	p_Stream << s_Object->isContainer;
	p_Stream << ",";

	p_Stream << JsonStr("containsItem") << ":";
	p_Stream << s_Object->containsItem;
	p_Stream << ",";

	p_Stream << JsonStr("nContainedItemHUDType") << ":";
	p_Stream << s_Object->nContainedItemHUDType;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemIllegal") << ":";
	p_Stream << s_Object->bContainedItemIllegal;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemSuspicious") << ":";
	p_Stream << s_Object->bContainedItemSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bContainedItemDetectedDuringFrisk") << ":";
	p_Stream << s_Object->bContainedItemDetectedDuringFrisk;
	p_Stream << ",";

	p_Stream << JsonStr("detectedDuringFrisk") << ":";
	p_Stream << s_Object->detectedDuringFrisk;
	p_Stream << ",";

	p_Stream << JsonStr("actionAndKillTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->actionAndKillTypes.size(); ++i)
	{
		auto& s_Item0 = s_Object->actionAndKillTypes[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->actionAndKillTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("suspicious") << ":";
	p_Stream << s_Object->suspicious;
	p_Stream << ",";

	p_Stream << JsonStr("illegal") << ":";
	p_Stream << s_Object->illegal;
	p_Stream << ",";

	p_Stream << JsonStr("canReload") << ":";
	p_Stream << s_Object->canReload;
	p_Stream << ",";

	p_Stream << JsonStr("sPoisonType") << ":";
	p_Stream << JsonStr(s_Object->sPoisonType);

	p_Stream << "}";
}

void SInventoryUISlot::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryUISlot s_Object;

	s_Object.label = std::string_view(p_Document["label"]);

	s_Object.containedLabel = std::string_view(p_Document["containedLabel"]);

	s_Object.description = std::string_view(p_Document["description"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["perks"])
	{
		s_Object.perks.push_back(std::string_view(s_Item0));
	}

	s_Object.silencer = bool(p_Document["silencer"]);

	s_Object.count = static_cast<int32>(int64_t(p_Document["count"]));

	s_Object.ammo = static_cast<int32>(int64_t(p_Document["ammo"]));

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["id"], &s_Item);
		s_Object.id = s_Item;
	}

	s_Object.weaponCategory = std::string_view(p_Document["weaponCategory"]);

	s_Object.nAmmoRemaining = static_cast<int32>(int64_t(p_Document["nAmmoRemaining"]));

	s_Object.nAmmoTotal = static_cast<int32>(int64_t(p_Document["nAmmoTotal"]));

	s_Object.nAmmoInClip = static_cast<int32>(int64_t(p_Document["nAmmoInClip"]));

	s_Object.nWeaponType = static_cast<int32>(int64_t(p_Document["nWeaponType"]));

	s_Object.nItemHUDType = static_cast<int32>(int64_t(p_Document["nItemHUDType"]));

	s_Object.itemCategory = std::string_view(p_Document["itemCategory"]);

	s_Object.itemCategoryLKey = std::string_view(p_Document["itemCategoryLKey"]);

	s_Object.inventoryCategoryIcon = std::string_view(p_Document["inventoryCategoryIcon"]);

	s_Object.isDroppable = bool(p_Document["isDroppable"]);

	s_Object.isContainer = bool(p_Document["isContainer"]);

	s_Object.containsItem = bool(p_Document["containsItem"]);

	s_Object.nContainedItemHUDType = static_cast<int32>(int64_t(p_Document["nContainedItemHUDType"]));

	s_Object.bContainedItemIllegal = bool(p_Document["bContainedItemIllegal"]);

	s_Object.bContainedItemSuspicious = bool(p_Document["bContainedItemSuspicious"]);

	s_Object.bContainedItemDetectedDuringFrisk = bool(p_Document["bContainedItemDetectedDuringFrisk"]);

	s_Object.detectedDuringFrisk = bool(p_Document["detectedDuringFrisk"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["actionAndKillTypes"])
	{
		s_Object.actionAndKillTypes.push_back(std::string_view(s_Item0));
	}

	s_Object.suspicious = bool(p_Document["suspicious"]);

	s_Object.illegal = bool(p_Document["illegal"]);

	s_Object.canReload = bool(p_Document["canReload"]);

	s_Object.sPoisonType = std::string_view(p_Document["sPoisonType"]);

	*reinterpret_cast<SInventoryUISlot*>(p_Target) = s_Object;
}

void SInventoryUISlot::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SInventoryUISlot*>(p_Object);

	ZString::Serialize(&s_Object->label, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlot, label));
	ZString::Serialize(&s_Object->containedLabel, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlot, containedLabel));
	ZString::Serialize(&s_Object->description, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlot, description));
	TArray<ZString>::Serialize(&s_Object->perks, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlot, perks));
	ZRepositoryID::Serialize(&s_Object->id, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlot, id));
	ZString::Serialize(&s_Object->weaponCategory, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlot, weaponCategory));
	ZString::Serialize(&s_Object->itemCategory, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlot, itemCategory));
	ZString::Serialize(&s_Object->itemCategoryLKey, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlot, itemCategoryLKey));
	ZString::Serialize(&s_Object->inventoryCategoryIcon, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlot, inventoryCategoryIcon));
	TArray<ZString>::Serialize(&s_Object->actionAndKillTypes, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlot, actionAndKillTypes));
	ZString::Serialize(&s_Object->sPoisonType, p_Serializer, p_OwnOffset + offsetof(SInventoryUISlot, sPoisonType));
}

ZHMTypeInfo SVisibilitySaveData::TypeInfo = ZHMTypeInfo("SVisibilitySaveData", sizeof(SVisibilitySaveData), alignof(SVisibilitySaveData), SVisibilitySaveData::WriteJson, SVisibilitySaveData::WriteSimpleJson, SVisibilitySaveData::FromSimpleJson, SVisibilitySaveData::Serialize);

void SVisibilitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVisibilitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SVisibilitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVisibilitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsVisible") << ":";
	p_Stream << s_Object->m_bIsVisible;

	p_Stream << "}";
}

void SVisibilitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVisibilitySaveData s_Object;

	s_Object.m_bIsVisible = bool(p_Document["m_bIsVisible"]);

	*reinterpret_cast<SVisibilitySaveData*>(p_Target) = s_Object;
}

void SVisibilitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVisibilitySaveData*>(p_Object);

}

ZHMTypeInfo ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo::TypeInfo = ZHMTypeInfo("ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfo", sizeof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo), alignof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo), ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo::WriteJson, ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo::WriteSimpleJson, ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo::FromSimpleJson, ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo::Serialize);

void ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("label") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("containedLabel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->containedLabel);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("silencer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->silencer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("count") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->count;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ammo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->ammo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->id, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("weaponCategory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->weaponCategory);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("itemCategory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->itemCategory);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("itemCategoryLKey") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->itemCategoryLKey);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("inventoryCategoryIcon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->inventoryCategoryIcon);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("notininventory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->notininventory;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("isIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->isIllegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("actionName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->actionName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("longDescription") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->longDescription);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("missingText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->missingText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("warningText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->warningText);
	p_Stream << "}";

	p_Stream << "}";
}

void ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("label") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << ",";

	p_Stream << JsonStr("containedLabel") << ":";
	p_Stream << JsonStr(s_Object->containedLabel);
	p_Stream << ",";

	p_Stream << JsonStr("silencer") << ":";
	p_Stream << s_Object->silencer;
	p_Stream << ",";

	p_Stream << JsonStr("count") << ":";
	p_Stream << s_Object->count;
	p_Stream << ",";

	p_Stream << JsonStr("ammo") << ":";
	p_Stream << s_Object->ammo;
	p_Stream << ",";

	p_Stream << JsonStr("id") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->id, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("weaponCategory") << ":";
	p_Stream << JsonStr(s_Object->weaponCategory);
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << ",";

	p_Stream << JsonStr("itemCategory") << ":";
	p_Stream << JsonStr(s_Object->itemCategory);
	p_Stream << ",";

	p_Stream << JsonStr("itemCategoryLKey") << ":";
	p_Stream << JsonStr(s_Object->itemCategoryLKey);
	p_Stream << ",";

	p_Stream << JsonStr("inventoryCategoryIcon") << ":";
	p_Stream << JsonStr(s_Object->inventoryCategoryIcon);
	p_Stream << ",";

	p_Stream << JsonStr("notininventory") << ":";
	p_Stream << s_Object->notininventory;
	p_Stream << ",";

	p_Stream << JsonStr("isIllegal") << ":";
	p_Stream << s_Object->isIllegal;
	p_Stream << ",";

	p_Stream << JsonStr("actionName") << ":";
	p_Stream << JsonStr(s_Object->actionName);
	p_Stream << ",";

	p_Stream << JsonStr("longDescription") << ":";
	p_Stream << JsonStr(s_Object->longDescription);
	p_Stream << ",";

	p_Stream << JsonStr("missingText") << ":";
	p_Stream << JsonStr(s_Object->missingText);
	p_Stream << ",";

	p_Stream << JsonStr("warningText") << ":";
	p_Stream << JsonStr(s_Object->warningText);

	p_Stream << "}";
}

void ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo s_Object;

	s_Object.label = std::string_view(p_Document["label"]);

	s_Object.containedLabel = std::string_view(p_Document["containedLabel"]);

	s_Object.silencer = bool(p_Document["silencer"]);

	s_Object.count = static_cast<int32>(int64_t(p_Document["count"]));

	s_Object.ammo = static_cast<int32>(int64_t(p_Document["ammo"]));

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["id"], &s_Item);
		s_Object.id = s_Item;
	}

	s_Object.weaponCategory = std::string_view(p_Document["weaponCategory"]);

	s_Object.nAmmoRemaining = static_cast<int32>(int64_t(p_Document["nAmmoRemaining"]));

	s_Object.nAmmoTotal = static_cast<int32>(int64_t(p_Document["nAmmoTotal"]));

	s_Object.nAmmoInClip = static_cast<int32>(int64_t(p_Document["nAmmoInClip"]));

	s_Object.nWeaponType = static_cast<int32>(int64_t(p_Document["nWeaponType"]));

	s_Object.itemCategory = std::string_view(p_Document["itemCategory"]);

	s_Object.itemCategoryLKey = std::string_view(p_Document["itemCategoryLKey"]);

	s_Object.inventoryCategoryIcon = std::string_view(p_Document["inventoryCategoryIcon"]);

	s_Object.notininventory = bool(p_Document["notininventory"]);

	s_Object.isIllegal = bool(p_Document["isIllegal"]);

	s_Object.actionName = std::string_view(p_Document["actionName"]);

	s_Object.longDescription = std::string_view(p_Document["longDescription"]);

	s_Object.missingText = std::string_view(p_Document["missingText"]);

	s_Object.warningText = std::string_view(p_Document["warningText"]);

	*reinterpret_cast<ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo*>(p_Target) = s_Object;
}

void ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo*>(p_Object);

	ZString::Serialize(&s_Object->label, p_Serializer, p_OwnOffset + offsetof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo, label));
	ZString::Serialize(&s_Object->containedLabel, p_Serializer, p_OwnOffset + offsetof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo, containedLabel));
	ZRepositoryID::Serialize(&s_Object->id, p_Serializer, p_OwnOffset + offsetof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo, id));
	ZString::Serialize(&s_Object->weaponCategory, p_Serializer, p_OwnOffset + offsetof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo, weaponCategory));
	ZString::Serialize(&s_Object->itemCategory, p_Serializer, p_OwnOffset + offsetof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo, itemCategory));
	ZString::Serialize(&s_Object->itemCategoryLKey, p_Serializer, p_OwnOffset + offsetof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo, itemCategoryLKey));
	ZString::Serialize(&s_Object->inventoryCategoryIcon, p_Serializer, p_OwnOffset + offsetof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo, inventoryCategoryIcon));
	ZString::Serialize(&s_Object->actionName, p_Serializer, p_OwnOffset + offsetof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo, actionName));
	ZString::Serialize(&s_Object->longDescription, p_Serializer, p_OwnOffset + offsetof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo, longDescription));
	ZString::Serialize(&s_Object->missingText, p_Serializer, p_OwnOffset + offsetof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo, missingText));
	ZString::Serialize(&s_Object->warningText, p_Serializer, p_OwnOffset + offsetof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfo, warningText));
}

ZHMTypeInfo SCombatZoneEntitySaveData::TypeInfo = ZHMTypeInfo("SCombatZoneEntitySaveData", sizeof(SCombatZoneEntitySaveData), alignof(SCombatZoneEntitySaveData), SCombatZoneEntitySaveData::WriteJson, SCombatZoneEntitySaveData::WriteSimpleJson, SCombatZoneEntitySaveData::FromSimpleJson, SCombatZoneEntitySaveData::Serialize);

void SCombatZoneEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCombatZoneEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsInLockdown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsInLockdown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFalseAlarm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsFalseAlarm;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECombatZoneState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECombatZoneState", static_cast<int>(s_Object->m_nState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLockdownTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLockdownTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tTriggerTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tTriggerTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEngageTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tEngageTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCombatZoneEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCombatZoneEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsInLockdown") << ":";
	p_Stream << s_Object->m_bIsInLockdown;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFalseAlarm") << ":";
	p_Stream << s_Object->m_bIsFalseAlarm;
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECombatZoneState", static_cast<int>(s_Object->m_nState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_tLockdownTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLockdownTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tTriggerTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tTriggerTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tEngageTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tEngageTime, p_Stream);

	p_Stream << "}";
}

void SCombatZoneEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCombatZoneEntitySaveData s_Object;

	s_Object.m_bIsInLockdown = bool(p_Document["m_bIsInLockdown"]);

	s_Object.m_bIsFalseAlarm = bool(p_Document["m_bIsFalseAlarm"]);

	s_Object.m_nState = static_cast<ECombatZoneState>(ZHMEnums::GetEnumValueByName("ECombatZoneState", std::string_view(p_Document["m_nState"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLockdownTime"], &s_Item);
		s_Object.m_tLockdownTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tTriggerTime"], &s_Item);
		s_Object.m_tTriggerTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tEngageTime"], &s_Item);
		s_Object.m_tEngageTime = s_Item;
	}

	*reinterpret_cast<SCombatZoneEntitySaveData*>(p_Target) = s_Object;
}

void SCombatZoneEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCombatZoneEntitySaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tLockdownTime, p_Serializer, p_OwnOffset + offsetof(SCombatZoneEntitySaveData, m_tLockdownTime));
	ZGameTime::Serialize(&s_Object->m_tTriggerTime, p_Serializer, p_OwnOffset + offsetof(SCombatZoneEntitySaveData, m_tTriggerTime));
	ZGameTime::Serialize(&s_Object->m_tEngageTime, p_Serializer, p_OwnOffset + offsetof(SCombatZoneEntitySaveData, m_tEngageTime));
}

ZHMTypeInfo SGProperties::TypeInfo = ZHMTypeInfo("SGProperties", sizeof(SGProperties), alignof(SGProperties), SGProperties::WriteJson, SGProperties::WriteSimpleJson, SGProperties::FromSimpleJson, SGProperties::Serialize);

void SGProperties::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGProperties*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("vMin") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->vMin, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("vMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->vMax, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nGridWidth") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nGridWidth;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fGridSpacing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->fGridSpacing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nVisibilityRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nVisibilityRange;
	p_Stream << "}";

	p_Stream << "}";
}

void SGProperties::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGProperties*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("vMin") << ":";
	float4::WriteSimpleJson(&s_Object->vMin, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("vMax") << ":";
	float4::WriteSimpleJson(&s_Object->vMax, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("nGridWidth") << ":";
	p_Stream << s_Object->nGridWidth;
	p_Stream << ",";

	p_Stream << JsonStr("fGridSpacing") << ":";
	p_Stream << s_Object->fGridSpacing;
	p_Stream << ",";

	p_Stream << JsonStr("nVisibilityRange") << ":";
	p_Stream << s_Object->nVisibilityRange;

	p_Stream << "}";
}

void SGProperties::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGProperties s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["vMin"], &s_Item);
		s_Object.vMin = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["vMax"], &s_Item);
		s_Object.vMax = s_Item;
	}

	s_Object.nGridWidth = static_cast<int32>(int64_t(p_Document["nGridWidth"]));

	s_Object.fGridSpacing = static_cast<float32>(double(p_Document["fGridSpacing"]));

	s_Object.nVisibilityRange = static_cast<int32>(int64_t(p_Document["nVisibilityRange"]));

	*reinterpret_cast<SGProperties*>(p_Target) = s_Object;
}

void SGProperties::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGProperties*>(p_Object);

	float4::Serialize(&s_Object->vMin, p_Serializer, p_OwnOffset + offsetof(SGProperties, vMin));
	float4::Serialize(&s_Object->vMax, p_Serializer, p_OwnOffset + offsetof(SGProperties, vMax));
}

ZHMTypeInfo SCuriousEventSaveData::TypeInfo = ZHMTypeInfo("SCuriousEventSaveData", sizeof(SCuriousEventSaveData), alignof(SCuriousEventSaveData), SCuriousEventSaveData::WriteJson, SCuriousEventSaveData::WriteSimpleJson, SCuriousEventSaveData::FromSimpleJson, SCuriousEventSaveData::Serialize);

void SCuriousEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCuriousEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tExpiresAt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tExpiresAt, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nKnowledgeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nKnowledgeIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SCuriousEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCuriousEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tExpiresAt") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tExpiresAt, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nKnowledgeIndex") << ":";
	p_Stream << s_Object->m_nKnowledgeIndex;

	p_Stream << "}";
}

void SCuriousEventSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCuriousEventSaveData s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tExpiresAt"], &s_Item);
		s_Object.m_tExpiresAt = s_Item;
	}

	s_Object.m_nKnowledgeIndex = static_cast<int32>(int64_t(p_Document["m_nKnowledgeIndex"]));

	*reinterpret_cast<SCuriousEventSaveData*>(p_Target) = s_Object;
}

void SCuriousEventSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCuriousEventSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tExpiresAt, p_Serializer, p_OwnOffset + offsetof(SCuriousEventSaveData, m_tExpiresAt));
}

ZHMTypeInfo SCuriousEventServiceSaveData::TypeInfo = ZHMTypeInfo("SCuriousEventServiceSaveData", sizeof(SCuriousEventServiceSaveData), alignof(SCuriousEventServiceSaveData), SCuriousEventServiceSaveData::WriteJson, SCuriousEventServiceSaveData::WriteSimpleJson, SCuriousEventServiceSaveData::FromSimpleJson, SCuriousEventServiceSaveData::Serialize);

void SCuriousEventServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCuriousEventServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aCuriousEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SCuriousEventSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCuriousEvents.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCuriousEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCuriousEventSaveData") << "," << JsonStr("$val") << ":";
		SCuriousEventSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aCuriousEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCuriousEventServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCuriousEventServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aCuriousEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCuriousEvents.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCuriousEvents[i];
		SCuriousEventSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aCuriousEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCuriousEventServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCuriousEventServiceSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aCuriousEvents"])
	{
		SCuriousEventSaveData s_ArrayItem0;
		SCuriousEventSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aCuriousEvents.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SCuriousEventServiceSaveData*>(p_Target) = s_Object;
}

void SCuriousEventServiceSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCuriousEventServiceSaveData*>(p_Object);

	TArray<SCuriousEventSaveData>::Serialize(&s_Object->m_aCuriousEvents, p_Serializer, p_OwnOffset + offsetof(SCuriousEventServiceSaveData, m_aCuriousEvents));
}

ZHMTypeInfo SMathDistanceSaveData_SVector4::TypeInfo = ZHMTypeInfo("SMathDistanceSaveData_SVector4", sizeof(SMathDistanceSaveData_SVector4), alignof(SMathDistanceSaveData_SVector4), SMathDistanceSaveData_SVector4::WriteJson, SMathDistanceSaveData_SVector4::WriteSimpleJson, SMathDistanceSaveData_SVector4::FromSimpleJson, SMathDistanceSaveData_SVector4::Serialize);

void SMathDistanceSaveData_SVector4::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathDistanceSaveData_SVector4*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector4::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathDistanceSaveData_SVector4*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_fB, p_Stream);

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector4::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathDistanceSaveData_SVector4 s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_fA"], &s_Item);
		s_Object.m_fA = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_fB"], &s_Item);
		s_Object.m_fB = s_Item;
	}

	*reinterpret_cast<SMathDistanceSaveData_SVector4*>(p_Target) = s_Object;
}

void SMathDistanceSaveData_SVector4::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathDistanceSaveData_SVector4*>(p_Object);

	SVector4::Serialize(&s_Object->m_fA, p_Serializer, p_OwnOffset + offsetof(SMathDistanceSaveData_SVector4, m_fA));
	SVector4::Serialize(&s_Object->m_fB, p_Serializer, p_OwnOffset + offsetof(SMathDistanceSaveData_SVector4, m_fB));
}

ZHMTypeInfo SEntityPinDescriptor::TypeInfo = ZHMTypeInfo("SEntityPinDescriptor", sizeof(SEntityPinDescriptor), alignof(SEntityPinDescriptor), SEntityPinDescriptor::WriteJson, SEntityPinDescriptor::WriteSimpleJson, SEntityPinDescriptor::FromSimpleJson, SEntityPinDescriptor::Serialize);

void SEntityPinDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityPinDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
	ZResourceID::WriteJson(&s_Object->type, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsPlaceholder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsPlaceholder;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsHidden;
	p_Stream << "}";

	p_Stream << "}";
}

void SEntityPinDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEntityPinDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << ",";

	p_Stream << JsonStr("type") << ":";
	ZResourceID::WriteSimpleJson(&s_Object->type, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << ",";

	p_Stream << JsonStr("bIsPlaceholder") << ":";
	p_Stream << s_Object->bIsPlaceholder;
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << s_Object->bIsHidden;

	p_Stream << "}";
}

void SEntityPinDescriptor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEntityPinDescriptor s_Object;

	s_Object.sName = std::string_view(p_Document["sName"]);

	s_Object.sDisplayName = std::string_view(p_Document["sDisplayName"]);

	{
		ZResourceID s_Item;
		ZResourceID::FromSimpleJson(p_Document["type"], &s_Item);
		s_Object.type = s_Item;
	}

	s_Object.sHelpText = std::string_view(p_Document["sHelpText"]);

	s_Object.bIsPlaceholder = bool(p_Document["bIsPlaceholder"]);

	s_Object.bIsHidden = bool(p_Document["bIsHidden"]);

	*reinterpret_cast<SEntityPinDescriptor*>(p_Target) = s_Object;
}

void SEntityPinDescriptor::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEntityPinDescriptor*>(p_Object);

	ZString::Serialize(&s_Object->sName, p_Serializer, p_OwnOffset + offsetof(SEntityPinDescriptor, sName));
	ZString::Serialize(&s_Object->sDisplayName, p_Serializer, p_OwnOffset + offsetof(SEntityPinDescriptor, sDisplayName));
	ZResourceID::Serialize(&s_Object->type, p_Serializer, p_OwnOffset + offsetof(SEntityPinDescriptor, type));
	ZString::Serialize(&s_Object->sHelpText, p_Serializer, p_OwnOffset + offsetof(SEntityPinDescriptor, sHelpText));
}

ZHMTypeInfo SCautiousBackupGroupSaveData::TypeInfo = ZHMTypeInfo("SCautiousBackupGroupSaveData", sizeof(SCautiousBackupGroupSaveData), alignof(SCautiousBackupGroupSaveData), SCautiousBackupGroupSaveData::WriteJson, SCautiousBackupGroupSaveData::WriteSimpleJson, SCautiousBackupGroupSaveData::FromSimpleJson, SCautiousBackupGroupSaveData::Serialize);

void SCautiousBackupGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousBackupGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eGroupState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZCautiousBackupGroup.EGroupState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eGroupState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZCautiousBackupGroup.EGroupState", static_cast<int>(s_Object->m_eGroupState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetNodeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTargetNodeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCandidates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pCandidate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aReservedApproachNodeIndices") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint16>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aReservedApproachNodeIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aReservedApproachNodeIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aReservedApproachNodeIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tStart, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousBackupGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousBackupGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eGroupState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZCautiousBackupGroup.EGroupState", static_cast<int>(s_Object->m_eGroupState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetNodeIndex") << ":";
	p_Stream << s_Object->m_nTargetNodeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCandidates[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_pCandidate") << ":";
	p_Stream << s_Object->m_pCandidate;
	p_Stream << ",";

	p_Stream << JsonStr("m_aReservedApproachNodeIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aReservedApproachNodeIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aReservedApproachNodeIndices[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aReservedApproachNodeIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_tStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tStart, p_Stream);

	p_Stream << "}";
}

void SCautiousBackupGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCautiousBackupGroupSaveData s_Object;

	s_Object.m_eGroupState = static_cast<ZCautiousBackupGroup_EGroupState>(ZHMEnums::GetEnumValueByName("ZCautiousBackupGroup.EGroupState", std::string_view(p_Document["m_eGroupState"])));

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	s_Object.m_nTargetNodeIndex = static_cast<uint16>(int64_t(p_Document["m_nTargetNodeIndex"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aCandidates"])
	{
		s_Object.m_aCandidates.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	s_Object.m_pCandidate = static_cast<uint32>(int64_t(p_Document["m_pCandidate"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aReservedApproachNodeIndices"])
	{
		s_Object.m_aReservedApproachNodeIndices.push_back(static_cast<uint16>(int64_t(s_Item0)));
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tStart"], &s_Item);
		s_Object.m_tStart = s_Item;
	}

	*reinterpret_cast<SCautiousBackupGroupSaveData*>(p_Target) = s_Object;
}

void SCautiousBackupGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCautiousBackupGroupSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aCandidates, p_Serializer, p_OwnOffset + offsetof(SCautiousBackupGroupSaveData, m_aCandidates));
	TArray<uint16>::Serialize(&s_Object->m_aReservedApproachNodeIndices, p_Serializer, p_OwnOffset + offsetof(SCautiousBackupGroupSaveData, m_aReservedApproachNodeIndices));
	ZGameTime::Serialize(&s_Object->m_tStart, p_Serializer, p_OwnOffset + offsetof(SCautiousBackupGroupSaveData, m_tStart));
}

ZHMTypeInfo SGuardBodySituationSaveData::TypeInfo = ZHMTypeInfo("SGuardBodySituationSaveData", sizeof(SGuardBodySituationSaveData), alignof(SGuardBodySituationSaveData), SGuardBodySituationSaveData::WriteJson, SGuardBodySituationSaveData::WriteSimpleJson, SGuardBodySituationSaveData::FromSimpleJson, SGuardBodySituationSaveData::Serialize);

void SGuardBodySituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGuardBodySituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bBystanderFieldsFailed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBystanderFieldsFailed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLastGetHelpGroupFailed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLastGetHelpGroupFailed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneCanSeeBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSomeoneCanSeeBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneHandledBodybag") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSomeoneHandledBodybag;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pGetHelpGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pGetHelpGroup;
	p_Stream << "}";

	p_Stream << "}";
}

void SGuardBodySituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGuardBodySituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bBystanderFieldsFailed") << ":";
	p_Stream << s_Object->m_bBystanderFieldsFailed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLastGetHelpGroupFailed") << ":";
	p_Stream << s_Object->m_bLastGetHelpGroupFailed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneCanSeeBody") << ":";
	p_Stream << s_Object->m_bSomeoneCanSeeBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneHandledBodybag") << ":";
	p_Stream << s_Object->m_bSomeoneHandledBodybag;
	p_Stream << ",";

	p_Stream << JsonStr("m_pGetHelpGroup") << ":";
	p_Stream << s_Object->m_pGetHelpGroup;

	p_Stream << "}";
}

void SGuardBodySituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGuardBodySituationSaveData s_Object;

	s_Object.m_bBystanderFieldsFailed = bool(p_Document["m_bBystanderFieldsFailed"]);

	s_Object.m_bLastGetHelpGroupFailed = bool(p_Document["m_bLastGetHelpGroupFailed"]);

	s_Object.m_bSomeoneCanSeeBody = bool(p_Document["m_bSomeoneCanSeeBody"]);

	s_Object.m_bSomeoneHandledBodybag = bool(p_Document["m_bSomeoneHandledBodybag"]);

	s_Object.m_pGetHelpGroup = static_cast<int32>(int64_t(p_Document["m_pGetHelpGroup"]));

	*reinterpret_cast<SGuardBodySituationSaveData*>(p_Target) = s_Object;
}

void SGuardBodySituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGuardBodySituationSaveData*>(p_Object);

}

ZHMTypeInfo STargetTrackingSaveData::TypeInfo = ZHMTypeInfo("STargetTrackingSaveData", sizeof(STargetTrackingSaveData), alignof(STargetTrackingSaveData), STargetTrackingSaveData::WriteJson, STargetTrackingSaveData::WriteSimpleJson, STargetTrackingSaveData::FromSimpleJson, STargetTrackingSaveData::Serialize);

void STargetTrackingSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STargetTrackingSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sharedTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_sharedTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_position") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_position, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_time") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_time, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STargetTrackingSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STargetTrackingSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sharedTarget") << ":";
	p_Stream << s_Object->m_sharedTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_position") << ":";
	float4::WriteSimpleJson(&s_Object->m_position, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_time") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_time, p_Stream);

	p_Stream << "}";
}

void STargetTrackingSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STargetTrackingSaveData s_Object;

	s_Object.m_sharedTarget = static_cast<int32>(int64_t(p_Document["m_sharedTarget"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_position"], &s_Item);
		s_Object.m_position = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_time"], &s_Item);
		s_Object.m_time = s_Item;
	}

	*reinterpret_cast<STargetTrackingSaveData*>(p_Target) = s_Object;
}

void STargetTrackingSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STargetTrackingSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_position, p_Serializer, p_OwnOffset + offsetof(STargetTrackingSaveData, m_position));
	ZGameTime::Serialize(&s_Object->m_time, p_Serializer, p_OwnOffset + offsetof(STargetTrackingSaveData, m_time));
}

ZHMTypeInfo STargetTrackingServiceSaveData::TypeInfo = ZHMTypeInfo("STargetTrackingServiceSaveData", sizeof(STargetTrackingServiceSaveData), alignof(STargetTrackingServiceSaveData), STargetTrackingServiceSaveData::WriteJson, STargetTrackingServiceSaveData::WriteSimpleJson, STargetTrackingServiceSaveData::FromSimpleJson, STargetTrackingServiceSaveData::Serialize);

void STargetTrackingServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STargetTrackingServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aTrackedTargets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<STargetTrackingSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTrackedTargets.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aTrackedTargets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STargetTrackingSaveData") << "," << JsonStr("$val") << ":";
		STargetTrackingSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aTrackedTargets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STargetTrackingServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STargetTrackingServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aTrackedTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aTrackedTargets.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aTrackedTargets[i];
		STargetTrackingSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aTrackedTargets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STargetTrackingServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STargetTrackingServiceSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aTrackedTargets"])
	{
		STargetTrackingSaveData s_ArrayItem0;
		STargetTrackingSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aTrackedTargets.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<STargetTrackingServiceSaveData*>(p_Target) = s_Object;
}

void STargetTrackingServiceSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STargetTrackingServiceSaveData*>(p_Object);

	TArray<STargetTrackingSaveData>::Serialize(&s_Object->m_aTrackedTargets, p_Serializer, p_OwnOffset + offsetof(STargetTrackingServiceSaveData, m_aTrackedTargets));
}

ZHMTypeInfo SActOrderSaveData::TypeInfo = ZHMTypeInfo("SActOrderSaveData", sizeof(SActOrderSaveData), alignof(SActOrderSaveData), SActOrderSaveData::WriteJson, SActOrderSaveData::WriteSimpleJson, SActOrderSaveData::FromSimpleJson, SActOrderSaveData::Serialize);

void SActOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sAct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sAct);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rChildNetworkEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_faceTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_faceTarget, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlendOutImmediatelyUponTimeout") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBlendOutImmediatelyUponTimeout;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropCarriedItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropCarriedItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopCurrentActFast") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStopCurrentActFast;
	p_Stream << "}";

	p_Stream << "}";
}

void SActOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sAct") << ":";
	p_Stream << JsonStr(s_Object->m_sAct);
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkEntity") << ":";
	p_Stream << s_Object->m_rChildNetworkEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_faceTarget") << ":";
	float4::WriteSimpleJson(&s_Object->m_faceTarget, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlendOutImmediatelyUponTimeout") << ":";
	p_Stream << s_Object->m_bBlendOutImmediatelyUponTimeout;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropCarriedItems") << ":";
	p_Stream << s_Object->m_bDropCarriedItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopCurrentActFast") << ":";
	p_Stream << s_Object->m_bStopCurrentActFast;

	p_Stream << "}";
}

void SActOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActOrderSaveData s_Object;

	s_Object.m_sAct = std::string_view(p_Document["m_sAct"]);

	s_Object.m_fDuration = static_cast<float32>(double(p_Document["m_fDuration"]));

	s_Object.m_rChildNetworkEntity = static_cast<uint32>(int64_t(p_Document["m_rChildNetworkEntity"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_faceTarget"], &s_Item);
		s_Object.m_faceTarget = s_Item;
	}

	s_Object.m_bBlendOutImmediatelyUponTimeout = bool(p_Document["m_bBlendOutImmediatelyUponTimeout"]);

	s_Object.m_bDropCarriedItems = bool(p_Document["m_bDropCarriedItems"]);

	s_Object.m_bStopCurrentActFast = bool(p_Document["m_bStopCurrentActFast"]);

	*reinterpret_cast<SActOrderSaveData*>(p_Target) = s_Object;
}

void SActOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActOrderSaveData*>(p_Object);

	ZString::Serialize(&s_Object->m_sAct, p_Serializer, p_OwnOffset + offsetof(SActOrderSaveData, m_sAct));
	float4::Serialize(&s_Object->m_faceTarget, p_Serializer, p_OwnOffset + offsetof(SActOrderSaveData, m_faceTarget));
}

ZHMTypeInfo SContractObjectiveHudHintEntitySaveData::TypeInfo = ZHMTypeInfo("SContractObjectiveHudHintEntitySaveData", sizeof(SContractObjectiveHudHintEntitySaveData), alignof(SContractObjectiveHudHintEntitySaveData), SContractObjectiveHudHintEntitySaveData::WriteJson, SContractObjectiveHudHintEntitySaveData::WriteSimpleJson, SContractObjectiveHudHintEntitySaveData::FromSimpleJson, SContractObjectiveHudHintEntitySaveData::Serialize);

void SContractObjectiveHudHintEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContractObjectiveHudHintEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVisible;
	p_Stream << "}";

	p_Stream << "}";
}

void SContractObjectiveHudHintEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContractObjectiveHudHintEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bVisible") << ":";
	p_Stream << s_Object->m_bVisible;

	p_Stream << "}";
}

void SContractObjectiveHudHintEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SContractObjectiveHudHintEntitySaveData s_Object;

	s_Object.m_bVisible = bool(p_Document["m_bVisible"]);

	*reinterpret_cast<SContractObjectiveHudHintEntitySaveData*>(p_Target) = s_Object;
}

void SContractObjectiveHudHintEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SContractObjectiveHudHintEntitySaveData*>(p_Object);

}

ZHMTypeInfo SGBufferSample::TypeInfo = ZHMTypeInfo("SGBufferSample", sizeof(SGBufferSample), alignof(SGBufferSample), SGBufferSample::WriteJson, SGBufferSample::WriteSimpleJson, SGBufferSample::FromSimpleJson, SGBufferSample::Serialize);

void SGBufferSample::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGBufferSample*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("normal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->normal, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("diffuse") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->diffuse, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("specular") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->specular, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("accumulatedLight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->accumulatedLight, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("glossiness") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->glossiness;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("translucency") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->translucency;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ao") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->ao;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("shadingModel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->shadingModel;
	p_Stream << "}";

	p_Stream << "}";
}

void SGBufferSample::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGBufferSample*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("normal") << ":";
	SVector3::WriteSimpleJson(&s_Object->normal, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("diffuse") << ":";
	SVector3::WriteSimpleJson(&s_Object->diffuse, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("specular") << ":";
	SVector3::WriteSimpleJson(&s_Object->specular, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("accumulatedLight") << ":";
	SVector3::WriteSimpleJson(&s_Object->accumulatedLight, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("glossiness") << ":";
	p_Stream << s_Object->glossiness;
	p_Stream << ",";

	p_Stream << JsonStr("translucency") << ":";
	p_Stream << s_Object->translucency;
	p_Stream << ",";

	p_Stream << JsonStr("ao") << ":";
	p_Stream << s_Object->ao;
	p_Stream << ",";

	p_Stream << JsonStr("shadingModel") << ":";
	p_Stream << s_Object->shadingModel;

	p_Stream << "}";
}

void SGBufferSample::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGBufferSample s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["normal"], &s_Item);
		s_Object.normal = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["diffuse"], &s_Item);
		s_Object.diffuse = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["specular"], &s_Item);
		s_Object.specular = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["accumulatedLight"], &s_Item);
		s_Object.accumulatedLight = s_Item;
	}

	s_Object.glossiness = static_cast<float32>(double(p_Document["glossiness"]));

	s_Object.translucency = static_cast<float32>(double(p_Document["translucency"]));

	s_Object.ao = static_cast<float32>(double(p_Document["ao"]));

	s_Object.shadingModel = static_cast<uint32>(int64_t(p_Document["shadingModel"]));

	*reinterpret_cast<SGBufferSample*>(p_Target) = s_Object;
}

void SGBufferSample::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGBufferSample*>(p_Object);

	SVector3::Serialize(&s_Object->normal, p_Serializer, p_OwnOffset + offsetof(SGBufferSample, normal));
	SVector3::Serialize(&s_Object->diffuse, p_Serializer, p_OwnOffset + offsetof(SGBufferSample, diffuse));
	SVector3::Serialize(&s_Object->specular, p_Serializer, p_OwnOffset + offsetof(SGBufferSample, specular));
	SVector3::Serialize(&s_Object->accumulatedLight, p_Serializer, p_OwnOffset + offsetof(SGBufferSample, accumulatedLight));
}

ZHMTypeInfo SRememberActorSaveData::TypeInfo = ZHMTypeInfo("SRememberActorSaveData", sizeof(SRememberActorSaveData), alignof(SRememberActorSaveData), SRememberActorSaveData::WriteJson, SRememberActorSaveData::WriteSimpleJson, SRememberActorSaveData::FromSimpleJson, SRememberActorSaveData::Serialize);

void SRememberActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRememberActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_Actors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_Actors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_Actors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_Actors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SRememberActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRememberActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_Actors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_Actors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_Actors[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_Actors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SRememberActorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRememberActorSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_Actors"])
	{
		s_Object.m_Actors.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SRememberActorSaveData*>(p_Target) = s_Object;
}

void SRememberActorSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRememberActorSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_Actors, p_Serializer, p_OwnOffset + offsetof(SRememberActorSaveData, m_Actors));
}

ZHMTypeInfo SEscortOutBehaviorSaveData::TypeInfo = ZHMTypeInfo("SEscortOutBehaviorSaveData", sizeof(SEscortOutBehaviorSaveData), alignof(SEscortOutBehaviorSaveData), SEscortOutBehaviorSaveData::WriteJson, SEscortOutBehaviorSaveData::WriteSimpleJson, SEscortOutBehaviorSaveData::FromSimpleJson, SEscortOutBehaviorSaveData::Serialize);

void SEscortOutBehaviorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortOutBehaviorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bConversationHelperPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bConversationHelperPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsm, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vExitPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vExitPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tWarningTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tWarningTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHardWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHardWarning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tEscortStateSilenceTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tEscortStateSilenceTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitHitmanToComplyWarningTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tWaitHitmanToComplyWarningTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitHitmanToComplyStateTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tWaitHitmanToComplyStateTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastLookBack") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastLookBack, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReachedExitPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReachedExitPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowExitWarningEnded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowExitWarningEnded;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bJustShowExit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bJustShowExit;
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortOutBehaviorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortOutBehaviorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nSituation") << ":";
	p_Stream << s_Object->m_nSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bConversationHelperPaused") << ":";
	p_Stream << s_Object->m_bConversationHelperPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_fsm") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsm, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vExitPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vExitPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tWarningTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tWarningTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bHardWarning") << ":";
	p_Stream << s_Object->m_bHardWarning;
	p_Stream << ",";

	p_Stream << JsonStr("m_nWarningCount") << ":";
	p_Stream << s_Object->m_nWarningCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_tEscortStateSilenceTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tEscortStateSilenceTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitHitmanToComplyWarningTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tWaitHitmanToComplyWarningTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tWaitHitmanToComplyStateTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tWaitHitmanToComplyStateTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastLookBack") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastLookBack, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bReachedExitPosition") << ":";
	p_Stream << s_Object->m_bReachedExitPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowExitWarningEnded") << ":";
	p_Stream << s_Object->m_bShowExitWarningEnded;
	p_Stream << ",";

	p_Stream << JsonStr("m_bJustShowExit") << ":";
	p_Stream << s_Object->m_bJustShowExit;

	p_Stream << "}";
}

void SEscortOutBehaviorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEscortOutBehaviorSaveData s_Object;

	s_Object.m_nSituation = static_cast<int32>(int64_t(p_Document["m_nSituation"]));

	s_Object.m_bConversationHelperPaused = bool(p_Document["m_bConversationHelperPaused"]);

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsm"], &s_Item);
		s_Object.m_fsm = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vExitPosition"], &s_Item);
		s_Object.m_vExitPosition = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tWarningTime"], &s_Item);
		s_Object.m_tWarningTime = s_Item;
	}

	s_Object.m_bHardWarning = bool(p_Document["m_bHardWarning"]);

	s_Object.m_nWarningCount = static_cast<int32>(int64_t(p_Document["m_nWarningCount"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tEscortStateSilenceTime"], &s_Item);
		s_Object.m_tEscortStateSilenceTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tWaitHitmanToComplyWarningTime"], &s_Item);
		s_Object.m_tWaitHitmanToComplyWarningTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tWaitHitmanToComplyStateTime"], &s_Item);
		s_Object.m_tWaitHitmanToComplyStateTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastLookBack"], &s_Item);
		s_Object.m_tLastLookBack = s_Item;
	}

	s_Object.m_bReachedExitPosition = bool(p_Document["m_bReachedExitPosition"]);

	s_Object.m_bShowExitWarningEnded = bool(p_Document["m_bShowExitWarningEnded"]);

	s_Object.m_bJustShowExit = bool(p_Document["m_bJustShowExit"]);

	*reinterpret_cast<SEscortOutBehaviorSaveData*>(p_Target) = s_Object;
}

void SEscortOutBehaviorSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEscortOutBehaviorSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsm, p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_fsm));
	float4::Serialize(&s_Object->m_vExitPosition, p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_vExitPosition));
	ZGameTime::Serialize(&s_Object->m_tWarningTime, p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_tWarningTime));
	ZGameTime::Serialize(&s_Object->m_tEscortStateSilenceTime, p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_tEscortStateSilenceTime));
	ZGameTime::Serialize(&s_Object->m_tWaitHitmanToComplyWarningTime, p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_tWaitHitmanToComplyWarningTime));
	ZGameTime::Serialize(&s_Object->m_tWaitHitmanToComplyStateTime, p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_tWaitHitmanToComplyStateTime));
	ZGameTime::Serialize(&s_Object->m_tLastLookBack, p_Serializer, p_OwnOffset + offsetof(SEscortOutBehaviorSaveData, m_tLastLookBack));
}

ZHMTypeInfo SRecoverUnconsciousGroupSaveData::TypeInfo = ZHMTypeInfo("SRecoverUnconsciousGroupSaveData", sizeof(SRecoverUnconsciousGroupSaveData), alignof(SRecoverUnconsciousGroupSaveData), SRecoverUnconsciousGroupSaveData::WriteJson, SRecoverUnconsciousGroupSaveData::WriteSimpleJson, SRecoverUnconsciousGroupSaveData::FromSimpleJson, SRecoverUnconsciousGroupSaveData::Serialize);

void SRecoverUnconsciousGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRecoverUnconsciousGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rVictim") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rVictim;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rWaker") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rWaker;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEscalate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEscalate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWokenUpInTheGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWokenUpInTheGroup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFastWakeUp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFastWakeUp;
	p_Stream << "}";

	p_Stream << "}";
}

void SRecoverUnconsciousGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRecoverUnconsciousGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rVictim") << ":";
	p_Stream << s_Object->m_rVictim;
	p_Stream << ",";

	p_Stream << JsonStr("m_rWaker") << ":";
	p_Stream << s_Object->m_rWaker;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimer") << ":";
	p_Stream << s_Object->m_fTimer;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEscalate") << ":";
	p_Stream << s_Object->m_bEscalate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWokenUpInTheGroup") << ":";
	p_Stream << s_Object->m_bWokenUpInTheGroup;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFastWakeUp") << ":";
	p_Stream << s_Object->m_bFastWakeUp;

	p_Stream << "}";
}

void SRecoverUnconsciousGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRecoverUnconsciousGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_rVictim = static_cast<uint32>(int64_t(p_Document["m_rVictim"]));

	s_Object.m_rWaker = static_cast<uint32>(int64_t(p_Document["m_rWaker"]));

	s_Object.m_fTimer = static_cast<float32>(double(p_Document["m_fTimer"]));

	s_Object.m_bEscalate = bool(p_Document["m_bEscalate"]);

	s_Object.m_bWokenUpInTheGroup = bool(p_Document["m_bWokenUpInTheGroup"]);

	s_Object.m_bFastWakeUp = bool(p_Document["m_bFastWakeUp"]);

	*reinterpret_cast<SRecoverUnconsciousGroupSaveData*>(p_Target) = s_Object;
}

void SRecoverUnconsciousGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRecoverUnconsciousGroupSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SRecoverUnconsciousGroupSaveData, m_fsmState));
}

ZHMTypeInfo SCompressedGridFloatField::TypeInfo = ZHMTypeInfo("SCompressedGridFloatField", sizeof(SCompressedGridFloatField), alignof(SCompressedGridFloatField), SCompressedGridFloatField::WriteJson, SCompressedGridFloatField::WriteSimpleJson, SCompressedGridFloatField::FromSimpleJson, SCompressedGridFloatField::Serialize);

void SCompressedGridFloatField::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCompressedGridFloatField*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsSparse") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsSparse;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nFieldSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nFieldSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCRC") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridCRC;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint16>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aIndices[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint8>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item0);
		p_Stream << "}";

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCompressedGridFloatField::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCompressedGridFloatField*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsSparse") << ":";
	p_Stream << s_Object->m_bIsSparse;
	p_Stream << ",";

	p_Stream << JsonStr("m_nFieldSize") << ":";
	p_Stream << s_Object->m_nFieldSize;
	p_Stream << ",";

	p_Stream << JsonStr("m_fInitialValue") << ":";
	p_Stream << s_Object->m_fInitialValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCRC") << ":";
	p_Stream << s_Object->m_nGridCRC;
	p_Stream << ",";

	p_Stream << JsonStr("m_aIndices") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aIndices.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aIndices[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aIndices.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aValues[i];
		p_Stream << static_cast<int>(s_Item0);

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCompressedGridFloatField::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCompressedGridFloatField s_Object;

	s_Object.m_bIsSparse = bool(p_Document["m_bIsSparse"]);

	s_Object.m_nFieldSize = static_cast<uint32>(int64_t(p_Document["m_nFieldSize"]));

	s_Object.m_fInitialValue = static_cast<float32>(double(p_Document["m_fInitialValue"]));

	s_Object.m_nGridCRC = static_cast<uint32>(int64_t(p_Document["m_nGridCRC"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aIndices"])
	{
		s_Object.m_aIndices.push_back(static_cast<uint16>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aValues"])
	{
		s_Object.m_aValues.push_back(static_cast<uint8>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SCompressedGridFloatField*>(p_Target) = s_Object;
}

void SCompressedGridFloatField::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCompressedGridFloatField*>(p_Object);

	TArray<uint16>::Serialize(&s_Object->m_aIndices, p_Serializer, p_OwnOffset + offsetof(SCompressedGridFloatField, m_aIndices));
	TArray<uint8>::Serialize(&s_Object->m_aValues, p_Serializer, p_OwnOffset + offsetof(SCompressedGridFloatField, m_aValues));
}

ZHMTypeInfo SHeroItemAttachmentSaveData::TypeInfo = ZHMTypeInfo("SHeroItemAttachmentSaveData", sizeof(SHeroItemAttachmentSaveData), alignof(SHeroItemAttachmentSaveData), SHeroItemAttachmentSaveData::WriteJson, SHeroItemAttachmentSaveData::WriteSimpleJson, SHeroItemAttachmentSaveData::FromSimpleJson, SHeroItemAttachmentSaveData::Serialize);

void SHeroItemAttachmentSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroItemAttachmentSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroItemAttachmentSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroItemAttachmentSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

void SHeroItemAttachmentSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroItemAttachmentSaveData s_Object;

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	*reinterpret_cast<SHeroItemAttachmentSaveData*>(p_Target) = s_Object;
}

void SHeroItemAttachmentSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHeroItemAttachmentSaveData*>(p_Object);

}

ZHMTypeInfo SMathMultipliesSaveData_SVector2::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_SVector2", sizeof(SMathMultipliesSaveData_SVector2), alignof(SMathMultipliesSaveData_SVector2), SMathMultipliesSaveData_SVector2::WriteJson, SMathMultipliesSaveData_SVector2::WriteSimpleJson, SMathMultipliesSaveData_SVector2::FromSimpleJson, SMathMultipliesSaveData_SVector2::Serialize);

void SMathMultipliesSaveData_SVector2::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultipliesSaveData_SVector2*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SMathMultiplyDivideSaveData_SVector2>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultiplyDivideSaveData_SVector2") << "," << JsonStr("$val") << ":";
		SMathMultiplyDivideSaveData_SVector2::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector2::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultipliesSaveData_SVector2*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SMathMultiplyDivideSaveData_SVector2::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_SVector2::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultipliesSaveData_SVector2 s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SMathMultiplyDivideSaveData_SVector2 s_ArrayItem0;
		SMathMultiplyDivideSaveData_SVector2::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SMathMultipliesSaveData_SVector2*>(p_Target) = s_Object;
}

void SMathMultipliesSaveData_SVector2::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathMultipliesSaveData_SVector2*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_SVector2, m_aEntities));
	TArray<SMathMultiplyDivideSaveData_SVector2>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_SVector2, m_aData));
}

ZHMTypeInfo AnimationTakeDataTypes_SGeneric::TypeInfo = ZHMTypeInfo("AnimationTakeDataTypes.SGeneric", sizeof(AnimationTakeDataTypes_SGeneric), alignof(AnimationTakeDataTypes_SGeneric), AnimationTakeDataTypes_SGeneric::WriteJson, AnimationTakeDataTypes_SGeneric::WriteSimpleJson, AnimationTakeDataTypes_SGeneric::FromSimpleJson, AnimationTakeDataTypes_SGeneric::Serialize);

void AnimationTakeDataTypes_SGeneric::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AnimationTakeDataTypes_SGeneric*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fTest") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTest;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fResourceTest") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->m_fResourceTest, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void AnimationTakeDataTypes_SGeneric::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AnimationTakeDataTypes_SGeneric*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fTest") << ":";
	p_Stream << s_Object->m_fTest;
	p_Stream << ",";

	p_Stream << JsonStr("m_fResourceTest") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->m_fResourceTest, p_Stream);

	p_Stream << "}";
}

void AnimationTakeDataTypes_SGeneric::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AnimationTakeDataTypes_SGeneric s_Object;

	s_Object.m_fTest = static_cast<float32>(double(p_Document["m_fTest"]));

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["m_fResourceTest"], &s_Item);
		s_Object.m_fResourceTest = s_Item;
	}

	*reinterpret_cast<AnimationTakeDataTypes_SGeneric*>(p_Target) = s_Object;
}

void AnimationTakeDataTypes_SGeneric::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AnimationTakeDataTypes_SGeneric*>(p_Object);

	ZRuntimeResourceID::Serialize(&s_Object->m_fResourceTest, p_Serializer, p_OwnOffset + offsetof(AnimationTakeDataTypes_SGeneric, m_fResourceTest));
}

ZHMTypeInfo SSpaceCollectionBehaviorConfiguration::TypeInfo = ZHMTypeInfo("SSpaceCollectionBehaviorConfiguration", sizeof(SSpaceCollectionBehaviorConfiguration), alignof(SSpaceCollectionBehaviorConfiguration), SSpaceCollectionBehaviorConfiguration::WriteJson, SSpaceCollectionBehaviorConfiguration::WriteSimpleJson, SSpaceCollectionBehaviorConfiguration::FromSimpleJson, SSpaceCollectionBehaviorConfiguration::Serialize);

void SSpaceCollectionBehaviorConfiguration::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSpaceCollectionBehaviorConfiguration*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bInclusive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInclusive;
	p_Stream << "}";

	p_Stream << "}";
}

void SSpaceCollectionBehaviorConfiguration::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSpaceCollectionBehaviorConfiguration*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bInclusive") << ":";
	p_Stream << s_Object->m_bInclusive;

	p_Stream << "}";
}

void SSpaceCollectionBehaviorConfiguration::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSpaceCollectionBehaviorConfiguration s_Object;

	s_Object.m_bInclusive = bool(p_Document["m_bInclusive"]);

	*reinterpret_cast<SSpaceCollectionBehaviorConfiguration*>(p_Target) = s_Object;
}

void SSpaceCollectionBehaviorConfiguration::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSpaceCollectionBehaviorConfiguration*>(p_Object);

}

ZHMTypeInfo IEscortOutSituation::TypeInfo = ZHMTypeInfo("IEscortOutSituation", sizeof(IEscortOutSituation), alignof(IEscortOutSituation), IEscortOutSituation::WriteJson, IEscortOutSituation::WriteSimpleJson, IEscortOutSituation::FromSimpleJson, IEscortOutSituation::Serialize);

void IEscortOutSituation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IEscortOutSituation*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEscortOutSituation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IEscortOutSituation*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IEscortOutSituation::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IEscortOutSituation s_Object;

	*reinterpret_cast<IEscortOutSituation*>(p_Target) = s_Object;
}

void IEscortOutSituation::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IEscortOutSituation*>(p_Object);

}

ZHMTypeInfo SBlobsConfigResourceEntry::TypeInfo = ZHMTypeInfo("SBlobsConfigResourceEntry", sizeof(SBlobsConfigResourceEntry), alignof(SBlobsConfigResourceEntry), SBlobsConfigResourceEntry::WriteJson, SBlobsConfigResourceEntry::WriteSimpleJson, SBlobsConfigResourceEntry::FromSimpleJson, SBlobsConfigResourceEntry::Serialize);

void SBlobsConfigResourceEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBlobsConfigResourceEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->Id);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("BlobRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->BlobRid, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SBlobsConfigResourceEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBlobsConfigResourceEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Id") << ":";
	p_Stream << JsonStr(s_Object->Id);
	p_Stream << ",";

	p_Stream << JsonStr("BlobRid") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->BlobRid, p_Stream);

	p_Stream << "}";
}

void SBlobsConfigResourceEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBlobsConfigResourceEntry s_Object;

	s_Object.Id = std::string_view(p_Document["Id"]);

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["BlobRid"], &s_Item);
		s_Object.BlobRid = s_Item;
	}

	*reinterpret_cast<SBlobsConfigResourceEntry*>(p_Target) = s_Object;
}

void SBlobsConfigResourceEntry::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBlobsConfigResourceEntry*>(p_Object);

	ZString::Serialize(&s_Object->Id, p_Serializer, p_OwnOffset + offsetof(SBlobsConfigResourceEntry, Id));
	ZRuntimeResourceID::Serialize(&s_Object->BlobRid, p_Serializer, p_OwnOffset + offsetof(SBlobsConfigResourceEntry, BlobRid));
}

ZHMTypeInfo SGuardBodySituationMemberSaveData::TypeInfo = ZHMTypeInfo("SGuardBodySituationMemberSaveData", sizeof(SGuardBodySituationMemberSaveData), alignof(SGuardBodySituationMemberSaveData), SGuardBodySituationMemberSaveData::WriteJson, SGuardBodySituationMemberSaveData::WriteSimpleJson, SGuardBodySituationMemberSaveData::FromSimpleJson, SGuardBodySituationMemberSaveData::Serialize);

void SGuardBodySituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGuardBodySituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bSearchingForMorgue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSearchingForMorgue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IsExitingSuccessfulBehavior") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IsExitingSuccessfulBehavior;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDeadBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDeadBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rBodybag") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rBodybag;
	p_Stream << "}";

	p_Stream << "}";
}

void SGuardBodySituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGuardBodySituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bSearchingForMorgue") << ":";
	p_Stream << s_Object->m_bSearchingForMorgue;
	p_Stream << ",";

	p_Stream << JsonStr("m_IsExitingSuccessfulBehavior") << ":";
	p_Stream << s_Object->m_IsExitingSuccessfulBehavior;
	p_Stream << ",";

	p_Stream << JsonStr("m_rDeadBody") << ":";
	p_Stream << s_Object->m_rDeadBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_rBodybag") << ":";
	p_Stream << s_Object->m_rBodybag;

	p_Stream << "}";
}

void SGuardBodySituationMemberSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGuardBodySituationMemberSaveData s_Object;

	s_Object.m_bSearchingForMorgue = bool(p_Document["m_bSearchingForMorgue"]);

	s_Object.m_IsExitingSuccessfulBehavior = bool(p_Document["m_IsExitingSuccessfulBehavior"]);

	s_Object.m_rDeadBody = static_cast<uint32>(int64_t(p_Document["m_rDeadBody"]));

	s_Object.m_rBodybag = static_cast<uint32>(int64_t(p_Document["m_rBodybag"]));

	*reinterpret_cast<SGuardBodySituationMemberSaveData*>(p_Target) = s_Object;
}

void SGuardBodySituationMemberSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGuardBodySituationMemberSaveData*>(p_Object);

}

ZHMTypeInfo INetRelevancy::TypeInfo = ZHMTypeInfo("INetRelevancy", sizeof(INetRelevancy), alignof(INetRelevancy), INetRelevancy::WriteJson, INetRelevancy::WriteSimpleJson, INetRelevancy::FromSimpleJson, INetRelevancy::Serialize);

void INetRelevancy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<INetRelevancy*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void INetRelevancy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<INetRelevancy*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void INetRelevancy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	INetRelevancy s_Object;

	*reinterpret_cast<INetRelevancy*>(p_Target) = s_Object;
}

void INetRelevancy::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<INetRelevancy*>(p_Object);

}

ZHMTypeInfo SMathMultiplyDivideSaveData_float32::TypeInfo = ZHMTypeInfo("SMathMultiplyDivideSaveData_float32", sizeof(SMathMultiplyDivideSaveData_float32), alignof(SMathMultiplyDivideSaveData_float32), SMathMultiplyDivideSaveData_float32::WriteJson, SMathMultiplyDivideSaveData_float32::WriteSimpleJson, SMathMultiplyDivideSaveData_float32::FromSimpleJson, SMathMultiplyDivideSaveData_float32::Serialize);

void SMathMultiplyDivideSaveData_float32::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultiplyDivideSaveData_float32*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fA;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fB;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDivide;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_float32::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultiplyDivideSaveData_float32*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << s_Object->m_fA;
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << s_Object->m_fB;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDivide") << ":";
	p_Stream << s_Object->m_bDivide;

	p_Stream << "}";
}

void SMathMultiplyDivideSaveData_float32::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultiplyDivideSaveData_float32 s_Object;

	s_Object.m_fA = static_cast<float32>(double(p_Document["m_fA"]));

	s_Object.m_fB = static_cast<float32>(double(p_Document["m_fB"]));

	s_Object.m_bDivide = bool(p_Document["m_bDivide"]);

	*reinterpret_cast<SMathMultiplyDivideSaveData_float32*>(p_Target) = s_Object;
}

void SMathMultiplyDivideSaveData_float32::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathMultiplyDivideSaveData_float32*>(p_Object);

}

ZHMTypeInfo SAnimPlayerSaveData::TypeInfo = ZHMTypeInfo("SAnimPlayerSaveData", sizeof(SAnimPlayerSaveData), alignof(SAnimPlayerSaveData), SAnimPlayerSaveData::WriteJson, SAnimPlayerSaveData::WriteSimpleJson, SAnimPlayerSaveData::FromSimpleJson, SAnimPlayerSaveData::Serialize);

void SAnimPlayerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAnimPlayerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mTrajectoryQuaterion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTrajectoryQuaterion, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mTrajectoryTranslation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->mTrajectoryTranslation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SBoneTransformSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBoneTransformSaveData") << "," << JsonStr("$val") << ":";
		SBoneTransformSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimPlayerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAnimPlayerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mTrajectoryQuaterion") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTrajectoryQuaterion, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("mTrajectoryTranslation") << ":";
	SVector4::WriteSimpleJson(&s_Object->mTrajectoryTranslation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aBones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBones.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBones[i];
		SBoneTransformSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aBones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SAnimPlayerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAnimPlayerSaveData s_Object;

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mTrajectoryQuaterion"], &s_Item);
		s_Object.mTrajectoryQuaterion = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["mTrajectoryTranslation"], &s_Item);
		s_Object.mTrajectoryTranslation = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aBones"])
	{
		SBoneTransformSaveData s_ArrayItem0;
		SBoneTransformSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aBones.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SAnimPlayerSaveData*>(p_Target) = s_Object;
}

void SAnimPlayerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAnimPlayerSaveData*>(p_Object);

	SVector4::Serialize(&s_Object->mTrajectoryQuaterion, p_Serializer, p_OwnOffset + offsetof(SAnimPlayerSaveData, mTrajectoryQuaterion));
	SVector4::Serialize(&s_Object->mTrajectoryTranslation, p_Serializer, p_OwnOffset + offsetof(SAnimPlayerSaveData, mTrajectoryTranslation));
	TArray<SBoneTransformSaveData>::Serialize(&s_Object->m_aBones, p_Serializer, p_OwnOffset + offsetof(SAnimPlayerSaveData, m_aBones));
}

ZHMTypeInfo SActorKeywordProxiesSaveData::TypeInfo = ZHMTypeInfo("SActorKeywordProxiesSaveData", sizeof(SActorKeywordProxiesSaveData), alignof(SActorKeywordProxiesSaveData), SActorKeywordProxiesSaveData::WriteJson, SActorKeywordProxiesSaveData::WriteSimpleJson, SActorKeywordProxiesSaveData::FromSimpleJson, SActorKeywordProxiesSaveData::Serialize);

void SActorKeywordProxiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorKeywordProxiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorKeywordProxySaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorKeywordProxySaveData") << "," << JsonStr("$val") << ":";
		SActorKeywordProxySaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActorKeywordProxiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorKeywordProxiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SActorKeywordProxySaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorKeywordProxiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorKeywordProxiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SActorKeywordProxySaveData s_ArrayItem0;
		SActorKeywordProxySaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SActorKeywordProxiesSaveData*>(p_Target) = s_Object;
}

void SActorKeywordProxiesSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorKeywordProxiesSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SActorKeywordProxiesSaveData, m_aEntities));
	TArray<SActorKeywordProxySaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SActorKeywordProxiesSaveData, m_aData));
}

ZHMTypeInfo SAccidentObserversGroupSaveData::TypeInfo = ZHMTypeInfo("SAccidentObserversGroupSaveData", sizeof(SAccidentObserversGroupSaveData), alignof(SAccidentObserversGroupSaveData), SAccidentObserversGroupSaveData::WriteJson, SAccidentObserversGroupSaveData::WriteSimpleJson, SAccidentObserversGroupSaveData::FromSimpleJson, SAccidentObserversGroupSaveData::Serialize);

void SAccidentObserversGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAccidentObserversGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aWaitingObservers") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aWaitingObservers.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aWaitingObservers[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aWaitingObservers.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_accidentScaleContext") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EAccidentScaleContext") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_accidentScaleContext) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EAccidentScaleContext", static_cast<int>(s_Object->m_accidentScaleContext))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SAccidentObserversGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAccidentObserversGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_aWaitingObservers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aWaitingObservers.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aWaitingObservers[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aWaitingObservers.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_accidentScaleContext") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EAccidentScaleContext", static_cast<int>(s_Object->m_accidentScaleContext)));

	p_Stream << "}";
}

void SAccidentObserversGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAccidentObserversGroupSaveData s_Object;

	s_Object.m_target = static_cast<uint32>(int64_t(p_Document["m_target"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aWaitingObservers"])
	{
		s_Object.m_aWaitingObservers.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	s_Object.m_accidentScaleContext = static_cast<EAccidentScaleContext>(ZHMEnums::GetEnumValueByName("EAccidentScaleContext", std::string_view(p_Document["m_accidentScaleContext"])));

	*reinterpret_cast<SAccidentObserversGroupSaveData*>(p_Target) = s_Object;
}

void SAccidentObserversGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAccidentObserversGroupSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aWaitingObservers, p_Serializer, p_OwnOffset + offsetof(SAccidentObserversGroupSaveData, m_aWaitingObservers));
}

ZHMTypeInfo ZTime::TypeInfo = ZHMTypeInfo("ZTime", sizeof(ZTime), alignof(ZTime), ZTime::WriteJson, ZTime::WriteSimpleJson, ZTime::FromSimpleJson, ZTime::Serialize);

void ZTime::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZTime*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nValue;
	p_Stream << "}";

	p_Stream << "}";
}

void ZTime::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZTime*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nValue") << ":";
	p_Stream << s_Object->m_nValue;

	p_Stream << "}";
}

void ZTime::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZTime s_Object;

	s_Object.m_nValue = uint64(p_Document["m_nValue"]);

	*reinterpret_cast<ZTime*>(p_Target) = s_Object;
}

void ZTime::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZTime*>(p_Object);

}

ZHMTypeInfo SGaitTransitionEntry::TypeInfo = ZHMTypeInfo("SGaitTransitionEntry", sizeof(SGaitTransitionEntry), alignof(SGaitTransitionEntry), SGaitTransitionEntry::WriteJson, SGaitTransitionEntry::WriteSimpleJson, SGaitTransitionEntry::FromSimpleJson, SGaitTransitionEntry::Serialize);

void SGaitTransitionEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGaitTransitionEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_gait") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EGait") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_gait) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_gait))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_speed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESpeed") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_speed) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESpeed", static_cast<int>(s_Object->m_speed))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SGaitTransitionEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGaitTransitionEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_gait") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EGait", static_cast<int>(s_Object->m_gait)));
	p_Stream << ",";

	p_Stream << JsonStr("m_speed") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESpeed", static_cast<int>(s_Object->m_speed)));

	p_Stream << "}";
}

void SGaitTransitionEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGaitTransitionEntry s_Object;

	s_Object.m_gait = static_cast<EGait>(ZHMEnums::GetEnumValueByName("EGait", std::string_view(p_Document["m_gait"])));

	s_Object.m_speed = static_cast<ESpeed>(ZHMEnums::GetEnumValueByName("ESpeed", std::string_view(p_Document["m_speed"])));

	*reinterpret_cast<SGaitTransitionEntry*>(p_Target) = s_Object;
}

void SGaitTransitionEntry::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGaitTransitionEntry*>(p_Object);

}

ZHMTypeInfo SAnimatedActorActOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorActOrderSaveData", sizeof(SAnimatedActorActOrderSaveData), alignof(SAnimatedActorActOrderSaveData), SAnimatedActorActOrderSaveData::WriteJson, SAnimatedActorActOrderSaveData::WriteSimpleJson, SAnimatedActorActOrderSaveData::FromSimpleJson, SAnimatedActorActOrderSaveData::Serialize);

void SAnimatedActorActOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorActOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bOverrideExistingAct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOverrideExistingAct;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nForcedAnimationNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nForcedAnimationNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkAct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rChildNetworkAct;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rListener") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rListener;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vOriginPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vOriginPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vOriginQuaternion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vOriginQuaternion, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorActOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorActOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bOverrideExistingAct") << ":";
	p_Stream << s_Object->m_bOverrideExistingAct;
	p_Stream << ",";

	p_Stream << JsonStr("m_nForcedAnimationNode") << ":";
	p_Stream << s_Object->m_nForcedAnimationNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_rChildNetworkAct") << ":";
	p_Stream << s_Object->m_rChildNetworkAct;
	p_Stream << ",";

	p_Stream << JsonStr("m_rListener") << ":";
	p_Stream << s_Object->m_rListener;
	p_Stream << ",";

	p_Stream << JsonStr("m_vOriginPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vOriginPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vOriginQuaternion") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vOriginQuaternion, p_Stream);

	p_Stream << "}";
}

void SAnimatedActorActOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAnimatedActorActOrderSaveData s_Object;

	s_Object.m_bOverrideExistingAct = bool(p_Document["m_bOverrideExistingAct"]);

	s_Object.m_nForcedAnimationNode = static_cast<uint32>(int64_t(p_Document["m_nForcedAnimationNode"]));

	s_Object.m_rChildNetworkAct = static_cast<uint32>(int64_t(p_Document["m_rChildNetworkAct"]));

	s_Object.m_rListener = static_cast<uint32>(int64_t(p_Document["m_rListener"]));

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vOriginPosition"], &s_Item);
		s_Object.m_vOriginPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vOriginQuaternion"], &s_Item);
		s_Object.m_vOriginQuaternion = s_Item;
	}

	*reinterpret_cast<SAnimatedActorActOrderSaveData*>(p_Target) = s_Object;
}

void SAnimatedActorActOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorActOrderSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vOriginPosition, p_Serializer, p_OwnOffset + offsetof(SAnimatedActorActOrderSaveData, m_vOriginPosition));
	SVector4::Serialize(&s_Object->m_vOriginQuaternion, p_Serializer, p_OwnOffset + offsetof(SAnimatedActorActOrderSaveData, m_vOriginQuaternion));
}

ZHMTypeInfo SMatrix43::TypeInfo = ZHMTypeInfo("SMatrix43", sizeof(SMatrix43), alignof(SMatrix43), SMatrix43::WriteJson, SMatrix43::WriteSimpleJson, SMatrix43::FromSimpleJson, SMatrix43::Serialize);

void SMatrix43::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix43*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("XAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->XAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->YAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->ZAxis, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("Trans") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->Trans, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix43::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix43*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("XAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->XAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("YAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->YAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("ZAxis") << ":";
	SVector3::WriteSimpleJson(&s_Object->ZAxis, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("Trans") << ":";
	SVector3::WriteSimpleJson(&s_Object->Trans, p_Stream);

	p_Stream << "}";
}

void SMatrix43::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMatrix43 s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["XAxis"], &s_Item);
		s_Object.XAxis = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["YAxis"], &s_Item);
		s_Object.YAxis = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["ZAxis"], &s_Item);
		s_Object.ZAxis = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["Trans"], &s_Item);
		s_Object.Trans = s_Item;
	}

	*reinterpret_cast<SMatrix43*>(p_Target) = s_Object;
}

void SMatrix43::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMatrix43*>(p_Object);

	SVector3::Serialize(&s_Object->XAxis, p_Serializer, p_OwnOffset + offsetof(SMatrix43, XAxis));
	SVector3::Serialize(&s_Object->YAxis, p_Serializer, p_OwnOffset + offsetof(SMatrix43, YAxis));
	SVector3::Serialize(&s_Object->ZAxis, p_Serializer, p_OwnOffset + offsetof(SMatrix43, ZAxis));
	SVector3::Serialize(&s_Object->Trans, p_Serializer, p_OwnOffset + offsetof(SMatrix43, Trans));
}

ZHMTypeInfo SAudioMemoryMonitorEntry::TypeInfo = ZHMTypeInfo("SAudioMemoryMonitorEntry", sizeof(SAudioMemoryMonitorEntry), alignof(SAudioMemoryMonitorEntry), SAudioMemoryMonitorEntry::WriteJson, SAudioMemoryMonitorEntry::WriteSimpleJson, SAudioMemoryMonitorEntry::FromSimpleJson, SAudioMemoryMonitorEntry::Serialize);

void SAudioMemoryMonitorEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioMemoryMonitorEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("shortId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->shortId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("size") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->size;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("references") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZResourceID>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->references.size(); ++i)
	{
		auto& s_Item0 = s_Object->references[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
		ZResourceID::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->references.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioMemoryMonitorEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioMemoryMonitorEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("shortId") << ":";
	p_Stream << s_Object->shortId;
	p_Stream << ",";

	p_Stream << JsonStr("size") << ":";
	p_Stream << s_Object->size;
	p_Stream << ",";

	p_Stream << JsonStr("references") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->references.size(); ++i)
	{
		auto& s_Item0 = s_Object->references[i];
		ZResourceID::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->references.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SAudioMemoryMonitorEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioMemoryMonitorEntry s_Object;

	s_Object.shortId = static_cast<uint32>(int64_t(p_Document["shortId"]));

	s_Object.size = static_cast<uint32>(int64_t(p_Document["size"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["references"])
	{
		ZResourceID s_ArrayItem0;
		ZResourceID::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.references.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SAudioMemoryMonitorEntry*>(p_Target) = s_Object;
}

void SAudioMemoryMonitorEntry::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAudioMemoryMonitorEntry*>(p_Object);

	TArray<ZResourceID>::Serialize(&s_Object->references, p_Serializer, p_OwnOffset + offsetof(SAudioMemoryMonitorEntry, references));
}

ZHMTypeInfo ZHttpUrl::TypeInfo = ZHMTypeInfo("ZHttpUrl", sizeof(ZHttpUrl), alignof(ZHttpUrl), ZHttpUrl::WriteJson, ZHttpUrl::WriteSimpleJson, ZHttpUrl::FromSimpleJson, ZHttpUrl::Serialize);

void ZHttpUrl::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHttpUrl*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZHttpUrl::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHttpUrl*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZHttpUrl::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHttpUrl s_Object;

	*reinterpret_cast<ZHttpUrl*>(p_Target) = s_Object;
}

void ZHttpUrl::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHttpUrl*>(p_Object);

}

ZHMTypeInfo IUIDataListener::TypeInfo = ZHMTypeInfo("IUIDataListener", sizeof(IUIDataListener), alignof(IUIDataListener), IUIDataListener::WriteJson, IUIDataListener::WriteSimpleJson, IUIDataListener::FromSimpleJson, IUIDataListener::Serialize);

void IUIDataListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IUIDataListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IUIDataListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IUIDataListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IUIDataListener::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IUIDataListener s_Object;

	*reinterpret_cast<IUIDataListener*>(p_Target) = s_Object;
}

void IUIDataListener::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IUIDataListener*>(p_Object);

}

ZHMTypeInfo SEvacuateSituationMemberSaveData::TypeInfo = ZHMTypeInfo("SEvacuateSituationMemberSaveData", sizeof(SEvacuateSituationMemberSaveData), alignof(SEvacuateSituationMemberSaveData), SEvacuateSituationMemberSaveData::WriteJson, SEvacuateSituationMemberSaveData::WriteSimpleJson, SEvacuateSituationMemberSaveData::FromSimpleJson, SEvacuateSituationMemberSaveData::Serialize);

void SEvacuateSituationMemberSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEvacuateSituationMemberSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pGuardDutyPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pGuardDutyPoint;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPatrolWaypointIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointSubIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nPatrolWaypointSubIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SEvacuateSituationMemberSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEvacuateSituationMemberSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pGuardDutyPoint") << ":";
	p_Stream << s_Object->m_pGuardDutyPoint;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointIndex") << ":";
	p_Stream << s_Object->m_nPatrolWaypointIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nPatrolWaypointSubIndex") << ":";
	p_Stream << s_Object->m_nPatrolWaypointSubIndex;

	p_Stream << "}";
}

void SEvacuateSituationMemberSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEvacuateSituationMemberSaveData s_Object;

	s_Object.m_pGuardDutyPoint = static_cast<uint32>(int64_t(p_Document["m_pGuardDutyPoint"]));

	s_Object.m_nPatrolWaypointIndex = static_cast<int32>(int64_t(p_Document["m_nPatrolWaypointIndex"]));

	s_Object.m_nPatrolWaypointSubIndex = static_cast<uint32>(int64_t(p_Document["m_nPatrolWaypointSubIndex"]));

	*reinterpret_cast<SEvacuateSituationMemberSaveData*>(p_Target) = s_Object;
}

void SEvacuateSituationMemberSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEvacuateSituationMemberSaveData*>(p_Object);

}

ZHMTypeInfo SOnlineEvent::TypeInfo = ZHMTypeInfo("SOnlineEvent", sizeof(SOnlineEvent), alignof(SOnlineEvent), SOnlineEvent::WriteJson, SOnlineEvent::WriteSimpleJson, SOnlineEvent::FromSimpleJson, SOnlineEvent::Serialize);

void SOnlineEvent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SOnlineEvent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->data, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SOnlineEvent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SOnlineEvent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("data") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->data, p_Stream);

	p_Stream << "}";
}

void SOnlineEvent::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SOnlineEvent s_Object;

	s_Object.sName = std::string_view(p_Document["sName"]);

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["data"], &s_Item);
		s_Object.data = s_Item;
	}

	*reinterpret_cast<SOnlineEvent*>(p_Target) = s_Object;
}

void SOnlineEvent::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SOnlineEvent*>(p_Object);

	ZString::Serialize(&s_Object->sName, p_Serializer, p_OwnOffset + offsetof(SOnlineEvent, sName));
	ZDynamicObject::Serialize(&s_Object->data, p_Serializer, p_OwnOffset + offsetof(SOnlineEvent, data));
}

ZHMTypeInfo SFleeOrderSaveData::TypeInfo = ZHMTypeInfo("SFleeOrderSaveData", sizeof(SFleeOrderSaveData), alignof(SFleeOrderSaveData), SFleeOrderSaveData::WriteJson, SFleeOrderSaveData::WriteSimpleJson, SFleeOrderSaveData::FromSimpleJson, SFleeOrderSaveData::Serialize);

void SFleeOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFleeOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eHelpReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eHelpReason) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_eHelpReason))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridNodeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridNodeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFleeForHelp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFleeForHelp;
	p_Stream << "}";

	p_Stream << "}";
}

void SFleeOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFleeOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eHelpReason") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_eHelpReason)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridNodeIndex") << ":";
	p_Stream << s_Object->m_nGridNodeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFleeForHelp") << ":";
	p_Stream << s_Object->m_bFleeForHelp;

	p_Stream << "}";
}

void SFleeOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFleeOrderSaveData s_Object;

	s_Object.m_eHelpReason = static_cast<EDisturbanceType>(ZHMEnums::GetEnumValueByName("EDisturbanceType", std::string_view(p_Document["m_eHelpReason"])));

	s_Object.m_nGridNodeIndex = static_cast<uint16>(int64_t(p_Document["m_nGridNodeIndex"]));

	s_Object.m_bFleeForHelp = bool(p_Document["m_bFleeForHelp"]);

	*reinterpret_cast<SFleeOrderSaveData*>(p_Target) = s_Object;
}

void SFleeOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SFleeOrderSaveData*>(p_Object);

}

ZHMTypeInfo SExternalEntityTemplatePinConnection::TypeInfo = ZHMTypeInfo("SExternalEntityTemplatePinConnection", sizeof(SExternalEntityTemplatePinConnection), alignof(SExternalEntityTemplatePinConnection), SExternalEntityTemplatePinConnection::WriteJson, SExternalEntityTemplatePinConnection::WriteSimpleJson, SExternalEntityTemplatePinConnection::FromSimpleJson, SExternalEntityTemplatePinConnection::Serialize);

void SExternalEntityTemplatePinConnection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExternalEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("fromEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->fromEntity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("toEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
	SEntityTemplateReference::WriteJson(&s_Object->toEntity, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("fromPinName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->fromPinName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("toPinName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->toPinName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("constantPinValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->constantPinValue, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SExternalEntityTemplatePinConnection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExternalEntityTemplatePinConnection*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("fromEntity") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->fromEntity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("toEntity") << ":";
	SEntityTemplateReference::WriteSimpleJson(&s_Object->toEntity, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("fromPinName") << ":";
	p_Stream << JsonStr(s_Object->fromPinName);
	p_Stream << ",";

	p_Stream << JsonStr("toPinName") << ":";
	p_Stream << JsonStr(s_Object->toPinName);
	p_Stream << ",";

	p_Stream << JsonStr("constantPinValue") << ":";
	ZVariant::WriteSimpleJson(&s_Object->constantPinValue, p_Stream);

	p_Stream << "}";
}

void SExternalEntityTemplatePinConnection::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExternalEntityTemplatePinConnection s_Object;

	{
		SEntityTemplateReference s_Item;
		SEntityTemplateReference::FromSimpleJson(p_Document["fromEntity"], &s_Item);
		s_Object.fromEntity = s_Item;
	}

	{
		SEntityTemplateReference s_Item;
		SEntityTemplateReference::FromSimpleJson(p_Document["toEntity"], &s_Item);
		s_Object.toEntity = s_Item;
	}

	s_Object.fromPinName = std::string_view(p_Document["fromPinName"]);

	s_Object.toPinName = std::string_view(p_Document["toPinName"]);

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["constantPinValue"], &s_Item);
		s_Object.constantPinValue = s_Item;
	}

	*reinterpret_cast<SExternalEntityTemplatePinConnection*>(p_Target) = s_Object;
}

void SExternalEntityTemplatePinConnection::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SExternalEntityTemplatePinConnection*>(p_Object);

	SEntityTemplateReference::Serialize(&s_Object->fromEntity, p_Serializer, p_OwnOffset + offsetof(SExternalEntityTemplatePinConnection, fromEntity));
	SEntityTemplateReference::Serialize(&s_Object->toEntity, p_Serializer, p_OwnOffset + offsetof(SExternalEntityTemplatePinConnection, toEntity));
	ZString::Serialize(&s_Object->fromPinName, p_Serializer, p_OwnOffset + offsetof(SExternalEntityTemplatePinConnection, fromPinName));
	ZString::Serialize(&s_Object->toPinName, p_Serializer, p_OwnOffset + offsetof(SExternalEntityTemplatePinConnection, toPinName));
	ZVariant::Serialize(&s_Object->constantPinValue, p_Serializer, p_OwnOffset + offsetof(SExternalEntityTemplatePinConnection, constantPinValue));
}

ZHMTypeInfo STemplateEntityBlueprint::TypeInfo = ZHMTypeInfo("STemplateEntityBlueprint", sizeof(STemplateEntityBlueprint), alignof(STemplateEntityBlueprint), STemplateEntityBlueprint::WriteJson, STemplateEntityBlueprint::WriteSimpleJson, STemplateEntityBlueprint::FromSimpleJson, STemplateEntityBlueprint::Serialize);

void STemplateEntityBlueprint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateEntityBlueprint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("subType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->subType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("rootEntityIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->rootEntityIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("subEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<STemplateBlueprintSubEntity>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->subEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STemplateBlueprintSubEntity") << "," << JsonStr("$val") << ":";
		STemplateBlueprintSubEntity::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->subEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneTypeIndicesInResourceHeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<int32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->externalSceneTypeIndicesInResourceHeader.size(); ++i)
	{
		auto& s_Item0 = s_Object->externalSceneTypeIndicesInResourceHeader[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->externalSceneTypeIndicesInResourceHeader.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnections") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityTemplatePinConnection>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnections.size(); ++i)
	{
		auto& s_Item0 = s_Object->pinConnections[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SEntityTemplatePinConnection::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->pinConnections.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("inputPinForwardings") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityTemplatePinConnection>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->inputPinForwardings.size(); ++i)
	{
		auto& s_Item0 = s_Object->inputPinForwardings[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SEntityTemplatePinConnection::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->inputPinForwardings.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("outputPinForwardings") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityTemplatePinConnection>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->outputPinForwardings.size(); ++i)
	{
		auto& s_Item0 = s_Object->outputPinForwardings[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SEntityTemplatePinConnection::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->outputPinForwardings.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("overrideDeletes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEntityTemplateReference>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->overrideDeletes.size(); ++i)
	{
		auto& s_Item0 = s_Object->overrideDeletes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEntityTemplateReference") << "," << JsonStr("$val") << ":";
		SEntityTemplateReference::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->overrideDeletes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnectionOverrides") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SExternalEntityTemplatePinConnection>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnectionOverrides.size(); ++i)
	{
		auto& s_Item0 = s_Object->pinConnectionOverrides[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExternalEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SExternalEntityTemplatePinConnection::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->pinConnectionOverrides.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnectionOverrideDeletes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SExternalEntityTemplatePinConnection>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnectionOverrideDeletes.size(); ++i)
	{
		auto& s_Item0 = s_Object->pinConnectionOverrideDeletes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExternalEntityTemplatePinConnection") << "," << JsonStr("$val") << ":";
		SExternalEntityTemplatePinConnection::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->pinConnectionOverrideDeletes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STemplateEntityBlueprint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STemplateEntityBlueprint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("subType") << ":";
	p_Stream << s_Object->subType;
	p_Stream << ",";

	p_Stream << JsonStr("rootEntityIndex") << ":";
	p_Stream << s_Object->rootEntityIndex;
	p_Stream << ",";

	p_Stream << JsonStr("subEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->subEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->subEntities[i];
		STemplateBlueprintSubEntity::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->subEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("externalSceneTypeIndicesInResourceHeader") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->externalSceneTypeIndicesInResourceHeader.size(); ++i)
	{
		auto& s_Item0 = s_Object->externalSceneTypeIndicesInResourceHeader[i];
		p_Stream << s_Item0;

		if (i < s_Object->externalSceneTypeIndicesInResourceHeader.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnections") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnections.size(); ++i)
	{
		auto& s_Item0 = s_Object->pinConnections[i];
		SEntityTemplatePinConnection::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->pinConnections.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("inputPinForwardings") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->inputPinForwardings.size(); ++i)
	{
		auto& s_Item0 = s_Object->inputPinForwardings[i];
		SEntityTemplatePinConnection::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->inputPinForwardings.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("outputPinForwardings") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->outputPinForwardings.size(); ++i)
	{
		auto& s_Item0 = s_Object->outputPinForwardings[i];
		SEntityTemplatePinConnection::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->outputPinForwardings.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("overrideDeletes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->overrideDeletes.size(); ++i)
	{
		auto& s_Item0 = s_Object->overrideDeletes[i];
		SEntityTemplateReference::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->overrideDeletes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnectionOverrides") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnectionOverrides.size(); ++i)
	{
		auto& s_Item0 = s_Object->pinConnectionOverrides[i];
		SExternalEntityTemplatePinConnection::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->pinConnectionOverrides.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("pinConnectionOverrideDeletes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->pinConnectionOverrideDeletes.size(); ++i)
	{
		auto& s_Item0 = s_Object->pinConnectionOverrideDeletes[i];
		SExternalEntityTemplatePinConnection::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->pinConnectionOverrideDeletes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STemplateEntityBlueprint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STemplateEntityBlueprint s_Object;

	s_Object.subType = static_cast<int32>(int64_t(p_Document["subType"]));

	s_Object.rootEntityIndex = static_cast<int32>(int64_t(p_Document["rootEntityIndex"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["subEntities"])
	{
		STemplateBlueprintSubEntity s_ArrayItem0;
		STemplateBlueprintSubEntity::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.subEntities.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["externalSceneTypeIndicesInResourceHeader"])
	{
		s_Object.externalSceneTypeIndicesInResourceHeader.push_back(static_cast<int32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["pinConnections"])
	{
		SEntityTemplatePinConnection s_ArrayItem0;
		SEntityTemplatePinConnection::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.pinConnections.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["inputPinForwardings"])
	{
		SEntityTemplatePinConnection s_ArrayItem0;
		SEntityTemplatePinConnection::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.inputPinForwardings.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["outputPinForwardings"])
	{
		SEntityTemplatePinConnection s_ArrayItem0;
		SEntityTemplatePinConnection::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.outputPinForwardings.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["overrideDeletes"])
	{
		SEntityTemplateReference s_ArrayItem0;
		SEntityTemplateReference::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.overrideDeletes.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["pinConnectionOverrides"])
	{
		SExternalEntityTemplatePinConnection s_ArrayItem0;
		SExternalEntityTemplatePinConnection::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.pinConnectionOverrides.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["pinConnectionOverrideDeletes"])
	{
		SExternalEntityTemplatePinConnection s_ArrayItem0;
		SExternalEntityTemplatePinConnection::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.pinConnectionOverrideDeletes.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<STemplateEntityBlueprint*>(p_Target) = s_Object;
}

void STemplateEntityBlueprint::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STemplateEntityBlueprint*>(p_Object);

	TArray<STemplateBlueprintSubEntity>::Serialize(&s_Object->subEntities, p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, subEntities));
	TArray<int32>::Serialize(&s_Object->externalSceneTypeIndicesInResourceHeader, p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, externalSceneTypeIndicesInResourceHeader));
	TArray<SEntityTemplatePinConnection>::Serialize(&s_Object->pinConnections, p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, pinConnections));
	TArray<SEntityTemplatePinConnection>::Serialize(&s_Object->inputPinForwardings, p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, inputPinForwardings));
	TArray<SEntityTemplatePinConnection>::Serialize(&s_Object->outputPinForwardings, p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, outputPinForwardings));
	TArray<SEntityTemplateReference>::Serialize(&s_Object->overrideDeletes, p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, overrideDeletes));
	TArray<SExternalEntityTemplatePinConnection>::Serialize(&s_Object->pinConnectionOverrides, p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, pinConnectionOverrides));
	TArray<SExternalEntityTemplatePinConnection>::Serialize(&s_Object->pinConnectionOverrideDeletes, p_Serializer, p_OwnOffset + offsetof(STemplateEntityBlueprint, pinConnectionOverrideDeletes));
}

ZHMTypeInfo SDramaControllerSaveData::TypeInfo = ZHMTypeInfo("SDramaControllerSaveData", sizeof(SDramaControllerSaveData), alignof(SDramaControllerSaveData), SDramaControllerSaveData::WriteJson, SDramaControllerSaveData::WriteSimpleJson, SDramaControllerSaveData::FromSimpleJson, SDramaControllerSaveData::Serialize);

void SDramaControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsStartCondValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsStartCondValid;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnableCondValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnableCondValid;
	p_Stream << "}";

	p_Stream << "}";
}

void SDramaControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDramaControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsStartCondValid") << ":";
	p_Stream << s_Object->m_bIsStartCondValid;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsEnableCondValid") << ":";
	p_Stream << s_Object->m_bIsEnableCondValid;

	p_Stream << "}";
}

void SDramaControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDramaControllerSaveData s_Object;

	s_Object.m_bIsStartCondValid = bool(p_Document["m_bIsStartCondValid"]);

	s_Object.m_bIsEnableCondValid = bool(p_Document["m_bIsEnableCondValid"]);

	*reinterpret_cast<SDramaControllerSaveData*>(p_Target) = s_Object;
}

void SDramaControllerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDramaControllerSaveData*>(p_Object);

}

ZHMTypeInfo SSmuggleSituationActorStateSaveData::TypeInfo = ZHMTypeInfo("SSmuggleSituationActorStateSaveData", sizeof(SSmuggleSituationActorStateSaveData), alignof(SSmuggleSituationActorStateSaveData), SSmuggleSituationActorStateSaveData::WriteJson, SSmuggleSituationActorStateSaveData::WriteSimpleJson, SSmuggleSituationActorStateSaveData::FromSimpleJson, SSmuggleSituationActorStateSaveData::Serialize);

void SSmuggleSituationActorStateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSmuggleSituationActorStateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllocatedForSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllocatedForSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZSmuggleSituationEntity.ESmuggleState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZSmuggleSituationEntity.ESmuggleState", static_cast<int>(s_Object->m_nState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nStatePrevious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZSmuggleSituationEntity.ESmuggleState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nStatePrevious) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZSmuggleSituationEntity.ESmuggleState", static_cast<int>(s_Object->m_nStatePrevious))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStateTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStateTimer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetLocationIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTargetLocationIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rScreenplay;
	p_Stream << "}";

	p_Stream << "}";
}

void SSmuggleSituationActorStateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSmuggleSituationActorStateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllocatedForSituation") << ":";
	p_Stream << s_Object->m_bAllocatedForSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_nState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZSmuggleSituationEntity.ESmuggleState", static_cast<int>(s_Object->m_nState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_nStatePrevious") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZSmuggleSituationEntity.ESmuggleState", static_cast<int>(s_Object->m_nStatePrevious)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fStateTimer") << ":";
	p_Stream << s_Object->m_fStateTimer;
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetLocationIndex") << ":";
	p_Stream << s_Object->m_nTargetLocationIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_rScreenplay") << ":";
	p_Stream << s_Object->m_rScreenplay;

	p_Stream << "}";
}

void SSmuggleSituationActorStateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSmuggleSituationActorStateSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_bAllocatedForSituation = bool(p_Document["m_bAllocatedForSituation"]);

	s_Object.m_nState = static_cast<ZSmuggleSituationEntity_ESmuggleState>(ZHMEnums::GetEnumValueByName("ZSmuggleSituationEntity.ESmuggleState", std::string_view(p_Document["m_nState"])));

	s_Object.m_nStatePrevious = static_cast<ZSmuggleSituationEntity_ESmuggleState>(ZHMEnums::GetEnumValueByName("ZSmuggleSituationEntity.ESmuggleState", std::string_view(p_Document["m_nStatePrevious"])));

	s_Object.m_fStateTimer = static_cast<float32>(double(p_Document["m_fStateTimer"]));

	s_Object.m_nTargetLocationIndex = static_cast<int32>(int64_t(p_Document["m_nTargetLocationIndex"]));

	s_Object.m_rScreenplay = static_cast<uint32>(int64_t(p_Document["m_rScreenplay"]));

	*reinterpret_cast<SSmuggleSituationActorStateSaveData*>(p_Target) = s_Object;
}

void SSmuggleSituationActorStateSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSmuggleSituationActorStateSaveData*>(p_Object);

}

ZHMTypeInfo SSmuggleSituationSaveData::TypeInfo = ZHMTypeInfo("SSmuggleSituationSaveData", sizeof(SSmuggleSituationSaveData), alignof(SSmuggleSituationSaveData), SSmuggleSituationSaveData::WriteJson, SSmuggleSituationSaveData::WriteSimpleJson, SSmuggleSituationSaveData::FromSimpleJson, SSmuggleSituationSaveData::Serialize);

void SSmuggleSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSmuggleSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsRunning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfPickups") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumberOfPickups;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aActorsSaveData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SSmuggleSituationActorStateSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorsSaveData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aActorsSaveData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SSmuggleSituationActorStateSaveData") << "," << JsonStr("$val") << ":";
		SSmuggleSituationActorStateSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aActorsSaveData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aMoveToActs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMoveToActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aMoveToActs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aMoveToActs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SSmuggleSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSmuggleSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsEnabled") << ":";
	p_Stream << s_Object->m_bIsEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsRunning") << ":";
	p_Stream << s_Object->m_bIsRunning;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfPickups") << ":";
	p_Stream << s_Object->m_nNumberOfPickups;
	p_Stream << ",";

	p_Stream << JsonStr("m_aActorsSaveData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorsSaveData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aActorsSaveData[i];
		SSmuggleSituationActorStateSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aActorsSaveData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aMoveToActs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aMoveToActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aMoveToActs[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aMoveToActs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SSmuggleSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSmuggleSituationSaveData s_Object;

	s_Object.m_bIsEnabled = bool(p_Document["m_bIsEnabled"]);

	s_Object.m_bIsRunning = bool(p_Document["m_bIsRunning"]);

	s_Object.m_nNumberOfPickups = static_cast<int32>(int64_t(p_Document["m_nNumberOfPickups"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aActorsSaveData"])
	{
		SSmuggleSituationActorStateSaveData s_ArrayItem0;
		SSmuggleSituationActorStateSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aActorsSaveData.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aMoveToActs"])
	{
		s_Object.m_aMoveToActs.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SSmuggleSituationSaveData*>(p_Target) = s_Object;
}

void SSmuggleSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSmuggleSituationSaveData*>(p_Object);

	TArray<SSmuggleSituationActorStateSaveData>::Serialize(&s_Object->m_aActorsSaveData, p_Serializer, p_OwnOffset + offsetof(SSmuggleSituationSaveData, m_aActorsSaveData));
	TArray<uint32>::Serialize(&s_Object->m_aMoveToActs, p_Serializer, p_OwnOffset + offsetof(SSmuggleSituationSaveData, m_aMoveToActs));
}

ZHMTypeInfo SRenderVideoPlayerSaveData::TypeInfo = ZHMTypeInfo("SRenderVideoPlayerSaveData", sizeof(SRenderVideoPlayerSaveData), alignof(SRenderVideoPlayerSaveData), SRenderVideoPlayerSaveData::WriteJson, SRenderVideoPlayerSaveData::WriteSimpleJson, SRenderVideoPlayerSaveData::FromSimpleJson, SRenderVideoPlayerSaveData::Serialize);

void SRenderVideoPlayerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRenderVideoPlayerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bPlaying") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlaying;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLooping") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLooping;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseAlpha") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUseAlpha;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirstFrame") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFirstFrame;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRunning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRunning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bVideoError") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bVideoError;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShouldBeStopped") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShouldBeStopped;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_LastVisible") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_LastVisible, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_StartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_StartTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_RunTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_RunTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SRenderVideoPlayerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRenderVideoPlayerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bPlaying") << ":";
	p_Stream << s_Object->m_bPlaying;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLooping") << ":";
	p_Stream << s_Object->m_bLooping;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseAlpha") << ":";
	p_Stream << s_Object->m_bUseAlpha;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirstFrame") << ":";
	p_Stream << s_Object->m_bFirstFrame;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRunning") << ":";
	p_Stream << s_Object->m_bRunning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bVideoError") << ":";
	p_Stream << s_Object->m_bVideoError;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShouldBeStopped") << ":";
	p_Stream << s_Object->m_bShouldBeStopped;
	p_Stream << ",";

	p_Stream << JsonStr("m_LastVisible") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_LastVisible, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_StartTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_StartTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_RunTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_RunTime, p_Stream);

	p_Stream << "}";
}

void SRenderVideoPlayerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRenderVideoPlayerSaveData s_Object;

	s_Object.m_bPlaying = bool(p_Document["m_bPlaying"]);

	s_Object.m_bPaused = bool(p_Document["m_bPaused"]);

	s_Object.m_bLooping = bool(p_Document["m_bLooping"]);

	s_Object.m_bUseAlpha = bool(p_Document["m_bUseAlpha"]);

	s_Object.m_bFirstFrame = bool(p_Document["m_bFirstFrame"]);

	s_Object.m_bRunning = bool(p_Document["m_bRunning"]);

	s_Object.m_bVideoError = bool(p_Document["m_bVideoError"]);

	s_Object.m_bShouldBeStopped = bool(p_Document["m_bShouldBeStopped"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_LastVisible"], &s_Item);
		s_Object.m_LastVisible = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_StartTime"], &s_Item);
		s_Object.m_StartTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_RunTime"], &s_Item);
		s_Object.m_RunTime = s_Item;
	}

	*reinterpret_cast<SRenderVideoPlayerSaveData*>(p_Target) = s_Object;
}

void SRenderVideoPlayerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRenderVideoPlayerSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_LastVisible, p_Serializer, p_OwnOffset + offsetof(SRenderVideoPlayerSaveData, m_LastVisible));
	ZGameTime::Serialize(&s_Object->m_StartTime, p_Serializer, p_OwnOffset + offsetof(SRenderVideoPlayerSaveData, m_StartTime));
	ZGameTime::Serialize(&s_Object->m_RunTime, p_Serializer, p_OwnOffset + offsetof(SRenderVideoPlayerSaveData, m_RunTime));
}

ZHMTypeInfo SConditionalTimerEntitySaveData::TypeInfo = ZHMTypeInfo("SConditionalTimerEntitySaveData", sizeof(SConditionalTimerEntitySaveData), alignof(SConditionalTimerEntitySaveData), SConditionalTimerEntitySaveData::WriteJson, SConditionalTimerEntitySaveData::WriteSimpleJson, SConditionalTimerEntitySaveData::FromSimpleJson, SConditionalTimerEntitySaveData::Serialize);

void SConditionalTimerEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SConditionalTimerEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValue;
	p_Stream << "}";

	p_Stream << "}";
}

void SConditionalTimerEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SConditionalTimerEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nInterval") << ":";
	p_Stream << s_Object->m_nInterval;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRemaining") << ":";
	p_Stream << s_Object->m_nRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("m_bActive") << ":";
	p_Stream << s_Object->m_bActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bValue") << ":";
	p_Stream << s_Object->m_bValue;

	p_Stream << "}";
}

void SConditionalTimerEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SConditionalTimerEntitySaveData s_Object;

	s_Object.m_nInterval = static_cast<int32>(int64_t(p_Document["m_nInterval"]));

	s_Object.m_nRemaining = static_cast<int32>(int64_t(p_Document["m_nRemaining"]));

	s_Object.m_bActive = bool(p_Document["m_bActive"]);

	s_Object.m_bValue = bool(p_Document["m_bValue"]);

	*reinterpret_cast<SConditionalTimerEntitySaveData*>(p_Target) = s_Object;
}

void SConditionalTimerEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SConditionalTimerEntitySaveData*>(p_Object);

}

ZHMTypeInfo SActorDynamicTemplateHandlerSaveData::TypeInfo = ZHMTypeInfo("SActorDynamicTemplateHandlerSaveData", sizeof(SActorDynamicTemplateHandlerSaveData), alignof(SActorDynamicTemplateHandlerSaveData), SActorDynamicTemplateHandlerSaveData::WriteJson, SActorDynamicTemplateHandlerSaveData::WriteSimpleJson, SActorDynamicTemplateHandlerSaveData::FromSimpleJson, SActorDynamicTemplateHandlerSaveData::Serialize);

void SActorDynamicTemplateHandlerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorDynamicTemplateHandlerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSetpiece") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSetpiece;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorDynamicTemplateHandlerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorDynamicTemplateHandlerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSetpiece") << ":";
	p_Stream << s_Object->m_rSetpiece;

	p_Stream << "}";
}

void SActorDynamicTemplateHandlerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorDynamicTemplateHandlerSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	s_Object.m_rSetpiece = static_cast<uint32>(int64_t(p_Document["m_rSetpiece"]));

	*reinterpret_cast<SActorDynamicTemplateHandlerSaveData*>(p_Target) = s_Object;
}

void SActorDynamicTemplateHandlerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorDynamicTemplateHandlerSaveData*>(p_Object);

}

ZHMTypeInfo ZScopedRuntimePinConDesc::TypeInfo = ZHMTypeInfo("ZScopedRuntimePinConDesc", sizeof(ZScopedRuntimePinConDesc), alignof(ZScopedRuntimePinConDesc), ZScopedRuntimePinConDesc::WriteJson, ZScopedRuntimePinConDesc::WriteSimpleJson, ZScopedRuntimePinConDesc::FromSimpleJson, ZScopedRuntimePinConDesc::Serialize);

void ZScopedRuntimePinConDesc::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZScopedRuntimePinConDesc*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aScopePath") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint64>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aScopePath.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aScopePath[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aScopePath.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_PinConDesc") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimePinConDesc") << "," << JsonStr("$val") << ":";
	ZRuntimePinConDesc::WriteJson(&s_Object->m_PinConDesc, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZScopedRuntimePinConDesc::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZScopedRuntimePinConDesc*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aScopePath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aScopePath.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aScopePath[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aScopePath.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_PinConDesc") << ":";
	ZRuntimePinConDesc::WriteSimpleJson(&s_Object->m_PinConDesc, p_Stream);

	p_Stream << "}";
}

void ZScopedRuntimePinConDesc::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZScopedRuntimePinConDesc s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aScopePath"])
	{
		s_Object.m_aScopePath.push_back(uint64(s_Item0));
	}

	{
		ZRuntimePinConDesc s_Item;
		ZRuntimePinConDesc::FromSimpleJson(p_Document["m_PinConDesc"], &s_Item);
		s_Object.m_PinConDesc = s_Item;
	}

	*reinterpret_cast<ZScopedRuntimePinConDesc*>(p_Target) = s_Object;
}

void ZScopedRuntimePinConDesc::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZScopedRuntimePinConDesc*>(p_Object);

	TArray<uint64>::Serialize(&s_Object->m_aScopePath, p_Serializer, p_OwnOffset + offsetof(ZScopedRuntimePinConDesc, m_aScopePath));
	ZRuntimePinConDesc::Serialize(&s_Object->m_PinConDesc, p_Serializer, p_OwnOffset + offsetof(ZScopedRuntimePinConDesc, m_PinConDesc));
}

ZHMTypeInfo SSequenceTrackSaveData::TypeInfo = ZHMTypeInfo("SSequenceTrackSaveData", sizeof(SSequenceTrackSaveData), alignof(SSequenceTrackSaveData), SSequenceTrackSaveData::WriteJson, SSequenceTrackSaveData::WriteSimpleJson, SSequenceTrackSaveData::FromSimpleJson, SSequenceTrackSaveData::Serialize);

void SSequenceTrackSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSequenceTrackSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTrackEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTrackEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomTrackData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_CustomTrackData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SSequenceTrackSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSequenceTrackSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTrackEntity") << ":";
	p_Stream << s_Object->m_rTrackEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_CustomTrackData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_CustomTrackData, p_Stream);

	p_Stream << "}";
}

void SSequenceTrackSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSequenceTrackSaveData s_Object;

	s_Object.m_rTrackEntity = static_cast<uint32>(int64_t(p_Document["m_rTrackEntity"]));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_CustomTrackData"], &s_Item);
		s_Object.m_CustomTrackData = s_Item;
	}

	*reinterpret_cast<SSequenceTrackSaveData*>(p_Target) = s_Object;
}

void SSequenceTrackSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSequenceTrackSaveData*>(p_Object);

	ZVariant::Serialize(&s_Object->m_CustomTrackData, p_Serializer, p_OwnOffset + offsetof(SSequenceTrackSaveData, m_CustomTrackData));
}

ZHMTypeInfo SAimAssistObjectSaveData::TypeInfo = ZHMTypeInfo("SAimAssistObjectSaveData", sizeof(SAimAssistObjectSaveData), alignof(SAimAssistObjectSaveData), SAimAssistObjectSaveData::WriteJson, SAimAssistObjectSaveData::WriteSimpleJson, SAimAssistObjectSaveData::FromSimpleJson, SAimAssistObjectSaveData::Serialize);

void SAimAssistObjectSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAimAssistObjectSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bHasBeenStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasBeenStarted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasAimAssistActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasAimAssistActivated;
	p_Stream << "}";

	p_Stream << "}";
}

void SAimAssistObjectSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAimAssistObjectSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bHasBeenStarted") << ":";
	p_Stream << s_Object->m_bHasBeenStarted;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasAimAssistActivated") << ":";
	p_Stream << s_Object->m_bWasAimAssistActivated;

	p_Stream << "}";
}

void SAimAssistObjectSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAimAssistObjectSaveData s_Object;

	s_Object.m_bHasBeenStarted = bool(p_Document["m_bHasBeenStarted"]);

	s_Object.m_bWasAimAssistActivated = bool(p_Document["m_bWasAimAssistActivated"]);

	*reinterpret_cast<SAimAssistObjectSaveData*>(p_Target) = s_Object;
}

void SAimAssistObjectSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAimAssistObjectSaveData*>(p_Object);

}

ZHMTypeInfo SExposedEntityTypeDescriptor::TypeInfo = ZHMTypeInfo("SExposedEntityTypeDescriptor", sizeof(SExposedEntityTypeDescriptor), alignof(SExposedEntityTypeDescriptor), SExposedEntityTypeDescriptor::WriteJson, SExposedEntityTypeDescriptor::WriteSimpleJson, SExposedEntityTypeDescriptor::FromSimpleJson, SExposedEntityTypeDescriptor::Serialize);

void SExposedEntityTypeDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExposedEntityTypeDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("types") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZResourceID>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->types.size(); ++i)
	{
		auto& s_Item0 = s_Object->types[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourceID") << "," << JsonStr("$val") << ":";
		ZResourceID::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->types.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("aSupportedTypes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aSupportedTypes.size(); ++i)
	{
		auto& s_Item0 = s_Object->aSupportedTypes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->aSupportedTypes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SExposedEntityTypeDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExposedEntityTypeDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("types") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->types.size(); ++i)
	{
		auto& s_Item0 = s_Object->types[i];
		ZResourceID::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->types.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("aSupportedTypes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aSupportedTypes.size(); ++i)
	{
		auto& s_Item0 = s_Object->aSupportedTypes[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->aSupportedTypes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SExposedEntityTypeDescriptor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExposedEntityTypeDescriptor s_Object;

	s_Object.sName = std::string_view(p_Document["sName"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["types"])
	{
		ZResourceID s_ArrayItem0;
		ZResourceID::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.types.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["aSupportedTypes"])
	{
		s_Object.aSupportedTypes.push_back(std::string_view(s_Item0));
	}

	*reinterpret_cast<SExposedEntityTypeDescriptor*>(p_Target) = s_Object;
}

void SExposedEntityTypeDescriptor::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SExposedEntityTypeDescriptor*>(p_Object);

	ZString::Serialize(&s_Object->sName, p_Serializer, p_OwnOffset + offsetof(SExposedEntityTypeDescriptor, sName));
	TArray<ZResourceID>::Serialize(&s_Object->types, p_Serializer, p_OwnOffset + offsetof(SExposedEntityTypeDescriptor, types));
	TArray<ZString>::Serialize(&s_Object->aSupportedTypes, p_Serializer, p_OwnOffset + offsetof(SExposedEntityTypeDescriptor, aSupportedTypes));
}

ZHMTypeInfo SScreenplayManagerSaveData::TypeInfo = ZHMTypeInfo("SScreenplayManagerSaveData", sizeof(SScreenplayManagerSaveData), alignof(SScreenplayManagerSaveData), SScreenplayManagerSaveData::WriteJson, SScreenplayManagerSaveData::WriteSimpleJson, SScreenplayManagerSaveData::FromSimpleJson, SScreenplayManagerSaveData::Serialize);

void SScreenplayManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SScreenplayManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_DramaActorData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaActorCollectionSaveData") << "," << JsonStr("$val") << ":";
	SDramaActorCollectionSaveData::WriteJson(&s_Object->m_DramaActorData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DramaSituationData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaSituationCollectionSaveData") << "," << JsonStr("$val") << ":";
	SDramaSituationCollectionSaveData::WriteJson(&s_Object->m_DramaSituationData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DramaSetupData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDramaSetupCollectionSaveData") << "," << JsonStr("$val") << ":";
	SDramaSetupCollectionSaveData::WriteJson(&s_Object->m_DramaSetupData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SScreenplayManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SScreenplayManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_DramaActorData") << ":";
	SDramaActorCollectionSaveData::WriteSimpleJson(&s_Object->m_DramaActorData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_DramaSituationData") << ":";
	SDramaSituationCollectionSaveData::WriteSimpleJson(&s_Object->m_DramaSituationData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_DramaSetupData") << ":";
	SDramaSetupCollectionSaveData::WriteSimpleJson(&s_Object->m_DramaSetupData, p_Stream);

	p_Stream << "}";
}

void SScreenplayManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SScreenplayManagerSaveData s_Object;

	{
		SDramaActorCollectionSaveData s_Item;
		SDramaActorCollectionSaveData::FromSimpleJson(p_Document["m_DramaActorData"], &s_Item);
		s_Object.m_DramaActorData = s_Item;
	}

	{
		SDramaSituationCollectionSaveData s_Item;
		SDramaSituationCollectionSaveData::FromSimpleJson(p_Document["m_DramaSituationData"], &s_Item);
		s_Object.m_DramaSituationData = s_Item;
	}

	{
		SDramaSetupCollectionSaveData s_Item;
		SDramaSetupCollectionSaveData::FromSimpleJson(p_Document["m_DramaSetupData"], &s_Item);
		s_Object.m_DramaSetupData = s_Item;
	}

	*reinterpret_cast<SScreenplayManagerSaveData*>(p_Target) = s_Object;
}

void SScreenplayManagerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SScreenplayManagerSaveData*>(p_Object);

	SDramaActorCollectionSaveData::Serialize(&s_Object->m_DramaActorData, p_Serializer, p_OwnOffset + offsetof(SScreenplayManagerSaveData, m_DramaActorData));
	SDramaSituationCollectionSaveData::Serialize(&s_Object->m_DramaSituationData, p_Serializer, p_OwnOffset + offsetof(SScreenplayManagerSaveData, m_DramaSituationData));
	SDramaSetupCollectionSaveData::Serialize(&s_Object->m_DramaSetupData, p_Serializer, p_OwnOffset + offsetof(SScreenplayManagerSaveData, m_DramaSetupData));
}

ZHMTypeInfo SObserversGroupSaveData::TypeInfo = ZHMTypeInfo("SObserversGroupSaveData", sizeof(SObserversGroupSaveData), alignof(SObserversGroupSaveData), SObserversGroupSaveData::WriteJson, SObserversGroupSaveData::WriteSimpleJson, SObserversGroupSaveData::FromSimpleJson, SObserversGroupSaveData::Serialize);

void SObserversGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SObserversGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aWaitingObservers") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aWaitingObservers.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aWaitingObservers[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aWaitingObservers.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_observerDistanceMax") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_observerDistanceMax;
	p_Stream << "}";

	p_Stream << "}";
}

void SObserversGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SObserversGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_aWaitingObservers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aWaitingObservers.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aWaitingObservers[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aWaitingObservers.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_observerDistanceMax") << ":";
	p_Stream << s_Object->m_observerDistanceMax;

	p_Stream << "}";
}

void SObserversGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SObserversGroupSaveData s_Object;

	s_Object.m_target = static_cast<uint32>(int64_t(p_Document["m_target"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aWaitingObservers"])
	{
		s_Object.m_aWaitingObservers.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	s_Object.m_observerDistanceMax = static_cast<float32>(double(p_Document["m_observerDistanceMax"]));

	*reinterpret_cast<SObserversGroupSaveData*>(p_Target) = s_Object;
}

void SObserversGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SObserversGroupSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aWaitingObservers, p_Serializer, p_OwnOffset + offsetof(SObserversGroupSaveData, m_aWaitingObservers));
}

ZHMTypeInfo SLockdownManagerAIZoneSaveData::TypeInfo = ZHMTypeInfo("SLockdownManagerAIZoneSaveData", sizeof(SLockdownManagerAIZoneSaveData), alignof(SLockdownManagerAIZoneSaveData), SLockdownManagerAIZoneSaveData::WriteJson, SLockdownManagerAIZoneSaveData::WriteSimpleJson, SLockdownManagerAIZoneSaveData::FromSimpleJson, SLockdownManagerAIZoneSaveData::Serialize);

void SLockdownManagerAIZoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLockdownManagerAIZoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tExpiry") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tExpiry, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tExpiryHeroOutside") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tExpiryHeroOutside, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rZone;
	p_Stream << "}";

	p_Stream << "}";
}

void SLockdownManagerAIZoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLockdownManagerAIZoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tExpiry") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tExpiry, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tExpiryHeroOutside") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tExpiryHeroOutside, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rZone") << ":";
	p_Stream << s_Object->m_rZone;

	p_Stream << "}";
}

void SLockdownManagerAIZoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLockdownManagerAIZoneSaveData s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tExpiry"], &s_Item);
		s_Object.m_tExpiry = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tExpiryHeroOutside"], &s_Item);
		s_Object.m_tExpiryHeroOutside = s_Item;
	}

	s_Object.m_rZone = static_cast<uint32>(int64_t(p_Document["m_rZone"]));

	*reinterpret_cast<SLockdownManagerAIZoneSaveData*>(p_Target) = s_Object;
}

void SLockdownManagerAIZoneSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLockdownManagerAIZoneSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tExpiry, p_Serializer, p_OwnOffset + offsetof(SLockdownManagerAIZoneSaveData, m_tExpiry));
	ZGameTime::Serialize(&s_Object->m_tExpiryHeroOutside, p_Serializer, p_OwnOffset + offsetof(SLockdownManagerAIZoneSaveData, m_tExpiryHeroOutside));
}

ZHMTypeInfo SCrowdServiceSaveData::TypeInfo = ZHMTypeInfo("SCrowdServiceSaveData", sizeof(SCrowdServiceSaveData), alignof(SCrowdServiceSaveData), SCrowdServiceSaveData::WriteJson, SCrowdServiceSaveData::WriteSimpleJson, SCrowdServiceSaveData::FromSimpleJson, SCrowdServiceSaveData::Serialize);

void SCrowdServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aDeadBodies") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SCrowdBodySaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDeadBodies.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDeadBodies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdBodySaveData") << "," << JsonStr("$val") << ":";
		SCrowdBodySaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aDeadBodies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPerceptiblePool") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPerceptiblePool.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPerceptiblePool[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aPerceptiblePool.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPerceptibleActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPerceptibleActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPerceptibleActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aPerceptibleActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aDeadBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDeadBodies.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDeadBodies[i];
		SCrowdBodySaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aDeadBodies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPerceptiblePool") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPerceptiblePool.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPerceptiblePool[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aPerceptiblePool.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPerceptibleActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPerceptibleActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPerceptibleActors[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aPerceptibleActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdServiceSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aDeadBodies"])
	{
		SCrowdBodySaveData s_ArrayItem0;
		SCrowdBodySaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aDeadBodies.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aPerceptiblePool"])
	{
		s_Object.m_aPerceptiblePool.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aPerceptibleActors"])
	{
		s_Object.m_aPerceptibleActors.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SCrowdServiceSaveData*>(p_Target) = s_Object;
}

void SCrowdServiceSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdServiceSaveData*>(p_Object);

	TArray<SCrowdBodySaveData>::Serialize(&s_Object->m_aDeadBodies, p_Serializer, p_OwnOffset + offsetof(SCrowdServiceSaveData, m_aDeadBodies));
	TArray<uint32>::Serialize(&s_Object->m_aPerceptiblePool, p_Serializer, p_OwnOffset + offsetof(SCrowdServiceSaveData, m_aPerceptiblePool));
	TArray<uint32>::Serialize(&s_Object->m_aPerceptibleActors, p_Serializer, p_OwnOffset + offsetof(SCrowdServiceSaveData, m_aPerceptibleActors));
}

ZHMTypeInfo SHeroEscortSituation2ActorStateSaveData::TypeInfo = ZHMTypeInfo("SHeroEscortSituation2ActorStateSaveData", sizeof(SHeroEscortSituation2ActorStateSaveData), alignof(SHeroEscortSituation2ActorStateSaveData), SHeroEscortSituation2ActorStateSaveData::WriteJson, SHeroEscortSituation2ActorStateSaveData::WriteSimpleJson, SHeroEscortSituation2ActorStateSaveData::FromSimpleJson, SHeroEscortSituation2ActorStateSaveData::Serialize);

void SHeroEscortSituation2ActorStateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituation2ActorStateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllocatedForSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllocatedForSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHeroEscortSituation2Entity.EEscortState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHeroEscortSituation2Entity.EEscortState", static_cast<int>(s_Object->m_eState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eStatePrevious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHeroEscortSituation2Entity.EEscortState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eStatePrevious) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHeroEscortSituation2Entity.EEscortState", static_cast<int>(s_Object->m_eStatePrevious))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentScreenplay;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rPreferredIntermediateScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rPreferredIntermediateScreenplay;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroEscortSituation2ActorStateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituation2ActorStateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nID") << ":";
	p_Stream << s_Object->m_nID;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllocatedForSituation") << ":";
	p_Stream << s_Object->m_bAllocatedForSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHeroEscortSituation2Entity.EEscortState", static_cast<int>(s_Object->m_eState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eStatePrevious") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHeroEscortSituation2Entity.EEscortState", static_cast<int>(s_Object->m_eStatePrevious)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentScreenplay") << ":";
	p_Stream << s_Object->m_rCurrentScreenplay;
	p_Stream << ",";

	p_Stream << JsonStr("m_rPreferredIntermediateScreenplay") << ":";
	p_Stream << s_Object->m_rPreferredIntermediateScreenplay;

	p_Stream << "}";
}

void SHeroEscortSituation2ActorStateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroEscortSituation2ActorStateSaveData s_Object;

	s_Object.m_nID = static_cast<uint32>(int64_t(p_Document["m_nID"]));

	s_Object.m_bAllocatedForSituation = bool(p_Document["m_bAllocatedForSituation"]);

	s_Object.m_eState = static_cast<ZHeroEscortSituation2Entity_EEscortState>(ZHMEnums::GetEnumValueByName("ZHeroEscortSituation2Entity.EEscortState", std::string_view(p_Document["m_eState"])));

	s_Object.m_eStatePrevious = static_cast<ZHeroEscortSituation2Entity_EEscortState>(ZHMEnums::GetEnumValueByName("ZHeroEscortSituation2Entity.EEscortState", std::string_view(p_Document["m_eStatePrevious"])));

	s_Object.m_fDistanceToTarget = static_cast<float32>(double(p_Document["m_fDistanceToTarget"]));

	s_Object.m_rCurrentScreenplay = static_cast<uint32>(int64_t(p_Document["m_rCurrentScreenplay"]));

	s_Object.m_rPreferredIntermediateScreenplay = static_cast<uint32>(int64_t(p_Document["m_rPreferredIntermediateScreenplay"]));

	*reinterpret_cast<SHeroEscortSituation2ActorStateSaveData*>(p_Target) = s_Object;
}

void SHeroEscortSituation2ActorStateSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituation2ActorStateSaveData*>(p_Object);

}

ZHMTypeInfo SEvacuateSituationSaveData::TypeInfo = ZHMTypeInfo("SEvacuateSituationSaveData", sizeof(SEvacuateSituationSaveData), alignof(SEvacuateSituationSaveData), SEvacuateSituationSaveData::WriteJson, SEvacuateSituationSaveData::WriteSimpleJson, SEvacuateSituationSaveData::FromSimpleJson, SEvacuateSituationSaveData::Serialize);

void SEvacuateSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEvacuateSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSeriousSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastSeriousSituation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastThreat") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastThreat, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tresspassGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_tresspassGroup;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_evacuateGroups") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<int32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_evacuateGroups.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_evacuateGroups[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_evacuateGroups.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_activeSafeRooms") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_activeSafeRooms.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_activeSafeRooms[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_activeSafeRooms.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vipsUnderFire") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_vipsUnderFire.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_vipsUnderFire[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_vipsUnderFire.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SEvacuateSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEvacuateSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastSeriousSituation") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastSeriousSituation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastThreat") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastThreat, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tresspassGroup") << ":";
	p_Stream << s_Object->m_tresspassGroup;
	p_Stream << ",";

	p_Stream << JsonStr("m_evacuateGroups") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_evacuateGroups.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_evacuateGroups[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_evacuateGroups.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_activeSafeRooms") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_activeSafeRooms.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_activeSafeRooms[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_activeSafeRooms.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_vipsUnderFire") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_vipsUnderFire.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_vipsUnderFire[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_vipsUnderFire.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEvacuateSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEvacuateSituationSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastSeriousSituation"], &s_Item);
		s_Object.m_tLastSeriousSituation = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastThreat"], &s_Item);
		s_Object.m_tLastThreat = s_Item;
	}

	s_Object.m_tresspassGroup = static_cast<int32>(int64_t(p_Document["m_tresspassGroup"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_evacuateGroups"])
	{
		s_Object.m_evacuateGroups.push_back(static_cast<int32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_activeSafeRooms"])
	{
		s_Object.m_activeSafeRooms.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_vipsUnderFire"])
	{
		s_Object.m_vipsUnderFire.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SEvacuateSituationSaveData*>(p_Target) = s_Object;
}

void SEvacuateSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEvacuateSituationSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SEvacuateSituationSaveData, m_fsmState));
	ZGameTime::Serialize(&s_Object->m_tLastSeriousSituation, p_Serializer, p_OwnOffset + offsetof(SEvacuateSituationSaveData, m_tLastSeriousSituation));
	ZGameTime::Serialize(&s_Object->m_tLastThreat, p_Serializer, p_OwnOffset + offsetof(SEvacuateSituationSaveData, m_tLastThreat));
	TArray<int32>::Serialize(&s_Object->m_evacuateGroups, p_Serializer, p_OwnOffset + offsetof(SEvacuateSituationSaveData, m_evacuateGroups));
	TArray<uint32>::Serialize(&s_Object->m_activeSafeRooms, p_Serializer, p_OwnOffset + offsetof(SEvacuateSituationSaveData, m_activeSafeRooms));
	TArray<uint32>::Serialize(&s_Object->m_vipsUnderFire, p_Serializer, p_OwnOffset + offsetof(SEvacuateSituationSaveData, m_vipsUnderFire));
}

ZHMTypeInfo SAudioEmitterRTPCSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterRTPCSaveData", sizeof(SAudioEmitterRTPCSaveData), alignof(SAudioEmitterRTPCSaveData), SAudioEmitterRTPCSaveData::WriteJson, SAudioEmitterRTPCSaveData::WriteSimpleJson, SAudioEmitterRTPCSaveData::FromSimpleJson, SAudioEmitterRTPCSaveData::Serialize);

void SAudioEmitterRTPCSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterRTPCSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nParamId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nParamId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fValue;
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterRTPCSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterRTPCSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nParamId") << ":";
	p_Stream << s_Object->m_nParamId;
	p_Stream << ",";

	p_Stream << JsonStr("m_fValue") << ":";
	p_Stream << s_Object->m_fValue;

	p_Stream << "}";
}

void SAudioEmitterRTPCSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioEmitterRTPCSaveData s_Object;

	s_Object.m_nParamId = static_cast<uint32>(int64_t(p_Document["m_nParamId"]));

	s_Object.m_fValue = static_cast<float32>(double(p_Document["m_fValue"]));

	*reinterpret_cast<SAudioEmitterRTPCSaveData*>(p_Target) = s_Object;
}

void SAudioEmitterRTPCSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterRTPCSaveData*>(p_Object);

}

ZHMTypeInfo ZHUDUIControllerEntity_SIntelData::TypeInfo = ZHMTypeInfo("ZHUDUIControllerEntity.SIntelData", sizeof(ZHUDUIControllerEntity_SIntelData), alignof(ZHUDUIControllerEntity_SIntelData), ZHUDUIControllerEntity_SIntelData::WriteJson, ZHUDUIControllerEntity_SIntelData::WriteSimpleJson, ZHUDUIControllerEntity_SIntelData::FromSimpleJson, ZHUDUIControllerEntity_SIntelData::Serialize);

void ZHUDUIControllerEntity_SIntelData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDUIControllerEntity_SIntelData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("groupId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->groupId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("intelHeadline") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->intelHeadline);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("repoID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->repoID, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("intelType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->intelType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("showDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->showDuration;
	p_Stream << "}";

	p_Stream << "}";
}

void ZHUDUIControllerEntity_SIntelData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDUIControllerEntity_SIntelData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("groupId") << ":";
	p_Stream << JsonStr(s_Object->groupId);
	p_Stream << ",";

	p_Stream << JsonStr("intelHeadline") << ":";
	p_Stream << JsonStr(s_Object->intelHeadline);
	p_Stream << ",";

	p_Stream << JsonStr("repoID") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->repoID, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("intelType") << ":";
	p_Stream << s_Object->intelType;
	p_Stream << ",";

	p_Stream << JsonStr("showDuration") << ":";
	p_Stream << s_Object->showDuration;

	p_Stream << "}";
}

void ZHUDUIControllerEntity_SIntelData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHUDUIControllerEntity_SIntelData s_Object;

	s_Object.groupId = std::string_view(p_Document["groupId"]);

	s_Object.intelHeadline = std::string_view(p_Document["intelHeadline"]);

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["repoID"], &s_Item);
		s_Object.repoID = s_Item;
	}

	s_Object.intelType = static_cast<int32>(int64_t(p_Document["intelType"]));

	s_Object.showDuration = static_cast<float32>(double(p_Document["showDuration"]));

	*reinterpret_cast<ZHUDUIControllerEntity_SIntelData*>(p_Target) = s_Object;
}

void ZHUDUIControllerEntity_SIntelData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHUDUIControllerEntity_SIntelData*>(p_Object);

	ZString::Serialize(&s_Object->groupId, p_Serializer, p_OwnOffset + offsetof(ZHUDUIControllerEntity_SIntelData, groupId));
	ZString::Serialize(&s_Object->intelHeadline, p_Serializer, p_OwnOffset + offsetof(ZHUDUIControllerEntity_SIntelData, intelHeadline));
	ZRepositoryID::Serialize(&s_Object->repoID, p_Serializer, p_OwnOffset + offsetof(ZHUDUIControllerEntity_SIntelData, repoID));
}

ZHMTypeInfo SLocalizedVideoData::TypeInfo = ZHMTypeInfo("SLocalizedVideoData", sizeof(SLocalizedVideoData), alignof(SLocalizedVideoData), SLocalizedVideoData::WriteJson, SLocalizedVideoData::WriteSimpleJson, SLocalizedVideoData::FromSimpleJson, SLocalizedVideoData::Serialize);

void SLocalizedVideoData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLocalizedVideoData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("AudioLanguages") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->AudioLanguages.size(); ++i)
	{
		auto& s_Item0 = s_Object->AudioLanguages[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->AudioLanguages.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("VideoRidsPerAudioLanguage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZRuntimeResourceID>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->VideoRidsPerAudioLanguage.size(); ++i)
	{
		auto& s_Item0 = s_Object->VideoRidsPerAudioLanguage[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
		ZRuntimeResourceID::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->VideoRidsPerAudioLanguage.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("SubtitleLanguages") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->SubtitleLanguages.size(); ++i)
	{
		auto& s_Item0 = s_Object->SubtitleLanguages[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->SubtitleLanguages.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("SubtitleMarkupsPerLanguage") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->SubtitleMarkupsPerLanguage.size(); ++i)
	{
		auto& s_Item0 = s_Object->SubtitleMarkupsPerLanguage[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->SubtitleMarkupsPerLanguage.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SLocalizedVideoData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLocalizedVideoData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("AudioLanguages") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->AudioLanguages.size(); ++i)
	{
		auto& s_Item0 = s_Object->AudioLanguages[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->AudioLanguages.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("VideoRidsPerAudioLanguage") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->VideoRidsPerAudioLanguage.size(); ++i)
	{
		auto& s_Item0 = s_Object->VideoRidsPerAudioLanguage[i];
		ZRuntimeResourceID::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->VideoRidsPerAudioLanguage.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("SubtitleLanguages") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->SubtitleLanguages.size(); ++i)
	{
		auto& s_Item0 = s_Object->SubtitleLanguages[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->SubtitleLanguages.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("SubtitleMarkupsPerLanguage") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->SubtitleMarkupsPerLanguage.size(); ++i)
	{
		auto& s_Item0 = s_Object->SubtitleMarkupsPerLanguage[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->SubtitleMarkupsPerLanguage.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SLocalizedVideoData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLocalizedVideoData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["AudioLanguages"])
	{
		s_Object.AudioLanguages.push_back(std::string_view(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["VideoRidsPerAudioLanguage"])
	{
		ZRuntimeResourceID s_ArrayItem0;
		ZRuntimeResourceID::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.VideoRidsPerAudioLanguage.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["SubtitleLanguages"])
	{
		s_Object.SubtitleLanguages.push_back(std::string_view(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["SubtitleMarkupsPerLanguage"])
	{
		s_Object.SubtitleMarkupsPerLanguage.push_back(std::string_view(s_Item0));
	}

	*reinterpret_cast<SLocalizedVideoData*>(p_Target) = s_Object;
}

void SLocalizedVideoData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLocalizedVideoData*>(p_Object);

	TArray<ZString>::Serialize(&s_Object->AudioLanguages, p_Serializer, p_OwnOffset + offsetof(SLocalizedVideoData, AudioLanguages));
	TArray<ZRuntimeResourceID>::Serialize(&s_Object->VideoRidsPerAudioLanguage, p_Serializer, p_OwnOffset + offsetof(SLocalizedVideoData, VideoRidsPerAudioLanguage));
	TArray<ZString>::Serialize(&s_Object->SubtitleLanguages, p_Serializer, p_OwnOffset + offsetof(SLocalizedVideoData, SubtitleLanguages));
	TArray<ZString>::Serialize(&s_Object->SubtitleMarkupsPerLanguage, p_Serializer, p_OwnOffset + offsetof(SLocalizedVideoData, SubtitleMarkupsPerLanguage));
}

ZHMTypeInfo AI_SFirePattern01_SData::TypeInfo = ZHMTypeInfo("AI.SFirePattern01.SData", sizeof(AI_SFirePattern01_SData), alignof(AI_SFirePattern01_SData), AI_SFirePattern01_SData::WriteJson, AI_SFirePattern01_SData::WriteSimpleJson, AI_SFirePattern01_SData::FromSimpleJson, AI_SFirePattern01_SData::Serialize);

void AI_SFirePattern01_SData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_SFirePattern01_SData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_BulletsToFire") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_BulletsToFire;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_WaitMinSeconds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_WaitMinSeconds;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_WaitMaxSeconds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_WaitMaxSeconds;
	p_Stream << "}";

	p_Stream << "}";
}

void AI_SFirePattern01_SData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_SFirePattern01_SData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_BulletsToFire") << ":";
	p_Stream << s_Object->m_BulletsToFire;
	p_Stream << ",";

	p_Stream << JsonStr("m_WaitMinSeconds") << ":";
	p_Stream << s_Object->m_WaitMinSeconds;
	p_Stream << ",";

	p_Stream << JsonStr("m_WaitMaxSeconds") << ":";
	p_Stream << s_Object->m_WaitMaxSeconds;

	p_Stream << "}";
}

void AI_SFirePattern01_SData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AI_SFirePattern01_SData s_Object;

	s_Object.m_BulletsToFire = static_cast<uint32>(int64_t(p_Document["m_BulletsToFire"]));

	s_Object.m_WaitMinSeconds = static_cast<float32>(double(p_Document["m_WaitMinSeconds"]));

	s_Object.m_WaitMaxSeconds = static_cast<float32>(double(p_Document["m_WaitMaxSeconds"]));

	*reinterpret_cast<AI_SFirePattern01_SData*>(p_Target) = s_Object;
}

void AI_SFirePattern01_SData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AI_SFirePattern01_SData*>(p_Object);

}

ZHMTypeInfo AI_SFirePattern01::TypeInfo = ZHMTypeInfo("AI.SFirePattern01", sizeof(AI_SFirePattern01), alignof(AI_SFirePattern01), AI_SFirePattern01::WriteJson, AI_SFirePattern01::WriteSimpleJson, AI_SFirePattern01::FromSimpleJson, AI_SFirePattern01::Serialize);

void AI_SFirePattern01::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_SFirePattern01*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_PatternSequenceData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<AI_SFirePattern01_SData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_PatternSequenceData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_PatternSequenceData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("AI_SFirePattern01_SData") << "," << JsonStr("$val") << ":";
		AI_SFirePattern01_SData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_PatternSequenceData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void AI_SFirePattern01::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_SFirePattern01*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_PatternSequenceData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_PatternSequenceData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_PatternSequenceData[i];
		AI_SFirePattern01_SData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_PatternSequenceData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void AI_SFirePattern01::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AI_SFirePattern01 s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_PatternSequenceData"])
	{
		AI_SFirePattern01_SData s_ArrayItem0;
		AI_SFirePattern01_SData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_PatternSequenceData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<AI_SFirePattern01*>(p_Target) = s_Object;
}

void AI_SFirePattern01::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AI_SFirePattern01*>(p_Object);

	TArray<AI_SFirePattern01_SData>::Serialize(&s_Object->m_PatternSequenceData, p_Serializer, p_OwnOffset + offsetof(AI_SFirePattern01, m_PatternSequenceData));
}

ZHMTypeInfo SPerceptibleCrowdBodySaveData::TypeInfo = ZHMTypeInfo("SPerceptibleCrowdBodySaveData", sizeof(SPerceptibleCrowdBodySaveData), alignof(SPerceptibleCrowdBodySaveData), SPerceptibleCrowdBodySaveData::WriteJson, SPerceptibleCrowdBodySaveData::WriteSimpleJson, SPerceptibleCrowdBodySaveData::FromSimpleJson, SPerceptibleCrowdBodySaveData::Serialize);

void SPerceptibleCrowdBodySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPerceptibleCrowdBodySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCombatZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCombatZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSharedKnowledge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSharedKnowledge;
	p_Stream << "}";

	p_Stream << "}";
}

void SPerceptibleCrowdBodySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPerceptibleCrowdBodySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCombatZone") << ":";
	p_Stream << s_Object->m_rCombatZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSharedKnowledge") << ":";
	p_Stream << s_Object->m_rSharedKnowledge;

	p_Stream << "}";
}

void SPerceptibleCrowdBodySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPerceptibleCrowdBodySaveData s_Object;

	s_Object.m_rCombatZone = static_cast<uint32>(int64_t(p_Document["m_rCombatZone"]));

	s_Object.m_rSharedKnowledge = static_cast<int32>(int64_t(p_Document["m_rSharedKnowledge"]));

	*reinterpret_cast<SPerceptibleCrowdBodySaveData*>(p_Target) = s_Object;
}

void SPerceptibleCrowdBodySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SPerceptibleCrowdBodySaveData*>(p_Object);

}

ZHMTypeInfo ZHUDInventoryNotificationController_SData::TypeInfo = ZHMTypeInfo("ZHUDInventoryNotificationController.SData", sizeof(ZHUDInventoryNotificationController_SData), alignof(ZHUDInventoryNotificationController_SData), ZHUDInventoryNotificationController_SData::WriteJson, ZHUDInventoryNotificationController_SData::WriteSimpleJson, ZHUDInventoryNotificationController_SData::FromSimpleJson, ZHUDInventoryNotificationController_SData::Serialize);

void ZHUDInventoryNotificationController_SData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDInventoryNotificationController_SData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sTitleText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sTitleText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodyText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sBodyText);
	p_Stream << "}";

	p_Stream << "}";
}

void ZHUDInventoryNotificationController_SData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDInventoryNotificationController_SData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sTitleText") << ":";
	p_Stream << JsonStr(s_Object->m_sTitleText);
	p_Stream << ",";

	p_Stream << JsonStr("m_sBodyText") << ":";
	p_Stream << JsonStr(s_Object->m_sBodyText);

	p_Stream << "}";
}

void ZHUDInventoryNotificationController_SData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHUDInventoryNotificationController_SData s_Object;

	s_Object.m_sTitleText = std::string_view(p_Document["m_sTitleText"]);

	s_Object.m_sBodyText = std::string_view(p_Document["m_sBodyText"]);

	*reinterpret_cast<ZHUDInventoryNotificationController_SData*>(p_Target) = s_Object;
}

void ZHUDInventoryNotificationController_SData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHUDInventoryNotificationController_SData*>(p_Object);

	ZString::Serialize(&s_Object->m_sTitleText, p_Serializer, p_OwnOffset + offsetof(ZHUDInventoryNotificationController_SData, m_sTitleText));
	ZString::Serialize(&s_Object->m_sBodyText, p_Serializer, p_OwnOffset + offsetof(ZHUDInventoryNotificationController_SData, m_sBodyText));
}

ZHMTypeInfo SDoorSaveData::TypeInfo = ZHMTypeInfo("SDoorSaveData", sizeof(SDoorSaveData), alignof(SDoorSaveData), SDoorSaveData::WriteJson, SDoorSaveData::WriteSimpleJson, SDoorSaveData::FromSimpleJson, SDoorSaveData::Serialize);

void SDoorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDoorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nDoorState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nDoorState;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAnimPercent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAnimPercent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAnimPercent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetAnimPercent;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tOpenTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tOpenTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SDoorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDoorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nDoorState") << ":";
	p_Stream << s_Object->m_nDoorState;
	p_Stream << ",";

	p_Stream << JsonStr("m_fAnimPercent") << ":";
	p_Stream << s_Object->m_fAnimPercent;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAnimPercent") << ":";
	p_Stream << s_Object->m_fTargetAnimPercent;
	p_Stream << ",";

	p_Stream << JsonStr("m_tOpenTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tOpenTime, p_Stream);

	p_Stream << "}";
}

void SDoorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDoorSaveData s_Object;

	s_Object.m_nDoorState = static_cast<int32>(int64_t(p_Document["m_nDoorState"]));

	s_Object.m_fAnimPercent = static_cast<float32>(double(p_Document["m_fAnimPercent"]));

	s_Object.m_fTargetAnimPercent = static_cast<float32>(double(p_Document["m_fTargetAnimPercent"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tOpenTime"], &s_Item);
		s_Object.m_tOpenTime = s_Item;
	}

	*reinterpret_cast<SDoorSaveData*>(p_Target) = s_Object;
}

void SDoorSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDoorSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tOpenTime, p_Serializer, p_OwnOffset + offsetof(SDoorSaveData, m_tOpenTime));
}

ZHMTypeInfo SDetectedInPrivateGroupSaveData::TypeInfo = ZHMTypeInfo("SDetectedInPrivateGroupSaveData", sizeof(SDetectedInPrivateGroupSaveData), alignof(SDetectedInPrivateGroupSaveData), SDetectedInPrivateGroupSaveData::WriteJson, SDetectedInPrivateGroupSaveData::WriteSimpleJson, SDetectedInPrivateGroupSaveData::FromSimpleJson, SDetectedInPrivateGroupSaveData::Serialize);

void SDetectedInPrivateGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDetectedInPrivateGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeWaiting") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimeWaiting;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rLead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rLead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDisbanded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDisbanded;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirstWait") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFirstWait;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";

	p_Stream << "}";
}

void SDetectedInPrivateGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDetectedInPrivateGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeWaiting") << ":";
	p_Stream << s_Object->m_fTimeWaiting;
	p_Stream << ",";

	p_Stream << JsonStr("m_rLead") << ":";
	p_Stream << s_Object->m_rLead;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDisbanded") << ":";
	p_Stream << s_Object->m_bDisbanded;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFirstWait") << ":";
	p_Stream << s_Object->m_bFirstWait;
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;

	p_Stream << "}";
}

void SDetectedInPrivateGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDetectedInPrivateGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_fTimeWaiting = static_cast<float32>(double(p_Document["m_fTimeWaiting"]));

	s_Object.m_rLead = static_cast<uint32>(int64_t(p_Document["m_rLead"]));

	s_Object.m_bDisbanded = bool(p_Document["m_bDisbanded"]);

	s_Object.m_bFirstWait = bool(p_Document["m_bFirstWait"]);

	s_Object.m_target = static_cast<int32>(int64_t(p_Document["m_target"]));

	*reinterpret_cast<SDetectedInPrivateGroupSaveData*>(p_Target) = s_Object;
}

void SDetectedInPrivateGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDetectedInPrivateGroupSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SDetectedInPrivateGroupSaveData, m_fsmState));
}

ZHMTypeInfo ISituation::TypeInfo = ZHMTypeInfo("ISituation", sizeof(ISituation), alignof(ISituation), ISituation::WriteJson, ISituation::WriteSimpleJson, ISituation::FromSimpleJson, ISituation::Serialize);

void ISituation::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISituation*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISituation::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISituation*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ISituation::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ISituation s_Object;

	*reinterpret_cast<ISituation*>(p_Target) = s_Object;
}

void ISituation::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ISituation*>(p_Object);

}

ZHMTypeInfo SGWaypoint::TypeInfo = ZHMTypeInfo("SGWaypoint", sizeof(SGWaypoint), alignof(SGWaypoint), SGWaypoint::WriteJson, SGWaypoint::WriteSimpleJson, SGWaypoint::FromSimpleJson, SGWaypoint::Serialize);

void SGWaypoint::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGWaypoint*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nNeighbor0") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor0;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor1") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor1;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor2") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor2;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor3") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor3;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor4") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor4;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor5") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor5;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor6") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor6;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor7") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nNeighbor7;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("vPos") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->vPos, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nVisionDataOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nVisionDataOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nLayerIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nLayerIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SGWaypoint::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGWaypoint*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nNeighbor0") << ":";
	p_Stream << s_Object->nNeighbor0;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor1") << ":";
	p_Stream << s_Object->nNeighbor1;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor2") << ":";
	p_Stream << s_Object->nNeighbor2;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor3") << ":";
	p_Stream << s_Object->nNeighbor3;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor4") << ":";
	p_Stream << s_Object->nNeighbor4;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor5") << ":";
	p_Stream << s_Object->nNeighbor5;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor6") << ":";
	p_Stream << s_Object->nNeighbor6;
	p_Stream << ",";

	p_Stream << JsonStr("nNeighbor7") << ":";
	p_Stream << s_Object->nNeighbor7;
	p_Stream << ",";

	p_Stream << JsonStr("vPos") << ":";
	float4::WriteSimpleJson(&s_Object->vPos, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("nVisionDataOffset") << ":";
	p_Stream << s_Object->nVisionDataOffset;
	p_Stream << ",";

	p_Stream << JsonStr("nLayerIndex") << ":";
	p_Stream << s_Object->nLayerIndex;

	p_Stream << "}";
}

void SGWaypoint::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGWaypoint s_Object;

	s_Object.nNeighbor0 = static_cast<uint16>(int64_t(p_Document["nNeighbor0"]));

	s_Object.nNeighbor1 = static_cast<uint16>(int64_t(p_Document["nNeighbor1"]));

	s_Object.nNeighbor2 = static_cast<uint16>(int64_t(p_Document["nNeighbor2"]));

	s_Object.nNeighbor3 = static_cast<uint16>(int64_t(p_Document["nNeighbor3"]));

	s_Object.nNeighbor4 = static_cast<uint16>(int64_t(p_Document["nNeighbor4"]));

	s_Object.nNeighbor5 = static_cast<uint16>(int64_t(p_Document["nNeighbor5"]));

	s_Object.nNeighbor6 = static_cast<uint16>(int64_t(p_Document["nNeighbor6"]));

	s_Object.nNeighbor7 = static_cast<uint16>(int64_t(p_Document["nNeighbor7"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["vPos"], &s_Item);
		s_Object.vPos = s_Item;
	}

	s_Object.nVisionDataOffset = static_cast<uint32>(int64_t(p_Document["nVisionDataOffset"]));

	s_Object.nLayerIndex = static_cast<int16>(int64_t(p_Document["nLayerIndex"]));

	*reinterpret_cast<SGWaypoint*>(p_Target) = s_Object;
}

void SGWaypoint::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGWaypoint*>(p_Object);

	float4::Serialize(&s_Object->vPos, p_Serializer, p_OwnOffset + offsetof(SGWaypoint, vPos));
}

ZHMTypeInfo ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData::TypeInfo = ZHMTypeInfo("ZHM5CloseCombatEventConsumer.SCloseCombatSoundEventData", sizeof(ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData), alignof(ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData), ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData::WriteJson, ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData::WriteSimpleJson, ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData::FromSimpleJson, ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData::Serialize);

void ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EHM5SoundCloseCombatEvent") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nEvent) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EHM5SoundCloseCombatEvent", static_cast<int>(s_Object->m_nEvent))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAttenuation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAttenuation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fPitch") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPitch;
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EHM5SoundCloseCombatEvent", static_cast<int>(s_Object->m_nEvent)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fAttenuation") << ":";
	p_Stream << s_Object->m_fAttenuation;
	p_Stream << ",";

	p_Stream << JsonStr("m_fPitch") << ":";
	p_Stream << s_Object->m_fPitch;

	p_Stream << "}";
}

void ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData s_Object;

	s_Object.m_nEvent = static_cast<EHM5SoundCloseCombatEvent>(ZHMEnums::GetEnumValueByName("EHM5SoundCloseCombatEvent", std::string_view(p_Document["m_nEvent"])));

	s_Object.m_fAttenuation = static_cast<float32>(double(p_Document["m_fAttenuation"]));

	s_Object.m_fPitch = static_cast<float32>(double(p_Document["m_fPitch"]));

	*reinterpret_cast<ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData*>(p_Target) = s_Object;
}

void ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData*>(p_Object);

}

ZHMTypeInfo SSavableEntitiesSaveData::TypeInfo = ZHMTypeInfo("SSavableEntitiesSaveData", sizeof(SSavableEntitiesSaveData), alignof(SSavableEntitiesSaveData), SSavableEntitiesSaveData::WriteJson, SSavableEntitiesSaveData::WriteSimpleJson, SSavableEntitiesSaveData::FromSimpleJson, SSavableEntitiesSaveData::Serialize);

void SSavableEntitiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSavableEntitiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SVariantStruct>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVariantStruct") << "," << JsonStr("$val") << ":";
		SVariantStruct::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEntityData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SSavableEntitiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSavableEntitiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityData[i];
		SVariantStruct::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aEntityData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SSavableEntitiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSavableEntitiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntityData"])
	{
		SVariantStruct s_ArrayItem0;
		SVariantStruct::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aEntityData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SSavableEntitiesSaveData*>(p_Target) = s_Object;
}

void SSavableEntitiesSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSavableEntitiesSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SSavableEntitiesSaveData, m_aEntities));
	TArray<SVariantStruct>::Serialize(&s_Object->m_aEntityData, p_Serializer, p_OwnOffset + offsetof(SSavableEntitiesSaveData, m_aEntityData));
}

ZHMTypeInfo ZPhotoModeMenuDataProvider_SPrompt::TypeInfo = ZHMTypeInfo("ZPhotoModeMenuDataProvider.SPrompt", sizeof(ZPhotoModeMenuDataProvider_SPrompt), alignof(ZPhotoModeMenuDataProvider_SPrompt), ZPhotoModeMenuDataProvider_SPrompt::WriteJson, ZPhotoModeMenuDataProvider_SPrompt::WriteSimpleJson, ZPhotoModeMenuDataProvider_SPrompt::FromSimpleJson, ZPhotoModeMenuDataProvider_SPrompt::Serialize);

void ZPhotoModeMenuDataProvider_SPrompt::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZPhotoModeMenuDataProvider_SPrompt*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("aIcons") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZVariant>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aIcons.size(); ++i)
	{
		auto& s_Item0 = s_Object->aIcons[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
		ZVariant::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->aIcons.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sLabel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sLabel);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void ZPhotoModeMenuDataProvider_SPrompt::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZPhotoModeMenuDataProvider_SPrompt*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("aIcons") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->aIcons.size(); ++i)
	{
		auto& s_Item0 = s_Object->aIcons[i];
		ZVariant::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->aIcons.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("sLabel") << ":";
	p_Stream << JsonStr(s_Object->sLabel);
	p_Stream << ",";

	p_Stream << JsonStr("bIsEnabled") << ":";
	p_Stream << s_Object->bIsEnabled;

	p_Stream << "}";
}

void ZPhotoModeMenuDataProvider_SPrompt::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZPhotoModeMenuDataProvider_SPrompt s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["aIcons"])
	{
		ZVariant s_ArrayItem0;
		ZVariant::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.aIcons.push_back(s_ArrayItem0);
	}

	s_Object.sLabel = std::string_view(p_Document["sLabel"]);

	s_Object.bIsEnabled = bool(p_Document["bIsEnabled"]);

	*reinterpret_cast<ZPhotoModeMenuDataProvider_SPrompt*>(p_Target) = s_Object;
}

void ZPhotoModeMenuDataProvider_SPrompt::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZPhotoModeMenuDataProvider_SPrompt*>(p_Object);

	TArray<ZVariant>::Serialize(&s_Object->aIcons, p_Serializer, p_OwnOffset + offsetof(ZPhotoModeMenuDataProvider_SPrompt, aIcons));
	ZString::Serialize(&s_Object->sLabel, p_Serializer, p_OwnOffset + offsetof(ZPhotoModeMenuDataProvider_SPrompt, sLabel));
}

ZHMTypeInfo SHandleDistractionSituationSaveData::TypeInfo = ZHMTypeInfo("SHandleDistractionSituationSaveData", sizeof(SHandleDistractionSituationSaveData), alignof(SHandleDistractionSituationSaveData), SHandleDistractionSituationSaveData::WriteJson, SHandleDistractionSituationSaveData::WriteSimpleJson, SHandleDistractionSituationSaveData::FromSimpleJson, SHandleDistractionSituationSaveData::Serialize);

void SHandleDistractionSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHandleDistractionSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pPreliminaryLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pPreliminaryLeader;
	p_Stream << "}";

	p_Stream << "}";
}

void SHandleDistractionSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHandleDistractionSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << ",";

	p_Stream << JsonStr("m_pPreliminaryLeader") << ":";
	p_Stream << s_Object->m_pPreliminaryLeader;

	p_Stream << "}";
}

void SHandleDistractionSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHandleDistractionSituationSaveData s_Object;

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	s_Object.m_pAssistant = static_cast<uint32>(int64_t(p_Document["m_pAssistant"]));

	s_Object.m_pPreliminaryLeader = static_cast<uint32>(int64_t(p_Document["m_pPreliminaryLeader"]));

	*reinterpret_cast<SHandleDistractionSituationSaveData*>(p_Target) = s_Object;
}

void SHandleDistractionSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHandleDistractionSituationSaveData*>(p_Object);

}

ZHMTypeInfo ZCurve::TypeInfo = ZHMTypeInfo("ZCurve", sizeof(ZCurve), alignof(ZCurve), ZCurve::WriteJson, ZCurve::WriteSimpleJson, ZCurve::FromSimpleJson, ZCurve::Serialize);

void ZCurve::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZCurve*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("data") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<TFixedArray<float32>>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->data.size(); ++i)
	{
		auto& s_Item0 = s_Object->data[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TFixedArray<float32>") << "," << JsonStr("$val") << ":";
		p_Stream << "[";
		for (size_t i = 0; i < s_Item0.size(); ++i)
		{
			auto& s_Item1 = s_Item0[i];
			p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
			p_Stream << s_Item1;
			p_Stream << "}";

			if (i < s_Item0.size() - 1)
				p_Stream << ",";
		}
		p_Stream << "]";
		p_Stream << "}";

		if (i < s_Object->data.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void ZCurve::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZCurve*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("data") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->data.size(); ++i)
	{
		auto& s_Item0 = s_Object->data[i];
		p_Stream << "[";
		for (size_t i = 0; i < s_Item0.size(); ++i)
		{
			auto& s_Item1 = s_Item0[i];
			p_Stream << s_Item1;

			if (i < s_Item0.size() - 1)
				p_Stream << ",";
		}

		p_Stream << "]";

		if (i < s_Object->data.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZCurve::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZCurve s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["data"])
	{
		TFixedArray<float32, 8> s_ArrayItem0;
		size_t s_Index1 = 0;
		for (simdjson::ondemand::value s_Item1 : s_Item0)
		{
			s_ArrayItem0[s_Index1] = static_cast<float32>(double(s_Item1));
			++s_Index1;
		}
		s_Object.data.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<ZCurve*>(p_Target) = s_Object;
}

void ZCurve::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZCurve*>(p_Object);

	TArray<TFixedArray<float32, 8>>::Serialize(&s_Object->data, p_Serializer, p_OwnOffset + offsetof(ZCurve, data));
}

ZHMTypeInfo SCautiousHuntSaveData::TypeInfo = ZHMTypeInfo("SCautiousHuntSaveData", sizeof(SCautiousHuntSaveData), alignof(SCautiousHuntSaveData), SCautiousHuntSaveData::WriteJson, SCautiousHuntSaveData::WriteSimpleJson, SCautiousHuntSaveData::FromSimpleJson, SCautiousHuntSaveData::Serialize);

void SCautiousHuntSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousHuntSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tAnnounceHuntCoolDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tAnnounceHuntCoolDown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tAnnouncedHunt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tAnnouncedHunt, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tShareHuntTargetCoolDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tShareHuntTargetCoolDown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnounceHunt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAnnounceHunt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnouncedHunt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAnnouncedHunt;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayAnnouncementDialog") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayAnnouncementDialog;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHuntTargetKnownKiller") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHuntTargetKnownKiller;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSharedHuntTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSharedHuntTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetBlamed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetBlamed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRuleActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRuleActive;
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousHuntSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousHuntSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tAnnounceHuntCoolDown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tAnnounceHuntCoolDown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tAnnouncedHunt") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tAnnouncedHunt, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tShareHuntTargetCoolDown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tShareHuntTargetCoolDown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnounceHunt") << ":";
	p_Stream << s_Object->m_bAnnounceHunt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnouncedHunt") << ":";
	p_Stream << s_Object->m_bAnnouncedHunt;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayAnnouncementDialog") << ":";
	p_Stream << s_Object->m_bPlayAnnouncementDialog;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHuntTargetKnownKiller") << ":";
	p_Stream << s_Object->m_bHuntTargetKnownKiller;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSharedHuntTarget") << ":";
	p_Stream << s_Object->m_bSharedHuntTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetBlamed") << ":";
	p_Stream << s_Object->m_bTargetBlamed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRuleActive") << ":";
	p_Stream << s_Object->m_bRuleActive;

	p_Stream << "}";
}

void SCautiousHuntSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCautiousHuntSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tAnnounceHuntCoolDown"], &s_Item);
		s_Object.m_tAnnounceHuntCoolDown = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tAnnouncedHunt"], &s_Item);
		s_Object.m_tAnnouncedHunt = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tShareHuntTargetCoolDown"], &s_Item);
		s_Object.m_tShareHuntTargetCoolDown = s_Item;
	}

	s_Object.m_bAnnounceHunt = bool(p_Document["m_bAnnounceHunt"]);

	s_Object.m_bAnnouncedHunt = bool(p_Document["m_bAnnouncedHunt"]);

	s_Object.m_bPlayAnnouncementDialog = bool(p_Document["m_bPlayAnnouncementDialog"]);

	s_Object.m_bHuntTargetKnownKiller = bool(p_Document["m_bHuntTargetKnownKiller"]);

	s_Object.m_bSharedHuntTarget = bool(p_Document["m_bSharedHuntTarget"]);

	s_Object.m_bTargetBlamed = bool(p_Document["m_bTargetBlamed"]);

	s_Object.m_bRuleActive = bool(p_Document["m_bRuleActive"]);

	*reinterpret_cast<SCautiousHuntSaveData*>(p_Target) = s_Object;
}

void SCautiousHuntSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCautiousHuntSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SCautiousHuntSaveData, m_fsmState));
	ZGameTime::Serialize(&s_Object->m_tAnnounceHuntCoolDown, p_Serializer, p_OwnOffset + offsetof(SCautiousHuntSaveData, m_tAnnounceHuntCoolDown));
	ZGameTime::Serialize(&s_Object->m_tAnnouncedHunt, p_Serializer, p_OwnOffset + offsetof(SCautiousHuntSaveData, m_tAnnouncedHunt));
	ZGameTime::Serialize(&s_Object->m_tShareHuntTargetCoolDown, p_Serializer, p_OwnOffset + offsetof(SCautiousHuntSaveData, m_tShareHuntTargetCoolDown));
}

ZHMTypeInfo SHelpingActorSaveData::TypeInfo = ZHMTypeInfo("SHelpingActorSaveData", sizeof(SHelpingActorSaveData), alignof(SHelpingActorSaveData), SHelpingActorSaveData::WriteJson, SHelpingActorSaveData::WriteSimpleJson, SHelpingActorSaveData::FromSimpleJson, SHelpingActorSaveData::Serialize);

void SHelpingActorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHelpingActorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_HelpTargetKnowledgeIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_HelpTargetKnowledgeIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SHelpingActorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHelpingActorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_HelpTargetKnowledgeIndex") << ":";
	p_Stream << s_Object->m_HelpTargetKnowledgeIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SHelpingActorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHelpingActorSaveData s_Object;

	s_Object.m_HelpTargetKnowledgeIndex = static_cast<int32>(int64_t(p_Document["m_HelpTargetKnowledgeIndex"]));

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SHelpingActorSaveData*>(p_Target) = s_Object;
}

void SHelpingActorSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHelpingActorSaveData*>(p_Object);

}

ZHMTypeInfo SRunningCrowdAIEventSaveData::TypeInfo = ZHMTypeInfo("SRunningCrowdAIEventSaveData", sizeof(SRunningCrowdAIEventSaveData), alignof(SRunningCrowdAIEventSaveData), SRunningCrowdAIEventSaveData::WriteJson, SRunningCrowdAIEventSaveData::WriteSimpleJson, SRunningCrowdAIEventSaveData::FromSimpleJson, SRunningCrowdAIEventSaveData::Serialize);

void SRunningCrowdAIEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRunningCrowdAIEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_ReactionEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_ReactionEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CrowdEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CrowdEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_HitmanToBlame") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_HitmanToBlame;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CrowdCoreIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CrowdCoreIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_TimeLeft") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_TimeLeft;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_TimeToPulse") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_TimeToPulse;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Position") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_Position, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_IsInvestigated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_IsInvestigated;
	p_Stream << "}";

	p_Stream << "}";
}

void SRunningCrowdAIEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRunningCrowdAIEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_ReactionEntity") << ":";
	p_Stream << s_Object->m_ReactionEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_CrowdEntity") << ":";
	p_Stream << s_Object->m_CrowdEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_HitmanToBlame") << ":";
	p_Stream << s_Object->m_HitmanToBlame;
	p_Stream << ",";

	p_Stream << JsonStr("m_CrowdCoreIndex") << ":";
	p_Stream << s_Object->m_CrowdCoreIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_TimeLeft") << ":";
	p_Stream << s_Object->m_TimeLeft;
	p_Stream << ",";

	p_Stream << JsonStr("m_TimeToPulse") << ":";
	p_Stream << s_Object->m_TimeToPulse;
	p_Stream << ",";

	p_Stream << JsonStr("m_Position") << ":";
	float4::WriteSimpleJson(&s_Object->m_Position, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_IsInvestigated") << ":";
	p_Stream << s_Object->m_IsInvestigated;

	p_Stream << "}";
}

void SRunningCrowdAIEventSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRunningCrowdAIEventSaveData s_Object;

	s_Object.m_ReactionEntity = static_cast<uint32>(int64_t(p_Document["m_ReactionEntity"]));

	s_Object.m_CrowdEntity = static_cast<uint32>(int64_t(p_Document["m_CrowdEntity"]));

	s_Object.m_HitmanToBlame = static_cast<uint32>(int64_t(p_Document["m_HitmanToBlame"]));

	s_Object.m_CrowdCoreIndex = static_cast<int32>(int64_t(p_Document["m_CrowdCoreIndex"]));

	s_Object.m_TimeLeft = static_cast<float32>(double(p_Document["m_TimeLeft"]));

	s_Object.m_TimeToPulse = static_cast<float32>(double(p_Document["m_TimeToPulse"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_Position"], &s_Item);
		s_Object.m_Position = s_Item;
	}

	s_Object.m_IsInvestigated = bool(p_Document["m_IsInvestigated"]);

	*reinterpret_cast<SRunningCrowdAIEventSaveData*>(p_Target) = s_Object;
}

void SRunningCrowdAIEventSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRunningCrowdAIEventSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_Position, p_Serializer, p_OwnOffset + offsetof(SRunningCrowdAIEventSaveData, m_Position));
}

ZHMTypeInfo SMathMultipliesSaveData_float32::TypeInfo = ZHMTypeInfo("SMathMultipliesSaveData_float32", sizeof(SMathMultipliesSaveData_float32), alignof(SMathMultipliesSaveData_float32), SMathMultipliesSaveData_float32::WriteJson, SMathMultipliesSaveData_float32::WriteSimpleJson, SMathMultipliesSaveData_float32::FromSimpleJson, SMathMultipliesSaveData_float32::Serialize);

void SMathMultipliesSaveData_float32::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultipliesSaveData_float32*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SMathMultiplyDivideSaveData_float32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultiplyDivideSaveData_float32") << "," << JsonStr("$val") << ":";
		SMathMultiplyDivideSaveData_float32::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SMathMultipliesSaveData_float32::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathMultipliesSaveData_float32*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SMathMultiplyDivideSaveData_float32::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathMultipliesSaveData_float32::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathMultipliesSaveData_float32 s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SMathMultiplyDivideSaveData_float32 s_ArrayItem0;
		SMathMultiplyDivideSaveData_float32::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SMathMultipliesSaveData_float32*>(p_Target) = s_Object;
}

void SMathMultipliesSaveData_float32::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathMultipliesSaveData_float32*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_float32, m_aEntities));
	TArray<SMathMultiplyDivideSaveData_float32>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SMathMultipliesSaveData_float32, m_aData));
}

ZHMTypeInfo ZHM5GenericEventConsumer_SGenericEventData::TypeInfo = ZHMTypeInfo("ZHM5GenericEventConsumer.SGenericEventData", sizeof(ZHM5GenericEventConsumer_SGenericEventData), alignof(ZHM5GenericEventConsumer_SGenericEventData), ZHM5GenericEventConsumer_SGenericEventData::WriteJson, ZHM5GenericEventConsumer_SGenericEventData::WriteSimpleJson, ZHM5GenericEventConsumer_SGenericEventData::FromSimpleJson, ZHM5GenericEventConsumer_SGenericEventData::Serialize);

void ZHM5GenericEventConsumer_SGenericEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5GenericEventConsumer_SGenericEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHM5GenericEventConsumer.EEvent") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nEvent) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHM5GenericEventConsumer.EEvent", static_cast<int>(s_Object->m_nEvent))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5GenericEventConsumer_SGenericEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5GenericEventConsumer_SGenericEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHM5GenericEventConsumer.EEvent", static_cast<int>(s_Object->m_nEvent)));

	p_Stream << "}";
}

void ZHM5GenericEventConsumer_SGenericEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5GenericEventConsumer_SGenericEventData s_Object;

	s_Object.m_nEvent = static_cast<ZHM5GenericEventConsumer_EEvent>(ZHMEnums::GetEnumValueByName("ZHM5GenericEventConsumer.EEvent", std::string_view(p_Document["m_nEvent"])));

	*reinterpret_cast<ZHM5GenericEventConsumer_SGenericEventData*>(p_Target) = s_Object;
}

void ZHM5GenericEventConsumer_SGenericEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5GenericEventConsumer_SGenericEventData*>(p_Object);

}

ZHMTypeInfo SInventoryControllerItemSaveData::TypeInfo = ZHMTypeInfo("SInventoryControllerItemSaveData", sizeof(SInventoryControllerItemSaveData), alignof(SInventoryControllerItemSaveData), SInventoryControllerItemSaveData::WriteJson, SInventoryControllerItemSaveData::WriteSimpleJson, SInventoryControllerItemSaveData::FromSimpleJson, SInventoryControllerItemSaveData::Serialize);

void SInventoryControllerItemSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryControllerItemSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItemEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItemEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmo;
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryControllerItemSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryControllerItemSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItemEntity") << ":";
	p_Stream << s_Object->m_rItemEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmo") << ":";
	p_Stream << s_Object->m_nAmmo;

	p_Stream << "}";
}

void SInventoryControllerItemSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryControllerItemSaveData s_Object;

	s_Object.m_rItemEntity = static_cast<uint32>(int64_t(p_Document["m_rItemEntity"]));

	s_Object.m_nAmmo = static_cast<uint32>(int64_t(p_Document["m_nAmmo"]));

	*reinterpret_cast<SInventoryControllerItemSaveData*>(p_Target) = s_Object;
}

void SInventoryControllerItemSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SInventoryControllerItemSaveData*>(p_Object);

}

ZHMTypeInfo SDoorsSaveData::TypeInfo = ZHMTypeInfo("SDoorsSaveData", sizeof(SDoorsSaveData), alignof(SDoorsSaveData), SDoorsSaveData::WriteJson, SDoorsSaveData::WriteSimpleJson, SDoorsSaveData::FromSimpleJson, SDoorsSaveData::Serialize);

void SDoorsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDoorsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDoorSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDoorSaveData") << "," << JsonStr("$val") << ":";
		SDoorSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SDoorsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDoorsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SDoorSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SDoorsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDoorsSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SDoorSaveData s_ArrayItem0;
		SDoorSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SDoorsSaveData*>(p_Target) = s_Object;
}

void SDoorsSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDoorsSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SDoorsSaveData, m_aEntities));
	TArray<SDoorSaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SDoorsSaveData, m_aData));
}

ZHMTypeInfo SPrivateAreaSaveData::TypeInfo = ZHMTypeInfo("SPrivateAreaSaveData", sizeof(SPrivateAreaSaveData), alignof(SPrivateAreaSaveData), SPrivateAreaSaveData::WriteJson, SPrivateAreaSaveData::WriteSimpleJson, SPrivateAreaSaveData::FromSimpleJson, SPrivateAreaSaveData::Serialize);

void SPrivateAreaSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPrivateAreaSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bIsInside") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsInside;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nHasEntered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nHasEntered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasExited") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasExited;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpotted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSpotted;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHitmanEnterPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vHitmanEnterPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vHitmanExitPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vHitmanExitPosition, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SPrivateAreaSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPrivateAreaSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bIsInside") << ":";
	p_Stream << s_Object->m_bIsInside;
	p_Stream << ",";

	p_Stream << JsonStr("m_nHasEntered") << ":";
	p_Stream << s_Object->m_nHasEntered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHasExited") << ":";
	p_Stream << s_Object->m_bHasExited;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSpotted") << ":";
	p_Stream << s_Object->m_bSpotted;
	p_Stream << ",";

	p_Stream << JsonStr("m_vHitmanEnterPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vHitmanEnterPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vHitmanExitPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vHitmanExitPosition, p_Stream);

	p_Stream << "}";
}

void SPrivateAreaSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPrivateAreaSaveData s_Object;

	s_Object.m_bIsInside = bool(p_Document["m_bIsInside"]);

	s_Object.m_nHasEntered = bool(p_Document["m_nHasEntered"]);

	s_Object.m_bHasExited = bool(p_Document["m_bHasExited"]);

	s_Object.m_bSpotted = bool(p_Document["m_bSpotted"]);

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vHitmanEnterPosition"], &s_Item);
		s_Object.m_vHitmanEnterPosition = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vHitmanExitPosition"], &s_Item);
		s_Object.m_vHitmanExitPosition = s_Item;
	}

	*reinterpret_cast<SPrivateAreaSaveData*>(p_Target) = s_Object;
}

void SPrivateAreaSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SPrivateAreaSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vHitmanEnterPosition, p_Serializer, p_OwnOffset + offsetof(SPrivateAreaSaveData, m_vHitmanEnterPosition));
	float4::Serialize(&s_Object->m_vHitmanExitPosition, p_Serializer, p_OwnOffset + offsetof(SPrivateAreaSaveData, m_vHitmanExitPosition));
}

ZHMTypeInfo ZHM5WeaponEventConsumer_SWeaponEventData::TypeInfo = ZHMTypeInfo("ZHM5WeaponEventConsumer.SWeaponEventData", sizeof(ZHM5WeaponEventConsumer_SWeaponEventData), alignof(ZHM5WeaponEventConsumer_SWeaponEventData), ZHM5WeaponEventConsumer_SWeaponEventData::WriteJson, ZHM5WeaponEventConsumer_SWeaponEventData::WriteSimpleJson, ZHM5WeaponEventConsumer_SWeaponEventData::FromSimpleJson, ZHM5WeaponEventConsumer_SWeaponEventData::Serialize);

void ZHM5WeaponEventConsumer_SWeaponEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5WeaponEventConsumer_SWeaponEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHM5WeaponEventConsumer.EAnimWeapon") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nEvent) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHM5WeaponEventConsumer.EAnimWeapon", static_cast<int>(s_Object->m_nEvent))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5WeaponEventConsumer_SWeaponEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5WeaponEventConsumer_SWeaponEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHM5WeaponEventConsumer.EAnimWeapon", static_cast<int>(s_Object->m_nEvent)));

	p_Stream << "}";
}

void ZHM5WeaponEventConsumer_SWeaponEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5WeaponEventConsumer_SWeaponEventData s_Object;

	s_Object.m_nEvent = static_cast<ZHM5WeaponEventConsumer_EAnimWeapon>(ZHMEnums::GetEnumValueByName("ZHM5WeaponEventConsumer.EAnimWeapon", std::string_view(p_Document["m_nEvent"])));

	*reinterpret_cast<ZHM5WeaponEventConsumer_SWeaponEventData*>(p_Target) = s_Object;
}

void ZHM5WeaponEventConsumer_SWeaponEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5WeaponEventConsumer_SWeaponEventData*>(p_Object);

}

ZHMTypeInfo SPatrolGroupSaveData::TypeInfo = ZHMTypeInfo("SPatrolGroupSaveData", sizeof(SPatrolGroupSaveData), alignof(SPatrolGroupSaveData), SPatrolGroupSaveData::WriteJson, SPatrolGroupSaveData::WriteSimpleJson, SPatrolGroupSaveData::FromSimpleJson, SPatrolGroupSaveData::Serialize);

void SPatrolGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPatrolGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nRouteID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRouteID;
	p_Stream << "}";

	p_Stream << "}";
}

void SPatrolGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPatrolGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nRouteID") << ":";
	p_Stream << s_Object->m_nRouteID;

	p_Stream << "}";
}

void SPatrolGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPatrolGroupSaveData s_Object;

	s_Object.m_nRouteID = static_cast<int32>(int64_t(p_Document["m_nRouteID"]));

	*reinterpret_cast<SPatrolGroupSaveData*>(p_Target) = s_Object;
}

void SPatrolGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SPatrolGroupSaveData*>(p_Object);

}

ZHMTypeInfo IOnlineConfigurationListener::TypeInfo = ZHMTypeInfo("IOnlineConfigurationListener", sizeof(IOnlineConfigurationListener), alignof(IOnlineConfigurationListener), IOnlineConfigurationListener::WriteJson, IOnlineConfigurationListener::WriteSimpleJson, IOnlineConfigurationListener::FromSimpleJson, IOnlineConfigurationListener::Serialize);

void IOnlineConfigurationListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IOnlineConfigurationListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IOnlineConfigurationListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IOnlineConfigurationListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IOnlineConfigurationListener::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IOnlineConfigurationListener s_Object;

	*reinterpret_cast<IOnlineConfigurationListener*>(p_Target) = s_Object;
}

void IOnlineConfigurationListener::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IOnlineConfigurationListener*>(p_Object);

}

ZHMTypeInfo SActorTagSaveData::TypeInfo = ZHMTypeInfo("SActorTagSaveData", sizeof(SActorTagSaveData), alignof(SActorTagSaveData), SActorTagSaveData::WriteJson, SActorTagSaveData::WriteSimpleJson, SActorTagSaveData::FromSimpleJson, SActorTagSaveData::Serialize);

void SActorTagSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorTagSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bSeen") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSeen;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTagged") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTagged;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rActorRef") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActorRef;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorTagSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorTagSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bSeen") << ":";
	p_Stream << s_Object->m_bSeen;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTagged") << ":";
	p_Stream << s_Object->m_bTagged;
	p_Stream << ",";

	p_Stream << JsonStr("m_rActorRef") << ":";
	p_Stream << s_Object->m_rActorRef;

	p_Stream << "}";
}

void SActorTagSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorTagSaveData s_Object;

	s_Object.m_bSeen = bool(p_Document["m_bSeen"]);

	s_Object.m_bTagged = bool(p_Document["m_bTagged"]);

	s_Object.m_rActorRef = static_cast<uint32>(int64_t(p_Document["m_rActorRef"]));

	*reinterpret_cast<SActorTagSaveData*>(p_Target) = s_Object;
}

void SActorTagSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorTagSaveData*>(p_Object);

}

ZHMTypeInfo SActorTagManagerSaveData::TypeInfo = ZHMTypeInfo("SActorTagManagerSaveData", sizeof(SActorTagManagerSaveData), alignof(SActorTagManagerSaveData), SActorTagManagerSaveData::WriteJson, SActorTagManagerSaveData::WriteSimpleJson, SActorTagManagerSaveData::FromSimpleJson, SActorTagManagerSaveData::Serialize);

void SActorTagManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorTagManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bContractsCreationMode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bContractsCreationMode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTagCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTagCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxTagCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nMaxTagCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTaggingEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTaggingEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aActorTagData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorTagSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorTagData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aActorTagData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorTagSaveData") << "," << JsonStr("$val") << ":";
		SActorTagSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aActorTagData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActorTagManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorTagManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bContractsCreationMode") << ":";
	p_Stream << s_Object->m_bContractsCreationMode;
	p_Stream << ",";

	p_Stream << JsonStr("m_nTagCount") << ":";
	p_Stream << s_Object->m_nTagCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_nMaxTagCount") << ":";
	p_Stream << s_Object->m_nMaxTagCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTaggingEnabled") << ":";
	p_Stream << s_Object->m_bTaggingEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_aActorTagData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aActorTagData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aActorTagData[i];
		SActorTagSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aActorTagData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorTagManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorTagManagerSaveData s_Object;

	s_Object.m_bContractsCreationMode = bool(p_Document["m_bContractsCreationMode"]);

	s_Object.m_nTagCount = static_cast<int32>(int64_t(p_Document["m_nTagCount"]));

	s_Object.m_nMaxTagCount = static_cast<int32>(int64_t(p_Document["m_nMaxTagCount"]));

	s_Object.m_bTaggingEnabled = bool(p_Document["m_bTaggingEnabled"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aActorTagData"])
	{
		SActorTagSaveData s_ArrayItem0;
		SActorTagSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aActorTagData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SActorTagManagerSaveData*>(p_Target) = s_Object;
}

void SActorTagManagerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorTagManagerSaveData*>(p_Object);

	TArray<SActorTagSaveData>::Serialize(&s_Object->m_aActorTagData, p_Serializer, p_OwnOffset + offsetof(SActorTagManagerSaveData, m_aActorTagData));
}

ZHMTypeInfo SSCCuriousConfiguration::TypeInfo = ZHMTypeInfo("SSCCuriousConfiguration", sizeof(SSCCuriousConfiguration), alignof(SSCCuriousConfiguration), SSCCuriousConfiguration::WriteJson, SSCCuriousConfiguration::WriteSimpleJson, SSCCuriousConfiguration::FromSimpleJson, SSCCuriousConfiguration::Serialize);

void SSCCuriousConfiguration::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSCCuriousConfiguration*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CanGuardsInvestigate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CanGuardsInvestigate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CanCiviliansInvestigate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CanCiviliansInvestigate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CanVIPsInvestigate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CanVIPsInvestigate;
	p_Stream << "}";

	p_Stream << "}";
}

void SSCCuriousConfiguration::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSCCuriousConfiguration*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CanGuardsInvestigate") << ":";
	p_Stream << s_Object->m_CanGuardsInvestigate;
	p_Stream << ",";

	p_Stream << JsonStr("m_CanCiviliansInvestigate") << ":";
	p_Stream << s_Object->m_CanCiviliansInvestigate;
	p_Stream << ",";

	p_Stream << JsonStr("m_CanVIPsInvestigate") << ":";
	p_Stream << s_Object->m_CanVIPsInvestigate;

	p_Stream << "}";
}

void SSCCuriousConfiguration::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSCCuriousConfiguration s_Object;

	s_Object.m_CanGuardsInvestigate = bool(p_Document["m_CanGuardsInvestigate"]);

	s_Object.m_CanCiviliansInvestigate = bool(p_Document["m_CanCiviliansInvestigate"]);

	s_Object.m_CanVIPsInvestigate = bool(p_Document["m_CanVIPsInvestigate"]);

	*reinterpret_cast<SSCCuriousConfiguration*>(p_Target) = s_Object;
}

void SSCCuriousConfiguration::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSCCuriousConfiguration*>(p_Object);

}

ZHMTypeInfo ZHUDAIGuide_SData::TypeInfo = ZHMTypeInfo("ZHUDAIGuide.SData", sizeof(ZHUDAIGuide_SData), alignof(ZHUDAIGuide_SData), ZHUDAIGuide_SData::WriteJson, ZHUDAIGuide_SData::WriteSimpleJson, ZHUDAIGuide_SData::FromSimpleJson, ZHUDAIGuide_SData::Serialize);

void ZHUDAIGuide_SData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDAIGuide_SData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("bDisguiseBroken") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bDisguiseBroken;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bTrespassing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bTrespassing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bInsideAreaBeingInvestigated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bInsideAreaBeingInvestigated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bNearDeadBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bNearDeadBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bVisiblyArmed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bVisiblyArmed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bDisguiseSuspicious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bDisguiseSuspicious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bDeepTrespassing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bDeepTrespassing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bDeepTrespassingNOTUSEDBUTNECESSARYBECAUSEOFREALLYSTRANGEPROPERTYPARSERBUG") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bDeepTrespassingNOTUSEDBUTNECESSARYBECAUSEOFREALLYSTRANGEPROPERTYPARSERBUG;
	p_Stream << "}";

	p_Stream << "}";
}

void ZHUDAIGuide_SData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDAIGuide_SData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("bDisguiseBroken") << ":";
	p_Stream << s_Object->bDisguiseBroken;
	p_Stream << ",";

	p_Stream << JsonStr("bTrespassing") << ":";
	p_Stream << s_Object->bTrespassing;
	p_Stream << ",";

	p_Stream << JsonStr("bInsideAreaBeingInvestigated") << ":";
	p_Stream << s_Object->bInsideAreaBeingInvestigated;
	p_Stream << ",";

	p_Stream << JsonStr("bNearDeadBody") << ":";
	p_Stream << s_Object->bNearDeadBody;
	p_Stream << ",";

	p_Stream << JsonStr("bVisiblyArmed") << ":";
	p_Stream << s_Object->bVisiblyArmed;
	p_Stream << ",";

	p_Stream << JsonStr("bDisguiseSuspicious") << ":";
	p_Stream << s_Object->bDisguiseSuspicious;
	p_Stream << ",";

	p_Stream << JsonStr("bDeepTrespassing") << ":";
	p_Stream << s_Object->bDeepTrespassing;
	p_Stream << ",";

	p_Stream << JsonStr("bDeepTrespassingNOTUSEDBUTNECESSARYBECAUSEOFREALLYSTRANGEPROPERTYPARSERBUG") << ":";
	p_Stream << s_Object->bDeepTrespassingNOTUSEDBUTNECESSARYBECAUSEOFREALLYSTRANGEPROPERTYPARSERBUG;

	p_Stream << "}";
}

void ZHUDAIGuide_SData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHUDAIGuide_SData s_Object;

	s_Object.bDisguiseBroken = bool(p_Document["bDisguiseBroken"]);

	s_Object.bTrespassing = bool(p_Document["bTrespassing"]);

	s_Object.bInsideAreaBeingInvestigated = bool(p_Document["bInsideAreaBeingInvestigated"]);

	s_Object.bNearDeadBody = bool(p_Document["bNearDeadBody"]);

	s_Object.bVisiblyArmed = bool(p_Document["bVisiblyArmed"]);

	s_Object.bDisguiseSuspicious = bool(p_Document["bDisguiseSuspicious"]);

	s_Object.bDeepTrespassing = bool(p_Document["bDeepTrespassing"]);

	s_Object.bDeepTrespassingNOTUSEDBUTNECESSARYBECAUSEOFREALLYSTRANGEPROPERTYPARSERBUG = bool(p_Document["bDeepTrespassingNOTUSEDBUTNECESSARYBECAUSEOFREALLYSTRANGEPROPERTYPARSERBUG"]);

	*reinterpret_cast<ZHUDAIGuide_SData*>(p_Target) = s_Object;
}

void ZHUDAIGuide_SData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHUDAIGuide_SData*>(p_Object);

}

ZHMTypeInfo IContractObjective::TypeInfo = ZHMTypeInfo("IContractObjective", sizeof(IContractObjective), alignof(IContractObjective), IContractObjective::WriteJson, IContractObjective::WriteSimpleJson, IContractObjective::FromSimpleJson, IContractObjective::Serialize);

void IContractObjective::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IContractObjective*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IContractObjective::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IContractObjective*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IContractObjective::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IContractObjective s_Object;

	*reinterpret_cast<IContractObjective*>(p_Target) = s_Object;
}

void IContractObjective::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IContractObjective*>(p_Object);

}

ZHMTypeInfo STargetableBoneConfiguration::TypeInfo = ZHMTypeInfo("STargetableBoneConfiguration", sizeof(STargetableBoneConfiguration), alignof(STargetableBoneConfiguration), STargetableBoneConfiguration::WriteJson, STargetableBoneConfiguration::WriteSimpleJson, STargetableBoneConfiguration::FromSimpleJson, STargetableBoneConfiguration::Serialize);

void STargetableBoneConfiguration::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STargetableBoneConfiguration*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eBone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("BoneId.Enum") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eBone) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("BoneId.Enum", static_cast<int>(s_Object->m_eBone))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fBoneRadiusOverride") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fBoneRadiusOverride;
	p_Stream << "}";

	p_Stream << "}";
}

void STargetableBoneConfiguration::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STargetableBoneConfiguration*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eBone") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("BoneId.Enum", static_cast<int>(s_Object->m_eBone)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fBoneRadiusOverride") << ":";
	p_Stream << s_Object->m_fBoneRadiusOverride;

	p_Stream << "}";
}

void STargetableBoneConfiguration::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STargetableBoneConfiguration s_Object;

	s_Object.m_eBone = static_cast<BoneId_Enum>(ZHMEnums::GetEnumValueByName("BoneId.Enum", std::string_view(p_Document["m_eBone"])));

	s_Object.m_fBoneRadiusOverride = static_cast<float32>(double(p_Document["m_fBoneRadiusOverride"]));

	*reinterpret_cast<STargetableBoneConfiguration*>(p_Target) = s_Object;
}

void STargetableBoneConfiguration::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STargetableBoneConfiguration*>(p_Object);

}

ZHMTypeInfo SPFObstactleSaveData::TypeInfo = ZHMTypeInfo("SPFObstactleSaveData", sizeof(SPFObstactleSaveData), alignof(SPFObstactleSaveData), SPFObstactleSaveData::WriteJson, SPFObstactleSaveData::WriteSimpleJson, SPFObstactleSaveData::FromSimpleJson, SPFObstactleSaveData::Serialize);

void SPFObstactleSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPFObstactleSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SPFObstactleSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPFObstactleSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SPFObstactleSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPFObstactleSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SPFObstactleSaveData*>(p_Target) = s_Object;
}

void SPFObstactleSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SPFObstactleSaveData*>(p_Object);

}

ZHMTypeInfo SCrowdCells::TypeInfo = ZHMTypeInfo("SCrowdCells", sizeof(SCrowdCells), alignof(SCrowdCells), SCrowdCells::WriteJson, SCrowdCells::WriteSimpleJson, SCrowdCells::FromSimpleJson, SCrowdCells::Serialize);

void SCrowdCells::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdCells*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_cells") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TFixedArray<uint8>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_cells.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_cells[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item0);
		p_Stream << "}";

		if (i < s_Object->m_cells.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdCells::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdCells*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_cells") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_cells.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_cells[i];
		p_Stream << static_cast<int>(s_Item0);

		if (i < s_Object->m_cells.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdCells::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdCells s_Object;

	size_t s_Index0 = 0;
	for (simdjson::ondemand::value s_Item0 : p_Document["m_cells"])
	{
		s_Object.m_cells[s_Index0] = static_cast<uint8>(int64_t(s_Item0));
		++s_Index0;
	}

	*reinterpret_cast<SCrowdCells*>(p_Target) = s_Object;
}

void SCrowdCells::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdCells*>(p_Object);

	TFixedArray<uint8, 128>::Serialize(&s_Object->m_cells, p_Serializer, p_OwnOffset + offsetof(SCrowdCells, m_cells));
}

ZHMTypeInfo SUIOptionsSaveData::TypeInfo = ZHMTypeInfo("SUIOptionsSaveData", sizeof(SUIOptionsSaveData), alignof(SUIOptionsSaveData), SUIOptionsSaveData::WriteJson, SUIOptionsSaveData::WriteSimpleJson, SUIOptionsSaveData::FromSimpleJson, SUIOptionsSaveData::Serialize);

void SUIOptionsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SUIOptionsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aKeys") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<_EUIOptionKey>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeys.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aKeys[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("_EUIOptionKey") << "," << JsonStr("$val") << ":";
		p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Item0) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("_EUIOptionKey", static_cast<int>(s_Item0))) << "}";
		p_Stream << "}";

		if (i < s_Object->m_aKeys.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SOptionValueSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SOptionValueSaveData") << "," << JsonStr("$val") << ":";
		SOptionValueSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("mappings") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->mappings.size(); ++i)
	{
		auto& s_Item0 = s_Object->mappings[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->mappings.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("cbMappingNames") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->cbMappingNames.size(); ++i)
	{
		auto& s_Item0 = s_Object->cbMappingNames[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->cbMappingNames.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("cbMappings") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<TArray<SComboDeviceBinding>>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->cbMappings.size(); ++i)
	{
		auto& s_Item0 = s_Object->cbMappings[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SComboDeviceBinding>") << "," << JsonStr("$val") << ":";
		p_Stream << "[";
		for (size_t i = 0; i < s_Item0.size(); ++i)
		{
			auto& s_Item1 = s_Item0[i];
			p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SComboDeviceBinding") << "," << JsonStr("$val") << ":";
			SComboDeviceBinding::WriteJson(&s_Item1, p_Stream);
			p_Stream << "}";

			if (i < s_Item0.size() - 1)
				p_Stream << ",";
		}
		p_Stream << "]";
		p_Stream << "}";

		if (i < s_Object->cbMappings.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SUIOptionsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SUIOptionsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aKeys") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeys.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aKeys[i];
		p_Stream << JsonStr(ZHMEnums::GetEnumValueName("_EUIOptionKey", static_cast<int>(s_Item0)));

		if (i < s_Object->m_aKeys.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aValues[i];
		SOptionValueSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("mappings") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->mappings.size(); ++i)
	{
		auto& s_Item0 = s_Object->mappings[i];
		p_Stream << s_Item0;

		if (i < s_Object->mappings.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("cbMappingNames") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->cbMappingNames.size(); ++i)
	{
		auto& s_Item0 = s_Object->cbMappingNames[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->cbMappingNames.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("cbMappings") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->cbMappings.size(); ++i)
	{
		auto& s_Item0 = s_Object->cbMappings[i];
		p_Stream << "[";
		for (size_t i = 0; i < s_Item0.size(); ++i)
		{
			auto& s_Item1 = s_Item0[i];
			SComboDeviceBinding::WriteSimpleJson(&s_Item1, p_Stream);

			if (i < s_Item0.size() - 1)
				p_Stream << ",";
		}

		p_Stream << "]";

		if (i < s_Object->cbMappings.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SUIOptionsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SUIOptionsSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aKeys"])
	{
		s_Object.m_aKeys.push_back(static_cast<_EUIOptionKey>(ZHMEnums::GetEnumValueByName("_EUIOptionKey", std::string_view(s_Item0))));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aValues"])
	{
		SOptionValueSaveData s_ArrayItem0;
		SOptionValueSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aValues.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["mappings"])
	{
		s_Object.mappings.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["cbMappingNames"])
	{
		s_Object.cbMappingNames.push_back(std::string_view(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["cbMappings"])
	{
		TArray<SComboDeviceBinding> s_ArrayItem0;
		for (simdjson::ondemand::value s_Item1 : s_Item0)
		{
			SComboDeviceBinding s_ArrayItem1;
			SComboDeviceBinding::FromSimpleJson(s_Item1, &s_ArrayItem1);
			s_ArrayItem0.push_back(s_ArrayItem1);
		}
		s_Object.cbMappings.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SUIOptionsSaveData*>(p_Target) = s_Object;
}

void SUIOptionsSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SUIOptionsSaveData*>(p_Object);

	TArray<_EUIOptionKey>::Serialize(&s_Object->m_aKeys, p_Serializer, p_OwnOffset + offsetof(SUIOptionsSaveData, m_aKeys));
	TArray<SOptionValueSaveData>::Serialize(&s_Object->m_aValues, p_Serializer, p_OwnOffset + offsetof(SUIOptionsSaveData, m_aValues));
	TArray<uint32>::Serialize(&s_Object->mappings, p_Serializer, p_OwnOffset + offsetof(SUIOptionsSaveData, mappings));
	TArray<ZString>::Serialize(&s_Object->cbMappingNames, p_Serializer, p_OwnOffset + offsetof(SUIOptionsSaveData, cbMappingNames));
	TArray<TArray<SComboDeviceBinding>>::Serialize(&s_Object->cbMappings, p_Serializer, p_OwnOffset + offsetof(SUIOptionsSaveData, cbMappings));
}

ZHMTypeInfo SPhysicsListSaveData::TypeInfo = ZHMTypeInfo("SPhysicsListSaveData", sizeof(SPhysicsListSaveData), alignof(SPhysicsListSaveData), SPhysicsListSaveData::WriteJson, SPhysicsListSaveData::WriteSimpleJson, SPhysicsListSaveData::FromSimpleJson, SPhysicsListSaveData::Serialize);

void SPhysicsListSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPhysicsListSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntityRefs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityRefs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityRefs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntityRefs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityDatas") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SPhysicsSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityDatas.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityDatas[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SPhysicsSaveData") << "," << JsonStr("$val") << ":";
		SPhysicsSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEntityDatas.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SPhysicsListSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPhysicsListSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntityRefs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityRefs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityRefs[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntityRefs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityDatas") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityDatas.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityDatas[i];
		SPhysicsSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aEntityDatas.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SPhysicsListSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPhysicsListSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntityRefs"])
	{
		s_Object.m_aEntityRefs.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntityDatas"])
	{
		SPhysicsSaveData s_ArrayItem0;
		SPhysicsSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aEntityDatas.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SPhysicsListSaveData*>(p_Target) = s_Object;
}

void SPhysicsListSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SPhysicsListSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntityRefs, p_Serializer, p_OwnOffset + offsetof(SPhysicsListSaveData, m_aEntityRefs));
	TArray<SPhysicsSaveData>::Serialize(&s_Object->m_aEntityDatas, p_Serializer, p_OwnOffset + offsetof(SPhysicsListSaveData, m_aEntityDatas));
}

ZHMTypeInfo IMorphemeCutSequenceAnimationEntity::TypeInfo = ZHMTypeInfo("IMorphemeCutSequenceAnimationEntity", sizeof(IMorphemeCutSequenceAnimationEntity), alignof(IMorphemeCutSequenceAnimationEntity), IMorphemeCutSequenceAnimationEntity::WriteJson, IMorphemeCutSequenceAnimationEntity::WriteSimpleJson, IMorphemeCutSequenceAnimationEntity::FromSimpleJson, IMorphemeCutSequenceAnimationEntity::Serialize);

void IMorphemeCutSequenceAnimationEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IMorphemeCutSequenceAnimationEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMorphemeCutSequenceAnimationEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IMorphemeCutSequenceAnimationEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IMorphemeCutSequenceAnimationEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IMorphemeCutSequenceAnimationEntity s_Object;

	*reinterpret_cast<IMorphemeCutSequenceAnimationEntity*>(p_Target) = s_Object;
}

void IMorphemeCutSequenceAnimationEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IMorphemeCutSequenceAnimationEntity*>(p_Object);

}

ZHMTypeInfo IAnimPlayerEntity::TypeInfo = ZHMTypeInfo("IAnimPlayerEntity", sizeof(IAnimPlayerEntity), alignof(IAnimPlayerEntity), IAnimPlayerEntity::WriteJson, IAnimPlayerEntity::WriteSimpleJson, IAnimPlayerEntity::FromSimpleJson, IAnimPlayerEntity::Serialize);

void IAnimPlayerEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IAnimPlayerEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IAnimPlayerEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IAnimPlayerEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IAnimPlayerEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IAnimPlayerEntity s_Object;

	*reinterpret_cast<IAnimPlayerEntity*>(p_Target) = s_Object;
}

void IAnimPlayerEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IAnimPlayerEntity*>(p_Object);

}

ZHMTypeInfo SMathLerpsSaveData_float32::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_float32", sizeof(SMathLerpsSaveData_float32), alignof(SMathLerpsSaveData_float32), SMathLerpsSaveData_float32::WriteJson, SMathLerpsSaveData_float32::WriteSimpleJson, SMathLerpsSaveData_float32::FromSimpleJson, SMathLerpsSaveData_float32::Serialize);

void SMathLerpsSaveData_float32::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_float32*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SMathLerpSaveData_float32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_float32") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_float32::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpsSaveData_float32::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_float32*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SMathLerpSaveData_float32::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_float32::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpsSaveData_float32 s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SMathLerpSaveData_float32 s_ArrayItem0;
		SMathLerpSaveData_float32::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SMathLerpsSaveData_float32*>(p_Target) = s_Object;
}

void SMathLerpsSaveData_float32::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_float32*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_float32, m_aEntities));
	TArray<SMathLerpSaveData_float32>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_float32, m_aData));
}

ZHMTypeInfo IValueEntity::TypeInfo = ZHMTypeInfo("IValueEntity", sizeof(IValueEntity), alignof(IValueEntity), IValueEntity::WriteJson, IValueEntity::WriteSimpleJson, IValueEntity::FromSimpleJson, IValueEntity::Serialize);

void IValueEntity::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IValueEntity*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IValueEntity::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IValueEntity*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IValueEntity::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IValueEntity s_Object;

	*reinterpret_cast<IValueEntity*>(p_Target) = s_Object;
}

void IValueEntity::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IValueEntity*>(p_Object);

}

ZHMTypeInfo SAnimatedActorOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorOrderSaveData", sizeof(SAnimatedActorOrderSaveData), alignof(SAnimatedActorOrderSaveData), SAnimatedActorOrderSaveData::WriteJson, SAnimatedActorOrderSaveData::WriteSimpleJson, SAnimatedActorOrderSaveData::FromSimpleJson, SAnimatedActorOrderSaveData::Serialize);

void SAnimatedActorOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eOrderType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorAnimationOrder") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eOrderType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorAnimationOrder", static_cast<int>(s_Object->m_eOrderType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_OrderData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_OrderData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eOrderType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorAnimationOrder", static_cast<int>(s_Object->m_eOrderType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_OrderData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_OrderData, p_Stream);

	p_Stream << "}";
}

void SAnimatedActorOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAnimatedActorOrderSaveData s_Object;

	s_Object.m_eOrderType = static_cast<EActorAnimationOrder>(ZHMEnums::GetEnumValueByName("EActorAnimationOrder", std::string_view(p_Document["m_eOrderType"])));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_OrderData"], &s_Item);
		s_Object.m_OrderData = s_Item;
	}

	*reinterpret_cast<SAnimatedActorOrderSaveData*>(p_Target) = s_Object;
}

void SAnimatedActorOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorOrderSaveData*>(p_Object);

	ZVariant::Serialize(&s_Object->m_OrderData, p_Serializer, p_OwnOffset + offsetof(SAnimatedActorOrderSaveData, m_OrderData));
}

ZHMTypeInfo ZSpectatorSituation_SSituationSaveData::TypeInfo = ZHMTypeInfo("ZSpectatorSituation.SSituationSaveData", sizeof(ZSpectatorSituation_SSituationSaveData), alignof(ZSpectatorSituation_SSituationSaveData), ZSpectatorSituation_SSituationSaveData::WriteJson, ZSpectatorSituation_SSituationSaveData::WriteSimpleJson, ZSpectatorSituation_SSituationSaveData::FromSimpleJson, ZSpectatorSituation_SSituationSaveData::Serialize);

void ZSpectatorSituation_SSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSpectatorSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bStandingDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStandingDown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aObserverGroupIDs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<int32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aObserverGroupIDs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aObserverGroupIDs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aObserverGroupIDs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aNonObserverMembers") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aNonObserverMembers.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aNonObserverMembers[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aNonObserverMembers.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void ZSpectatorSituation_SSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSpectatorSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bStandingDown") << ":";
	p_Stream << s_Object->m_bStandingDown;
	p_Stream << ",";

	p_Stream << JsonStr("m_aObserverGroupIDs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aObserverGroupIDs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aObserverGroupIDs[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aObserverGroupIDs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aNonObserverMembers") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aNonObserverMembers.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aNonObserverMembers[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aNonObserverMembers.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZSpectatorSituation_SSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSpectatorSituation_SSituationSaveData s_Object;

	s_Object.m_bStandingDown = bool(p_Document["m_bStandingDown"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aObserverGroupIDs"])
	{
		s_Object.m_aObserverGroupIDs.push_back(static_cast<int32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aNonObserverMembers"])
	{
		s_Object.m_aNonObserverMembers.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<ZSpectatorSituation_SSituationSaveData*>(p_Target) = s_Object;
}

void ZSpectatorSituation_SSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZSpectatorSituation_SSituationSaveData*>(p_Object);

	TArray<int32>::Serialize(&s_Object->m_aObserverGroupIDs, p_Serializer, p_OwnOffset + offsetof(ZSpectatorSituation_SSituationSaveData, m_aObserverGroupIDs));
	TArray<uint32>::Serialize(&s_Object->m_aNonObserverMembers, p_Serializer, p_OwnOffset + offsetof(ZSpectatorSituation_SSituationSaveData, m_aNonObserverMembers));
}

ZHMTypeInfo SGameKeywordManagerSaveData::TypeInfo = ZHMTypeInfo("SGameKeywordManagerSaveData", sizeof(SGameKeywordManagerSaveData), alignof(SGameKeywordManagerSaveData), SGameKeywordManagerSaveData::WriteJson, SGameKeywordManagerSaveData::WriteSimpleJson, SGameKeywordManagerSaveData::FromSimpleJson, SGameKeywordManagerSaveData::Serialize);

void SGameKeywordManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameKeywordManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aKeywordsData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SKeywordSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeywordsData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aKeywordsData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SKeywordSaveData") << "," << JsonStr("$val") << ":";
		SKeywordSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aKeywordsData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aKeywordStringData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeywordStringData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aKeywordStringData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->m_aKeywordStringData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SGameKeywordManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameKeywordManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aKeywordsData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeywordsData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aKeywordsData[i];
		SKeywordSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aKeywordsData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aKeywordStringData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aKeywordStringData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aKeywordStringData[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->m_aKeywordStringData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SGameKeywordManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameKeywordManagerSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aKeywordsData"])
	{
		SKeywordSaveData s_ArrayItem0;
		SKeywordSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aKeywordsData.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aKeywordStringData"])
	{
		s_Object.m_aKeywordStringData.push_back(std::string_view(s_Item0));
	}

	*reinterpret_cast<SGameKeywordManagerSaveData*>(p_Target) = s_Object;
}

void SGameKeywordManagerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGameKeywordManagerSaveData*>(p_Object);

	TArray<SKeywordSaveData>::Serialize(&s_Object->m_aKeywordsData, p_Serializer, p_OwnOffset + offsetof(SGameKeywordManagerSaveData, m_aKeywordsData));
	TArray<ZString>::Serialize(&s_Object->m_aKeywordStringData, p_Serializer, p_OwnOffset + offsetof(SGameKeywordManagerSaveData, m_aKeywordStringData));
}

ZHMTypeInfo SUIGridCellPosition::TypeInfo = ZHMTypeInfo("SUIGridCellPosition", sizeof(SUIGridCellPosition), alignof(SUIGridCellPosition), SUIGridCellPosition::WriteJson, SUIGridCellPosition::WriteSimpleJson, SUIGridCellPosition::FromSimpleJson, SUIGridCellPosition::Serialize);

void SUIGridCellPosition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SUIGridCellPosition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("nColumnIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nColumnIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nRowIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nRowIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nColumnSpan") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nColumnSpan;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nRowSpan") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nRowSpan;
	p_Stream << "}";

	p_Stream << "}";
}

void SUIGridCellPosition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SUIGridCellPosition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("nColumnIndex") << ":";
	p_Stream << s_Object->nColumnIndex;
	p_Stream << ",";

	p_Stream << JsonStr("nRowIndex") << ":";
	p_Stream << s_Object->nRowIndex;
	p_Stream << ",";

	p_Stream << JsonStr("nColumnSpan") << ":";
	p_Stream << s_Object->nColumnSpan;
	p_Stream << ",";

	p_Stream << JsonStr("nRowSpan") << ":";
	p_Stream << s_Object->nRowSpan;

	p_Stream << "}";
}

void SUIGridCellPosition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SUIGridCellPosition s_Object;

	s_Object.nColumnIndex = static_cast<int32>(int64_t(p_Document["nColumnIndex"]));

	s_Object.nRowIndex = static_cast<int32>(int64_t(p_Document["nRowIndex"]));

	s_Object.nColumnSpan = static_cast<int32>(int64_t(p_Document["nColumnSpan"]));

	s_Object.nRowSpan = static_cast<int32>(int64_t(p_Document["nRowSpan"]));

	*reinterpret_cast<SUIGridCellPosition*>(p_Target) = s_Object;
}

void SUIGridCellPosition::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SUIGridCellPosition*>(p_Object);

}

ZHMTypeInfo SEscortOutOrderSaveData::TypeInfo = ZHMTypeInfo("SEscortOutOrderSaveData", sizeof(SEscortOutOrderSaveData), alignof(SEscortOutOrderSaveData), SEscortOutOrderSaveData::WriteJson, SEscortOutOrderSaveData::WriteSimpleJson, SEscortOutOrderSaveData::FromSimpleJson, SEscortOutOrderSaveData::Serialize);

void SEscortOutOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortOutOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aExitPoints") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<float4>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aExitPoints.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aExitPoints[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
		float4::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aExitPoints.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortOutOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortOutOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aExitPoints") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aExitPoints.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aExitPoints[i];
		float4::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aExitPoints.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEscortOutOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEscortOutOrderSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aExitPoints"])
	{
		float4 s_ArrayItem0;
		float4::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aExitPoints.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SEscortOutOrderSaveData*>(p_Target) = s_Object;
}

void SEscortOutOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEscortOutOrderSaveData*>(p_Object);

	TArray<float4>::Serialize(&s_Object->m_aExitPoints, p_Serializer, p_OwnOffset + offsetof(SEscortOutOrderSaveData, m_aExitPoints));
}

ZHMTypeInfo SItemsSaveData::TypeInfo = ZHMTypeInfo("SItemsSaveData", sizeof(SItemsSaveData), alignof(SItemsSaveData), SItemsSaveData::WriteJson, SItemsSaveData::WriteSimpleJson, SItemsSaveData::FromSimpleJson, SItemsSaveData::Serialize);

void SItemsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SItemSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItemSaveData") << "," << JsonStr("$val") << ":";
		SItemSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SItemsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SItemSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SItemsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemsSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SItemSaveData s_ArrayItem0;
		SItemSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SItemsSaveData*>(p_Target) = s_Object;
}

void SItemsSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItemsSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SItemsSaveData, m_aEntities));
	TArray<SItemSaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SItemsSaveData, m_aData));
}

ZHMTypeInfo ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData::TypeInfo = ZHMTypeInfo("ZHM5FaceFXSpecificEventConsumer.SFaceFXEventData", sizeof(ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData), alignof(ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData), ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData::WriteJson, ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData::WriteSimpleJson, ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData::FromSimpleJson, ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData::Serialize);

void ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHM5FaceFXSpecificEventConsumer.EEvent") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nEvent) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHM5FaceFXSpecificEventConsumer.EEvent", static_cast<int>(s_Object->m_nEvent))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sFaceExpression") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sFaceExpression);
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHM5FaceFXSpecificEventConsumer.EEvent", static_cast<int>(s_Object->m_nEvent)));
	p_Stream << ",";

	p_Stream << JsonStr("m_sFaceExpression") << ":";
	p_Stream << JsonStr(s_Object->m_sFaceExpression);

	p_Stream << "}";
}

void ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData s_Object;

	s_Object.m_nEvent = static_cast<ZHM5FaceFXSpecificEventConsumer_EEvent>(ZHMEnums::GetEnumValueByName("ZHM5FaceFXSpecificEventConsumer.EEvent", std::string_view(p_Document["m_nEvent"])));

	s_Object.m_sFaceExpression = std::string_view(p_Document["m_sFaceExpression"]);

	*reinterpret_cast<ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData*>(p_Target) = s_Object;
}

void ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData*>(p_Object);

	ZString::Serialize(&s_Object->m_sFaceExpression, p_Serializer, p_OwnOffset + offsetof(ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData, m_sFaceExpression));
}

ZHMTypeInfo ZContractEvaluationContext::TypeInfo = ZHMTypeInfo("ZContractEvaluationContext", sizeof(ZContractEvaluationContext), alignof(ZContractEvaluationContext), ZContractEvaluationContext::WriteJson, ZContractEvaluationContext::WriteSimpleJson, ZContractEvaluationContext::FromSimpleJson, ZContractEvaluationContext::Serialize);

void ZContractEvaluationContext::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZContractEvaluationContext*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZContractEvaluationContext::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZContractEvaluationContext*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZContractEvaluationContext::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZContractEvaluationContext s_Object;

	*reinterpret_cast<ZContractEvaluationContext*>(p_Target) = s_Object;
}

void ZContractEvaluationContext::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZContractEvaluationContext*>(p_Object);

}

ZHMTypeInfo SStoredSlotSaveData::TypeInfo = ZHMTypeInfo("SStoredSlotSaveData", sizeof(SStoredSlotSaveData), alignof(SStoredSlotSaveData), SStoredSlotSaveData::WriteJson, SStoredSlotSaveData::WriteSimpleJson, SStoredSlotSaveData::FromSimpleJson, SStoredSlotSaveData::Serialize);

void SStoredSlotSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SStoredSlotSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_iStoredInventorySlotIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iStoredInventorySlotIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iStoreReason") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_iStoreReason);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bItemsStored") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bItemsStored;
	p_Stream << "}";

	p_Stream << "}";
}

void SStoredSlotSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SStoredSlotSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_iStoredInventorySlotIndex") << ":";
	p_Stream << s_Object->m_iStoredInventorySlotIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_iStoreReason") << ":";
	p_Stream << static_cast<int>(s_Object->m_iStoreReason);
	p_Stream << ",";

	p_Stream << JsonStr("m_bItemsStored") << ":";
	p_Stream << s_Object->m_bItemsStored;

	p_Stream << "}";
}

void SStoredSlotSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SStoredSlotSaveData s_Object;

	s_Object.m_iStoredInventorySlotIndex = static_cast<uint32>(int64_t(p_Document["m_iStoredInventorySlotIndex"]));

	s_Object.m_iStoreReason = static_cast<uint8>(int64_t(p_Document["m_iStoreReason"]));

	s_Object.m_bItemsStored = bool(p_Document["m_bItemsStored"]);

	*reinterpret_cast<SStoredSlotSaveData*>(p_Target) = s_Object;
}

void SStoredSlotSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SStoredSlotSaveData*>(p_Object);

}

ZHMTypeInfo SInventoryControllerSlotSaveData::TypeInfo = ZHMTypeInfo("SInventoryControllerSlotSaveData", sizeof(SInventoryControllerSlotSaveData), alignof(SInventoryControllerSlotSaveData), SInventoryControllerSlotSaveData::WriteJson, SInventoryControllerSlotSaveData::WriteSimpleJson, SInventoryControllerSlotSaveData::FromSimpleJson, SInventoryControllerSlotSaveData::Serialize);

void SInventoryControllerSlotSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryControllerSlotSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SInventoryControllerItemSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryControllerItemSaveData") << "," << JsonStr("$val") << ":";
		SInventoryControllerItemSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eStorageType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryStorageType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eStorageType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryStorageType", static_cast<int>(s_Object->m_eStorageType))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryControllerSlotSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryControllerSlotSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aItems[i];
		SInventoryControllerItemSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_eStorageType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryStorageType", static_cast<int>(s_Object->m_eStorageType)));

	p_Stream << "}";
}

void SInventoryControllerSlotSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryControllerSlotSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aItems"])
	{
		SInventoryControllerItemSaveData s_ArrayItem0;
		SInventoryControllerItemSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aItems.push_back(s_ArrayItem0);
	}

	s_Object.m_eStorageType = static_cast<EInventoryStorageType>(ZHMEnums::GetEnumValueByName("EInventoryStorageType", std::string_view(p_Document["m_eStorageType"])));

	*reinterpret_cast<SInventoryControllerSlotSaveData*>(p_Target) = s_Object;
}

void SInventoryControllerSlotSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SInventoryControllerSlotSaveData*>(p_Object);

	TArray<SInventoryControllerItemSaveData>::Serialize(&s_Object->m_aItems, p_Serializer, p_OwnOffset + offsetof(SInventoryControllerSlotSaveData, m_aItems));
}

ZHMTypeInfo SInventoryControllerSaveData::TypeInfo = ZHMTypeInfo("SInventoryControllerSaveData", sizeof(SInventoryControllerSaveData), alignof(SInventoryControllerSaveData), SInventoryControllerSaveData::WriteJson, SInventoryControllerSaveData::WriteSimpleJson, SInventoryControllerSaveData::FromSimpleJson, SInventoryControllerSaveData::Serialize);

void SInventoryControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SInventoryControllerItemSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryControllerItemSaveData") << "," << JsonStr("$val") << ":";
		SInventoryControllerItemSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nEquippedItemIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEquippedItemIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nMostRecentItemIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nMostRecentItemIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_StoredSlot") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SStoredSlotSaveData") << "," << JsonStr("$val") << ":";
	SStoredSlotSaveData::WriteJson(&s_Object->m_StoredSlot, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSlots") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SInventoryControllerSlotSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSlots.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSlots[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryControllerSlotSaveData") << "," << JsonStr("$val") << ":";
		SInventoryControllerSlotSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aSlots.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPendingPickupItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPendingPickupItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPendingPickupItems[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aPendingPickupItems.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountGun") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountGun;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountRevolver") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountRevolver;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountSMG") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountSMG;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountRifle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountRifle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountShotgun") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountShotgun;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountSniper") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountSniper;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountMG") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountMG;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountRPG") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountRPG;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountFake") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountFake;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountLightPistol") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountLightPistol;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountDartTranquilizer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountDartTranquilizer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountAmmoShotgunBeanbag") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAmmoCountAmmoShotgunBeanbag;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAmmoIds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZRepositoryID>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAmmoIds.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAmmoIds[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
		ZRepositoryID::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aAmmoIds.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAmmoCounts") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAmmoCounts.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAmmoCounts[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aAmmoCounts.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aItems[i];
		SInventoryControllerItemSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nEquippedItemIndex") << ":";
	p_Stream << s_Object->m_nEquippedItemIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_nMostRecentItemIndex") << ":";
	p_Stream << s_Object->m_nMostRecentItemIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_StoredSlot") << ":";
	SStoredSlotSaveData::WriteSimpleJson(&s_Object->m_StoredSlot, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aSlots") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSlots.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSlots[i];
		SInventoryControllerSlotSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aSlots.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aPendingPickupItems") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aPendingPickupItems.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aPendingPickupItems[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aPendingPickupItems.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountGun") << ":";
	p_Stream << s_Object->m_nAmmoCountGun;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountRevolver") << ":";
	p_Stream << s_Object->m_nAmmoCountRevolver;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountSMG") << ":";
	p_Stream << s_Object->m_nAmmoCountSMG;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountRifle") << ":";
	p_Stream << s_Object->m_nAmmoCountRifle;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountShotgun") << ":";
	p_Stream << s_Object->m_nAmmoCountShotgun;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountSniper") << ":";
	p_Stream << s_Object->m_nAmmoCountSniper;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountMG") << ":";
	p_Stream << s_Object->m_nAmmoCountMG;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountRPG") << ":";
	p_Stream << s_Object->m_nAmmoCountRPG;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountFake") << ":";
	p_Stream << s_Object->m_nAmmoCountFake;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountLightPistol") << ":";
	p_Stream << s_Object->m_nAmmoCountLightPistol;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountDartTranquilizer") << ":";
	p_Stream << s_Object->m_nAmmoCountDartTranquilizer;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAmmoCountAmmoShotgunBeanbag") << ":";
	p_Stream << s_Object->m_nAmmoCountAmmoShotgunBeanbag;
	p_Stream << ",";

	p_Stream << JsonStr("m_aAmmoIds") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAmmoIds.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAmmoIds[i];
		ZRepositoryID::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aAmmoIds.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAmmoCounts") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAmmoCounts.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAmmoCounts[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aAmmoCounts.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SInventoryControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryControllerSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aItems"])
	{
		SInventoryControllerItemSaveData s_ArrayItem0;
		SInventoryControllerItemSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aItems.push_back(s_ArrayItem0);
	}

	s_Object.m_nEquippedItemIndex = static_cast<uint32>(int64_t(p_Document["m_nEquippedItemIndex"]));

	s_Object.m_nMostRecentItemIndex = static_cast<uint32>(int64_t(p_Document["m_nMostRecentItemIndex"]));

	{
		SStoredSlotSaveData s_Item;
		SStoredSlotSaveData::FromSimpleJson(p_Document["m_StoredSlot"], &s_Item);
		s_Object.m_StoredSlot = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aSlots"])
	{
		SInventoryControllerSlotSaveData s_ArrayItem0;
		SInventoryControllerSlotSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aSlots.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aPendingPickupItems"])
	{
		s_Object.m_aPendingPickupItems.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	s_Object.m_nAmmoCountGun = static_cast<uint32>(int64_t(p_Document["m_nAmmoCountGun"]));

	s_Object.m_nAmmoCountRevolver = static_cast<uint32>(int64_t(p_Document["m_nAmmoCountRevolver"]));

	s_Object.m_nAmmoCountSMG = static_cast<uint32>(int64_t(p_Document["m_nAmmoCountSMG"]));

	s_Object.m_nAmmoCountRifle = static_cast<uint32>(int64_t(p_Document["m_nAmmoCountRifle"]));

	s_Object.m_nAmmoCountShotgun = static_cast<uint32>(int64_t(p_Document["m_nAmmoCountShotgun"]));

	s_Object.m_nAmmoCountSniper = static_cast<uint32>(int64_t(p_Document["m_nAmmoCountSniper"]));

	s_Object.m_nAmmoCountMG = static_cast<uint32>(int64_t(p_Document["m_nAmmoCountMG"]));

	s_Object.m_nAmmoCountRPG = static_cast<uint32>(int64_t(p_Document["m_nAmmoCountRPG"]));

	s_Object.m_nAmmoCountFake = static_cast<uint32>(int64_t(p_Document["m_nAmmoCountFake"]));

	s_Object.m_nAmmoCountLightPistol = static_cast<uint32>(int64_t(p_Document["m_nAmmoCountLightPistol"]));

	s_Object.m_nAmmoCountDartTranquilizer = static_cast<uint32>(int64_t(p_Document["m_nAmmoCountDartTranquilizer"]));

	s_Object.m_nAmmoCountAmmoShotgunBeanbag = static_cast<uint32>(int64_t(p_Document["m_nAmmoCountAmmoShotgunBeanbag"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aAmmoIds"])
	{
		ZRepositoryID s_ArrayItem0;
		ZRepositoryID::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aAmmoIds.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aAmmoCounts"])
	{
		s_Object.m_aAmmoCounts.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SInventoryControllerSaveData*>(p_Target) = s_Object;
}

void SInventoryControllerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SInventoryControllerSaveData*>(p_Object);

	TArray<SInventoryControllerItemSaveData>::Serialize(&s_Object->m_aItems, p_Serializer, p_OwnOffset + offsetof(SInventoryControllerSaveData, m_aItems));
	SStoredSlotSaveData::Serialize(&s_Object->m_StoredSlot, p_Serializer, p_OwnOffset + offsetof(SInventoryControllerSaveData, m_StoredSlot));
	TArray<SInventoryControllerSlotSaveData>::Serialize(&s_Object->m_aSlots, p_Serializer, p_OwnOffset + offsetof(SInventoryControllerSaveData, m_aSlots));
	TArray<uint32>::Serialize(&s_Object->m_aPendingPickupItems, p_Serializer, p_OwnOffset + offsetof(SInventoryControllerSaveData, m_aPendingPickupItems));
	TArray<ZRepositoryID>::Serialize(&s_Object->m_aAmmoIds, p_Serializer, p_OwnOffset + offsetof(SInventoryControllerSaveData, m_aAmmoIds));
	TArray<uint32>::Serialize(&s_Object->m_aAmmoCounts, p_Serializer, p_OwnOffset + offsetof(SInventoryControllerSaveData, m_aAmmoCounts));
}

ZHMTypeInfo SEscortSituationActors::TypeInfo = ZHMTypeInfo("SEscortSituationActors", sizeof(SEscortSituationActors), alignof(SEscortSituationActors), SEscortSituationActors::WriteJson, SEscortSituationActors::WriteSimpleJson, SEscortSituationActors::FromSimpleJson, SEscortSituationActors::Serialize);

void SEscortSituationActors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortSituationActors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortSituationActors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortSituationActors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SEscortSituationActors::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEscortSituationActors s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SEscortSituationActors*>(p_Target) = s_Object;
}

void SEscortSituationActors::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEscortSituationActors*>(p_Object);

}

ZHMTypeInfo AI_Private_SPoolModificationEvent::TypeInfo = ZHMTypeInfo("AI.Private.SPoolModificationEvent", sizeof(AI_Private_SPoolModificationEvent), alignof(AI_Private_SPoolModificationEvent), AI_Private_SPoolModificationEvent::WriteJson, AI_Private_SPoolModificationEvent::WriteSimpleJson, AI_Private_SPoolModificationEvent::FromSimpleJson, AI_Private_SPoolModificationEvent::Serialize);

void AI_Private_SPoolModificationEvent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_Private_SPoolModificationEvent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("StimulusTypeId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->StimulusTypeId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("SlotIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->SlotIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("OperationId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->OperationId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("StimulusData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->StimulusData);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("Timestamp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->Timestamp;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("EventIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->EventIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("EventMetaData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->EventMetaData);
	p_Stream << "}";

	p_Stream << "}";
}

void AI_Private_SPoolModificationEvent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_Private_SPoolModificationEvent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("StimulusTypeId") << ":";
	p_Stream << s_Object->StimulusTypeId;
	p_Stream << ",";

	p_Stream << JsonStr("SlotIndex") << ":";
	p_Stream << s_Object->SlotIndex;
	p_Stream << ",";

	p_Stream << JsonStr("OperationId") << ":";
	p_Stream << s_Object->OperationId;
	p_Stream << ",";

	p_Stream << JsonStr("StimulusData") << ":";
	p_Stream << JsonStr(s_Object->StimulusData);
	p_Stream << ",";

	p_Stream << JsonStr("Timestamp") << ":";
	p_Stream << s_Object->Timestamp;
	p_Stream << ",";

	p_Stream << JsonStr("EventIndex") << ":";
	p_Stream << s_Object->EventIndex;
	p_Stream << ",";

	p_Stream << JsonStr("EventMetaData") << ":";
	p_Stream << JsonStr(s_Object->EventMetaData);

	p_Stream << "}";
}

void AI_Private_SPoolModificationEvent::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AI_Private_SPoolModificationEvent s_Object;

	s_Object.StimulusTypeId = static_cast<uint32>(int64_t(p_Document["StimulusTypeId"]));

	s_Object.SlotIndex = static_cast<uint32>(int64_t(p_Document["SlotIndex"]));

	s_Object.OperationId = static_cast<uint32>(int64_t(p_Document["OperationId"]));

	s_Object.StimulusData = std::string_view(p_Document["StimulusData"]);

	s_Object.Timestamp = uint64(p_Document["Timestamp"]);

	s_Object.EventIndex = static_cast<uint32>(int64_t(p_Document["EventIndex"]));

	s_Object.EventMetaData = std::string_view(p_Document["EventMetaData"]);

	*reinterpret_cast<AI_Private_SPoolModificationEvent*>(p_Target) = s_Object;
}

void AI_Private_SPoolModificationEvent::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AI_Private_SPoolModificationEvent*>(p_Object);

	ZString::Serialize(&s_Object->StimulusData, p_Serializer, p_OwnOffset + offsetof(AI_Private_SPoolModificationEvent, StimulusData));
	ZString::Serialize(&s_Object->EventMetaData, p_Serializer, p_OwnOffset + offsetof(AI_Private_SPoolModificationEvent, EventMetaData));
}

ZHMTypeInfo SLockdownManagerSaveData::TypeInfo = ZHMTypeInfo("SLockdownManagerSaveData", sizeof(SLockdownManagerSaveData), alignof(SLockdownManagerSaveData), SLockdownManagerSaveData::WriteJson, SLockdownManagerSaveData::WriteSimpleJson, SLockdownManagerSaveData::FromSimpleJson, SLockdownManagerSaveData::Serialize);

void SLockdownManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLockdownManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aAIZones") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SLockdownManagerAIZoneSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAIZones.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAIZones[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLockdownManagerAIZoneSaveData") << "," << JsonStr("$val") << ":";
		SLockdownManagerAIZoneSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aAIZones.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SLockdownManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLockdownManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aAIZones") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAIZones.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAIZones[i];
		SLockdownManagerAIZoneSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aAIZones.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SLockdownManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLockdownManagerSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aAIZones"])
	{
		SLockdownManagerAIZoneSaveData s_ArrayItem0;
		SLockdownManagerAIZoneSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aAIZones.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SLockdownManagerSaveData*>(p_Target) = s_Object;
}

void SLockdownManagerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLockdownManagerSaveData*>(p_Object);

	TArray<SLockdownManagerAIZoneSaveData>::Serialize(&s_Object->m_aAIZones, p_Serializer, p_OwnOffset + offsetof(SLockdownManagerSaveData, m_aAIZones));
}

ZHMTypeInfo SAudioEmitterSaveData::TypeInfo = ZHMTypeInfo("SAudioEmitterSaveData", sizeof(SAudioEmitterSaveData), alignof(SAudioEmitterSaveData), SAudioEmitterSaveData::WriteJson, SAudioEmitterSaveData::WriteSimpleJson, SAudioEmitterSaveData::FromSimpleJson, SAudioEmitterSaveData::Serialize);

void SAudioEmitterSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rEmitter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rEmitter;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumberOfEvents;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfRTPCs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumberOfRTPCs;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfSwitches") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNumberOfSwitches;
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioEmitterSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rEmitter") << ":";
	p_Stream << s_Object->m_rEmitter;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfEvents") << ":";
	p_Stream << s_Object->m_nNumberOfEvents;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfRTPCs") << ":";
	p_Stream << s_Object->m_nNumberOfRTPCs;
	p_Stream << ",";

	p_Stream << JsonStr("m_nNumberOfSwitches") << ":";
	p_Stream << s_Object->m_nNumberOfSwitches;

	p_Stream << "}";
}

void SAudioEmitterSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioEmitterSaveData s_Object;

	s_Object.m_rEmitter = static_cast<uint32>(int64_t(p_Document["m_rEmitter"]));

	s_Object.m_nNumberOfEvents = static_cast<uint32>(int64_t(p_Document["m_nNumberOfEvents"]));

	s_Object.m_nNumberOfRTPCs = static_cast<uint32>(int64_t(p_Document["m_nNumberOfRTPCs"]));

	s_Object.m_nNumberOfSwitches = static_cast<uint32>(int64_t(p_Document["m_nNumberOfSwitches"]));

	*reinterpret_cast<SAudioEmitterSaveData*>(p_Target) = s_Object;
}

void SAudioEmitterSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAudioEmitterSaveData*>(p_Object);

}

ZHMTypeInfo SAudioSaveData::TypeInfo = ZHMTypeInfo("SAudioSaveData", sizeof(SAudioSaveData), alignof(SAudioSaveData), SAudioSaveData::WriteJson, SAudioSaveData::WriteSimpleJson, SAudioSaveData::FromSimpleJson, SAudioSaveData::Serialize);

void SAudioSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEmitters") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SAudioEmitterSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitters.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEmitters[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEmitters.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SAudioEmitterEventSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterEvents.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEmitterEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterEventSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterEventSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEmitterEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterRTPCs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SAudioEmitterRTPCSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterRTPCs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEmitterRTPCs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterRTPCSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterRTPCSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEmitterRTPCs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterSwitches") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SAudioEmitterSwitchSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterSwitches.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEmitterSwitches[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterSwitchSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterSwitchSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEmitterSwitches.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGlobalStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SAudioEmitterStateSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGlobalStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGlobalStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterStateSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterStateSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGlobalStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGlobalRTPCs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SAudioEmitterRTPCSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGlobalRTPCs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGlobalRTPCs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAudioEmitterRTPCSaveData") << "," << JsonStr("$val") << ":";
		SAudioEmitterRTPCSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGlobalRTPCs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEventsEnabledAfterInit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEventsEnabledAfterInit.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEventsEnabledAfterInit[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEventsEnabledAfterInit.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SAudioSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAudioSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEmitters") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitters.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEmitters[i];
		SAudioEmitterSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aEmitters.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterEvents.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEmitterEvents[i];
		SAudioEmitterEventSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aEmitterEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterRTPCs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterRTPCs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEmitterRTPCs[i];
		SAudioEmitterRTPCSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aEmitterRTPCs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEmitterSwitches") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEmitterSwitches.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEmitterSwitches[i];
		SAudioEmitterSwitchSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aEmitterSwitches.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGlobalStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGlobalStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGlobalStates[i];
		SAudioEmitterStateSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aGlobalStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGlobalRTPCs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGlobalRTPCs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGlobalRTPCs[i];
		SAudioEmitterRTPCSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aGlobalRTPCs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEventsEnabledAfterInit") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEventsEnabledAfterInit.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEventsEnabledAfterInit[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEventsEnabledAfterInit.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SAudioSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAudioSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEmitters"])
	{
		SAudioEmitterSaveData s_ArrayItem0;
		SAudioEmitterSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aEmitters.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEmitterEvents"])
	{
		SAudioEmitterEventSaveData s_ArrayItem0;
		SAudioEmitterEventSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aEmitterEvents.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEmitterRTPCs"])
	{
		SAudioEmitterRTPCSaveData s_ArrayItem0;
		SAudioEmitterRTPCSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aEmitterRTPCs.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEmitterSwitches"])
	{
		SAudioEmitterSwitchSaveData s_ArrayItem0;
		SAudioEmitterSwitchSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aEmitterSwitches.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aGlobalStates"])
	{
		SAudioEmitterStateSaveData s_ArrayItem0;
		SAudioEmitterStateSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aGlobalStates.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aGlobalRTPCs"])
	{
		SAudioEmitterRTPCSaveData s_ArrayItem0;
		SAudioEmitterRTPCSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aGlobalRTPCs.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEventsEnabledAfterInit"])
	{
		s_Object.m_aEventsEnabledAfterInit.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SAudioSaveData*>(p_Target) = s_Object;
}

void SAudioSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAudioSaveData*>(p_Object);

	TArray<SAudioEmitterSaveData>::Serialize(&s_Object->m_aEmitters, p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aEmitters));
	TArray<SAudioEmitterEventSaveData>::Serialize(&s_Object->m_aEmitterEvents, p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aEmitterEvents));
	TArray<SAudioEmitterRTPCSaveData>::Serialize(&s_Object->m_aEmitterRTPCs, p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aEmitterRTPCs));
	TArray<SAudioEmitterSwitchSaveData>::Serialize(&s_Object->m_aEmitterSwitches, p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aEmitterSwitches));
	TArray<SAudioEmitterStateSaveData>::Serialize(&s_Object->m_aGlobalStates, p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aGlobalStates));
	TArray<SAudioEmitterRTPCSaveData>::Serialize(&s_Object->m_aGlobalRTPCs, p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aGlobalRTPCs));
	TArray<uint32>::Serialize(&s_Object->m_aEventsEnabledAfterInit, p_Serializer, p_OwnOffset + offsetof(SAudioSaveData, m_aEventsEnabledAfterInit));
}

ZHMTypeInfo ZWorldMapMetaData::TypeInfo = ZHMTypeInfo("ZWorldMapMetaData", sizeof(ZWorldMapMetaData), alignof(ZWorldMapMetaData), ZWorldMapMetaData::WriteJson, ZWorldMapMetaData::WriteSimpleJson, ZWorldMapMetaData::FromSimpleJson, ZWorldMapMetaData::Serialize);

void ZWorldMapMetaData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZWorldMapMetaData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZWorldMapMetaData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZWorldMapMetaData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZWorldMapMetaData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZWorldMapMetaData s_Object;

	*reinterpret_cast<ZWorldMapMetaData*>(p_Target) = s_Object;
}

void ZWorldMapMetaData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZWorldMapMetaData*>(p_Object);

}

ZHMTypeInfo SActorItemActionSaveData::TypeInfo = ZHMTypeInfo("SActorItemActionSaveData", sizeof(SActorItemActionSaveData), alignof(SActorItemActionSaveData), SActorItemActionSaveData::WriteJson, SActorItemActionSaveData::WriteSimpleJson, SActorItemActionSaveData::FromSimpleJson, SActorItemActionSaveData::Serialize);

void SActorItemActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorItemActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorItemActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorItemActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

void SActorItemActionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorItemActionSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	*reinterpret_cast<SActorItemActionSaveData*>(p_Target) = s_Object;
}

void SActorItemActionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorItemActionSaveData*>(p_Object);

}

ZHMTypeInfo STriggerAlarmGroupSaveData::TypeInfo = ZHMTypeInfo("STriggerAlarmGroupSaveData", sizeof(STriggerAlarmGroupSaveData), alignof(STriggerAlarmGroupSaveData), STriggerAlarmGroupSaveData::WriteJson, STriggerAlarmGroupSaveData::WriteSimpleJson, STriggerAlarmGroupSaveData::FromSimpleJson, STriggerAlarmGroupSaveData::Serialize);

void STriggerAlarmGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STriggerAlarmGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rAlarm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rAlarm;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggeredAlarm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTriggeredAlarm;
	p_Stream << "}";

	p_Stream << "}";
}

void STriggerAlarmGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STriggerAlarmGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_rAlarm") << ":";
	p_Stream << s_Object->m_rAlarm;
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggeredAlarm") << ":";
	p_Stream << s_Object->m_bTriggeredAlarm;

	p_Stream << "}";
}

void STriggerAlarmGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STriggerAlarmGroupSaveData s_Object;

	s_Object.m_rTarget = static_cast<uint32>(int64_t(p_Document["m_rTarget"]));

	s_Object.m_rAlarm = static_cast<uint32>(int64_t(p_Document["m_rAlarm"]));

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_bTriggeredAlarm = bool(p_Document["m_bTriggeredAlarm"]);

	*reinterpret_cast<STriggerAlarmGroupSaveData*>(p_Target) = s_Object;
}

void STriggerAlarmGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STriggerAlarmGroupSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(STriggerAlarmGroupSaveData, m_fsmState));
}

ZHMTypeInfo ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData::TypeInfo = ZHMTypeInfo("ZHM5CrowdGenericEventConsumer.SCrowdSoundGenericEventData", sizeof(ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData), alignof(ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData), ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData::WriteJson, ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData::WriteSimpleJson, ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData::FromSimpleJson, ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData::Serialize);

void ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHM5CrowdGenericEventConsumer.EEvent") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nEvent) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHM5CrowdGenericEventConsumer.EEvent", static_cast<int>(s_Object->m_nEvent))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHM5CrowdGenericEventConsumer.EEvent", static_cast<int>(s_Object->m_nEvent)));

	p_Stream << "}";
}

void ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData s_Object;

	s_Object.m_nEvent = static_cast<ZHM5CrowdGenericEventConsumer_EEvent>(ZHMEnums::GetEnumValueByName("ZHM5CrowdGenericEventConsumer.EEvent", std::string_view(p_Document["m_nEvent"])));

	*reinterpret_cast<ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData*>(p_Target) = s_Object;
}

void ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData*>(p_Object);

}

ZHMTypeInfo SActorSpreadControllerCandidateSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadControllerCandidateSaveData", sizeof(SActorSpreadControllerCandidateSaveData), alignof(SActorSpreadControllerCandidateSaveData), SActorSpreadControllerCandidateSaveData::WriteJson, SActorSpreadControllerCandidateSaveData::WriteSimpleJson, SActorSpreadControllerCandidateSaveData::FromSimpleJson, SActorSpreadControllerCandidateSaveData::Serialize);

void SActorSpreadControllerCandidateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSpreadControllerCandidateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CandidateActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CandidateActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CandidateTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_CandidateTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValidCandidate;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorSpreadControllerCandidateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSpreadControllerCandidateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CandidateActor") << ":";
	p_Stream << s_Object->m_CandidateActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_CandidateTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_CandidateTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidCandidate") << ":";
	p_Stream << s_Object->m_bValidCandidate;

	p_Stream << "}";
}

void SActorSpreadControllerCandidateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorSpreadControllerCandidateSaveData s_Object;

	s_Object.m_CandidateActor = static_cast<uint32>(int64_t(p_Document["m_CandidateActor"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_CandidateTime"], &s_Item);
		s_Object.m_CandidateTime = s_Item;
	}

	s_Object.m_bValidCandidate = bool(p_Document["m_bValidCandidate"]);

	*reinterpret_cast<SActorSpreadControllerCandidateSaveData*>(p_Target) = s_Object;
}

void SActorSpreadControllerCandidateSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorSpreadControllerCandidateSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_CandidateTime, p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerCandidateSaveData, m_CandidateTime));
}

ZHMTypeInfo SActorSpreadControllerSaveData::TypeInfo = ZHMTypeInfo("SActorSpreadControllerSaveData", sizeof(SActorSpreadControllerSaveData), alignof(SActorSpreadControllerSaveData), SActorSpreadControllerSaveData::WriteJson, SActorSpreadControllerSaveData::WriteSimpleJson, SActorSpreadControllerSaveData::FromSimpleJson, SActorSpreadControllerSaveData::Serialize);

void SActorSpreadControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSpreadControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aSpreadingActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSpreadingActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSpreadingActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aSpreadingActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDeadSpreadingActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDeadSpreadingActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDeadSpreadingActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aDeadSpreadingActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSpreadingActorsAddedTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZGameTime>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSpreadingActorsAddedTime.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSpreadingActorsAddedTime[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
		ZGameTime::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aSpreadingActorsAddedTime.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aNewCandidates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aNewCandidates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aNewCandidates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aNewCandidates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorSpreadControllerCandidateSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCandidates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorSpreadControllerCandidateSaveData") << "," << JsonStr("$val") << ":";
		SActorSpreadControllerCandidateSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpreadingActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpreadingActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentActorIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCurrentActorIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerCheckEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayerCheckEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerSpreading") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayerSpreading;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerIsValidCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayerIsValidCandidate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerIsCandidate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlayerIsCandidate;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_PlayerCandidateTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_PlayerCandidateTime, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SActorSpreadControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorSpreadControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aSpreadingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSpreadingActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSpreadingActors[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aSpreadingActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aDeadSpreadingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aDeadSpreadingActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aDeadSpreadingActors[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aDeadSpreadingActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSpreadingActorsAddedTime") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSpreadingActorsAddedTime.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSpreadingActorsAddedTime[i];
		ZGameTime::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aSpreadingActorsAddedTime.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aNewCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aNewCandidates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aNewCandidates[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aNewCandidates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aCandidates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCandidates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCandidates[i];
		SActorSpreadControllerCandidateSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aCandidates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentSpreadingActor") << ":";
	p_Stream << s_Object->m_rCurrentSpreadingActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCurrentActorIndex") << ":";
	p_Stream << s_Object->m_nCurrentActorIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerCheckEnabled") << ":";
	p_Stream << s_Object->m_bPlayerCheckEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerSpreading") << ":";
	p_Stream << s_Object->m_bPlayerSpreading;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerIsValidCandidate") << ":";
	p_Stream << s_Object->m_bPlayerIsValidCandidate;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlayerIsCandidate") << ":";
	p_Stream << s_Object->m_bPlayerIsCandidate;
	p_Stream << ",";

	p_Stream << JsonStr("m_PlayerCandidateTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_PlayerCandidateTime, p_Stream);

	p_Stream << "}";
}

void SActorSpreadControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorSpreadControllerSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aSpreadingActors"])
	{
		s_Object.m_aSpreadingActors.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aDeadSpreadingActors"])
	{
		s_Object.m_aDeadSpreadingActors.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aSpreadingActorsAddedTime"])
	{
		ZGameTime s_ArrayItem0;
		ZGameTime::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aSpreadingActorsAddedTime.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aNewCandidates"])
	{
		s_Object.m_aNewCandidates.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aCandidates"])
	{
		SActorSpreadControllerCandidateSaveData s_ArrayItem0;
		SActorSpreadControllerCandidateSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aCandidates.push_back(s_ArrayItem0);
	}

	s_Object.m_rCurrentSpreadingActor = static_cast<uint32>(int64_t(p_Document["m_rCurrentSpreadingActor"]));

	s_Object.m_nCurrentActorIndex = static_cast<uint32>(int64_t(p_Document["m_nCurrentActorIndex"]));

	s_Object.m_bPlayerCheckEnabled = bool(p_Document["m_bPlayerCheckEnabled"]);

	s_Object.m_bPlayerSpreading = bool(p_Document["m_bPlayerSpreading"]);

	s_Object.m_bPlayerIsValidCandidate = bool(p_Document["m_bPlayerIsValidCandidate"]);

	s_Object.m_bPlayerIsCandidate = bool(p_Document["m_bPlayerIsCandidate"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_PlayerCandidateTime"], &s_Item);
		s_Object.m_PlayerCandidateTime = s_Item;
	}

	*reinterpret_cast<SActorSpreadControllerSaveData*>(p_Target) = s_Object;
}

void SActorSpreadControllerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorSpreadControllerSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aSpreadingActors, p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerSaveData, m_aSpreadingActors));
	TArray<uint32>::Serialize(&s_Object->m_aDeadSpreadingActors, p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerSaveData, m_aDeadSpreadingActors));
	TArray<ZGameTime>::Serialize(&s_Object->m_aSpreadingActorsAddedTime, p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerSaveData, m_aSpreadingActorsAddedTime));
	TArray<uint32>::Serialize(&s_Object->m_aNewCandidates, p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerSaveData, m_aNewCandidates));
	TArray<SActorSpreadControllerCandidateSaveData>::Serialize(&s_Object->m_aCandidates, p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerSaveData, m_aCandidates));
	ZGameTime::Serialize(&s_Object->m_PlayerCandidateTime, p_Serializer, p_OwnOffset + offsetof(SActorSpreadControllerSaveData, m_PlayerCandidateTime));
}

ZHMTypeInfo SAnimatedActorMoveOrderSaveData::TypeInfo = ZHMTypeInfo("SAnimatedActorMoveOrderSaveData", sizeof(SAnimatedActorMoveOrderSaveData), alignof(SAnimatedActorMoveOrderSaveData), SAnimatedActorMoveOrderSaveData::WriteJson, SAnimatedActorMoveOrderSaveData::WriteSimpleJson, SAnimatedActorMoveOrderSaveData::FromSimpleJson, SAnimatedActorMoveOrderSaveData::Serialize);

void SAnimatedActorMoveOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorMoveOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bPrecisePositioning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPrecisePositioning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPreciseOrientation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPreciseOrientation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIgnoreEndCollision") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIgnoreEndCollision;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForcedEnpointSet") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForcedEnpointSet;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStopMoveDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStopMoveDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vWaypoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vWaypoint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vForcedEndpoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vForcedEndpoint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vFacingDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vFacingDirection, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SAnimatedActorMoveOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorMoveOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bPrecisePositioning") << ":";
	p_Stream << s_Object->m_bPrecisePositioning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPreciseOrientation") << ":";
	p_Stream << s_Object->m_bPreciseOrientation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIgnoreEndCollision") << ":";
	p_Stream << s_Object->m_bIgnoreEndCollision;
	p_Stream << ",";

	p_Stream << JsonStr("m_bForcedEnpointSet") << ":";
	p_Stream << s_Object->m_bForcedEnpointSet;
	p_Stream << ",";

	p_Stream << JsonStr("m_fStopMoveDistance") << ":";
	p_Stream << s_Object->m_fStopMoveDistance;
	p_Stream << ",";

	p_Stream << JsonStr("m_vWaypoint") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vWaypoint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vForcedEndpoint") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vForcedEndpoint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vFacingDirection") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vFacingDirection, p_Stream);

	p_Stream << "}";
}

void SAnimatedActorMoveOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAnimatedActorMoveOrderSaveData s_Object;

	s_Object.m_bPrecisePositioning = bool(p_Document["m_bPrecisePositioning"]);

	s_Object.m_bPreciseOrientation = bool(p_Document["m_bPreciseOrientation"]);

	s_Object.m_bIgnoreEndCollision = bool(p_Document["m_bIgnoreEndCollision"]);

	s_Object.m_bForcedEnpointSet = bool(p_Document["m_bForcedEnpointSet"]);

	s_Object.m_fStopMoveDistance = static_cast<float32>(double(p_Document["m_fStopMoveDistance"]));

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vWaypoint"], &s_Item);
		s_Object.m_vWaypoint = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vForcedEndpoint"], &s_Item);
		s_Object.m_vForcedEndpoint = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vFacingDirection"], &s_Item);
		s_Object.m_vFacingDirection = s_Item;
	}

	*reinterpret_cast<SAnimatedActorMoveOrderSaveData*>(p_Target) = s_Object;
}

void SAnimatedActorMoveOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAnimatedActorMoveOrderSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vWaypoint, p_Serializer, p_OwnOffset + offsetof(SAnimatedActorMoveOrderSaveData, m_vWaypoint));
	SVector3::Serialize(&s_Object->m_vForcedEndpoint, p_Serializer, p_OwnOffset + offsetof(SAnimatedActorMoveOrderSaveData, m_vForcedEndpoint));
	SVector3::Serialize(&s_Object->m_vFacingDirection, p_Serializer, p_OwnOffset + offsetof(SAnimatedActorMoveOrderSaveData, m_vFacingDirection));
}

ZHMTypeInfo SScreenplayRole2HeroSaveState::TypeInfo = ZHMTypeInfo("SScreenplayRole2HeroSaveState", sizeof(SScreenplayRole2HeroSaveState), alignof(SScreenplayRole2HeroSaveState), SScreenplayRole2HeroSaveState::WriteJson, SScreenplayRole2HeroSaveState::WriteSimpleJson, SScreenplayRole2HeroSaveState::FromSimpleJson, SScreenplayRole2HeroSaveState::Serialize);

void SScreenplayRole2HeroSaveState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SScreenplayRole2HeroSaveState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPaused;
	p_Stream << "}";

	p_Stream << "}";
}

void SScreenplayRole2HeroSaveState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SScreenplayRole2HeroSaveState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rCurrentSpeakEntity") << ":";
	p_Stream << s_Object->m_rCurrentSpeakEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPaused") << ":";
	p_Stream << s_Object->m_bPaused;

	p_Stream << "}";
}

void SScreenplayRole2HeroSaveState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SScreenplayRole2HeroSaveState s_Object;

	s_Object.m_rCurrentSpeakEntity = static_cast<uint32>(int64_t(p_Document["m_rCurrentSpeakEntity"]));

	s_Object.m_bPaused = bool(p_Document["m_bPaused"]);

	*reinterpret_cast<SScreenplayRole2HeroSaveState*>(p_Target) = s_Object;
}

void SScreenplayRole2HeroSaveState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SScreenplayRole2HeroSaveState*>(p_Object);

}

ZHMTypeInfo SDynamicObjectKeyValuePair::TypeInfo = ZHMTypeInfo("SDynamicObjectKeyValuePair", sizeof(SDynamicObjectKeyValuePair), alignof(SDynamicObjectKeyValuePair), SDynamicObjectKeyValuePair::WriteJson, SDynamicObjectKeyValuePair::WriteSimpleJson, SDynamicObjectKeyValuePair::FromSimpleJson, SDynamicObjectKeyValuePair::Serialize);

void SDynamicObjectKeyValuePair::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDynamicObjectKeyValuePair*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sKey") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sKey);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("value") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
	ZDynamicObject::WriteJson(&s_Object->value, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SDynamicObjectKeyValuePair::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDynamicObjectKeyValuePair*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sKey") << ":";
	p_Stream << JsonStr(s_Object->sKey);
	p_Stream << ",";

	p_Stream << JsonStr("value") << ":";
	ZDynamicObject::WriteSimpleJson(&s_Object->value, p_Stream);

	p_Stream << "}";
}

void SDynamicObjectKeyValuePair::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDynamicObjectKeyValuePair s_Object;

	s_Object.sKey = std::string_view(p_Document["sKey"]);

	{
		ZDynamicObject s_Item;
		ZDynamicObject::FromSimpleJson(p_Document["value"], &s_Item);
		s_Object.value = s_Item;
	}

	*reinterpret_cast<SDynamicObjectKeyValuePair*>(p_Target) = s_Object;
}

void SDynamicObjectKeyValuePair::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDynamicObjectKeyValuePair*>(p_Object);

	ZString::Serialize(&s_Object->sKey, p_Serializer, p_OwnOffset + offsetof(SDynamicObjectKeyValuePair, sKey));
	ZDynamicObject::Serialize(&s_Object->value, p_Serializer, p_OwnOffset + offsetof(SDynamicObjectKeyValuePair, value));
}

ZHMTypeInfo ZDynamicObject_SArrayTypesRegistrar::TypeInfo = ZHMTypeInfo("ZDynamicObject.SArrayTypesRegistrar", sizeof(ZDynamicObject_SArrayTypesRegistrar), alignof(ZDynamicObject_SArrayTypesRegistrar), ZDynamicObject_SArrayTypesRegistrar::WriteJson, ZDynamicObject_SArrayTypesRegistrar::WriteSimpleJson, ZDynamicObject_SArrayTypesRegistrar::FromSimpleJson, ZDynamicObject_SArrayTypesRegistrar::Serialize);

void ZDynamicObject_SArrayTypesRegistrar::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDynamicObject_SArrayTypesRegistrar*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("_dummy") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SDynamicObjectKeyValuePair>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->_dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDynamicObjectKeyValuePair") << "," << JsonStr("$val") << ":";
		SDynamicObjectKeyValuePair::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("_dummy2") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZDynamicObject>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_dummy2.size(); ++i)
	{
		auto& s_Item0 = s_Object->_dummy2[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDynamicObject") << "," << JsonStr("$val") << ":";
		ZDynamicObject::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->_dummy2.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void ZDynamicObject_SArrayTypesRegistrar::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDynamicObject_SArrayTypesRegistrar*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("_dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->_dummy[i];
		SDynamicObjectKeyValuePair::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("_dummy2") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->_dummy2.size(); ++i)
	{
		auto& s_Item0 = s_Object->_dummy2[i];
		ZDynamicObject::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->_dummy2.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZDynamicObject_SArrayTypesRegistrar::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZDynamicObject_SArrayTypesRegistrar s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["_dummy"])
	{
		SDynamicObjectKeyValuePair s_ArrayItem0;
		SDynamicObjectKeyValuePair::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._dummy.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["_dummy2"])
	{
		ZDynamicObject s_ArrayItem0;
		ZDynamicObject::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object._dummy2.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<ZDynamicObject_SArrayTypesRegistrar*>(p_Target) = s_Object;
}

void ZDynamicObject_SArrayTypesRegistrar::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZDynamicObject_SArrayTypesRegistrar*>(p_Object);

	TArray<SDynamicObjectKeyValuePair>::Serialize(&s_Object->_dummy, p_Serializer, p_OwnOffset + offsetof(ZDynamicObject_SArrayTypesRegistrar, _dummy));
	TArray<ZDynamicObject>::Serialize(&s_Object->_dummy2, p_Serializer, p_OwnOffset + offsetof(ZDynamicObject_SArrayTypesRegistrar, _dummy2));
}

ZHMTypeInfo ZHUDCamera3DControllerEntity_SEyeToPlane::TypeInfo = ZHMTypeInfo("ZHUDCamera3DControllerEntity.SEyeToPlane", sizeof(ZHUDCamera3DControllerEntity_SEyeToPlane), alignof(ZHUDCamera3DControllerEntity_SEyeToPlane), ZHUDCamera3DControllerEntity_SEyeToPlane::WriteJson, ZHUDCamera3DControllerEntity_SEyeToPlane::WriteSimpleJson, ZHUDCamera3DControllerEntity_SEyeToPlane::FromSimpleJson, ZHUDCamera3DControllerEntity_SEyeToPlane::Serialize);

void ZHUDCamera3DControllerEntity_SEyeToPlane::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDCamera3DControllerEntity_SEyeToPlane*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("posCharacter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->posCharacter, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("udirTowardsPlane") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->udirTowardsPlane, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("udirAnchor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->udirAnchor, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZHUDCamera3DControllerEntity_SEyeToPlane::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHUDCamera3DControllerEntity_SEyeToPlane*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("posCharacter") << ":";
	float4::WriteSimpleJson(&s_Object->posCharacter, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("udirTowardsPlane") << ":";
	float4::WriteSimpleJson(&s_Object->udirTowardsPlane, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("udirAnchor") << ":";
	float4::WriteSimpleJson(&s_Object->udirAnchor, p_Stream);

	p_Stream << "}";
}

void ZHUDCamera3DControllerEntity_SEyeToPlane::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHUDCamera3DControllerEntity_SEyeToPlane s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["posCharacter"], &s_Item);
		s_Object.posCharacter = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["udirTowardsPlane"], &s_Item);
		s_Object.udirTowardsPlane = s_Item;
	}

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["udirAnchor"], &s_Item);
		s_Object.udirAnchor = s_Item;
	}

	*reinterpret_cast<ZHUDCamera3DControllerEntity_SEyeToPlane*>(p_Target) = s_Object;
}

void ZHUDCamera3DControllerEntity_SEyeToPlane::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHUDCamera3DControllerEntity_SEyeToPlane*>(p_Object);

	float4::Serialize(&s_Object->posCharacter, p_Serializer, p_OwnOffset + offsetof(ZHUDCamera3DControllerEntity_SEyeToPlane, posCharacter));
	float4::Serialize(&s_Object->udirTowardsPlane, p_Serializer, p_OwnOffset + offsetof(ZHUDCamera3DControllerEntity_SEyeToPlane, udirTowardsPlane));
	float4::Serialize(&s_Object->udirAnchor, p_Serializer, p_OwnOffset + offsetof(ZHUDCamera3DControllerEntity_SEyeToPlane, udirAnchor));
}

ZHMTypeInfo SHM5CrippleBoxSaveData::TypeInfo = ZHMTypeInfo("SHM5CrippleBoxSaveData", sizeof(SHM5CrippleBoxSaveData), alignof(SHM5CrippleBoxSaveData), SHM5CrippleBoxSaveData::WriteJson, SHM5CrippleBoxSaveData::WriteSimpleJson, SHM5CrippleBoxSaveData::FromSimpleJson, SHM5CrippleBoxSaveData::Serialize);

void SHM5CrippleBoxSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHM5CrippleBoxSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bInSequence") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInSequence;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllowBaseMovements") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllowBaseMovements;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSequenceAllowCamera") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSequenceAllowCamera;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLedges") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLedges;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCover") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCover;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTakeClothes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTakeClothes;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLadder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLadder;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPullVictimFromWindow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPullVictimFromWindow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFiberWireKill") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFiberWireKill;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bClimbWindow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bClimbWindow;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bThrowBodyOverRail") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bThrowBodyOverRail;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDumpBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDumpBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bOperateCPDoor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOperateCPDoor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHideInCloset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHideInCloset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombat") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombat;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGrabVictim") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGrabVictim;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPushVictimThroughWindowAndRail") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPushVictimThroughWindowAndRail;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bKickVictimOverLedge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bKickVictimOverLedge;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPickupItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPickupItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDragBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDragBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bThrowItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bThrowItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlaceItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPlaceItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseDeathAnimation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUseDeathAnimation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLimitedAmmo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLimitedAmmo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRun") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRun;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTurn") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTurn;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSneak") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSneak;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoSnapSneak") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bNoSnapSneak;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandUp") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStandUp;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFastWalk") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFastWalk;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMovementAllowed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMovementAllowed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIdleAnimationsAllowed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIdleAnimationsAllowed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanHolsterItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCanHolsterItems;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverTakedown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCoverTakedown;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCoverScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverToCover") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCoverToCover;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatSnapNeck") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatSnapNeck;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatChoke") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatChoke;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatPistolFinish") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatPistolFinish;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatProps") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatProps;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatStandart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatStandart;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatFakeSwing") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCloseCombatFakeSwing;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bGameCameraAutoAlign") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bGameCameraAutoAlign;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCameraSide") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCameraSide;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInstinct") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInstinct;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlindFire") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bBlindFire;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAim") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAim;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHairTrigger") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHairTrigger;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFire") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFire;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bOpenLogbook") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOpenLogbook;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bOpenPauseMenu") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bOpenPauseMenu;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bActivatedByPinSignal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActivatedByPinSignal;
	p_Stream << "}";

	p_Stream << "}";
}

void SHM5CrippleBoxSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHM5CrippleBoxSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bInSequence") << ":";
	p_Stream << s_Object->m_bInSequence;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllowBaseMovements") << ":";
	p_Stream << s_Object->m_bAllowBaseMovements;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSequenceAllowCamera") << ":";
	p_Stream << s_Object->m_bSequenceAllowCamera;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLedges") << ":";
	p_Stream << s_Object->m_bLedges;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCover") << ":";
	p_Stream << s_Object->m_bCover;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTakeClothes") << ":";
	p_Stream << s_Object->m_bTakeClothes;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLadder") << ":";
	p_Stream << s_Object->m_bLadder;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPullVictimFromWindow") << ":";
	p_Stream << s_Object->m_bPullVictimFromWindow;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFiberWireKill") << ":";
	p_Stream << s_Object->m_bFiberWireKill;
	p_Stream << ",";

	p_Stream << JsonStr("m_bClimbWindow") << ":";
	p_Stream << s_Object->m_bClimbWindow;
	p_Stream << ",";

	p_Stream << JsonStr("m_bThrowBodyOverRail") << ":";
	p_Stream << s_Object->m_bThrowBodyOverRail;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDumpBody") << ":";
	p_Stream << s_Object->m_bDumpBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bOperateCPDoor") << ":";
	p_Stream << s_Object->m_bOperateCPDoor;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHideInCloset") << ":";
	p_Stream << s_Object->m_bHideInCloset;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombat") << ":";
	p_Stream << s_Object->m_bCloseCombat;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGrabVictim") << ":";
	p_Stream << s_Object->m_bGrabVictim;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPushVictimThroughWindowAndRail") << ":";
	p_Stream << s_Object->m_bPushVictimThroughWindowAndRail;
	p_Stream << ",";

	p_Stream << JsonStr("m_bKickVictimOverLedge") << ":";
	p_Stream << s_Object->m_bKickVictimOverLedge;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPickupItem") << ":";
	p_Stream << s_Object->m_bPickupItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropItem") << ":";
	p_Stream << s_Object->m_bDropItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDragBody") << ":";
	p_Stream << s_Object->m_bDragBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bThrowItem") << ":";
	p_Stream << s_Object->m_bThrowItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPlaceItem") << ":";
	p_Stream << s_Object->m_bPlaceItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseDeathAnimation") << ":";
	p_Stream << s_Object->m_bUseDeathAnimation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLimitedAmmo") << ":";
	p_Stream << s_Object->m_bLimitedAmmo;
	p_Stream << ",";

	p_Stream << JsonStr("m_bRun") << ":";
	p_Stream << s_Object->m_bRun;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTurn") << ":";
	p_Stream << s_Object->m_bTurn;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSneak") << ":";
	p_Stream << s_Object->m_bSneak;
	p_Stream << ",";

	p_Stream << JsonStr("m_bNoSnapSneak") << ":";
	p_Stream << s_Object->m_bNoSnapSneak;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandUp") << ":";
	p_Stream << s_Object->m_bStandUp;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFastWalk") << ":";
	p_Stream << s_Object->m_bFastWalk;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMovementAllowed") << ":";
	p_Stream << s_Object->m_bMovementAllowed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIdleAnimationsAllowed") << ":";
	p_Stream << s_Object->m_bIdleAnimationsAllowed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bItems") << ":";
	p_Stream << s_Object->m_bItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCanHolsterItems") << ":";
	p_Stream << s_Object->m_bCanHolsterItems;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverTakedown") << ":";
	p_Stream << s_Object->m_bCoverTakedown;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverScale") << ":";
	p_Stream << s_Object->m_bCoverScale;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCoverToCover") << ":";
	p_Stream << s_Object->m_bCoverToCover;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatSnapNeck") << ":";
	p_Stream << s_Object->m_bCloseCombatSnapNeck;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatChoke") << ":";
	p_Stream << s_Object->m_bCloseCombatChoke;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatPistolFinish") << ":";
	p_Stream << s_Object->m_bCloseCombatPistolFinish;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatProps") << ":";
	p_Stream << s_Object->m_bCloseCombatProps;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatStandart") << ":";
	p_Stream << s_Object->m_bCloseCombatStandart;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCloseCombatFakeSwing") << ":";
	p_Stream << s_Object->m_bCloseCombatFakeSwing;
	p_Stream << ",";

	p_Stream << JsonStr("m_bGameCameraAutoAlign") << ":";
	p_Stream << s_Object->m_bGameCameraAutoAlign;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCameraSide") << ":";
	p_Stream << s_Object->m_bCameraSide;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInstinct") << ":";
	p_Stream << s_Object->m_bInstinct;
	p_Stream << ",";

	p_Stream << JsonStr("m_bBlindFire") << ":";
	p_Stream << s_Object->m_bBlindFire;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAim") << ":";
	p_Stream << s_Object->m_bAim;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHairTrigger") << ":";
	p_Stream << s_Object->m_bHairTrigger;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFire") << ":";
	p_Stream << s_Object->m_bFire;
	p_Stream << ",";

	p_Stream << JsonStr("m_bOpenLogbook") << ":";
	p_Stream << s_Object->m_bOpenLogbook;
	p_Stream << ",";

	p_Stream << JsonStr("m_bOpenPauseMenu") << ":";
	p_Stream << s_Object->m_bOpenPauseMenu;
	p_Stream << ",";

	p_Stream << JsonStr("m_bActivatedByPinSignal") << ":";
	p_Stream << s_Object->m_bActivatedByPinSignal;

	p_Stream << "}";
}

void SHM5CrippleBoxSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHM5CrippleBoxSaveData s_Object;

	s_Object.m_bInSequence = bool(p_Document["m_bInSequence"]);

	s_Object.m_bAllowBaseMovements = bool(p_Document["m_bAllowBaseMovements"]);

	s_Object.m_bSequenceAllowCamera = bool(p_Document["m_bSequenceAllowCamera"]);

	s_Object.m_bLedges = bool(p_Document["m_bLedges"]);

	s_Object.m_bCover = bool(p_Document["m_bCover"]);

	s_Object.m_bTakeClothes = bool(p_Document["m_bTakeClothes"]);

	s_Object.m_bLadder = bool(p_Document["m_bLadder"]);

	s_Object.m_bPullVictimFromWindow = bool(p_Document["m_bPullVictimFromWindow"]);

	s_Object.m_bFiberWireKill = bool(p_Document["m_bFiberWireKill"]);

	s_Object.m_bClimbWindow = bool(p_Document["m_bClimbWindow"]);

	s_Object.m_bThrowBodyOverRail = bool(p_Document["m_bThrowBodyOverRail"]);

	s_Object.m_bDumpBody = bool(p_Document["m_bDumpBody"]);

	s_Object.m_bOperateCPDoor = bool(p_Document["m_bOperateCPDoor"]);

	s_Object.m_bHideInCloset = bool(p_Document["m_bHideInCloset"]);

	s_Object.m_bCloseCombat = bool(p_Document["m_bCloseCombat"]);

	s_Object.m_bGrabVictim = bool(p_Document["m_bGrabVictim"]);

	s_Object.m_bPushVictimThroughWindowAndRail = bool(p_Document["m_bPushVictimThroughWindowAndRail"]);

	s_Object.m_bKickVictimOverLedge = bool(p_Document["m_bKickVictimOverLedge"]);

	s_Object.m_bPickupItem = bool(p_Document["m_bPickupItem"]);

	s_Object.m_bDropItem = bool(p_Document["m_bDropItem"]);

	s_Object.m_bDragBody = bool(p_Document["m_bDragBody"]);

	s_Object.m_bThrowItem = bool(p_Document["m_bThrowItem"]);

	s_Object.m_bPlaceItem = bool(p_Document["m_bPlaceItem"]);

	s_Object.m_bUseDeathAnimation = bool(p_Document["m_bUseDeathAnimation"]);

	s_Object.m_bLimitedAmmo = bool(p_Document["m_bLimitedAmmo"]);

	s_Object.m_bRun = bool(p_Document["m_bRun"]);

	s_Object.m_bTurn = bool(p_Document["m_bTurn"]);

	s_Object.m_bSneak = bool(p_Document["m_bSneak"]);

	s_Object.m_bNoSnapSneak = bool(p_Document["m_bNoSnapSneak"]);

	s_Object.m_bStandUp = bool(p_Document["m_bStandUp"]);

	s_Object.m_bFastWalk = bool(p_Document["m_bFastWalk"]);

	s_Object.m_bMovementAllowed = bool(p_Document["m_bMovementAllowed"]);

	s_Object.m_bIdleAnimationsAllowed = bool(p_Document["m_bIdleAnimationsAllowed"]);

	s_Object.m_bItems = bool(p_Document["m_bItems"]);

	s_Object.m_bCanHolsterItems = bool(p_Document["m_bCanHolsterItems"]);

	s_Object.m_bCoverTakedown = bool(p_Document["m_bCoverTakedown"]);

	s_Object.m_bCoverScale = bool(p_Document["m_bCoverScale"]);

	s_Object.m_bCoverToCover = bool(p_Document["m_bCoverToCover"]);

	s_Object.m_bCloseCombatSnapNeck = bool(p_Document["m_bCloseCombatSnapNeck"]);

	s_Object.m_bCloseCombatChoke = bool(p_Document["m_bCloseCombatChoke"]);

	s_Object.m_bCloseCombatPistolFinish = bool(p_Document["m_bCloseCombatPistolFinish"]);

	s_Object.m_bCloseCombatProps = bool(p_Document["m_bCloseCombatProps"]);

	s_Object.m_bCloseCombatStandart = bool(p_Document["m_bCloseCombatStandart"]);

	s_Object.m_bCloseCombatFakeSwing = bool(p_Document["m_bCloseCombatFakeSwing"]);

	s_Object.m_bGameCameraAutoAlign = bool(p_Document["m_bGameCameraAutoAlign"]);

	s_Object.m_bCameraSide = bool(p_Document["m_bCameraSide"]);

	s_Object.m_bInstinct = bool(p_Document["m_bInstinct"]);

	s_Object.m_bBlindFire = bool(p_Document["m_bBlindFire"]);

	s_Object.m_bAim = bool(p_Document["m_bAim"]);

	s_Object.m_bHairTrigger = bool(p_Document["m_bHairTrigger"]);

	s_Object.m_bFire = bool(p_Document["m_bFire"]);

	s_Object.m_bOpenLogbook = bool(p_Document["m_bOpenLogbook"]);

	s_Object.m_bOpenPauseMenu = bool(p_Document["m_bOpenPauseMenu"]);

	s_Object.m_bActivatedByPinSignal = bool(p_Document["m_bActivatedByPinSignal"]);

	*reinterpret_cast<SHM5CrippleBoxSaveData*>(p_Target) = s_Object;
}

void SHM5CrippleBoxSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHM5CrippleBoxSaveData*>(p_Object);

}

ZHMTypeInfo ZMoveToOrder_SMoveToOrderSaveData::TypeInfo = ZHMTypeInfo("ZMoveToOrder.SMoveToOrderSaveData", sizeof(ZMoveToOrder_SMoveToOrderSaveData), alignof(ZMoveToOrder_SMoveToOrderSaveData), ZMoveToOrder_SMoveToOrderSaveData::WriteJson, ZMoveToOrder_SMoveToOrderSaveData::WriteSimpleJson, ZMoveToOrder_SMoveToOrderSaveData::FromSimpleJson, ZMoveToOrder_SMoveToOrderSaveData::Serialize);

void ZMoveToOrder_SMoveToOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZMoveToOrder_SMoveToOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vStopDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vStopDirection, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStopDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStopDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fWalkDistance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fWalkDistance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nObstacleBlockageFlags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nObstacleBlockageFlags;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eMoveSpeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZMoveToOrder.EMoveSpeed") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eMoveSpeed) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZMoveToOrder.EMoveSpeed", static_cast<int>(s_Object->m_eMoveSpeed))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIgnoreEndCollision") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIgnoreEndCollision;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bPrecisePositioning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPrecisePositioning;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceStand") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForceStand;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLookAtTargetMustBeInSight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLookAtTargetMustBeInSight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseKnownPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUseKnownPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopActFast") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStopActFast;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStrafe") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStrafe;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEndStanding") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEndStanding;
	p_Stream << "}";

	p_Stream << "}";
}

void ZMoveToOrder_SMoveToOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZMoveToOrder_SMoveToOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vStopDirection") << ":";
	float4::WriteSimpleJson(&s_Object->m_vStopDirection, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fStopDistance") << ":";
	p_Stream << s_Object->m_fStopDistance;
	p_Stream << ",";

	p_Stream << JsonStr("m_fWalkDistance") << ":";
	p_Stream << s_Object->m_fWalkDistance;
	p_Stream << ",";

	p_Stream << JsonStr("m_nObstacleBlockageFlags") << ":";
	p_Stream << s_Object->m_nObstacleBlockageFlags;
	p_Stream << ",";

	p_Stream << JsonStr("m_eMoveSpeed") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZMoveToOrder.EMoveSpeed", static_cast<int>(s_Object->m_eMoveSpeed)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bIgnoreEndCollision") << ":";
	p_Stream << s_Object->m_bIgnoreEndCollision;
	p_Stream << ",";

	p_Stream << JsonStr("m_bPrecisePositioning") << ":";
	p_Stream << s_Object->m_bPrecisePositioning;
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceStand") << ":";
	p_Stream << s_Object->m_bForceStand;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLookAtTargetMustBeInSight") << ":";
	p_Stream << s_Object->m_bLookAtTargetMustBeInSight;
	p_Stream << ",";

	p_Stream << JsonStr("m_bUseKnownPosition") << ":";
	p_Stream << s_Object->m_bUseKnownPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopActFast") << ":";
	p_Stream << s_Object->m_bStopActFast;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStrafe") << ":";
	p_Stream << s_Object->m_bStrafe;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEndStanding") << ":";
	p_Stream << s_Object->m_bEndStanding;

	p_Stream << "}";
}

void ZMoveToOrder_SMoveToOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZMoveToOrder_SMoveToOrderSaveData s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vStopDirection"], &s_Item);
		s_Object.m_vStopDirection = s_Item;
	}

	s_Object.m_fStopDistance = static_cast<float32>(double(p_Document["m_fStopDistance"]));

	s_Object.m_fWalkDistance = static_cast<float32>(double(p_Document["m_fWalkDistance"]));

	s_Object.m_nObstacleBlockageFlags = static_cast<uint32>(int64_t(p_Document["m_nObstacleBlockageFlags"]));

	s_Object.m_eMoveSpeed = static_cast<ZMoveToOrder_EMoveSpeed>(ZHMEnums::GetEnumValueByName("ZMoveToOrder.EMoveSpeed", std::string_view(p_Document["m_eMoveSpeed"])));

	s_Object.m_bIgnoreEndCollision = bool(p_Document["m_bIgnoreEndCollision"]);

	s_Object.m_bPrecisePositioning = bool(p_Document["m_bPrecisePositioning"]);

	s_Object.m_bForceStand = bool(p_Document["m_bForceStand"]);

	s_Object.m_bLookAtTargetMustBeInSight = bool(p_Document["m_bLookAtTargetMustBeInSight"]);

	s_Object.m_bUseKnownPosition = bool(p_Document["m_bUseKnownPosition"]);

	s_Object.m_bStopActFast = bool(p_Document["m_bStopActFast"]);

	s_Object.m_bStrafe = bool(p_Document["m_bStrafe"]);

	s_Object.m_bEndStanding = bool(p_Document["m_bEndStanding"]);

	*reinterpret_cast<ZMoveToOrder_SMoveToOrderSaveData*>(p_Target) = s_Object;
}

void ZMoveToOrder_SMoveToOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZMoveToOrder_SMoveToOrderSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vStopDirection, p_Serializer, p_OwnOffset + offsetof(ZMoveToOrder_SMoveToOrderSaveData, m_vStopDirection));
}

ZHMTypeInfo IActorProviderFilter::TypeInfo = ZHMTypeInfo("IActorProviderFilter", sizeof(IActorProviderFilter), alignof(IActorProviderFilter), IActorProviderFilter::WriteJson, IActorProviderFilter::WriteSimpleJson, IActorProviderFilter::FromSimpleJson, IActorProviderFilter::Serialize);

void IActorProviderFilter::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IActorProviderFilter*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActorProviderFilter::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IActorProviderFilter*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IActorProviderFilter::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IActorProviderFilter s_Object;

	*reinterpret_cast<IActorProviderFilter*>(p_Target) = s_Object;
}

void IActorProviderFilter::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IActorProviderFilter*>(p_Object);

}

ZHMTypeInfo SPersistentEntitySaveData::TypeInfo = ZHMTypeInfo("SPersistentEntitySaveData", sizeof(SPersistentEntitySaveData), alignof(SPersistentEntitySaveData), SPersistentEntitySaveData::WriteJson, SPersistentEntitySaveData::WriteSimpleJson, SPersistentEntitySaveData::FromSimpleJson, SPersistentEntitySaveData::Serialize);

void SPersistentEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPersistentEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nResourceId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nResourceId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityIDs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint64>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityIDs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityIDs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntityIDs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityNames") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityNames.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityNames[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->m_aEntityNames.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SPersistentEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPersistentEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nResourceId") << ":";
	p_Stream << s_Object->m_nResourceId;
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityIDs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityIDs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityIDs[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntityIDs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEntityNames") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityNames.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityNames[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->m_aEntityNames.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SPersistentEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPersistentEntitySaveData s_Object;

	s_Object.m_nResourceId = uint64(p_Document["m_nResourceId"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntityIDs"])
	{
		s_Object.m_aEntityIDs.push_back(uint64(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntityNames"])
	{
		s_Object.m_aEntityNames.push_back(std::string_view(s_Item0));
	}

	*reinterpret_cast<SPersistentEntitySaveData*>(p_Target) = s_Object;
}

void SPersistentEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SPersistentEntitySaveData*>(p_Object);

	TArray<uint64>::Serialize(&s_Object->m_aEntityIDs, p_Serializer, p_OwnOffset + offsetof(SPersistentEntitySaveData, m_aEntityIDs));
	TArray<ZString>::Serialize(&s_Object->m_aEntityNames, p_Serializer, p_OwnOffset + offsetof(SPersistentEntitySaveData, m_aEntityNames));
}

ZHMTypeInfo SGetHelpServiceSaveData::TypeInfo = ZHMTypeInfo("SGetHelpServiceSaveData", sizeof(SGetHelpServiceSaveData), alignof(SGetHelpServiceSaveData), SGetHelpServiceSaveData::WriteJson, SGetHelpServiceSaveData::WriteSimpleJson, SGetHelpServiceSaveData::FromSimpleJson, SGetHelpServiceSaveData::Serialize);

void SGetHelpServiceSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGetHelpServiceSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aHelpingActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SHelpingActorSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aHelpingActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aHelpingActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHelpingActorSaveData") << "," << JsonStr("$val") << ":";
		SHelpingActorSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aHelpingActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SGetHelpServiceSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGetHelpServiceSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aHelpingActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aHelpingActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aHelpingActors[i];
		SHelpingActorSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aHelpingActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SGetHelpServiceSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGetHelpServiceSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aHelpingActors"])
	{
		SHelpingActorSaveData s_ArrayItem0;
		SHelpingActorSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aHelpingActors.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SGetHelpServiceSaveData*>(p_Target) = s_Object;
}

void SGetHelpServiceSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGetHelpServiceSaveData*>(p_Object);

	TArray<SHelpingActorSaveData>::Serialize(&s_Object->m_aHelpingActors, p_Serializer, p_OwnOffset + offsetof(SGetHelpServiceSaveData, m_aHelpingActors));
}

ZHMTypeInfo SExposedEntityDescriptor::TypeInfo = ZHMTypeInfo("SExposedEntityDescriptor", sizeof(SExposedEntityDescriptor), alignof(SExposedEntityDescriptor), SExposedEntityDescriptor::WriteJson, SExposedEntityDescriptor::WriteSimpleJson, SExposedEntityDescriptor::FromSimpleJson, SExposedEntityDescriptor::Serialize);

void SExposedEntityDescriptor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExposedEntityDescriptor*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsArray") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsArray;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bIsHidden;
	p_Stream << "}";

	p_Stream << "}";
}

void SExposedEntityDescriptor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExposedEntityDescriptor*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sName") << ":";
	p_Stream << JsonStr(s_Object->sName);
	p_Stream << ",";

	p_Stream << JsonStr("sDisplayName") << ":";
	p_Stream << JsonStr(s_Object->sDisplayName);
	p_Stream << ",";

	p_Stream << JsonStr("sHelpText") << ":";
	p_Stream << JsonStr(s_Object->sHelpText);
	p_Stream << ",";

	p_Stream << JsonStr("bIsArray") << ":";
	p_Stream << s_Object->bIsArray;
	p_Stream << ",";

	p_Stream << JsonStr("bIsHidden") << ":";
	p_Stream << s_Object->bIsHidden;

	p_Stream << "}";
}

void SExposedEntityDescriptor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExposedEntityDescriptor s_Object;

	s_Object.sName = std::string_view(p_Document["sName"]);

	s_Object.sDisplayName = std::string_view(p_Document["sDisplayName"]);

	s_Object.sHelpText = std::string_view(p_Document["sHelpText"]);

	s_Object.bIsArray = bool(p_Document["bIsArray"]);

	s_Object.bIsHidden = bool(p_Document["bIsHidden"]);

	*reinterpret_cast<SExposedEntityDescriptor*>(p_Target) = s_Object;
}

void SExposedEntityDescriptor::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SExposedEntityDescriptor*>(p_Object);

	ZString::Serialize(&s_Object->sName, p_Serializer, p_OwnOffset + offsetof(SExposedEntityDescriptor, sName));
	ZString::Serialize(&s_Object->sDisplayName, p_Serializer, p_OwnOffset + offsetof(SExposedEntityDescriptor, sDisplayName));
	ZString::Serialize(&s_Object->sHelpText, p_Serializer, p_OwnOffset + offsetof(SExposedEntityDescriptor, sHelpText));
}

ZHMTypeInfo SMovementHideInClosetSaveData::TypeInfo = ZHMTypeInfo("SMovementHideInClosetSaveData", sizeof(SMovementHideInClosetSaveData), alignof(SMovementHideInClosetSaveData), SMovementHideInClosetSaveData::WriteJson, SMovementHideInClosetSaveData::WriteSimpleJson, SMovementHideInClosetSaveData::FromSimpleJson, SMovementHideInClosetSaveData::Serialize);

void SMovementHideInClosetSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementHideInClosetSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eCurrentClosetType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ICloset.EClosetType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eCurrentClosetType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ICloset.EClosetType", static_cast<int>(s_Object->m_eCurrentClosetType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCloset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCloset;
	p_Stream << "}";

	p_Stream << "}";
}

void SMovementHideInClosetSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMovementHideInClosetSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eCurrentClosetType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ICloset.EClosetType", static_cast<int>(s_Object->m_eCurrentClosetType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_rCloset") << ":";
	p_Stream << s_Object->m_rCloset;

	p_Stream << "}";
}

void SMovementHideInClosetSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMovementHideInClosetSaveData s_Object;

	s_Object.m_eCurrentClosetType = static_cast<ICloset_EClosetType>(ZHMEnums::GetEnumValueByName("ICloset.EClosetType", std::string_view(p_Document["m_eCurrentClosetType"])));

	s_Object.m_rCloset = static_cast<uint32>(int64_t(p_Document["m_rCloset"]));

	*reinterpret_cast<SMovementHideInClosetSaveData*>(p_Target) = s_Object;
}

void SMovementHideInClosetSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMovementHideInClosetSaveData*>(p_Object);

}

ZHMTypeInfo SLevelReferenceableEntitieSaveData::TypeInfo = ZHMTypeInfo("SLevelReferenceableEntitieSaveData", sizeof(SLevelReferenceableEntitieSaveData), alignof(SLevelReferenceableEntitieSaveData), SLevelReferenceableEntitieSaveData::WriteJson, SLevelReferenceableEntitieSaveData::WriteSimpleJson, SLevelReferenceableEntitieSaveData::FromSimpleJson, SLevelReferenceableEntitieSaveData::Serialize);

void SLevelReferenceableEntitieSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLevelReferenceableEntitieSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_sSceneResource") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sSceneResource);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAdditionalBrickResources") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZString>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAdditionalBrickResources.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAdditionalBrickResources[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
		p_Stream << JsonStr(s_Item0);
		p_Stream << "}";

		if (i < s_Object->m_aAdditionalBrickResources.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SLevelReferenceableEntitieSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLevelReferenceableEntitieSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_sSceneResource") << ":";
	p_Stream << JsonStr(s_Object->m_sSceneResource);
	p_Stream << ",";

	p_Stream << JsonStr("m_aAdditionalBrickResources") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAdditionalBrickResources.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAdditionalBrickResources[i];
		p_Stream << JsonStr(s_Item0);

		if (i < s_Object->m_aAdditionalBrickResources.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SLevelReferenceableEntitieSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLevelReferenceableEntitieSaveData s_Object;

	s_Object.m_sSceneResource = std::string_view(p_Document["m_sSceneResource"]);

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aAdditionalBrickResources"])
	{
		s_Object.m_aAdditionalBrickResources.push_back(std::string_view(s_Item0));
	}

	*reinterpret_cast<SLevelReferenceableEntitieSaveData*>(p_Target) = s_Object;
}

void SLevelReferenceableEntitieSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLevelReferenceableEntitieSaveData*>(p_Object);

	ZString::Serialize(&s_Object->m_sSceneResource, p_Serializer, p_OwnOffset + offsetof(SLevelReferenceableEntitieSaveData, m_sSceneResource));
	TArray<ZString>::Serialize(&s_Object->m_aAdditionalBrickResources, p_Serializer, p_OwnOffset + offsetof(SLevelReferenceableEntitieSaveData, m_aAdditionalBrickResources));
}

ZHMTypeInfo IEventConsumerCollection::TypeInfo = ZHMTypeInfo("IEventConsumerCollection", sizeof(IEventConsumerCollection), alignof(IEventConsumerCollection), IEventConsumerCollection::WriteJson, IEventConsumerCollection::WriteSimpleJson, IEventConsumerCollection::FromSimpleJson, IEventConsumerCollection::Serialize);

void IEventConsumerCollection::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IEventConsumerCollection*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IEventConsumerCollection::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IEventConsumerCollection*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IEventConsumerCollection::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IEventConsumerCollection s_Object;

	*reinterpret_cast<IEventConsumerCollection*>(p_Target) = s_Object;
}

void IEventConsumerCollection::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IEventConsumerCollection*>(p_Object);

}

ZHMTypeInfo SWaveformGeneratorSaveData::TypeInfo = ZHMTypeInfo("SWaveformGeneratorSaveData", sizeof(SWaveformGeneratorSaveData), alignof(SWaveformGeneratorSaveData), SWaveformGeneratorSaveData::WriteJson, SWaveformGeneratorSaveData::WriteSimpleJson, SWaveformGeneratorSaveData::FromSimpleJson, SWaveformGeneratorSaveData::Serialize);

void SWaveformGeneratorSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWaveformGeneratorSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fFrequency") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fFrequency;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fOffset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fStartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fStartTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCount;
	p_Stream << "}";

	p_Stream << "}";
}

void SWaveformGeneratorSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWaveformGeneratorSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fTime") << ":";
	p_Stream << s_Object->m_fTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fFrequency") << ":";
	p_Stream << s_Object->m_fFrequency;
	p_Stream << ",";

	p_Stream << JsonStr("m_fOffset") << ":";
	p_Stream << s_Object->m_fOffset;
	p_Stream << ",";

	p_Stream << JsonStr("m_fScale") << ":";
	p_Stream << s_Object->m_fScale;
	p_Stream << ",";

	p_Stream << JsonStr("m_fStartTime") << ":";
	p_Stream << s_Object->m_fStartTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCount") << ":";
	p_Stream << s_Object->m_nCount;

	p_Stream << "}";
}

void SWaveformGeneratorSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SWaveformGeneratorSaveData s_Object;

	s_Object.m_fTime = static_cast<float32>(double(p_Document["m_fTime"]));

	s_Object.m_fFrequency = static_cast<float32>(double(p_Document["m_fFrequency"]));

	s_Object.m_fOffset = static_cast<float32>(double(p_Document["m_fOffset"]));

	s_Object.m_fScale = static_cast<float32>(double(p_Document["m_fScale"]));

	s_Object.m_fStartTime = static_cast<float32>(double(p_Document["m_fStartTime"]));

	s_Object.m_nCount = static_cast<uint32>(int64_t(p_Document["m_nCount"]));

	*reinterpret_cast<SWaveformGeneratorSaveData*>(p_Target) = s_Object;
}

void SWaveformGeneratorSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SWaveformGeneratorSaveData*>(p_Object);

}

ZHMTypeInfo SWaveformGeneratorManagerSaveData::TypeInfo = ZHMTypeInfo("SWaveformGeneratorManagerSaveData", sizeof(SWaveformGeneratorManagerSaveData), alignof(SWaveformGeneratorManagerSaveData), SWaveformGeneratorManagerSaveData::WriteJson, SWaveformGeneratorManagerSaveData::WriteSimpleJson, SWaveformGeneratorManagerSaveData::FromSimpleJson, SWaveformGeneratorManagerSaveData::Serialize);

void SWaveformGeneratorManagerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWaveformGeneratorManagerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aGenerators") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGenerators.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGenerators[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aGenerators.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGeneratorData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SWaveformGeneratorSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGeneratorData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGeneratorData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SWaveformGeneratorSaveData") << "," << JsonStr("$val") << ":";
		SWaveformGeneratorSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aGeneratorData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SWaveformGeneratorManagerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWaveformGeneratorManagerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aGenerators") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGenerators.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGenerators[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aGenerators.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aGeneratorData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aGeneratorData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aGeneratorData[i];
		SWaveformGeneratorSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aGeneratorData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SWaveformGeneratorManagerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SWaveformGeneratorManagerSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aGenerators"])
	{
		s_Object.m_aGenerators.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aGeneratorData"])
	{
		SWaveformGeneratorSaveData s_ArrayItem0;
		SWaveformGeneratorSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aGeneratorData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SWaveformGeneratorManagerSaveData*>(p_Target) = s_Object;
}

void SWaveformGeneratorManagerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SWaveformGeneratorManagerSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aGenerators, p_Serializer, p_OwnOffset + offsetof(SWaveformGeneratorManagerSaveData, m_aGenerators));
	TArray<SWaveformGeneratorSaveData>::Serialize(&s_Object->m_aGeneratorData, p_Serializer, p_OwnOffset + offsetof(SWaveformGeneratorManagerSaveData, m_aGeneratorData));
}

ZHMTypeInfo SMathLerpSaveData_SColorRGB::TypeInfo = ZHMTypeInfo("SMathLerpSaveData_SColorRGB", sizeof(SMathLerpSaveData_SColorRGB), alignof(SMathLerpSaveData_SColorRGB), SMathLerpSaveData_SColorRGB::WriteJson, SMathLerpSaveData_SColorRGB::WriteSimpleJson, SMathLerpSaveData_SColorRGB::FromSimpleJson, SMathLerpSaveData_SColorRGB::Serialize);

void SMathLerpSaveData_SColorRGB::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SColorRGB*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_A") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_A, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SColorRGB") << "," << JsonStr("$val") << ":";
	SColorRGB::WriteJson(&s_Object->m_B, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fT;
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpSaveData_SColorRGB::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SColorRGB*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_A") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_A, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_B") << ":";
	SColorRGB::WriteSimpleJson(&s_Object->m_B, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fT") << ":";
	p_Stream << s_Object->m_fT;

	p_Stream << "}";
}

void SMathLerpSaveData_SColorRGB::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpSaveData_SColorRGB s_Object;

	{
		SColorRGB s_Item;
		SColorRGB::FromSimpleJson(p_Document["m_A"], &s_Item);
		s_Object.m_A = s_Item;
	}

	{
		SColorRGB s_Item;
		SColorRGB::FromSimpleJson(p_Document["m_B"], &s_Item);
		s_Object.m_B = s_Item;
	}

	s_Object.m_fT = static_cast<float32>(double(p_Document["m_fT"]));

	*reinterpret_cast<SMathLerpSaveData_SColorRGB*>(p_Target) = s_Object;
}

void SMathLerpSaveData_SColorRGB::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathLerpSaveData_SColorRGB*>(p_Object);

	SColorRGB::Serialize(&s_Object->m_A, p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SColorRGB, m_A));
	SColorRGB::Serialize(&s_Object->m_B, p_Serializer, p_OwnOffset + offsetof(SMathLerpSaveData_SColorRGB, m_B));
}

ZHMTypeInfo SMathLerpsSaveData_SColorRGB::TypeInfo = ZHMTypeInfo("SMathLerpsSaveData_SColorRGB", sizeof(SMathLerpsSaveData_SColorRGB), alignof(SMathLerpsSaveData_SColorRGB), SMathLerpsSaveData_SColorRGB::WriteJson, SMathLerpsSaveData_SColorRGB::WriteSimpleJson, SMathLerpsSaveData_SColorRGB::FromSimpleJson, SMathLerpsSaveData_SColorRGB::Serialize);

void SMathLerpsSaveData_SColorRGB::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SColorRGB*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SMathLerpSaveData_SColorRGB>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpSaveData_SColorRGB") << "," << JsonStr("$val") << ":";
		SMathLerpSaveData_SColorRGB::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SMathLerpsSaveData_SColorRGB::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SColorRGB*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SMathLerpSaveData_SColorRGB::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SMathLerpsSaveData_SColorRGB::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathLerpsSaveData_SColorRGB s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SMathLerpSaveData_SColorRGB s_ArrayItem0;
		SMathLerpSaveData_SColorRGB::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SMathLerpsSaveData_SColorRGB*>(p_Target) = s_Object;
}

void SMathLerpsSaveData_SColorRGB::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathLerpsSaveData_SColorRGB*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SColorRGB, m_aEntities));
	TArray<SMathLerpSaveData_SColorRGB>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SMathLerpsSaveData_SColorRGB, m_aData));
}

ZHMTypeInfo SVideoDatabaseEntry::TypeInfo = ZHMTypeInfo("SVideoDatabaseEntry", sizeof(SVideoDatabaseEntry), alignof(SVideoDatabaseEntry), SVideoDatabaseEntry::WriteJson, SVideoDatabaseEntry::WriteSimpleJson, SVideoDatabaseEntry::FromSimpleJson, SVideoDatabaseEntry::Serialize);

void SVideoDatabaseEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVideoDatabaseEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("VideoId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->VideoId);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("RuntimeLocalizedVideoRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->RuntimeLocalizedVideoRid, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SVideoDatabaseEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVideoDatabaseEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("VideoId") << ":";
	p_Stream << JsonStr(s_Object->VideoId);
	p_Stream << ",";

	p_Stream << JsonStr("RuntimeLocalizedVideoRid") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->RuntimeLocalizedVideoRid, p_Stream);

	p_Stream << "}";
}

void SVideoDatabaseEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVideoDatabaseEntry s_Object;

	s_Object.VideoId = std::string_view(p_Document["VideoId"]);

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["RuntimeLocalizedVideoRid"], &s_Item);
		s_Object.RuntimeLocalizedVideoRid = s_Item;
	}

	*reinterpret_cast<SVideoDatabaseEntry*>(p_Target) = s_Object;
}

void SVideoDatabaseEntry::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVideoDatabaseEntry*>(p_Object);

	ZString::Serialize(&s_Object->VideoId, p_Serializer, p_OwnOffset + offsetof(SVideoDatabaseEntry, VideoId));
	ZRuntimeResourceID::Serialize(&s_Object->RuntimeLocalizedVideoRid, p_Serializer, p_OwnOffset + offsetof(SVideoDatabaseEntry, RuntimeLocalizedVideoRid));
}

ZHMTypeInfo SVideoDatabaseData::TypeInfo = ZHMTypeInfo("SVideoDatabaseData", sizeof(SVideoDatabaseData), alignof(SVideoDatabaseData), SVideoDatabaseData::WriteJson, SVideoDatabaseData::WriteSimpleJson, SVideoDatabaseData::FromSimpleJson, SVideoDatabaseData::Serialize);

void SVideoDatabaseData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVideoDatabaseData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Videos") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SVideoDatabaseEntry>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Videos.size(); ++i)
	{
		auto& s_Item0 = s_Object->Videos[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVideoDatabaseEntry") << "," << JsonStr("$val") << ":";
		SVideoDatabaseEntry::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->Videos.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SVideoDatabaseData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SVideoDatabaseData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Videos") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->Videos.size(); ++i)
	{
		auto& s_Item0 = s_Object->Videos[i];
		SVideoDatabaseEntry::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->Videos.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SVideoDatabaseData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SVideoDatabaseData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["Videos"])
	{
		SVideoDatabaseEntry s_ArrayItem0;
		SVideoDatabaseEntry::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.Videos.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SVideoDatabaseData*>(p_Target) = s_Object;
}

void SVideoDatabaseData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SVideoDatabaseData*>(p_Object);

	TArray<SVideoDatabaseEntry>::Serialize(&s_Object->Videos, p_Serializer, p_OwnOffset + offsetof(SVideoDatabaseData, Videos));
}

ZHMTypeInfo SAvoidDangerousAreaGroupSaveData::TypeInfo = ZHMTypeInfo("SAvoidDangerousAreaGroupSaveData", sizeof(SAvoidDangerousAreaGroupSaveData), alignof(SAvoidDangerousAreaGroupSaveData), SAvoidDangerousAreaGroupSaveData::WriteJson, SAvoidDangerousAreaGroupSaveData::WriteSimpleJson, SAvoidDangerousAreaGroupSaveData::FromSimpleJson, SAvoidDangerousAreaGroupSaveData::Serialize);

void SAvoidDangerousAreaGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAvoidDangerousAreaGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rDangerousArea") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rDangerousArea;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDestinationPoint") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vDestinationPoint, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iGridId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iGridId;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWaitUntilDangerEnds") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWaitUntilDangerEnds;
	p_Stream << "}";

	p_Stream << "}";
}

void SAvoidDangerousAreaGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAvoidDangerousAreaGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_rDangerousArea") << ":";
	p_Stream << s_Object->m_rDangerousArea;
	p_Stream << ",";

	p_Stream << JsonStr("m_vDestinationPoint") << ":";
	float4::WriteSimpleJson(&s_Object->m_vDestinationPoint, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_iGridId") << ":";
	p_Stream << s_Object->m_iGridId;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWaitUntilDangerEnds") << ":";
	p_Stream << s_Object->m_bWaitUntilDangerEnds;

	p_Stream << "}";
}

void SAvoidDangerousAreaGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAvoidDangerousAreaGroupSaveData s_Object;

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_rDangerousArea = static_cast<uint32>(int64_t(p_Document["m_rDangerousArea"]));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vDestinationPoint"], &s_Item);
		s_Object.m_vDestinationPoint = s_Item;
	}

	s_Object.m_iGridId = static_cast<int32>(int64_t(p_Document["m_iGridId"]));

	s_Object.m_bWaitUntilDangerEnds = bool(p_Document["m_bWaitUntilDangerEnds"]);

	*reinterpret_cast<SAvoidDangerousAreaGroupSaveData*>(p_Target) = s_Object;
}

void SAvoidDangerousAreaGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAvoidDangerousAreaGroupSaveData*>(p_Object);

	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SAvoidDangerousAreaGroupSaveData, m_fsmState));
	float4::Serialize(&s_Object->m_vDestinationPoint, p_Serializer, p_OwnOffset + offsetof(SAvoidDangerousAreaGroupSaveData, m_vDestinationPoint));
}

ZHMTypeInfo SGetIActorPositionSaveData::TypeInfo = ZHMTypeInfo("SGetIActorPositionSaveData", sizeof(SGetIActorPositionSaveData), alignof(SGetIActorPositionSaveData), SGetIActorPositionSaveData::WriteJson, SGetIActorPositionSaveData::WriteSimpleJson, SGetIActorPositionSaveData::FromSimpleJson, SGetIActorPositionSaveData::Serialize);

void SGetIActorPositionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGetIActorPositionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_StoredActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_StoredActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SGetIActorPositionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGetIActorPositionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_StoredActor") << ":";
	p_Stream << s_Object->m_StoredActor;

	p_Stream << "}";
}

void SGetIActorPositionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGetIActorPositionSaveData s_Object;

	s_Object.m_StoredActor = static_cast<uint32>(int64_t(p_Document["m_StoredActor"]));

	*reinterpret_cast<SGetIActorPositionSaveData*>(p_Target) = s_Object;
}

void SGetIActorPositionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGetIActorPositionSaveData*>(p_Object);

}

ZHMTypeInfo SMatrix44::TypeInfo = ZHMTypeInfo("SMatrix44", sizeof(SMatrix44), alignof(SMatrix44), SMatrix44::WriteJson, SMatrix44::WriteSimpleJson, SMatrix44::FromSimpleJson, SMatrix44::Serialize);

void SMatrix44::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix44*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m11") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m11;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m12") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m12;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m13") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m13;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m14") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m14;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m21") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m21;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m22") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m22;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m23") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m23;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m24") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m24;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m31") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m31;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m32") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m32;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m33") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m33;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m34") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m34;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m41") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m41;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m42") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m42;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m43") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m43;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m44") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m44;
	p_Stream << "}";

	p_Stream << "}";
}

void SMatrix44::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMatrix44*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m11") << ":";
	p_Stream << s_Object->m11;
	p_Stream << ",";

	p_Stream << JsonStr("m12") << ":";
	p_Stream << s_Object->m12;
	p_Stream << ",";

	p_Stream << JsonStr("m13") << ":";
	p_Stream << s_Object->m13;
	p_Stream << ",";

	p_Stream << JsonStr("m14") << ":";
	p_Stream << s_Object->m14;
	p_Stream << ",";

	p_Stream << JsonStr("m21") << ":";
	p_Stream << s_Object->m21;
	p_Stream << ",";

	p_Stream << JsonStr("m22") << ":";
	p_Stream << s_Object->m22;
	p_Stream << ",";

	p_Stream << JsonStr("m23") << ":";
	p_Stream << s_Object->m23;
	p_Stream << ",";

	p_Stream << JsonStr("m24") << ":";
	p_Stream << s_Object->m24;
	p_Stream << ",";

	p_Stream << JsonStr("m31") << ":";
	p_Stream << s_Object->m31;
	p_Stream << ",";

	p_Stream << JsonStr("m32") << ":";
	p_Stream << s_Object->m32;
	p_Stream << ",";

	p_Stream << JsonStr("m33") << ":";
	p_Stream << s_Object->m33;
	p_Stream << ",";

	p_Stream << JsonStr("m34") << ":";
	p_Stream << s_Object->m34;
	p_Stream << ",";

	p_Stream << JsonStr("m41") << ":";
	p_Stream << s_Object->m41;
	p_Stream << ",";

	p_Stream << JsonStr("m42") << ":";
	p_Stream << s_Object->m42;
	p_Stream << ",";

	p_Stream << JsonStr("m43") << ":";
	p_Stream << s_Object->m43;
	p_Stream << ",";

	p_Stream << JsonStr("m44") << ":";
	p_Stream << s_Object->m44;

	p_Stream << "}";
}

void SMatrix44::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMatrix44 s_Object;

	s_Object.m11 = static_cast<float32>(double(p_Document["m11"]));

	s_Object.m12 = static_cast<float32>(double(p_Document["m12"]));

	s_Object.m13 = static_cast<float32>(double(p_Document["m13"]));

	s_Object.m14 = static_cast<float32>(double(p_Document["m14"]));

	s_Object.m21 = static_cast<float32>(double(p_Document["m21"]));

	s_Object.m22 = static_cast<float32>(double(p_Document["m22"]));

	s_Object.m23 = static_cast<float32>(double(p_Document["m23"]));

	s_Object.m24 = static_cast<float32>(double(p_Document["m24"]));

	s_Object.m31 = static_cast<float32>(double(p_Document["m31"]));

	s_Object.m32 = static_cast<float32>(double(p_Document["m32"]));

	s_Object.m33 = static_cast<float32>(double(p_Document["m33"]));

	s_Object.m34 = static_cast<float32>(double(p_Document["m34"]));

	s_Object.m41 = static_cast<float32>(double(p_Document["m41"]));

	s_Object.m42 = static_cast<float32>(double(p_Document["m42"]));

	s_Object.m43 = static_cast<float32>(double(p_Document["m43"]));

	s_Object.m44 = static_cast<float32>(double(p_Document["m44"]));

	*reinterpret_cast<SMatrix44*>(p_Target) = s_Object;
}

void SMatrix44::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMatrix44*>(p_Object);

}

ZHMTypeInfo SDisguiseZoneSaveData::TypeInfo = ZHMTypeInfo("SDisguiseZoneSaveData", sizeof(SDisguiseZoneSaveData), alignof(SDisguiseZoneSaveData), SDisguiseZoneSaveData::WriteJson, SDisguiseZoneSaveData::WriteSimpleJson, SDisguiseZoneSaveData::FromSimpleJson, SDisguiseZoneSaveData::Serialize);

void SDisguiseZoneSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDisguiseZoneSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SDisguiseZoneSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SDisguiseZoneSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SDisguiseZoneSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SDisguiseZoneSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SDisguiseZoneSaveData*>(p_Target) = s_Object;
}

void SDisguiseZoneSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SDisguiseZoneSaveData*>(p_Object);

}

ZHMTypeInfo ZInfectedSituation_SSituationSaveData::TypeInfo = ZHMTypeInfo("ZInfectedSituation.SSituationSaveData", sizeof(ZInfectedSituation_SSituationSaveData), alignof(ZInfectedSituation_SSituationSaveData), ZInfectedSituation_SSituationSaveData::WriteJson, ZInfectedSituation_SSituationSaveData::WriteSimpleJson, ZInfectedSituation_SSituationSaveData::FromSimpleJson, ZInfectedSituation_SSituationSaveData::Serialize);

void ZInfectedSituation_SSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInfectedSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bStandingDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStandingDown;
	p_Stream << "}";

	p_Stream << "}";
}

void ZInfectedSituation_SSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInfectedSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bStandingDown") << ":";
	p_Stream << s_Object->m_bStandingDown;

	p_Stream << "}";
}

void ZInfectedSituation_SSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZInfectedSituation_SSituationSaveData s_Object;

	s_Object.m_bStandingDown = bool(p_Document["m_bStandingDown"]);

	*reinterpret_cast<ZInfectedSituation_SSituationSaveData*>(p_Target) = s_Object;
}

void ZInfectedSituation_SSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZInfectedSituation_SSituationSaveData*>(p_Object);

}

ZHMTypeInfo SExitSaveData::TypeInfo = ZHMTypeInfo("SExitSaveData", sizeof(SExitSaveData), alignof(SExitSaveData), SExitSaveData::WriteJson, SExitSaveData::WriteSimpleJson, SExitSaveData::FromSimpleJson, SExitSaveData::Serialize);

void SExitSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExitSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SExitSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SExitSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SExitSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SExitSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SExitSaveData*>(p_Target) = s_Object;
}

void SExitSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SExitSaveData*>(p_Object);

}

ZHMTypeInfo ZInvestigateDisguiseGroup_SDialogLines::TypeInfo = ZHMTypeInfo("ZInvestigateDisguiseGroup.SDialogLines", sizeof(ZInvestigateDisguiseGroup_SDialogLines), alignof(ZInvestigateDisguiseGroup_SDialogLines), ZInvestigateDisguiseGroup_SDialogLines::WriteJson, ZInvestigateDisguiseGroup_SDialogLines::WriteSimpleJson, ZInvestigateDisguiseGroup_SDialogLines::FromSimpleJson, ZInvestigateDisguiseGroup_SDialogLines::Serialize);

void ZInvestigateDisguiseGroup_SDialogLines::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInvestigateDisguiseGroup_SDialogLines*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eFirstWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorSoundDefs") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eFirstWarning) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->m_eFirstWarning))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eSecondWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorSoundDefs") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eSecondWarning) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->m_eSecondWarning))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eThirdWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorSoundDefs") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eThirdWarning) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->m_eThirdWarning))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZInvestigateDisguiseGroup_SDialogLines::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInvestigateDisguiseGroup_SDialogLines*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eFirstWarning") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->m_eFirstWarning)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eSecondWarning") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->m_eSecondWarning)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eThirdWarning") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->m_eThirdWarning)));

	p_Stream << "}";
}

void ZInvestigateDisguiseGroup_SDialogLines::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZInvestigateDisguiseGroup_SDialogLines s_Object;

	s_Object.m_eFirstWarning = static_cast<EActorSoundDefs>(ZHMEnums::GetEnumValueByName("EActorSoundDefs", std::string_view(p_Document["m_eFirstWarning"])));

	s_Object.m_eSecondWarning = static_cast<EActorSoundDefs>(ZHMEnums::GetEnumValueByName("EActorSoundDefs", std::string_view(p_Document["m_eSecondWarning"])));

	s_Object.m_eThirdWarning = static_cast<EActorSoundDefs>(ZHMEnums::GetEnumValueByName("EActorSoundDefs", std::string_view(p_Document["m_eThirdWarning"])));

	*reinterpret_cast<ZInvestigateDisguiseGroup_SDialogLines*>(p_Target) = s_Object;
}

void ZInvestigateDisguiseGroup_SDialogLines::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZInvestigateDisguiseGroup_SDialogLines*>(p_Object);

}

ZHMTypeInfo SLeadEscortSituationActors::TypeInfo = ZHMTypeInfo("SLeadEscortSituationActors", sizeof(SLeadEscortSituationActors), alignof(SLeadEscortSituationActors), SLeadEscortSituationActors::WriteJson, SLeadEscortSituationActors::WriteSimpleJson, SLeadEscortSituationActors::FromSimpleJson, SLeadEscortSituationActors::Serialize);

void SLeadEscortSituationActors::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLeadEscortSituationActors*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SLeadEscortSituationActors::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLeadEscortSituationActors*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SLeadEscortSituationActors::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLeadEscortSituationActors s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SLeadEscortSituationActors*>(p_Target) = s_Object;
}

void SLeadEscortSituationActors::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLeadEscortSituationActors*>(p_Object);

}

ZHMTypeInfo SRegionSaveData::TypeInfo = ZHMTypeInfo("SRegionSaveData", sizeof(SRegionSaveData), alignof(SRegionSaveData), SRegionSaveData::WriteJson, SRegionSaveData::WriteSimpleJson, SRegionSaveData::FromSimpleJson, SRegionSaveData::Serialize);

void SRegionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRegionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("CrowdRegionType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("CrowdRegionType", static_cast<int>(s_Object->m_eType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vCenter") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vCenter, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nDirection;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRadius") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRadius;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAngle") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAngle;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nLifetime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nLifetime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAge;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_nGroupID);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nObstacleActorIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nObstacleActorIndex;
	p_Stream << "}";

	p_Stream << "}";
}

void SRegionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SRegionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nIndex") << ":";
	p_Stream << s_Object->m_nIndex;
	p_Stream << ",";

	p_Stream << JsonStr("m_eType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("CrowdRegionType", static_cast<int>(s_Object->m_eType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_vCenter") << ":";
	float4::WriteSimpleJson(&s_Object->m_vCenter, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nDirection") << ":";
	p_Stream << s_Object->m_nDirection;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRadius") << ":";
	p_Stream << s_Object->m_nRadius;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAngle") << ":";
	p_Stream << s_Object->m_nAngle;
	p_Stream << ",";

	p_Stream << JsonStr("m_nLifetime") << ":";
	p_Stream << s_Object->m_nLifetime;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAge") << ":";
	p_Stream << s_Object->m_nAge;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupID") << ":";
	p_Stream << static_cast<int>(s_Object->m_nGroupID);
	p_Stream << ",";

	p_Stream << JsonStr("m_nObstacleActorIndex") << ":";
	p_Stream << s_Object->m_nObstacleActorIndex;

	p_Stream << "}";
}

void SRegionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SRegionSaveData s_Object;

	s_Object.m_nIndex = static_cast<uint32>(int64_t(p_Document["m_nIndex"]));

	s_Object.m_eType = static_cast<CrowdRegionType>(ZHMEnums::GetEnumValueByName("CrowdRegionType", std::string_view(p_Document["m_eType"])));

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vCenter"], &s_Item);
		s_Object.m_vCenter = s_Item;
	}

	s_Object.m_nDirection = static_cast<float32>(double(p_Document["m_nDirection"]));

	s_Object.m_nRadius = static_cast<float32>(double(p_Document["m_nRadius"]));

	s_Object.m_nAngle = static_cast<uint32>(int64_t(p_Document["m_nAngle"]));

	s_Object.m_nLifetime = static_cast<float32>(double(p_Document["m_nLifetime"]));

	s_Object.m_nAge = static_cast<float32>(double(p_Document["m_nAge"]));

	s_Object.m_nGroupID = static_cast<uint8>(int64_t(p_Document["m_nGroupID"]));

	s_Object.m_nObstacleActorIndex = static_cast<int16>(int64_t(p_Document["m_nObstacleActorIndex"]));

	*reinterpret_cast<SRegionSaveData*>(p_Target) = s_Object;
}

void SRegionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SRegionSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vCenter, p_Serializer, p_OwnOffset + offsetof(SRegionSaveData, m_vCenter));
}

ZHMTypeInfo SConditionBase::TypeInfo = ZHMTypeInfo("SConditionBase", sizeof(SConditionBase), alignof(SConditionBase), SConditionBase::WriteJson, SConditionBase::WriteSimpleJson, SConditionBase::FromSimpleJson, SConditionBase::Serialize);

void SConditionBase::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SConditionBase*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("eConditionType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ECompiledConditionType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->eConditionType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ECompiledConditionType", static_cast<int>(s_Object->eConditionType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nConditionModifiers") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nConditionModifiers;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("assignTo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBehaviorTreeVariable") << "," << JsonStr("$val") << ":";
	ZBehaviorTreeVariable::WriteJson(&s_Object->assignTo, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SConditionBase::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SConditionBase*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("eConditionType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ECompiledConditionType", static_cast<int>(s_Object->eConditionType)));
	p_Stream << ",";

	p_Stream << JsonStr("nConditionModifiers") << ":";
	p_Stream << s_Object->nConditionModifiers;
	p_Stream << ",";

	p_Stream << JsonStr("assignTo") << ":";
	ZBehaviorTreeVariable::WriteSimpleJson(&s_Object->assignTo, p_Stream);

	p_Stream << "}";
}

void SConditionBase::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SConditionBase s_Object;

	s_Object.eConditionType = static_cast<ECompiledConditionType>(ZHMEnums::GetEnumValueByName("ECompiledConditionType", std::string_view(p_Document["eConditionType"])));

	s_Object.nConditionModifiers = static_cast<uint32>(int64_t(p_Document["nConditionModifiers"]));

	{
		ZBehaviorTreeVariable s_Item;
		ZBehaviorTreeVariable::FromSimpleJson(p_Document["assignTo"], &s_Item);
		s_Object.assignTo = s_Item;
	}

	*reinterpret_cast<SConditionBase*>(p_Target) = s_Object;
}

void SConditionBase::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SConditionBase*>(p_Object);

	ZBehaviorTreeVariable::Serialize(&s_Object->assignTo, p_Serializer, p_OwnOffset + offsetof(SConditionBase, assignTo));
}

ZHMTypeInfo ZInvestigateWeaponSituation_SSituationSaveData::TypeInfo = ZHMTypeInfo("ZInvestigateWeaponSituation.SSituationSaveData", sizeof(ZInvestigateWeaponSituation_SSituationSaveData), alignof(ZInvestigateWeaponSituation_SSituationSaveData), ZInvestigateWeaponSituation_SSituationSaveData::WriteJson, ZInvestigateWeaponSituation_SSituationSaveData::WriteSimpleJson, ZInvestigateWeaponSituation_SSituationSaveData::FromSimpleJson, ZInvestigateWeaponSituation_SSituationSaveData::Serialize);

void ZInvestigateWeaponSituation_SSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInvestigateWeaponSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nCurrentState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCurrentState;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_mainStateStartTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_mainStateStartTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastStandDown") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastStandDown, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nActiveInvestigationGroup") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nActiveInvestigationGroup;
	p_Stream << "}";

	p_Stream << "}";
}

void ZInvestigateWeaponSituation_SSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInvestigateWeaponSituation_SSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nCurrentState") << ":";
	p_Stream << s_Object->m_nCurrentState;
	p_Stream << ",";

	p_Stream << JsonStr("m_mainStateStartTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_mainStateStartTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastStandDown") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastStandDown, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nActiveInvestigationGroup") << ":";
	p_Stream << s_Object->m_nActiveInvestigationGroup;

	p_Stream << "}";
}

void ZInvestigateWeaponSituation_SSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZInvestigateWeaponSituation_SSituationSaveData s_Object;

	s_Object.m_nCurrentState = static_cast<int32>(int64_t(p_Document["m_nCurrentState"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_mainStateStartTime"], &s_Item);
		s_Object.m_mainStateStartTime = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastStandDown"], &s_Item);
		s_Object.m_tLastStandDown = s_Item;
	}

	s_Object.m_nActiveInvestigationGroup = static_cast<int32>(int64_t(p_Document["m_nActiveInvestigationGroup"]));

	*reinterpret_cast<ZInvestigateWeaponSituation_SSituationSaveData*>(p_Target) = s_Object;
}

void ZInvestigateWeaponSituation_SSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZInvestigateWeaponSituation_SSituationSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_mainStateStartTime, p_Serializer, p_OwnOffset + offsetof(ZInvestigateWeaponSituation_SSituationSaveData, m_mainStateStartTime));
	ZGameTime::Serialize(&s_Object->m_tLastStandDown, p_Serializer, p_OwnOffset + offsetof(ZInvestigateWeaponSituation_SSituationSaveData, m_tLastStandDown));
}

ZHMTypeInfo SContextActionSaveData::TypeInfo = ZHMTypeInfo("SContextActionSaveData", sizeof(SContextActionSaveData), alignof(SContextActionSaveData), SContextActionSaveData::WriteJson, SContextActionSaveData::WriteSimpleJson, SContextActionSaveData::FromSimpleJson, SContextActionSaveData::Serialize);

void SContextActionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContextActionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTriggered;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShouldShow") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShouldShow;
	p_Stream << "}";

	p_Stream << "}";
}

void SContextActionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContextActionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTriggered") << ":";
	p_Stream << s_Object->m_bTriggered;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShouldShow") << ":";
	p_Stream << s_Object->m_bShouldShow;

	p_Stream << "}";
}

void SContextActionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SContextActionSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	s_Object.m_bTriggered = bool(p_Document["m_bTriggered"]);

	s_Object.m_bShouldShow = bool(p_Document["m_bShouldShow"]);

	*reinterpret_cast<SContextActionSaveData*>(p_Target) = s_Object;
}

void SContextActionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SContextActionSaveData*>(p_Object);

}

ZHMTypeInfo SMathDistanceSaveData_SVector3::TypeInfo = ZHMTypeInfo("SMathDistanceSaveData_SVector3", sizeof(SMathDistanceSaveData_SVector3), alignof(SMathDistanceSaveData_SVector3), SMathDistanceSaveData_SVector3::WriteJson, SMathDistanceSaveData_SVector3::WriteSimpleJson, SMathDistanceSaveData_SVector3::FromSimpleJson, SMathDistanceSaveData_SVector3::Serialize);

void SMathDistanceSaveData_SVector3::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathDistanceSaveData_SVector3*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_fA, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_fB, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector3::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SMathDistanceSaveData_SVector3*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fA") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_fA, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fB") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_fB, p_Stream);

	p_Stream << "}";
}

void SMathDistanceSaveData_SVector3::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SMathDistanceSaveData_SVector3 s_Object;

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_fA"], &s_Item);
		s_Object.m_fA = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_fB"], &s_Item);
		s_Object.m_fB = s_Item;
	}

	*reinterpret_cast<SMathDistanceSaveData_SVector3*>(p_Target) = s_Object;
}

void SMathDistanceSaveData_SVector3::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SMathDistanceSaveData_SVector3*>(p_Object);

	SVector3::Serialize(&s_Object->m_fA, p_Serializer, p_OwnOffset + offsetof(SMathDistanceSaveData_SVector3, m_fA));
	SVector3::Serialize(&s_Object->m_fB, p_Serializer, p_OwnOffset + offsetof(SMathDistanceSaveData_SVector3, m_fB));
}

ZHMTypeInfo SSniperScoringEvent::TypeInfo = ZHMTypeInfo("SSniperScoringEvent", sizeof(SSniperScoringEvent), alignof(SSniperScoringEvent), SSniperScoringEvent::WriteJson, SSniperScoringEvent::WriteSimpleJson, SSniperScoringEvent::FromSimpleJson, SSniperScoringEvent::Serialize);

void SSniperScoringEvent::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSniperScoringEvent*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_iPoints") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iPoints;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iPlayer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iPlayer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_iScoringMachine") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
	p_Stream << static_cast<int>(s_Object->m_iScoringMachine);
	p_Stream << "}";

	p_Stream << "}";
}

void SSniperScoringEvent::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSniperScoringEvent*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_iPoints") << ":";
	p_Stream << s_Object->m_iPoints;
	p_Stream << ",";

	p_Stream << JsonStr("m_iPlayer") << ":";
	p_Stream << s_Object->m_iPlayer;
	p_Stream << ",";

	p_Stream << JsonStr("m_sName") << ":";
	p_Stream << JsonStr(s_Object->m_sName);
	p_Stream << ",";

	p_Stream << JsonStr("m_sText") << ":";
	p_Stream << JsonStr(s_Object->m_sText);
	p_Stream << ",";

	p_Stream << JsonStr("m_iType") << ":";
	p_Stream << s_Object->m_iType;
	p_Stream << ",";

	p_Stream << JsonStr("m_iScoringMachine") << ":";
	p_Stream << static_cast<int>(s_Object->m_iScoringMachine);

	p_Stream << "}";
}

void SSniperScoringEvent::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSniperScoringEvent s_Object;

	s_Object.m_iPoints = static_cast<int32>(int64_t(p_Document["m_iPoints"]));

	s_Object.m_iPlayer = static_cast<int32>(int64_t(p_Document["m_iPlayer"]));

	s_Object.m_sName = std::string_view(p_Document["m_sName"]);

	s_Object.m_sText = std::string_view(p_Document["m_sText"]);

	s_Object.m_iType = static_cast<int32>(int64_t(p_Document["m_iType"]));

	s_Object.m_iScoringMachine = static_cast<uint8>(int64_t(p_Document["m_iScoringMachine"]));

	*reinterpret_cast<SSniperScoringEvent*>(p_Target) = s_Object;
}

void SSniperScoringEvent::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSniperScoringEvent*>(p_Object);

	ZString::Serialize(&s_Object->m_sName, p_Serializer, p_OwnOffset + offsetof(SSniperScoringEvent, m_sName));
	ZString::Serialize(&s_Object->m_sText, p_Serializer, p_OwnOffset + offsetof(SSniperScoringEvent, m_sText));
}

ZHMTypeInfo SCrowdAIEventSaveData::TypeInfo = ZHMTypeInfo("SCrowdAIEventSaveData", sizeof(SCrowdAIEventSaveData), alignof(SCrowdAIEventSaveData), SCrowdAIEventSaveData::WriteJson, SCrowdAIEventSaveData::WriteSimpleJson, SCrowdAIEventSaveData::FromSimpleJson, SCrowdAIEventSaveData::Serialize);

void SCrowdAIEventSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdAIEventSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_RunningEvents") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SRunningCrowdAIEventSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_RunningEvents.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_RunningEvents[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRunningCrowdAIEventSaveData") << "," << JsonStr("$val") << ":";
		SRunningCrowdAIEventSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_RunningEvents.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdAIEventSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdAIEventSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_RunningEvents") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_RunningEvents.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_RunningEvents[i];
		SRunningCrowdAIEventSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_RunningEvents.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdAIEventSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdAIEventSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_RunningEvents"])
	{
		SRunningCrowdAIEventSaveData s_ArrayItem0;
		SRunningCrowdAIEventSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_RunningEvents.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SCrowdAIEventSaveData*>(p_Target) = s_Object;
}

void SCrowdAIEventSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdAIEventSaveData*>(p_Object);

	TArray<SRunningCrowdAIEventSaveData>::Serialize(&s_Object->m_RunningEvents, p_Serializer, p_OwnOffset + offsetof(SCrowdAIEventSaveData, m_RunningEvents));
}

ZHMTypeInfo ZEntityRef::TypeInfo = ZHMTypeInfo("ZEntityRef", sizeof(ZEntityRef), alignof(ZEntityRef), ZEntityRef::WriteJson, ZEntityRef::WriteSimpleJson, ZEntityRef::FromSimpleJson, ZEntityRef::Serialize);

void ZEntityRef::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityRef*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZEntityRef::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityRef*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZEntityRef::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZEntityRef s_Object;

	*reinterpret_cast<ZEntityRef*>(p_Target) = s_Object;
}

void ZEntityRef::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZEntityRef*>(p_Object);

}

ZHMTypeInfo SItemKeywordProxySaveData::TypeInfo = ZHMTypeInfo("SItemKeywordProxySaveData", sizeof(SItemKeywordProxySaveData), alignof(SItemKeywordProxySaveData), SItemKeywordProxySaveData::WriteJson, SItemKeywordProxySaveData::WriteSimpleJson, SItemKeywordProxySaveData::FromSimpleJson, SItemKeywordProxySaveData::Serialize);

void SItemKeywordProxySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemKeywordProxySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemKeywordProxySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemKeywordProxySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;

	p_Stream << "}";
}

void SItemKeywordProxySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemKeywordProxySaveData s_Object;

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	*reinterpret_cast<SItemKeywordProxySaveData*>(p_Target) = s_Object;
}

void SItemKeywordProxySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItemKeywordProxySaveData*>(p_Object);

}

ZHMTypeInfo SEscortSituationActorStateSaveData::TypeInfo = ZHMTypeInfo("SEscortSituationActorStateSaveData", sizeof(SEscortSituationActorStateSaveData), alignof(SEscortSituationActorStateSaveData), SEscortSituationActorStateSaveData::WriteJson, SEscortSituationActorStateSaveData::WriteSimpleJson, SEscortSituationActorStateSaveData::FromSimpleJson, SEscortSituationActorStateSaveData::Serialize);

void SEscortSituationActorStateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortSituationActorStateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllocatedForSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllocatedForSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZEscortSituationEntity.EEscortState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZEscortSituationEntity.EEscortState", static_cast<int>(s_Object->m_eState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eStatePrevious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZEscortSituationEntity.EEscortState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eStatePrevious) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZEscortSituationEntity.EEscortState", static_cast<int>(s_Object->m_eStatePrevious))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentScreenplay;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rPreferredIntermediateScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rPreferredIntermediateScreenplay;
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortSituationActorStateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortSituationActorStateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nID") << ":";
	p_Stream << s_Object->m_nID;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllocatedForSituation") << ":";
	p_Stream << s_Object->m_bAllocatedForSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZEscortSituationEntity.EEscortState", static_cast<int>(s_Object->m_eState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eStatePrevious") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZEscortSituationEntity.EEscortState", static_cast<int>(s_Object->m_eStatePrevious)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentScreenplay") << ":";
	p_Stream << s_Object->m_rCurrentScreenplay;
	p_Stream << ",";

	p_Stream << JsonStr("m_rPreferredIntermediateScreenplay") << ":";
	p_Stream << s_Object->m_rPreferredIntermediateScreenplay;

	p_Stream << "}";
}

void SEscortSituationActorStateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEscortSituationActorStateSaveData s_Object;

	s_Object.m_nID = static_cast<uint32>(int64_t(p_Document["m_nID"]));

	s_Object.m_bAllocatedForSituation = bool(p_Document["m_bAllocatedForSituation"]);

	s_Object.m_eState = static_cast<ZEscortSituationEntity_EEscortState>(ZHMEnums::GetEnumValueByName("ZEscortSituationEntity.EEscortState", std::string_view(p_Document["m_eState"])));

	s_Object.m_eStatePrevious = static_cast<ZEscortSituationEntity_EEscortState>(ZHMEnums::GetEnumValueByName("ZEscortSituationEntity.EEscortState", std::string_view(p_Document["m_eStatePrevious"])));

	s_Object.m_fDistanceToTarget = static_cast<float32>(double(p_Document["m_fDistanceToTarget"]));

	s_Object.m_rCurrentScreenplay = static_cast<uint32>(int64_t(p_Document["m_rCurrentScreenplay"]));

	s_Object.m_rPreferredIntermediateScreenplay = static_cast<uint32>(int64_t(p_Document["m_rPreferredIntermediateScreenplay"]));

	*reinterpret_cast<SEscortSituationActorStateSaveData*>(p_Target) = s_Object;
}

void SEscortSituationActorStateSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEscortSituationActorStateSaveData*>(p_Object);

}

ZHMTypeInfo SEscortSituationSaveData::TypeInfo = ZHMTypeInfo("SEscortSituationSaveData", sizeof(SEscortSituationSaveData), alignof(SEscortSituationSaveData), SEscortSituationSaveData::WriteJson, SEscortSituationSaveData::WriteSimpleJson, SEscortSituationSaveData::FromSimpleJson, SEscortSituationSaveData::Serialize);

void SEscortSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActivated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMayEscort") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMayEscort;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetDead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetDead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetInRange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllEscortsAreDead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllEscortsAreDead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceSearch") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForceSearch;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vLastPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vLastPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFoundDeadTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFoundDeadTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetDeadTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nTargetDeadTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetIsMoving") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetIsMoving;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZEscortSituationEntity.ETargetState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZEscortSituationEntity.ETargetState", static_cast<int>(s_Object->m_eTargetState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eTargetEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetActState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZActBehaviorEntity.EState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetActState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZActBehaviorEntity.EState", static_cast<int>(s_Object->m_eTargetActState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetNotMovingTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetNotMovingTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAgitationCooldownTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetAgitationCooldownTimer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAddedActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEscortSituationActors>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAddedActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAddedActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEscortSituationActors") << "," << JsonStr("$val") << ":";
		SEscortSituationActors::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aAddedActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SEscortSituationActorStateSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SEscortSituationActorStateSaveData") << "," << JsonStr("$val") << ":";
		SEscortSituationActorStateSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEscortActs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEscortActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEscortActs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEscortActs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSearchActs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSearchActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSearchActs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aSearchActs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SEscortSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SEscortSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bActivated") << ":";
	p_Stream << s_Object->m_bActivated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMayEscort") << ":";
	p_Stream << s_Object->m_bMayEscort;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetDead") << ":";
	p_Stream << s_Object->m_bTargetDead;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInRange") << ":";
	p_Stream << s_Object->m_bTargetInRange;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllEscortsAreDead") << ":";
	p_Stream << s_Object->m_bAllEscortsAreDead;
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceSearch") << ":";
	p_Stream << s_Object->m_bForceSearch;
	p_Stream << ",";

	p_Stream << JsonStr("m_vLastPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vLastPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bFoundDeadTarget") << ":";
	p_Stream << s_Object->m_bFoundDeadTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_nTargetDeadTime") << ":";
	p_Stream << s_Object->m_nTargetDeadTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetIsMoving") << ":";
	p_Stream << s_Object->m_bTargetIsMoving;
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZEscortSituationEntity.ETargetState", static_cast<int>(s_Object->m_eTargetState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eTargetEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetActState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZActBehaviorEntity.EState", static_cast<int>(s_Object->m_eTargetActState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetNotMovingTime") << ":";
	p_Stream << s_Object->m_fTargetNotMovingTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAgitationCooldownTimer") << ":";
	p_Stream << s_Object->m_fTargetAgitationCooldownTimer;
	p_Stream << ",";

	p_Stream << JsonStr("m_aAddedActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAddedActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAddedActors[i];
		SEscortSituationActors::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aAddedActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		SEscortSituationActorStateSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEscortActs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEscortActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEscortActs[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEscortActs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aSearchActs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aSearchActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aSearchActs[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aSearchActs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SEscortSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SEscortSituationSaveData s_Object;

	s_Object.m_bActivated = bool(p_Document["m_bActivated"]);

	s_Object.m_bMayEscort = bool(p_Document["m_bMayEscort"]);

	s_Object.m_bTargetDead = bool(p_Document["m_bTargetDead"]);

	s_Object.m_bTargetInRange = bool(p_Document["m_bTargetInRange"]);

	s_Object.m_bAllEscortsAreDead = bool(p_Document["m_bAllEscortsAreDead"]);

	s_Object.m_bForceSearch = bool(p_Document["m_bForceSearch"]);

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vLastPosition"], &s_Item);
		s_Object.m_vLastPosition = s_Item;
	}

	s_Object.m_bFoundDeadTarget = bool(p_Document["m_bFoundDeadTarget"]);

	s_Object.m_nTargetDeadTime = int64(p_Document["m_nTargetDeadTime"]);

	s_Object.m_bTargetIsMoving = bool(p_Document["m_bTargetIsMoving"]);

	s_Object.m_eTargetState = static_cast<ZEscortSituationEntity_ETargetState>(ZHMEnums::GetEnumValueByName("ZEscortSituationEntity.ETargetState", std::string_view(p_Document["m_eTargetState"])));

	s_Object.m_eTargetEmotionState = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_eTargetEmotionState"])));

	s_Object.m_eTargetActState = static_cast<ZActBehaviorEntity_EState>(ZHMEnums::GetEnumValueByName("ZActBehaviorEntity.EState", std::string_view(p_Document["m_eTargetActState"])));

	s_Object.m_fTargetNotMovingTime = static_cast<float32>(double(p_Document["m_fTargetNotMovingTime"]));

	s_Object.m_fTargetAgitationCooldownTimer = static_cast<float32>(double(p_Document["m_fTargetAgitationCooldownTimer"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aAddedActors"])
	{
		SEscortSituationActors s_ArrayItem0;
		SEscortSituationActors::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aAddedActors.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aStates"])
	{
		SEscortSituationActorStateSaveData s_ArrayItem0;
		SEscortSituationActorStateSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aStates.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEscortActs"])
	{
		s_Object.m_aEscortActs.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aSearchActs"])
	{
		s_Object.m_aSearchActs.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SEscortSituationSaveData*>(p_Target) = s_Object;
}

void SEscortSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SEscortSituationSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vLastPosition, p_Serializer, p_OwnOffset + offsetof(SEscortSituationSaveData, m_vLastPosition));
	TArray<SEscortSituationActors>::Serialize(&s_Object->m_aAddedActors, p_Serializer, p_OwnOffset + offsetof(SEscortSituationSaveData, m_aAddedActors));
	TArray<SEscortSituationActorStateSaveData>::Serialize(&s_Object->m_aStates, p_Serializer, p_OwnOffset + offsetof(SEscortSituationSaveData, m_aStates));
	TArray<uint32>::Serialize(&s_Object->m_aEscortActs, p_Serializer, p_OwnOffset + offsetof(SEscortSituationSaveData, m_aEscortActs));
	TArray<uint32>::Serialize(&s_Object->m_aSearchActs, p_Serializer, p_OwnOffset + offsetof(SEscortSituationSaveData, m_aSearchActs));
}

ZHMTypeInfo SAttentionHUDUIElementArray_Dummy::TypeInfo = ZHMTypeInfo("SAttentionHUDUIElementArray_Dummy", sizeof(SAttentionHUDUIElementArray_Dummy), alignof(SAttentionHUDUIElementArray_Dummy), SAttentionHUDUIElementArray_Dummy::WriteJson, SAttentionHUDUIElementArray_Dummy::WriteSimpleJson, SAttentionHUDUIElementArray_Dummy::FromSimpleJson, SAttentionHUDUIElementArray_Dummy::Serialize);

void SAttentionHUDUIElementArray_Dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAttentionHUDUIElementArray_Dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SAttentionHUDUIElement>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SAttentionHUDUIElement") << "," << JsonStr("$val") << ":";
		SAttentionHUDUIElement::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SAttentionHUDUIElementArray_Dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAttentionHUDUIElementArray_Dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->dummy[i];
		SAttentionHUDUIElement::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SAttentionHUDUIElementArray_Dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAttentionHUDUIElementArray_Dummy s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["dummy"])
	{
		SAttentionHUDUIElement s_ArrayItem0;
		SAttentionHUDUIElement::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.dummy.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SAttentionHUDUIElementArray_Dummy*>(p_Target) = s_Object;
}

void SAttentionHUDUIElementArray_Dummy::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAttentionHUDUIElementArray_Dummy*>(p_Object);

	TArray<SAttentionHUDUIElement>::Serialize(&s_Object->dummy, p_Serializer, p_OwnOffset + offsetof(SAttentionHUDUIElementArray_Dummy, dummy));
}

ZHMTypeInfo STrespassingRuleEntitySaveData::TypeInfo = ZHMTypeInfo("STrespassingRuleEntitySaveData", sizeof(STrespassingRuleEntitySaveData), alignof(STrespassingRuleEntitySaveData), STrespassingRuleEntitySaveData::WriteJson, STrespassingRuleEntitySaveData::WriteSimpleJson, STrespassingRuleEntitySaveData::FromSimpleJson, STrespassingRuleEntitySaveData::Serialize);

void STrespassingRuleEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STrespassingRuleEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aAllowedProfessionsDisabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<bool>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAllowedProfessionsDisabled.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAllowedProfessionsDisabled[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aAllowedProfessionsDisabled.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STrespassingRuleEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STrespassingRuleEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aAllowedProfessionsDisabled") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAllowedProfessionsDisabled.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAllowedProfessionsDisabled[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aAllowedProfessionsDisabled.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STrespassingRuleEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STrespassingRuleEntitySaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aAllowedProfessionsDisabled"])
	{
		s_Object.m_aAllowedProfessionsDisabled.push_back(bool(s_Item0));
	}

	*reinterpret_cast<STrespassingRuleEntitySaveData*>(p_Target) = s_Object;
}

void STrespassingRuleEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STrespassingRuleEntitySaveData*>(p_Object);

	TArray<bool>::Serialize(&s_Object->m_aAllowedProfessionsDisabled, p_Serializer, p_OwnOffset + offsetof(STrespassingRuleEntitySaveData, m_aAllowedProfessionsDisabled));
}

ZHMTypeInfo SCrowdEntitySaveData::TypeInfo = ZHMTypeInfo("SCrowdEntitySaveData", sizeof(SCrowdEntitySaveData), alignof(SCrowdEntitySaveData), SCrowdEntitySaveData::WriteJson, SCrowdEntitySaveData::WriteSimpleJson, SCrowdEntitySaveData::FromSimpleJson, SCrowdEntitySaveData::Serialize);

void SCrowdEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CrowdActorData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SCrowdActorSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_CrowdActorData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_CrowdActorData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdActorSaveData") << "," << JsonStr("$val") << ":";
		SCrowdActorSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_CrowdActorData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_RegionData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SRegionSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_RegionData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_RegionData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SRegionSaveData") << "," << JsonStr("$val") << ":";
		SRegionSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_RegionData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsCrowdAmbient") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsCrowdAmbient;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DeadPoseRepository") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdDeadPoseRepositorySaveData") << "," << JsonStr("$val") << ":";
	SCrowdDeadPoseRepositorySaveData::WriteJson(&s_Object->m_DeadPoseRepository, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aCrowdAiPoolActorsMale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCrowdAiPoolActorsMale.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCrowdAiPoolActorsMale[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aCrowdAiPoolActorsMale.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aCrowdAiPoolActorsFemale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCrowdAiPoolActorsFemale.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCrowdAiPoolActorsFemale[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aCrowdAiPoolActorsFemale.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CrowdActorData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_CrowdActorData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_CrowdActorData[i];
		SCrowdActorSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_CrowdActorData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_RegionData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_RegionData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_RegionData[i];
		SRegionSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_RegionData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsCrowdAmbient") << ":";
	p_Stream << s_Object->m_bIsCrowdAmbient;
	p_Stream << ",";

	p_Stream << JsonStr("m_DeadPoseRepository") << ":";
	SCrowdDeadPoseRepositorySaveData::WriteSimpleJson(&s_Object->m_DeadPoseRepository, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aCrowdAiPoolActorsMale") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCrowdAiPoolActorsMale.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCrowdAiPoolActorsMale[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aCrowdAiPoolActorsMale.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aCrowdAiPoolActorsFemale") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aCrowdAiPoolActorsFemale.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aCrowdAiPoolActorsFemale[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aCrowdAiPoolActorsFemale.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCrowdEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdEntitySaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_CrowdActorData"])
	{
		SCrowdActorSaveData s_ArrayItem0;
		SCrowdActorSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_CrowdActorData.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_RegionData"])
	{
		SRegionSaveData s_ArrayItem0;
		SRegionSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_RegionData.push_back(s_ArrayItem0);
	}

	s_Object.m_bIsCrowdAmbient = bool(p_Document["m_bIsCrowdAmbient"]);

	{
		SCrowdDeadPoseRepositorySaveData s_Item;
		SCrowdDeadPoseRepositorySaveData::FromSimpleJson(p_Document["m_DeadPoseRepository"], &s_Item);
		s_Object.m_DeadPoseRepository = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aCrowdAiPoolActorsMale"])
	{
		s_Object.m_aCrowdAiPoolActorsMale.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aCrowdAiPoolActorsFemale"])
	{
		s_Object.m_aCrowdAiPoolActorsFemale.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SCrowdEntitySaveData*>(p_Target) = s_Object;
}

void SCrowdEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdEntitySaveData*>(p_Object);

	TArray<SCrowdActorSaveData>::Serialize(&s_Object->m_CrowdActorData, p_Serializer, p_OwnOffset + offsetof(SCrowdEntitySaveData, m_CrowdActorData));
	TArray<SRegionSaveData>::Serialize(&s_Object->m_RegionData, p_Serializer, p_OwnOffset + offsetof(SCrowdEntitySaveData, m_RegionData));
	SCrowdDeadPoseRepositorySaveData::Serialize(&s_Object->m_DeadPoseRepository, p_Serializer, p_OwnOffset + offsetof(SCrowdEntitySaveData, m_DeadPoseRepository));
	TArray<uint32>::Serialize(&s_Object->m_aCrowdAiPoolActorsMale, p_Serializer, p_OwnOffset + offsetof(SCrowdEntitySaveData, m_aCrowdAiPoolActorsMale));
	TArray<uint32>::Serialize(&s_Object->m_aCrowdAiPoolActorsFemale, p_Serializer, p_OwnOffset + offsetof(SCrowdEntitySaveData, m_aCrowdAiPoolActorsFemale));
}

ZHMTypeInfo ZInvestigateCautiousSituation_SStateData::TypeInfo = ZHMTypeInfo("ZInvestigateCautiousSituation.SStateData", sizeof(ZInvestigateCautiousSituation_SStateData), alignof(ZInvestigateCautiousSituation_SStateData), ZInvestigateCautiousSituation_SStateData::WriteJson, ZInvestigateCautiousSituation_SStateData::WriteSimpleJson, ZInvestigateCautiousSituation_SStateData::FromSimpleJson, ZInvestigateCautiousSituation_SStateData::Serialize);

void ZInvestigateCautiousSituation_SStateData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInvestigateCautiousSituation_SStateData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_state") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZInvestigateCautiousSituation.ESituationState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_state) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZInvestigateCautiousSituation.ESituationState", static_cast<int>(s_Object->m_state))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eBystanderState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZInvestigateCautiousSituation.EBystanderState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eBystanderState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZInvestigateCautiousSituation.EBystanderState", static_cast<int>(s_Object->m_eBystanderState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInvestigationEnded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastInvestigationEnded, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastApproachOrder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastApproachOrder, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastBackupGroupEnded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastBackupGroupEnded, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastHunt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastHunt, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tHuntTargetLastUpdate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tHuntTargetLastUpdate, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tNewHuntTargetTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tNewHuntTargetTimer, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastPropagate") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastPropagate, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fCombatAge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fCombatAge;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownZoneDisturbanceAdded") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLockdownZoneDisturbanceAdded;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLockdownSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownFalseAlarm") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLockdownFalseAlarm;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownGracePeriod") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLockdownGracePeriod;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bHMInGuardDisguise") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHMInGuardDisguise;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bFrisked") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bFrisked;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnouncedFrisk") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAnnouncedFrisk;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReasonToFrisk") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReasonToFrisk;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneHasBeenInCombat") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSomeoneHasBeenInCombat;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInvestigationGroupActive") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInvestigationGroupActive;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandDownGuards") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStandDownGuards;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tStandDownDelay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tStandDownDelay, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eMostSevereDisturbance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eMostSevereDisturbance) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_eMostSevereDisturbance))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDiscoveredDeadBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDiscoveredDeadBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDiscoveredPacifiedBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDiscoveredPacifiedBody;
	p_Stream << "}";

	p_Stream << "}";
}

void ZInvestigateCautiousSituation_SStateData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInvestigateCautiousSituation_SStateData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_state") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZInvestigateCautiousSituation.ESituationState", static_cast<int>(s_Object->m_state)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eBystanderState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZInvestigateCautiousSituation.EBystanderState", static_cast<int>(s_Object->m_eBystanderState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastInvestigationEnded") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastInvestigationEnded, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastApproachOrder") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastApproachOrder, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastBackupGroupEnded") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastBackupGroupEnded, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastHunt") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastHunt, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tHuntTargetLastUpdate") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tHuntTargetLastUpdate, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tNewHuntTargetTimer") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tNewHuntTargetTimer, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastPropagate") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastPropagate, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fCombatAge") << ":";
	p_Stream << s_Object->m_fCombatAge;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownZoneDisturbanceAdded") << ":";
	p_Stream << s_Object->m_bLockdownZoneDisturbanceAdded;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownSituation") << ":";
	p_Stream << s_Object->m_bLockdownSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownFalseAlarm") << ":";
	p_Stream << s_Object->m_bLockdownFalseAlarm;
	p_Stream << ",";

	p_Stream << JsonStr("m_bLockdownGracePeriod") << ":";
	p_Stream << s_Object->m_bLockdownGracePeriod;
	p_Stream << ",";

	p_Stream << JsonStr("m_bHMInGuardDisguise") << ":";
	p_Stream << s_Object->m_bHMInGuardDisguise;
	p_Stream << ",";

	p_Stream << JsonStr("m_bFrisked") << ":";
	p_Stream << s_Object->m_bFrisked;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAnnouncedFrisk") << ":";
	p_Stream << s_Object->m_bAnnouncedFrisk;
	p_Stream << ",";

	p_Stream << JsonStr("m_bReasonToFrisk") << ":";
	p_Stream << s_Object->m_bReasonToFrisk;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSomeoneHasBeenInCombat") << ":";
	p_Stream << s_Object->m_bSomeoneHasBeenInCombat;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInvestigationGroupActive") << ":";
	p_Stream << s_Object->m_bInvestigationGroupActive;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandDownGuards") << ":";
	p_Stream << s_Object->m_bStandDownGuards;
	p_Stream << ",";

	p_Stream << JsonStr("m_tStandDownDelay") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tStandDownDelay, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eMostSevereDisturbance") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_eMostSevereDisturbance)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bDiscoveredDeadBody") << ":";
	p_Stream << s_Object->m_bDiscoveredDeadBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDiscoveredPacifiedBody") << ":";
	p_Stream << s_Object->m_bDiscoveredPacifiedBody;

	p_Stream << "}";
}

void ZInvestigateCautiousSituation_SStateData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZInvestigateCautiousSituation_SStateData s_Object;

	s_Object.m_state = static_cast<ZInvestigateCautiousSituation_ESituationState>(ZHMEnums::GetEnumValueByName("ZInvestigateCautiousSituation.ESituationState", std::string_view(p_Document["m_state"])));

	s_Object.m_eBystanderState = static_cast<ZInvestigateCautiousSituation_EBystanderState>(ZHMEnums::GetEnumValueByName("ZInvestigateCautiousSituation.EBystanderState", std::string_view(p_Document["m_eBystanderState"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastInvestigationEnded"], &s_Item);
		s_Object.m_tLastInvestigationEnded = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastApproachOrder"], &s_Item);
		s_Object.m_tLastApproachOrder = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastBackupGroupEnded"], &s_Item);
		s_Object.m_tLastBackupGroupEnded = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastHunt"], &s_Item);
		s_Object.m_tLastHunt = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tHuntTargetLastUpdate"], &s_Item);
		s_Object.m_tHuntTargetLastUpdate = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tNewHuntTargetTimer"], &s_Item);
		s_Object.m_tNewHuntTargetTimer = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastPropagate"], &s_Item);
		s_Object.m_tLastPropagate = s_Item;
	}

	s_Object.m_fCombatAge = static_cast<float32>(double(p_Document["m_fCombatAge"]));

	s_Object.m_bLockdownZoneDisturbanceAdded = bool(p_Document["m_bLockdownZoneDisturbanceAdded"]);

	s_Object.m_bLockdownSituation = bool(p_Document["m_bLockdownSituation"]);

	s_Object.m_bLockdownFalseAlarm = bool(p_Document["m_bLockdownFalseAlarm"]);

	s_Object.m_bLockdownGracePeriod = bool(p_Document["m_bLockdownGracePeriod"]);

	s_Object.m_bHMInGuardDisguise = bool(p_Document["m_bHMInGuardDisguise"]);

	s_Object.m_bFrisked = bool(p_Document["m_bFrisked"]);

	s_Object.m_bAnnouncedFrisk = bool(p_Document["m_bAnnouncedFrisk"]);

	s_Object.m_bReasonToFrisk = bool(p_Document["m_bReasonToFrisk"]);

	s_Object.m_bSomeoneHasBeenInCombat = bool(p_Document["m_bSomeoneHasBeenInCombat"]);

	s_Object.m_bInvestigationGroupActive = bool(p_Document["m_bInvestigationGroupActive"]);

	s_Object.m_bStandDownGuards = bool(p_Document["m_bStandDownGuards"]);

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tStandDownDelay"], &s_Item);
		s_Object.m_tStandDownDelay = s_Item;
	}

	s_Object.m_eMostSevereDisturbance = static_cast<EDisturbanceType>(ZHMEnums::GetEnumValueByName("EDisturbanceType", std::string_view(p_Document["m_eMostSevereDisturbance"])));

	s_Object.m_bDiscoveredDeadBody = bool(p_Document["m_bDiscoveredDeadBody"]);

	s_Object.m_bDiscoveredPacifiedBody = bool(p_Document["m_bDiscoveredPacifiedBody"]);

	*reinterpret_cast<ZInvestigateCautiousSituation_SStateData*>(p_Target) = s_Object;
}

void ZInvestigateCautiousSituation_SStateData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZInvestigateCautiousSituation_SStateData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tLastInvestigationEnded, p_Serializer, p_OwnOffset + offsetof(ZInvestigateCautiousSituation_SStateData, m_tLastInvestigationEnded));
	ZGameTime::Serialize(&s_Object->m_tLastApproachOrder, p_Serializer, p_OwnOffset + offsetof(ZInvestigateCautiousSituation_SStateData, m_tLastApproachOrder));
	ZGameTime::Serialize(&s_Object->m_tLastBackupGroupEnded, p_Serializer, p_OwnOffset + offsetof(ZInvestigateCautiousSituation_SStateData, m_tLastBackupGroupEnded));
	ZGameTime::Serialize(&s_Object->m_tLastHunt, p_Serializer, p_OwnOffset + offsetof(ZInvestigateCautiousSituation_SStateData, m_tLastHunt));
	ZGameTime::Serialize(&s_Object->m_tHuntTargetLastUpdate, p_Serializer, p_OwnOffset + offsetof(ZInvestigateCautiousSituation_SStateData, m_tHuntTargetLastUpdate));
	ZGameTime::Serialize(&s_Object->m_tNewHuntTargetTimer, p_Serializer, p_OwnOffset + offsetof(ZInvestigateCautiousSituation_SStateData, m_tNewHuntTargetTimer));
	ZGameTime::Serialize(&s_Object->m_tLastPropagate, p_Serializer, p_OwnOffset + offsetof(ZInvestigateCautiousSituation_SStateData, m_tLastPropagate));
	ZGameTime::Serialize(&s_Object->m_tStandDownDelay, p_Serializer, p_OwnOffset + offsetof(ZInvestigateCautiousSituation_SStateData, m_tStandDownDelay));
}

ZHMTypeInfo ISequenceTarget::TypeInfo = ZHMTypeInfo("ISequenceTarget", sizeof(ISequenceTarget), alignof(ISequenceTarget), ISequenceTarget::WriteJson, ISequenceTarget::WriteSimpleJson, ISequenceTarget::FromSimpleJson, ISequenceTarget::Serialize);

void ISequenceTarget::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISequenceTarget*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ISequenceTarget::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ISequenceTarget*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ISequenceTarget::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ISequenceTarget s_Object;

	*reinterpret_cast<ISequenceTarget*>(p_Target) = s_Object;
}

void ISequenceTarget::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ISequenceTarget*>(p_Object);

}

ZHMTypeInfo ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule::TypeInfo = ZHMTypeInfo("ZSecuritySystemCameraConfiguration.SHitmanVisibleEscalationRule", sizeof(ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule), alignof(ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule), ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule::WriteJson, ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule::WriteSimpleJson, ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule::FromSimpleJson, ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule::Serialize);

void ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_NrGuardsToSend") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_NrGuardsToSend;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Situation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZSecuritySystemCameraConfiguration.ECameraEscalationSituations") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_Situation) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZSecuritySystemCameraConfiguration.ECameraEscalationSituations", static_cast<int>(s_Object->m_Situation))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_NrGuardsToSend") << ":";
	p_Stream << s_Object->m_NrGuardsToSend;
	p_Stream << ",";

	p_Stream << JsonStr("m_Situation") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZSecuritySystemCameraConfiguration.ECameraEscalationSituations", static_cast<int>(s_Object->m_Situation)));

	p_Stream << "}";
}

void ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule s_Object;

	s_Object.m_NrGuardsToSend = static_cast<int32>(int64_t(p_Document["m_NrGuardsToSend"]));

	s_Object.m_Situation = static_cast<ZSecuritySystemCameraConfiguration_ECameraEscalationSituations>(ZHMEnums::GetEnumValueByName("ZSecuritySystemCameraConfiguration.ECameraEscalationSituations", std::string_view(p_Document["m_Situation"])));

	*reinterpret_cast<ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule*>(p_Target) = s_Object;
}

void ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule*>(p_Object);

}

ZHMTypeInfo IComponentInterface::TypeInfo = ZHMTypeInfo("IComponentInterface", sizeof(IComponentInterface), alignof(IComponentInterface), IComponentInterface::WriteJson, IComponentInterface::WriteSimpleJson, IComponentInterface::FromSimpleJson, IComponentInterface::Serialize);

void IComponentInterface::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IComponentInterface*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IComponentInterface::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IComponentInterface*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IComponentInterface::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IComponentInterface s_Object;

	*reinterpret_cast<IComponentInterface*>(p_Target) = s_Object;
}

void IComponentInterface::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IComponentInterface*>(p_Object);

}

ZHMTypeInfo ZHM5AgilityEventConsumer_SAgilityEventData::TypeInfo = ZHMTypeInfo("ZHM5AgilityEventConsumer.SAgilityEventData", sizeof(ZHM5AgilityEventConsumer_SAgilityEventData), alignof(ZHM5AgilityEventConsumer_SAgilityEventData), ZHM5AgilityEventConsumer_SAgilityEventData::WriteJson, ZHM5AgilityEventConsumer_SAgilityEventData::WriteSimpleJson, ZHM5AgilityEventConsumer_SAgilityEventData::FromSimpleJson, ZHM5AgilityEventConsumer_SAgilityEventData::Serialize);

void ZHM5AgilityEventConsumer_SAgilityEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5AgilityEventConsumer_SAgilityEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHM5AgilityEventConsumer.EEvent") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_nEvent) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHM5AgilityEventConsumer.EEvent", static_cast<int>(s_Object->m_nEvent))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5AgilityEventConsumer_SAgilityEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5AgilityEventConsumer_SAgilityEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEvent") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHM5AgilityEventConsumer.EEvent", static_cast<int>(s_Object->m_nEvent)));

	p_Stream << "}";
}

void ZHM5AgilityEventConsumer_SAgilityEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5AgilityEventConsumer_SAgilityEventData s_Object;

	s_Object.m_nEvent = static_cast<ZHM5AgilityEventConsumer_EEvent>(ZHMEnums::GetEnumValueByName("ZHM5AgilityEventConsumer.EEvent", std::string_view(p_Document["m_nEvent"])));

	*reinterpret_cast<ZHM5AgilityEventConsumer_SAgilityEventData*>(p_Target) = s_Object;
}

void ZHM5AgilityEventConsumer_SAgilityEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5AgilityEventConsumer_SAgilityEventData*>(p_Object);

}

ZHMTypeInfo IHM5WeaponInventory::TypeInfo = ZHMTypeInfo("IHM5WeaponInventory", sizeof(IHM5WeaponInventory), alignof(IHM5WeaponInventory), IHM5WeaponInventory::WriteJson, IHM5WeaponInventory::WriteSimpleJson, IHM5WeaponInventory::FromSimpleJson, IHM5WeaponInventory::Serialize);

void IHM5WeaponInventory::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IHM5WeaponInventory*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IHM5WeaponInventory::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IHM5WeaponInventory*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IHM5WeaponInventory::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IHM5WeaponInventory s_Object;

	*reinterpret_cast<IHM5WeaponInventory*>(p_Target) = s_Object;
}

void IHM5WeaponInventory::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IHM5WeaponInventory*>(p_Object);

}

ZHMTypeInfo ZSituationGroup::TypeInfo = ZHMTypeInfo("ZSituationGroup", sizeof(ZSituationGroup), alignof(ZSituationGroup), ZSituationGroup::WriteJson, ZSituationGroup::WriteSimpleJson, ZSituationGroup::FromSimpleJson, ZSituationGroup::Serialize);

void ZSituationGroup::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSituationGroup*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZSituationGroup::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSituationGroup*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZSituationGroup::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSituationGroup s_Object;

	*reinterpret_cast<ZSituationGroup*>(p_Target) = s_Object;
}

void ZSituationGroup::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZSituationGroup*>(p_Object);

}

ZHMTypeInfo STrackDollyControllerSaveData::TypeInfo = ZHMTypeInfo("STrackDollyControllerSaveData", sizeof(STrackDollyControllerSaveData), alignof(STrackDollyControllerSaveData), STrackDollyControllerSaveData::WriteJson, STrackDollyControllerSaveData::WriteSimpleJson, STrackDollyControllerSaveData::FromSimpleJson, STrackDollyControllerSaveData::Serialize);

void STrackDollyControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STrackDollyControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTrackEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTrackEntity;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTrackPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTrackPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDollyAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsDollyAttached;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDollyPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vDollyPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vDollyRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vDollyRotation, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STrackDollyControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STrackDollyControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTrackEntity") << ":";
	p_Stream << s_Object->m_rTrackEntity;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTrackPosition") << ":";
	p_Stream << s_Object->m_fTrackPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsDollyAttached") << ":";
	p_Stream << s_Object->m_bIsDollyAttached;
	p_Stream << ",";

	p_Stream << JsonStr("m_vDollyPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vDollyPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vDollyRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vDollyRotation, p_Stream);

	p_Stream << "}";
}

void STrackDollyControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STrackDollyControllerSaveData s_Object;

	s_Object.m_rTrackEntity = static_cast<uint32>(int64_t(p_Document["m_rTrackEntity"]));

	s_Object.m_fTrackPosition = static_cast<float32>(double(p_Document["m_fTrackPosition"]));

	s_Object.m_bIsDollyAttached = bool(p_Document["m_bIsDollyAttached"]);

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vDollyPosition"], &s_Item);
		s_Object.m_vDollyPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vDollyRotation"], &s_Item);
		s_Object.m_vDollyRotation = s_Item;
	}

	*reinterpret_cast<STrackDollyControllerSaveData*>(p_Target) = s_Object;
}

void STrackDollyControllerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STrackDollyControllerSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vDollyPosition, p_Serializer, p_OwnOffset + offsetof(STrackDollyControllerSaveData, m_vDollyPosition));
	SVector4::Serialize(&s_Object->m_vDollyRotation, p_Serializer, p_OwnOffset + offsetof(STrackDollyControllerSaveData, m_vDollyRotation));
}

ZHMTypeInfo AI_Private_SStimulusSnapshot::TypeInfo = ZHMTypeInfo("AI.Private.SStimulusSnapshot", sizeof(AI_Private_SStimulusSnapshot), alignof(AI_Private_SStimulusSnapshot), AI_Private_SStimulusSnapshot::WriteJson, AI_Private_SStimulusSnapshot::WriteSimpleJson, AI_Private_SStimulusSnapshot::FromSimpleJson, AI_Private_SStimulusSnapshot::Serialize);

void AI_Private_SStimulusSnapshot::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_Private_SStimulusSnapshot*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("SlotIndex") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->SlotIndex;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("StimulusData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->StimulusData);
	p_Stream << "}";

	p_Stream << "}";
}

void AI_Private_SStimulusSnapshot::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_Private_SStimulusSnapshot*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("SlotIndex") << ":";
	p_Stream << s_Object->SlotIndex;
	p_Stream << ",";

	p_Stream << JsonStr("StimulusData") << ":";
	p_Stream << JsonStr(s_Object->StimulusData);

	p_Stream << "}";
}

void AI_Private_SStimulusSnapshot::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AI_Private_SStimulusSnapshot s_Object;

	s_Object.SlotIndex = static_cast<uint32>(int64_t(p_Document["SlotIndex"]));

	s_Object.StimulusData = std::string_view(p_Document["StimulusData"]);

	*reinterpret_cast<AI_Private_SStimulusSnapshot*>(p_Target) = s_Object;
}

void AI_Private_SStimulusSnapshot::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AI_Private_SStimulusSnapshot*>(p_Object);

	ZString::Serialize(&s_Object->StimulusData, p_Serializer, p_OwnOffset + offsetof(AI_Private_SStimulusSnapshot, StimulusData));
}

ZHMTypeInfo SPIPMessageManagerProxySaveData::TypeInfo = ZHMTypeInfo("SPIPMessageManagerProxySaveData", sizeof(SPIPMessageManagerProxySaveData), alignof(SPIPMessageManagerProxySaveData), SPIPMessageManagerProxySaveData::WriteJson, SPIPMessageManagerProxySaveData::WriteSimpleJson, SPIPMessageManagerProxySaveData::FromSimpleJson, SPIPMessageManagerProxySaveData::Serialize);

void SPIPMessageManagerProxySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPIPMessageManagerProxySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SPIPMessageManagerProxySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPIPMessageManagerProxySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SPIPMessageManagerProxySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPIPMessageManagerProxySaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SPIPMessageManagerProxySaveData*>(p_Target) = s_Object;
}

void SPIPMessageManagerProxySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SPIPMessageManagerProxySaveData*>(p_Object);

}

ZHMTypeInfo BoneId::TypeInfo = ZHMTypeInfo("BoneId", sizeof(BoneId), alignof(BoneId), BoneId::WriteJson, BoneId::WriteSimpleJson, BoneId::FromSimpleJson, BoneId::Serialize);

void BoneId::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<BoneId*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void BoneId::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<BoneId*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void BoneId::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	BoneId s_Object;

	*reinterpret_cast<BoneId*>(p_Target) = s_Object;
}

void BoneId::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<BoneId*>(p_Object);

}

ZHMTypeInfo SLeadEscortSituationActorStateSaveData::TypeInfo = ZHMTypeInfo("SLeadEscortSituationActorStateSaveData", sizeof(SLeadEscortSituationActorStateSaveData), alignof(SLeadEscortSituationActorStateSaveData), SLeadEscortSituationActorStateSaveData::WriteJson, SLeadEscortSituationActorStateSaveData::WriteSimpleJson, SLeadEscortSituationActorStateSaveData::FromSimpleJson, SLeadEscortSituationActorStateSaveData::Serialize);

void SLeadEscortSituationActorStateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLeadEscortSituationActorStateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllocatedForSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllocatedForSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZLeadEscortSituationEntity.EEscortState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZLeadEscortSituationEntity.EEscortState", static_cast<int>(s_Object->m_eState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eStatePrevious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZLeadEscortSituationEntity.EEscortState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eStatePrevious) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZLeadEscortSituationEntity.EEscortState", static_cast<int>(s_Object->m_eStatePrevious))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentScreenplay;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rPreferredIntermediateScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rPreferredIntermediateScreenplay;
	p_Stream << "}";

	p_Stream << "}";
}

void SLeadEscortSituationActorStateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLeadEscortSituationActorStateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nID") << ":";
	p_Stream << s_Object->m_nID;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllocatedForSituation") << ":";
	p_Stream << s_Object->m_bAllocatedForSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZLeadEscortSituationEntity.EEscortState", static_cast<int>(s_Object->m_eState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eStatePrevious") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZLeadEscortSituationEntity.EEscortState", static_cast<int>(s_Object->m_eStatePrevious)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentScreenplay") << ":";
	p_Stream << s_Object->m_rCurrentScreenplay;
	p_Stream << ",";

	p_Stream << JsonStr("m_rPreferredIntermediateScreenplay") << ":";
	p_Stream << s_Object->m_rPreferredIntermediateScreenplay;

	p_Stream << "}";
}

void SLeadEscortSituationActorStateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLeadEscortSituationActorStateSaveData s_Object;

	s_Object.m_nID = static_cast<uint32>(int64_t(p_Document["m_nID"]));

	s_Object.m_bAllocatedForSituation = bool(p_Document["m_bAllocatedForSituation"]);

	s_Object.m_eState = static_cast<ZLeadEscortSituationEntity_EEscortState>(ZHMEnums::GetEnumValueByName("ZLeadEscortSituationEntity.EEscortState", std::string_view(p_Document["m_eState"])));

	s_Object.m_eStatePrevious = static_cast<ZLeadEscortSituationEntity_EEscortState>(ZHMEnums::GetEnumValueByName("ZLeadEscortSituationEntity.EEscortState", std::string_view(p_Document["m_eStatePrevious"])));

	s_Object.m_fDistanceToTarget = static_cast<float32>(double(p_Document["m_fDistanceToTarget"]));

	s_Object.m_rCurrentScreenplay = static_cast<uint32>(int64_t(p_Document["m_rCurrentScreenplay"]));

	s_Object.m_rPreferredIntermediateScreenplay = static_cast<uint32>(int64_t(p_Document["m_rPreferredIntermediateScreenplay"]));

	*reinterpret_cast<SLeadEscortSituationActorStateSaveData*>(p_Target) = s_Object;
}

void SLeadEscortSituationActorStateSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLeadEscortSituationActorStateSaveData*>(p_Object);

}

ZHMTypeInfo SLeadEscortSituationSaveData::TypeInfo = ZHMTypeInfo("SLeadEscortSituationSaveData", sizeof(SLeadEscortSituationSaveData), alignof(SLeadEscortSituationSaveData), SLeadEscortSituationSaveData::WriteJson, SLeadEscortSituationSaveData::WriteSimpleJson, SLeadEscortSituationSaveData::FromSimpleJson, SLeadEscortSituationSaveData::Serialize);

void SLeadEscortSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLeadEscortSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActivated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMayEscort") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMayEscort;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetDead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetDead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetInRange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllEscortsAreDead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllEscortsAreDead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vLastPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vLastPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetIsMoving") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetIsMoving;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZLeadEscortSituationEntity.ETargetState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZLeadEscortSituationEntity.ETargetState", static_cast<int>(s_Object->m_eTargetState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eTargetEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetActState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZActBehaviorEntity.EState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetActState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZActBehaviorEntity.EState", static_cast<int>(s_Object->m_eTargetActState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetNotMovingTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetNotMovingTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAgitationCooldownTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetAgitationCooldownTimer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAddedActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SLeadEscortSituationActors>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAddedActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAddedActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLeadEscortSituationActors") << "," << JsonStr("$val") << ":";
		SLeadEscortSituationActors::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aAddedActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SLeadEscortSituationActorStateSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLeadEscortSituationActorStateSaveData") << "," << JsonStr("$val") << ":";
		SLeadEscortSituationActorStateSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEscortActs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEscortActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEscortActs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEscortActs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SLeadEscortSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SLeadEscortSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bActivated") << ":";
	p_Stream << s_Object->m_bActivated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMayEscort") << ":";
	p_Stream << s_Object->m_bMayEscort;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetDead") << ":";
	p_Stream << s_Object->m_bTargetDead;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInRange") << ":";
	p_Stream << s_Object->m_bTargetInRange;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllEscortsAreDead") << ":";
	p_Stream << s_Object->m_bAllEscortsAreDead;
	p_Stream << ",";

	p_Stream << JsonStr("m_vLastPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vLastPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetIsMoving") << ":";
	p_Stream << s_Object->m_bTargetIsMoving;
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZLeadEscortSituationEntity.ETargetState", static_cast<int>(s_Object->m_eTargetState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eTargetEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetActState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZActBehaviorEntity.EState", static_cast<int>(s_Object->m_eTargetActState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetNotMovingTime") << ":";
	p_Stream << s_Object->m_fTargetNotMovingTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAgitationCooldownTimer") << ":";
	p_Stream << s_Object->m_fTargetAgitationCooldownTimer;
	p_Stream << ",";

	p_Stream << JsonStr("m_aAddedActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAddedActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAddedActors[i];
		SLeadEscortSituationActors::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aAddedActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		SLeadEscortSituationActorStateSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEscortActs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEscortActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEscortActs[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEscortActs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SLeadEscortSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SLeadEscortSituationSaveData s_Object;

	s_Object.m_bActivated = bool(p_Document["m_bActivated"]);

	s_Object.m_bMayEscort = bool(p_Document["m_bMayEscort"]);

	s_Object.m_bTargetDead = bool(p_Document["m_bTargetDead"]);

	s_Object.m_bTargetInRange = bool(p_Document["m_bTargetInRange"]);

	s_Object.m_bAllEscortsAreDead = bool(p_Document["m_bAllEscortsAreDead"]);

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vLastPosition"], &s_Item);
		s_Object.m_vLastPosition = s_Item;
	}

	s_Object.m_bTargetIsMoving = bool(p_Document["m_bTargetIsMoving"]);

	s_Object.m_eTargetState = static_cast<ZLeadEscortSituationEntity_ETargetState>(ZHMEnums::GetEnumValueByName("ZLeadEscortSituationEntity.ETargetState", std::string_view(p_Document["m_eTargetState"])));

	s_Object.m_eTargetEmotionState = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_eTargetEmotionState"])));

	s_Object.m_eTargetActState = static_cast<ZActBehaviorEntity_EState>(ZHMEnums::GetEnumValueByName("ZActBehaviorEntity.EState", std::string_view(p_Document["m_eTargetActState"])));

	s_Object.m_fTargetNotMovingTime = static_cast<float32>(double(p_Document["m_fTargetNotMovingTime"]));

	s_Object.m_fTargetAgitationCooldownTimer = static_cast<float32>(double(p_Document["m_fTargetAgitationCooldownTimer"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aAddedActors"])
	{
		SLeadEscortSituationActors s_ArrayItem0;
		SLeadEscortSituationActors::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aAddedActors.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aStates"])
	{
		SLeadEscortSituationActorStateSaveData s_ArrayItem0;
		SLeadEscortSituationActorStateSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aStates.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEscortActs"])
	{
		s_Object.m_aEscortActs.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SLeadEscortSituationSaveData*>(p_Target) = s_Object;
}

void SLeadEscortSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SLeadEscortSituationSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vLastPosition, p_Serializer, p_OwnOffset + offsetof(SLeadEscortSituationSaveData, m_vLastPosition));
	TArray<SLeadEscortSituationActors>::Serialize(&s_Object->m_aAddedActors, p_Serializer, p_OwnOffset + offsetof(SLeadEscortSituationSaveData, m_aAddedActors));
	TArray<SLeadEscortSituationActorStateSaveData>::Serialize(&s_Object->m_aStates, p_Serializer, p_OwnOffset + offsetof(SLeadEscortSituationSaveData, m_aStates));
	TArray<uint32>::Serialize(&s_Object->m_aEscortActs, p_Serializer, p_OwnOffset + offsetof(SLeadEscortSituationSaveData, m_aEscortActs));
}

ZHMTypeInfo SUITestData_SSubSubStruct::TypeInfo = ZHMTypeInfo("SUITestData.SSubSubStruct", sizeof(SUITestData_SSubSubStruct), alignof(SUITestData_SSubSubStruct), SUITestData_SSubSubStruct::WriteJson, SUITestData_SSubSubStruct::WriteSimpleJson, SUITestData_SSubSubStruct::FromSimpleJson, SUITestData_SSubSubStruct::Serialize);

void SUITestData_SSubSubStruct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SUITestData_SSubSubStruct*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("sDeepString") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sDeepString);
	p_Stream << "}";

	p_Stream << "}";
}

void SUITestData_SSubSubStruct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SUITestData_SSubSubStruct*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("sDeepString") << ":";
	p_Stream << JsonStr(s_Object->sDeepString);

	p_Stream << "}";
}

void SUITestData_SSubSubStruct::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SUITestData_SSubSubStruct s_Object;

	s_Object.sDeepString = std::string_view(p_Document["sDeepString"]);

	*reinterpret_cast<SUITestData_SSubSubStruct*>(p_Target) = s_Object;
}

void SUITestData_SSubSubStruct::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SUITestData_SSubSubStruct*>(p_Object);

	ZString::Serialize(&s_Object->sDeepString, p_Serializer, p_OwnOffset + offsetof(SUITestData_SSubSubStruct, sDeepString));
}

ZHMTypeInfo SActorAliveConditionSaveData::TypeInfo = ZHMTypeInfo("SActorAliveConditionSaveData", sizeof(SActorAliveConditionSaveData), alignof(SActorAliveConditionSaveData), SActorAliveConditionSaveData::WriteJson, SActorAliveConditionSaveData::WriteSimpleJson, SActorAliveConditionSaveData::FromSimpleJson, SActorAliveConditionSaveData::Serialize);

void SActorAliveConditionSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorAliveConditionSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorAliveConditionSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorAliveConditionSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SActorAliveConditionSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorAliveConditionSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SActorAliveConditionSaveData*>(p_Target) = s_Object;
}

void SActorAliveConditionSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorAliveConditionSaveData*>(p_Object);

}

ZHMTypeInfo STokenID::TypeInfo = ZHMTypeInfo("STokenID", sizeof(STokenID), alignof(STokenID), STokenID::WriteJson, STokenID::WriteSimpleJson, STokenID::FromSimpleJson, STokenID::Serialize);

void STokenID::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STokenID*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_iValue") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_iValue;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValid;
	p_Stream << "}";

	p_Stream << "}";
}

void STokenID::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STokenID*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_iValue") << ":";
	p_Stream << s_Object->m_iValue;
	p_Stream << ",";

	p_Stream << JsonStr("m_bValid") << ":";
	p_Stream << s_Object->m_bValid;

	p_Stream << "}";
}

void STokenID::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STokenID s_Object;

	s_Object.m_iValue = static_cast<uint32>(int64_t(p_Document["m_iValue"]));

	s_Object.m_bValid = bool(p_Document["m_bValid"]);

	*reinterpret_cast<STokenID*>(p_Target) = s_Object;
}

void STokenID::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STokenID*>(p_Object);

}

ZHMTypeInfo SConversationEntry::TypeInfo = ZHMTypeInfo("SConversationEntry", sizeof(SConversationEntry), alignof(SConversationEntry), SConversationEntry::WriteJson, SConversationEntry::WriteSimpleJson, SConversationEntry::FromSimpleJson, SConversationEntry::Serialize);

void SConversationEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SConversationEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_role") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EConversationRole") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_role) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EConversationRole", static_cast<int>(s_Object->m_role))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sound") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorSoundDefs") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_sound) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->m_sound))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SConversationEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SConversationEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_role") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EConversationRole", static_cast<int>(s_Object->m_role)));
	p_Stream << ",";

	p_Stream << JsonStr("m_sound") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorSoundDefs", static_cast<int>(s_Object->m_sound)));

	p_Stream << "}";
}

void SConversationEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SConversationEntry s_Object;

	s_Object.m_role = static_cast<EConversationRole>(ZHMEnums::GetEnumValueByName("EConversationRole", std::string_view(p_Document["m_role"])));

	s_Object.m_sound = static_cast<EActorSoundDefs>(ZHMEnums::GetEnumValueByName("EActorSoundDefs", std::string_view(p_Document["m_sound"])));

	*reinterpret_cast<SConversationEntry*>(p_Target) = s_Object;
}

void SConversationEntry::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SConversationEntry*>(p_Object);

}

ZHMTypeInfo SWeaponCustomControlSaveData::TypeInfo = ZHMTypeInfo("SWeaponCustomControlSaveData", sizeof(SWeaponCustomControlSaveData), alignof(SWeaponCustomControlSaveData), SWeaponCustomControlSaveData::WriteJson, SWeaponCustomControlSaveData::WriteSimpleJson, SWeaponCustomControlSaveData::FromSimpleJson, SWeaponCustomControlSaveData::Serialize);

void SWeaponCustomControlSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWeaponCustomControlSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetRegistered") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetRegistered;
	p_Stream << "}";

	p_Stream << "}";
}

void SWeaponCustomControlSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SWeaponCustomControlSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_rItem") << ":";
	p_Stream << s_Object->m_rItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetRegistered") << ":";
	p_Stream << s_Object->m_bTargetRegistered;

	p_Stream << "}";
}

void SWeaponCustomControlSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SWeaponCustomControlSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_rItem = static_cast<uint32>(int64_t(p_Document["m_rItem"]));

	s_Object.m_bTargetRegistered = bool(p_Document["m_bTargetRegistered"]);

	*reinterpret_cast<SWeaponCustomControlSaveData*>(p_Target) = s_Object;
}

void SWeaponCustomControlSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SWeaponCustomControlSaveData*>(p_Object);

}

ZHMTypeInfo SContractConfigResourceEntry::TypeInfo = ZHMTypeInfo("SContractConfigResourceEntry", sizeof(SContractConfigResourceEntry), alignof(SContractConfigResourceEntry), SContractConfigResourceEntry::WriteJson, SContractConfigResourceEntry::WriteSimpleJson, SContractConfigResourceEntry::FromSimpleJson, SContractConfigResourceEntry::Serialize);

void SContractConfigResourceEntry::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContractConfigResourceEntry*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("Id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->Id);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ContractRid") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->ContractRid, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SContractConfigResourceEntry::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SContractConfigResourceEntry*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("Id") << ":";
	p_Stream << JsonStr(s_Object->Id);
	p_Stream << ",";

	p_Stream << JsonStr("ContractRid") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->ContractRid, p_Stream);

	p_Stream << "}";
}

void SContractConfigResourceEntry::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SContractConfigResourceEntry s_Object;

	s_Object.Id = std::string_view(p_Document["Id"]);

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["ContractRid"], &s_Item);
		s_Object.ContractRid = s_Item;
	}

	*reinterpret_cast<SContractConfigResourceEntry*>(p_Target) = s_Object;
}

void SContractConfigResourceEntry::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SContractConfigResourceEntry*>(p_Object);

	ZString::Serialize(&s_Object->Id, p_Serializer, p_OwnOffset + offsetof(SContractConfigResourceEntry, Id));
	ZRuntimeResourceID::Serialize(&s_Object->ContractRid, p_Serializer, p_OwnOffset + offsetof(SContractConfigResourceEntry, ContractRid));
}

ZHMTypeInfo SItemSpawnerSaveData::TypeInfo = ZHMTypeInfo("SItemSpawnerSaveData", sizeof(SItemSpawnerSaveData), alignof(SItemSpawnerSaveData), SItemSpawnerSaveData::WriteJson, SItemSpawnerSaveData::WriteSimpleJson, SItemSpawnerSaveData::FromSimpleJson, SItemSpawnerSaveData::Serialize);

void SItemSpawnerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemSpawnerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bItemUpdateTransformChange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bItemUpdateTransformChange;
	p_Stream << "}";

	p_Stream << "}";
}

void SItemSpawnerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemSpawnerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bItemUpdateTransformChange") << ":";
	p_Stream << s_Object->m_bItemUpdateTransformChange;

	p_Stream << "}";
}

void SItemSpawnerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemSpawnerSaveData s_Object;

	s_Object.m_bItemUpdateTransformChange = bool(p_Document["m_bItemUpdateTransformChange"]);

	*reinterpret_cast<SItemSpawnerSaveData*>(p_Target) = s_Object;
}

void SItemSpawnerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItemSpawnerSaveData*>(p_Object);

}

ZHMTypeInfo ITriggerListener::TypeInfo = ZHMTypeInfo("ITriggerListener", sizeof(ITriggerListener), alignof(ITriggerListener), ITriggerListener::WriteJson, ITriggerListener::WriteSimpleJson, ITriggerListener::FromSimpleJson, ITriggerListener::Serialize);

void ITriggerListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ITriggerListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ITriggerListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ITriggerListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ITriggerListener::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ITriggerListener s_Object;

	*reinterpret_cast<ITriggerListener*>(p_Target) = s_Object;
}

void ITriggerListener::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ITriggerListener*>(p_Object);

}

ZHMTypeInfo SBoneScalesList::TypeInfo = ZHMTypeInfo("SBoneScalesList", sizeof(SBoneScalesList), alignof(SBoneScalesList), SBoneScalesList::WriteJson, SBoneScalesList::WriteSimpleJson, SBoneScalesList::FromSimpleJson, SBoneScalesList::Serialize);

void SBoneScalesList::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBoneScalesList*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aBoneScales") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SVector3>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneScales.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBoneScales[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
		SVector3::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aBoneScales.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SBoneScalesList::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SBoneScalesList*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aBoneScales") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBoneScales.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBoneScales[i];
		SVector3::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aBoneScales.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SBoneScalesList::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SBoneScalesList s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aBoneScales"])
	{
		SVector3 s_ArrayItem0;
		SVector3::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aBoneScales.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SBoneScalesList*>(p_Target) = s_Object;
}

void SBoneScalesList::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SBoneScalesList*>(p_Object);

	TArray<SVector3>::Serialize(&s_Object->m_aBoneScales, p_Serializer, p_OwnOffset + offsetof(SBoneScalesList, m_aBoneScales));
}

ZHMTypeInfo SHeroEscortSituationActorStateSaveData::TypeInfo = ZHMTypeInfo("SHeroEscortSituationActorStateSaveData", sizeof(SHeroEscortSituationActorStateSaveData), alignof(SHeroEscortSituationActorStateSaveData), SHeroEscortSituationActorStateSaveData::WriteJson, SHeroEscortSituationActorStateSaveData::WriteSimpleJson, SHeroEscortSituationActorStateSaveData::FromSimpleJson, SHeroEscortSituationActorStateSaveData::Serialize);

void SHeroEscortSituationActorStateSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituationActorStateSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllocatedForSituation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllocatedForSituation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHeroEscortSituationEntity.EEscortState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHeroEscortSituationEntity.EEscortState", static_cast<int>(s_Object->m_eState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eStatePrevious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHeroEscortSituationEntity.EEscortState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eStatePrevious) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHeroEscortSituationEntity.EEscortState", static_cast<int>(s_Object->m_eStatePrevious))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rCurrentScreenplay;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rPreferredIntermediateScreenplay") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rPreferredIntermediateScreenplay;
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroEscortSituationActorStateSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituationActorStateSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nID") << ":";
	p_Stream << s_Object->m_nID;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllocatedForSituation") << ":";
	p_Stream << s_Object->m_bAllocatedForSituation;
	p_Stream << ",";

	p_Stream << JsonStr("m_eState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHeroEscortSituationEntity.EEscortState", static_cast<int>(s_Object->m_eState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eStatePrevious") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHeroEscortSituationEntity.EEscortState", static_cast<int>(s_Object->m_eStatePrevious)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fDistanceToTarget") << ":";
	p_Stream << s_Object->m_fDistanceToTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_rCurrentScreenplay") << ":";
	p_Stream << s_Object->m_rCurrentScreenplay;
	p_Stream << ",";

	p_Stream << JsonStr("m_rPreferredIntermediateScreenplay") << ":";
	p_Stream << s_Object->m_rPreferredIntermediateScreenplay;

	p_Stream << "}";
}

void SHeroEscortSituationActorStateSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroEscortSituationActorStateSaveData s_Object;

	s_Object.m_nID = static_cast<uint32>(int64_t(p_Document["m_nID"]));

	s_Object.m_bAllocatedForSituation = bool(p_Document["m_bAllocatedForSituation"]);

	s_Object.m_eState = static_cast<ZHeroEscortSituationEntity_EEscortState>(ZHMEnums::GetEnumValueByName("ZHeroEscortSituationEntity.EEscortState", std::string_view(p_Document["m_eState"])));

	s_Object.m_eStatePrevious = static_cast<ZHeroEscortSituationEntity_EEscortState>(ZHMEnums::GetEnumValueByName("ZHeroEscortSituationEntity.EEscortState", std::string_view(p_Document["m_eStatePrevious"])));

	s_Object.m_fDistanceToTarget = static_cast<float32>(double(p_Document["m_fDistanceToTarget"]));

	s_Object.m_rCurrentScreenplay = static_cast<uint32>(int64_t(p_Document["m_rCurrentScreenplay"]));

	s_Object.m_rPreferredIntermediateScreenplay = static_cast<uint32>(int64_t(p_Document["m_rPreferredIntermediateScreenplay"]));

	*reinterpret_cast<SHeroEscortSituationActorStateSaveData*>(p_Target) = s_Object;
}

void SHeroEscortSituationActorStateSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituationActorStateSaveData*>(p_Object);

}

ZHMTypeInfo ZER64::TypeInfo = ZHMTypeInfo("ZER64", sizeof(ZER64), alignof(ZER64), ZER64::WriteJson, ZER64::WriteSimpleJson, ZER64::FromSimpleJson, ZER64::Serialize);

void ZER64::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZER64*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEntityID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sExposedEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sExposedEntity);
	p_Stream << "}";

	p_Stream << "}";
}

void ZER64::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZER64*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEntityID") << ":";
	p_Stream << s_Object->m_nEntityID;
	p_Stream << ",";

	p_Stream << JsonStr("m_sExposedEntity") << ":";
	p_Stream << JsonStr(s_Object->m_sExposedEntity);

	p_Stream << "}";
}

void ZER64::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZER64 s_Object;

	s_Object.m_nEntityID = uint64(p_Document["m_nEntityID"]);

	s_Object.m_sExposedEntity = std::string_view(p_Document["m_sExposedEntity"]);

	*reinterpret_cast<ZER64*>(p_Target) = s_Object;
}

void ZER64::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZER64*>(p_Object);

	ZString::Serialize(&s_Object->m_sExposedEntity, p_Serializer, p_OwnOffset + offsetof(ZER64, m_sExposedEntity));
}

ZHMTypeInfo SFooStruct::TypeInfo = ZHMTypeInfo("SFooStruct", sizeof(SFooStruct), alignof(SFooStruct), SFooStruct::WriteJson, SFooStruct::WriteSimpleJson, SFooStruct::FromSimpleJson, SFooStruct::Serialize);

void SFooStruct::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFooStruct*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eTest") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_eTest;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sOther") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sOther);
	p_Stream << "}";

	p_Stream << "}";
}

void SFooStruct::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SFooStruct*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eTest") << ":";
	p_Stream << s_Object->m_eTest;
	p_Stream << ",";

	p_Stream << JsonStr("m_sOther") << ":";
	p_Stream << JsonStr(s_Object->m_sOther);

	p_Stream << "}";
}

void SFooStruct::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SFooStruct s_Object;

	s_Object.m_eTest = static_cast<uint32>(int64_t(p_Document["m_eTest"]));

	s_Object.m_sOther = std::string_view(p_Document["m_sOther"]);

	*reinterpret_cast<SFooStruct*>(p_Target) = s_Object;
}

void SFooStruct::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SFooStruct*>(p_Object);

	ZString::Serialize(&s_Object->m_sOther, p_Serializer, p_OwnOffset + offsetof(SFooStruct, m_sOther));
}

ZHMTypeInfo SChairSaveData::TypeInfo = ZHMTypeInfo("SChairSaveData", sizeof(SChairSaveData), alignof(SChairSaveData), SChairSaveData::WriteJson, SChairSaveData::WriteSimpleJson, SChairSaveData::FromSimpleJson, SChairSaveData::Serialize);

void SChairSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SChairSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttached") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAttached;
	p_Stream << "}";

	p_Stream << "}";
}

void SChairSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SChairSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAttached") << ":";
	p_Stream << s_Object->m_bAttached;

	p_Stream << "}";
}

void SChairSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SChairSaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	s_Object.m_bAttached = bool(p_Document["m_bAttached"]);

	*reinterpret_cast<SChairSaveData*>(p_Target) = s_Object;
}

void SChairSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SChairSaveData*>(p_Object);

}

ZHMTypeInfo SCombatMetricsSaveData::TypeInfo = ZHMTypeInfo("SCombatMetricsSaveData", sizeof(SCombatMetricsSaveData), alignof(SCombatMetricsSaveData), SCombatMetricsSaveData::WriteJson, SCombatMetricsSaveData::WriteSimpleJson, SCombatMetricsSaveData::FromSimpleJson, SCombatMetricsSaveData::Serialize);

void SCombatMetricsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCombatMetricsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_CombatProgress") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_CombatProgress;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DeadVIPsOrContractTargets") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_DeadVIPsOrContractTargets.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_DeadVIPsOrContractTargets[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_DeadVIPsOrContractTargets.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_DiscoveredVIPOrContractTargetBodies") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_DiscoveredVIPOrContractTargetBodies.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_DiscoveredVIPOrContractTargetBodies[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_DiscoveredVIPOrContractTargetBodies.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SCombatMetricsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCombatMetricsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_CombatProgress") << ":";
	p_Stream << s_Object->m_CombatProgress;
	p_Stream << ",";

	p_Stream << JsonStr("m_DeadVIPsOrContractTargets") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_DeadVIPsOrContractTargets.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_DeadVIPsOrContractTargets[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_DeadVIPsOrContractTargets.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_DiscoveredVIPOrContractTargetBodies") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_DiscoveredVIPOrContractTargetBodies.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_DiscoveredVIPOrContractTargetBodies[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_DiscoveredVIPOrContractTargetBodies.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SCombatMetricsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCombatMetricsSaveData s_Object;

	s_Object.m_CombatProgress = static_cast<float32>(double(p_Document["m_CombatProgress"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_DeadVIPsOrContractTargets"])
	{
		s_Object.m_DeadVIPsOrContractTargets.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_DiscoveredVIPOrContractTargetBodies"])
	{
		s_Object.m_DiscoveredVIPOrContractTargetBodies.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	*reinterpret_cast<SCombatMetricsSaveData*>(p_Target) = s_Object;
}

void SCombatMetricsSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCombatMetricsSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_DeadVIPsOrContractTargets, p_Serializer, p_OwnOffset + offsetof(SCombatMetricsSaveData, m_DeadVIPsOrContractTargets));
	TArray<uint32>::Serialize(&s_Object->m_DiscoveredVIPOrContractTargetBodies, p_Serializer, p_OwnOffset + offsetof(SCombatMetricsSaveData, m_DiscoveredVIPOrContractTargetBodies));
}

ZHMTypeInfo SCautiousSearchGroupSaveData::TypeInfo = ZHMTypeInfo("SCautiousSearchGroupSaveData", sizeof(SCautiousSearchGroupSaveData), alignof(SCautiousSearchGroupSaveData), SCautiousSearchGroupSaveData::WriteJson, SCautiousSearchGroupSaveData::WriteSimpleJson, SCautiousSearchGroupSaveData::FromSimpleJson, SCautiousSearchGroupSaveData::Serialize);

void SCautiousSearchGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousSearchGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_searchNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_searchNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_assistantApproachNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint16") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_assistantApproachNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eGroupState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZCautiousSearchGroup.ESearchGroupState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eGroupState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZCautiousSearchGroup.ESearchGroupState", static_cast<int>(s_Object->m_eGroupState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eAssistantState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZCautiousSearchGroup.EAssistantState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eAssistantState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZCautiousSearchGroup.EAssistantState", static_cast<int>(s_Object->m_eAssistantState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousSearchGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousSearchGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_searchNode") << ":";
	p_Stream << s_Object->m_searchNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_assistantApproachNode") << ":";
	p_Stream << s_Object->m_assistantApproachNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_eGroupState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZCautiousSearchGroup.ESearchGroupState", static_cast<int>(s_Object->m_eGroupState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eAssistantState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZCautiousSearchGroup.EAssistantState", static_cast<int>(s_Object->m_eAssistantState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << s_Object->m_pAssistant;

	p_Stream << "}";
}

void SCautiousSearchGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCautiousSearchGroupSaveData s_Object;

	s_Object.m_searchNode = static_cast<uint16>(int64_t(p_Document["m_searchNode"]));

	s_Object.m_assistantApproachNode = static_cast<uint16>(int64_t(p_Document["m_assistantApproachNode"]));

	s_Object.m_eGroupState = static_cast<ZCautiousSearchGroup_ESearchGroupState>(ZHMEnums::GetEnumValueByName("ZCautiousSearchGroup.ESearchGroupState", std::string_view(p_Document["m_eGroupState"])));

	s_Object.m_eAssistantState = static_cast<ZCautiousSearchGroup_EAssistantState>(ZHMEnums::GetEnumValueByName("ZCautiousSearchGroup.EAssistantState", std::string_view(p_Document["m_eAssistantState"])));

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	s_Object.m_pAssistant = static_cast<uint32>(int64_t(p_Document["m_pAssistant"]));

	*reinterpret_cast<SCautiousSearchGroupSaveData*>(p_Target) = s_Object;
}

void SCautiousSearchGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCautiousSearchGroupSaveData*>(p_Object);

}

ZHMTypeInfo ZApproachOrder_SApproachOrderSaveData::TypeInfo = ZHMTypeInfo("ZApproachOrder.SApproachOrderSaveData", sizeof(ZApproachOrder_SApproachOrderSaveData), alignof(ZApproachOrder_SApproachOrderSaveData), ZApproachOrder_SApproachOrderSaveData::WriteJson, ZApproachOrder_SApproachOrderSaveData::WriteSimpleJson, ZApproachOrder_SApproachOrderSaveData::FromSimpleJson, ZApproachOrder_SApproachOrderSaveData::Serialize);

void ZApproachOrder_SApproachOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZApproachOrder_SApproachOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vStopDirection") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vStopDirection, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_style") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZApproachOrder.EApproachStyle") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_style) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZApproachOrder.EApproachStyle", static_cast<int>(s_Object->m_style))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceStand") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForceStand;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopActFast") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStopActFast;
	p_Stream << "}";

	p_Stream << "}";
}

void ZApproachOrder_SApproachOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZApproachOrder_SApproachOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vStopDirection") << ":";
	float4::WriteSimpleJson(&s_Object->m_vStopDirection, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_style") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZApproachOrder.EApproachStyle", static_cast<int>(s_Object->m_style)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceStand") << ":";
	p_Stream << s_Object->m_bForceStand;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStopActFast") << ":";
	p_Stream << s_Object->m_bStopActFast;

	p_Stream << "}";
}

void ZApproachOrder_SApproachOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZApproachOrder_SApproachOrderSaveData s_Object;

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vStopDirection"], &s_Item);
		s_Object.m_vStopDirection = s_Item;
	}

	s_Object.m_style = static_cast<ZApproachOrder_EApproachStyle>(ZHMEnums::GetEnumValueByName("ZApproachOrder.EApproachStyle", std::string_view(p_Document["m_style"])));

	s_Object.m_bForceStand = bool(p_Document["m_bForceStand"]);

	s_Object.m_bStopActFast = bool(p_Document["m_bStopActFast"]);

	*reinterpret_cast<ZApproachOrder_SApproachOrderSaveData*>(p_Target) = s_Object;
}

void ZApproachOrder_SApproachOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZApproachOrder_SApproachOrderSaveData*>(p_Object);

	float4::Serialize(&s_Object->m_vStopDirection, p_Serializer, p_OwnOffset + offsetof(ZApproachOrder_SApproachOrderSaveData, m_vStopDirection));
}

ZHMTypeInfo SActorStandInEntitiesSaveData::TypeInfo = ZHMTypeInfo("SActorStandInEntitiesSaveData", sizeof(SActorStandInEntitiesSaveData), alignof(SActorStandInEntitiesSaveData), SActorStandInEntitiesSaveData::WriteJson, SActorStandInEntitiesSaveData::WriteSimpleJson, SActorStandInEntitiesSaveData::FromSimpleJson, SActorStandInEntitiesSaveData::Serialize);

void SActorStandInEntitiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorStandInEntitiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorStandInSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorStandInSaveData") << "," << JsonStr("$val") << ":";
		SActorStandInSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActorStandInEntitiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorStandInEntitiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SActorStandInSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorStandInEntitiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorStandInEntitiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SActorStandInSaveData s_ArrayItem0;
		SActorStandInSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SActorStandInEntitiesSaveData*>(p_Target) = s_Object;
}

void SActorStandInEntitiesSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorStandInEntitiesSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SActorStandInEntitiesSaveData, m_aEntities));
	TArray<SActorStandInSaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SActorStandInEntitiesSaveData, m_aData));
}

ZHMTypeInfo ZBitArray::TypeInfo = ZHMTypeInfo("ZBitArray", sizeof(ZBitArray), alignof(ZBitArray), ZBitArray::WriteJson, ZBitArray::WriteSimpleJson, ZBitArray::FromSimpleJson, ZBitArray::Serialize);

void ZBitArray::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZBitArray*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aBytes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint8>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBytes.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBytes[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item0);
		p_Stream << "}";

		if (i < s_Object->m_aBytes.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSize;
	p_Stream << "}";

	p_Stream << "}";
}

void ZBitArray::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZBitArray*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aBytes") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aBytes.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aBytes[i];
		p_Stream << static_cast<int>(s_Item0);

		if (i < s_Object->m_aBytes.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSize") << ":";
	p_Stream << s_Object->m_nSize;

	p_Stream << "}";
}

void ZBitArray::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZBitArray s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aBytes"])
	{
		s_Object.m_aBytes.push_back(static_cast<uint8>(int64_t(s_Item0)));
	}

	s_Object.m_nSize = static_cast<uint32>(int64_t(p_Document["m_nSize"]));

	*reinterpret_cast<ZBitArray*>(p_Target) = s_Object;
}

void ZBitArray::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZBitArray*>(p_Object);

	TArray<uint8>::Serialize(&s_Object->m_aBytes, p_Serializer, p_OwnOffset + offsetof(ZBitArray, m_aBytes));
}

ZHMTypeInfo SReasoningGrid::TypeInfo = ZHMTypeInfo("SReasoningGrid", sizeof(SReasoningGrid), alignof(SReasoningGrid), SReasoningGrid::WriteJson, SReasoningGrid::WriteSimpleJson, SReasoningGrid::FromSimpleJson, SReasoningGrid::Serialize);

void SReasoningGrid::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SReasoningGrid*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_WaypointList") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SGWaypoint>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_WaypointList.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_WaypointList[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SGWaypoint") << "," << JsonStr("$val") << ":";
		SGWaypoint::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_WaypointList.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_LowVisibilityBits") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBitArray") << "," << JsonStr("$val") << ":";
	ZBitArray::WriteJson(&s_Object->m_LowVisibilityBits, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_HighVisibilityBits") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBitArray") << "," << JsonStr("$val") << ":";
	ZBitArray::WriteJson(&s_Object->m_HighVisibilityBits, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Properties") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SGProperties") << "," << JsonStr("$val") << ":";
	SGProperties::WriteJson(&s_Object->m_Properties, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nNodeCount") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nNodeCount;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pVisibilityData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint8>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_pVisibilityData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_pVisibilityData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint8") << "," << JsonStr("$val") << ":";
		p_Stream << static_cast<int>(s_Item0);
		p_Stream << "}";

		if (i < s_Object->m_pVisibilityData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_deadEndData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZBitArray") << "," << JsonStr("$val") << ":";
	ZBitArray::WriteJson(&s_Object->m_deadEndData, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SReasoningGrid::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SReasoningGrid*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_WaypointList") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_WaypointList.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_WaypointList[i];
		SGWaypoint::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_WaypointList.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_LowVisibilityBits") << ":";
	ZBitArray::WriteSimpleJson(&s_Object->m_LowVisibilityBits, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_HighVisibilityBits") << ":";
	ZBitArray::WriteSimpleJson(&s_Object->m_HighVisibilityBits, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Properties") << ":";
	SGProperties::WriteSimpleJson(&s_Object->m_Properties, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nNodeCount") << ":";
	p_Stream << s_Object->m_nNodeCount;
	p_Stream << ",";

	p_Stream << JsonStr("m_pVisibilityData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_pVisibilityData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_pVisibilityData[i];
		p_Stream << static_cast<int>(s_Item0);

		if (i < s_Object->m_pVisibilityData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_deadEndData") << ":";
	ZBitArray::WriteSimpleJson(&s_Object->m_deadEndData, p_Stream);

	p_Stream << "}";
}

void SReasoningGrid::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SReasoningGrid s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_WaypointList"])
	{
		SGWaypoint s_ArrayItem0;
		SGWaypoint::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_WaypointList.push_back(s_ArrayItem0);
	}

	{
		ZBitArray s_Item;
		ZBitArray::FromSimpleJson(p_Document["m_LowVisibilityBits"], &s_Item);
		s_Object.m_LowVisibilityBits = s_Item;
	}

	{
		ZBitArray s_Item;
		ZBitArray::FromSimpleJson(p_Document["m_HighVisibilityBits"], &s_Item);
		s_Object.m_HighVisibilityBits = s_Item;
	}

	{
		SGProperties s_Item;
		SGProperties::FromSimpleJson(p_Document["m_Properties"], &s_Item);
		s_Object.m_Properties = s_Item;
	}

	s_Object.m_nNodeCount = static_cast<uint32>(int64_t(p_Document["m_nNodeCount"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_pVisibilityData"])
	{
		s_Object.m_pVisibilityData.push_back(static_cast<uint8>(int64_t(s_Item0)));
	}

	{
		ZBitArray s_Item;
		ZBitArray::FromSimpleJson(p_Document["m_deadEndData"], &s_Item);
		s_Object.m_deadEndData = s_Item;
	}

	*reinterpret_cast<SReasoningGrid*>(p_Target) = s_Object;
}

void SReasoningGrid::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SReasoningGrid*>(p_Object);

	TArray<SGWaypoint>::Serialize(&s_Object->m_WaypointList, p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, m_WaypointList));
	ZBitArray::Serialize(&s_Object->m_LowVisibilityBits, p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, m_LowVisibilityBits));
	ZBitArray::Serialize(&s_Object->m_HighVisibilityBits, p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, m_HighVisibilityBits));
	SGProperties::Serialize(&s_Object->m_Properties, p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, m_Properties));
	TArray<uint8>::Serialize(&s_Object->m_pVisibilityData, p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, m_pVisibilityData));
	ZBitArray::Serialize(&s_Object->m_deadEndData, p_Serializer, p_OwnOffset + offsetof(SReasoningGrid, m_deadEndData));
}

ZHMTypeInfo SActorProxySaveData::TypeInfo = ZHMTypeInfo("SActorProxySaveData", sizeof(SActorProxySaveData), alignof(SActorProxySaveData), SActorProxySaveData::WriteJson, SActorProxySaveData::WriteSimpleJson, SActorProxySaveData::FromSimpleJson, SActorProxySaveData::Serialize);

void SActorProxySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorProxySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rActor;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorProxySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorProxySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rActor") << ":";
	p_Stream << s_Object->m_rActor;

	p_Stream << "}";
}

void SActorProxySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorProxySaveData s_Object;

	s_Object.m_rActor = static_cast<uint32>(int64_t(p_Document["m_rActor"]));

	*reinterpret_cast<SActorProxySaveData*>(p_Target) = s_Object;
}

void SActorProxySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorProxySaveData*>(p_Object);

}

ZHMTypeInfo SActorProxiesSaveData::TypeInfo = ZHMTypeInfo("SActorProxiesSaveData", sizeof(SActorProxiesSaveData), alignof(SActorProxiesSaveData), SActorProxiesSaveData::WriteJson, SActorProxiesSaveData::WriteSimpleJson, SActorProxiesSaveData::FromSimpleJson, SActorProxiesSaveData::Serialize);

void SActorProxiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorProxiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActorProxySaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorProxySaveData") << "," << JsonStr("$val") << ":";
		SActorProxySaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActorProxiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorProxiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SActorProxySaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActorProxiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorProxiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SActorProxySaveData s_ArrayItem0;
		SActorProxySaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SActorProxiesSaveData*>(p_Target) = s_Object;
}

void SActorProxiesSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorProxiesSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SActorProxiesSaveData, m_aEntities));
	TArray<SActorProxySaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SActorProxiesSaveData, m_aData));
}

ZHMTypeInfo SItemKeywordProxiesSaveData::TypeInfo = ZHMTypeInfo("SItemKeywordProxiesSaveData", sizeof(SItemKeywordProxiesSaveData), alignof(SItemKeywordProxiesSaveData), SItemKeywordProxiesSaveData::WriteJson, SItemKeywordProxiesSaveData::WriteSimpleJson, SItemKeywordProxiesSaveData::FromSimpleJson, SItemKeywordProxiesSaveData::Serialize);

void SItemKeywordProxiesSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemKeywordProxiesSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SItemKeywordProxySaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItemKeywordProxySaveData") << "," << JsonStr("$val") << ":";
		SItemKeywordProxySaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SItemKeywordProxiesSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SItemKeywordProxiesSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SItemKeywordProxySaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SItemKeywordProxiesSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SItemKeywordProxiesSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SItemKeywordProxySaveData s_ArrayItem0;
		SItemKeywordProxySaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SItemKeywordProxiesSaveData*>(p_Target) = s_Object;
}

void SItemKeywordProxiesSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SItemKeywordProxiesSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(SItemKeywordProxiesSaveData, m_aEntities));
	TArray<SItemKeywordProxySaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(SItemKeywordProxiesSaveData, m_aData));
}

ZHMTypeInfo STrapsSaveData::TypeInfo = ZHMTypeInfo("STrapsSaveData", sizeof(STrapsSaveData), alignof(STrapsSaveData), STrapsSaveData::WriteJson, STrapsSaveData::WriteSimpleJson, STrapsSaveData::FromSimpleJson, STrapsSaveData::Serialize);

void STrapsSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STrapsSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SItsATrapSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItsATrapSaveData") << "," << JsonStr("$val") << ":";
		SItsATrapSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void STrapsSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STrapsSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntities") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntities.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntities[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEntities.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aData") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aData.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aData[i];
		SItsATrapSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aData.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void STrapsSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STrapsSaveData s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntities"])
	{
		s_Object.m_aEntities.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aData"])
	{
		SItsATrapSaveData s_ArrayItem0;
		SItsATrapSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aData.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<STrapsSaveData*>(p_Target) = s_Object;
}

void STrapsSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STrapsSaveData*>(p_Object);

	TArray<uint32>::Serialize(&s_Object->m_aEntities, p_Serializer, p_OwnOffset + offsetof(STrapsSaveData, m_aEntities));
	TArray<SItsATrapSaveData>::Serialize(&s_Object->m_aData, p_Serializer, p_OwnOffset + offsetof(STrapsSaveData, m_aData));
}

ZHMTypeInfo SGameEntitySaveData::TypeInfo = ZHMTypeInfo("SGameEntitySaveData", sizeof(SGameEntitySaveData), alignof(SGameEntitySaveData), SGameEntitySaveData::WriteJson, SGameEntitySaveData::WriteSimpleJson, SGameEntitySaveData::FromSimpleJson, SGameEntitySaveData::Serialize);

void SGameEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_DoorData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SDoorsSaveData") << "," << JsonStr("$val") << ":";
	SDoorsSaveData::WriteJson(&s_Object->m_DoorData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ItemsData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItemsSaveData") << "," << JsonStr("$val") << ":";
	SItemsSaveData::WriteJson(&s_Object->m_ItemsData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_VolumeTriggersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVolumeTriggersSaveData") << "," << JsonStr("$val") << ":";
	SVolumeTriggersSaveData::WriteJson(&s_Object->m_VolumeTriggersData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MathMultipliesData_float32") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultipliesSaveData_float32") << "," << JsonStr("$val") << ":";
	SMathMultipliesSaveData_float32::WriteJson(&s_Object->m_MathMultipliesData_float32, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MathMultipliesData_Vector2") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultipliesSaveData_SVector2") << "," << JsonStr("$val") << ":";
	SMathMultipliesSaveData_SVector2::WriteJson(&s_Object->m_MathMultipliesData_Vector2, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MathMultipliesData_Vector3") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultipliesSaveData_SVector3") << "," << JsonStr("$val") << ":";
	SMathMultipliesSaveData_SVector3::WriteJson(&s_Object->m_MathMultipliesData_Vector3, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MathMultipliesData_Vector4") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathMultipliesSaveData_SVector4") << "," << JsonStr("$val") << ":";
	SMathMultipliesSaveData_SVector4::WriteJson(&s_Object->m_MathMultipliesData_Vector4, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ShotListenersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SShotListenersSaveData") << "," << JsonStr("$val") << ":";
	SShotListenersSaveData::WriteJson(&s_Object->m_ShotListenersData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_TrapsData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("STrapsSaveData") << "," << JsonStr("$val") << ":";
	STrapsSaveData::WriteJson(&s_Object->m_TrapsData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ActorProxiesData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorProxiesSaveData") << "," << JsonStr("$val") << ":";
	SActorProxiesSaveData::WriteJson(&s_Object->m_ActorProxiesData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ActorStandInEntitiesData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorStandInEntitiesSaveData") << "," << JsonStr("$val") << ":";
	SActorStandInEntitiesSaveData::WriteJson(&s_Object->m_ActorStandInEntitiesData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ActorBoneAttachmentsData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorBoneAttachmentsSaveData") << "," << JsonStr("$val") << ":";
	SActorBoneAttachmentsSaveData::WriteJson(&s_Object->m_ActorBoneAttachmentsData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ActorKeywordProxiesData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActorKeywordProxiesSaveData") << "," << JsonStr("$val") << ":";
	SActorKeywordProxiesSaveData::WriteJson(&s_Object->m_ActorKeywordProxiesData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_ItemKeywordProxiesData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SItemKeywordProxiesSaveData") << "," << JsonStr("$val") << ":";
	SItemKeywordProxiesSaveData::WriteJson(&s_Object->m_ItemKeywordProxiesData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_LampCoreData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SLampCoreSaveData") << "," << JsonStr("$val") << ":";
	SLampCoreSaveData::WriteJson(&s_Object->m_LampCoreData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_VIPEvacuationNodesData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVIPEvacuationNodesSaveData") << "," << JsonStr("$val") << ":";
	SVIPEvacuationNodesSaveData::WriteJson(&s_Object->m_VIPEvacuationNodesData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CollisionControllerAspectsData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCollisionControllerAspectsSaveData") << "," << JsonStr("$val") << ":";
	SCollisionControllerAspectsSaveData::WriteJson(&s_Object->m_CollisionControllerAspectsData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_BodyContainersData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SBodyContainersSaveData") << "," << JsonStr("$val") << ":";
	SBodyContainersSaveData::WriteJson(&s_Object->m_BodyContainersData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MathLerpsData_float32") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpsSaveData_float32") << "," << JsonStr("$val") << ":";
	SMathLerpsSaveData_float32::WriteJson(&s_Object->m_MathLerpsData_float32, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MathLerpsData_SVector2") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpsSaveData_SVector2") << "," << JsonStr("$val") << ":";
	SMathLerpsSaveData_SVector2::WriteJson(&s_Object->m_MathLerpsData_SVector2, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MathLerpsData_SVector3") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpsSaveData_SVector3") << "," << JsonStr("$val") << ":";
	SMathLerpsSaveData_SVector3::WriteJson(&s_Object->m_MathLerpsData_SVector3, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MathLerpsData_SVector4") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpsSaveData_SVector4") << "," << JsonStr("$val") << ":";
	SMathLerpsSaveData_SVector4::WriteJson(&s_Object->m_MathLerpsData_SVector4, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MathLerpsData_SColorRGB") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpsSaveData_SColorRGB") << "," << JsonStr("$val") << ":";
	SMathLerpsSaveData_SColorRGB::WriteJson(&s_Object->m_MathLerpsData_SColorRGB, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MathLerpsData_SColorRGBA") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMathLerpsSaveData_SColorRGBA") << "," << JsonStr("$val") << ":";
	SMathLerpsSaveData_SColorRGBA::WriteJson(&s_Object->m_MathLerpsData_SColorRGBA, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SGameEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SGameEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_DoorData") << ":";
	SDoorsSaveData::WriteSimpleJson(&s_Object->m_DoorData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ItemsData") << ":";
	SItemsSaveData::WriteSimpleJson(&s_Object->m_ItemsData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_VolumeTriggersData") << ":";
	SVolumeTriggersSaveData::WriteSimpleJson(&s_Object->m_VolumeTriggersData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_MathMultipliesData_float32") << ":";
	SMathMultipliesSaveData_float32::WriteSimpleJson(&s_Object->m_MathMultipliesData_float32, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_MathMultipliesData_Vector2") << ":";
	SMathMultipliesSaveData_SVector2::WriteSimpleJson(&s_Object->m_MathMultipliesData_Vector2, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_MathMultipliesData_Vector3") << ":";
	SMathMultipliesSaveData_SVector3::WriteSimpleJson(&s_Object->m_MathMultipliesData_Vector3, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_MathMultipliesData_Vector4") << ":";
	SMathMultipliesSaveData_SVector4::WriteSimpleJson(&s_Object->m_MathMultipliesData_Vector4, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ShotListenersData") << ":";
	SShotListenersSaveData::WriteSimpleJson(&s_Object->m_ShotListenersData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_TrapsData") << ":";
	STrapsSaveData::WriteSimpleJson(&s_Object->m_TrapsData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ActorProxiesData") << ":";
	SActorProxiesSaveData::WriteSimpleJson(&s_Object->m_ActorProxiesData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ActorStandInEntitiesData") << ":";
	SActorStandInEntitiesSaveData::WriteSimpleJson(&s_Object->m_ActorStandInEntitiesData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ActorBoneAttachmentsData") << ":";
	SActorBoneAttachmentsSaveData::WriteSimpleJson(&s_Object->m_ActorBoneAttachmentsData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ActorKeywordProxiesData") << ":";
	SActorKeywordProxiesSaveData::WriteSimpleJson(&s_Object->m_ActorKeywordProxiesData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_ItemKeywordProxiesData") << ":";
	SItemKeywordProxiesSaveData::WriteSimpleJson(&s_Object->m_ItemKeywordProxiesData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_LampCoreData") << ":";
	SLampCoreSaveData::WriteSimpleJson(&s_Object->m_LampCoreData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_VIPEvacuationNodesData") << ":";
	SVIPEvacuationNodesSaveData::WriteSimpleJson(&s_Object->m_VIPEvacuationNodesData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_CollisionControllerAspectsData") << ":";
	SCollisionControllerAspectsSaveData::WriteSimpleJson(&s_Object->m_CollisionControllerAspectsData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_BodyContainersData") << ":";
	SBodyContainersSaveData::WriteSimpleJson(&s_Object->m_BodyContainersData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_MathLerpsData_float32") << ":";
	SMathLerpsSaveData_float32::WriteSimpleJson(&s_Object->m_MathLerpsData_float32, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_MathLerpsData_SVector2") << ":";
	SMathLerpsSaveData_SVector2::WriteSimpleJson(&s_Object->m_MathLerpsData_SVector2, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_MathLerpsData_SVector3") << ":";
	SMathLerpsSaveData_SVector3::WriteSimpleJson(&s_Object->m_MathLerpsData_SVector3, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_MathLerpsData_SVector4") << ":";
	SMathLerpsSaveData_SVector4::WriteSimpleJson(&s_Object->m_MathLerpsData_SVector4, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_MathLerpsData_SColorRGB") << ":";
	SMathLerpsSaveData_SColorRGB::WriteSimpleJson(&s_Object->m_MathLerpsData_SColorRGB, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_MathLerpsData_SColorRGBA") << ":";
	SMathLerpsSaveData_SColorRGBA::WriteSimpleJson(&s_Object->m_MathLerpsData_SColorRGBA, p_Stream);

	p_Stream << "}";
}

void SGameEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SGameEntitySaveData s_Object;

	{
		SDoorsSaveData s_Item;
		SDoorsSaveData::FromSimpleJson(p_Document["m_DoorData"], &s_Item);
		s_Object.m_DoorData = s_Item;
	}

	{
		SItemsSaveData s_Item;
		SItemsSaveData::FromSimpleJson(p_Document["m_ItemsData"], &s_Item);
		s_Object.m_ItemsData = s_Item;
	}

	{
		SVolumeTriggersSaveData s_Item;
		SVolumeTriggersSaveData::FromSimpleJson(p_Document["m_VolumeTriggersData"], &s_Item);
		s_Object.m_VolumeTriggersData = s_Item;
	}

	{
		SMathMultipliesSaveData_float32 s_Item;
		SMathMultipliesSaveData_float32::FromSimpleJson(p_Document["m_MathMultipliesData_float32"], &s_Item);
		s_Object.m_MathMultipliesData_float32 = s_Item;
	}

	{
		SMathMultipliesSaveData_SVector2 s_Item;
		SMathMultipliesSaveData_SVector2::FromSimpleJson(p_Document["m_MathMultipliesData_Vector2"], &s_Item);
		s_Object.m_MathMultipliesData_Vector2 = s_Item;
	}

	{
		SMathMultipliesSaveData_SVector3 s_Item;
		SMathMultipliesSaveData_SVector3::FromSimpleJson(p_Document["m_MathMultipliesData_Vector3"], &s_Item);
		s_Object.m_MathMultipliesData_Vector3 = s_Item;
	}

	{
		SMathMultipliesSaveData_SVector4 s_Item;
		SMathMultipliesSaveData_SVector4::FromSimpleJson(p_Document["m_MathMultipliesData_Vector4"], &s_Item);
		s_Object.m_MathMultipliesData_Vector4 = s_Item;
	}

	{
		SShotListenersSaveData s_Item;
		SShotListenersSaveData::FromSimpleJson(p_Document["m_ShotListenersData"], &s_Item);
		s_Object.m_ShotListenersData = s_Item;
	}

	{
		STrapsSaveData s_Item;
		STrapsSaveData::FromSimpleJson(p_Document["m_TrapsData"], &s_Item);
		s_Object.m_TrapsData = s_Item;
	}

	{
		SActorProxiesSaveData s_Item;
		SActorProxiesSaveData::FromSimpleJson(p_Document["m_ActorProxiesData"], &s_Item);
		s_Object.m_ActorProxiesData = s_Item;
	}

	{
		SActorStandInEntitiesSaveData s_Item;
		SActorStandInEntitiesSaveData::FromSimpleJson(p_Document["m_ActorStandInEntitiesData"], &s_Item);
		s_Object.m_ActorStandInEntitiesData = s_Item;
	}

	{
		SActorBoneAttachmentsSaveData s_Item;
		SActorBoneAttachmentsSaveData::FromSimpleJson(p_Document["m_ActorBoneAttachmentsData"], &s_Item);
		s_Object.m_ActorBoneAttachmentsData = s_Item;
	}

	{
		SActorKeywordProxiesSaveData s_Item;
		SActorKeywordProxiesSaveData::FromSimpleJson(p_Document["m_ActorKeywordProxiesData"], &s_Item);
		s_Object.m_ActorKeywordProxiesData = s_Item;
	}

	{
		SItemKeywordProxiesSaveData s_Item;
		SItemKeywordProxiesSaveData::FromSimpleJson(p_Document["m_ItemKeywordProxiesData"], &s_Item);
		s_Object.m_ItemKeywordProxiesData = s_Item;
	}

	{
		SLampCoreSaveData s_Item;
		SLampCoreSaveData::FromSimpleJson(p_Document["m_LampCoreData"], &s_Item);
		s_Object.m_LampCoreData = s_Item;
	}

	{
		SVIPEvacuationNodesSaveData s_Item;
		SVIPEvacuationNodesSaveData::FromSimpleJson(p_Document["m_VIPEvacuationNodesData"], &s_Item);
		s_Object.m_VIPEvacuationNodesData = s_Item;
	}

	{
		SCollisionControllerAspectsSaveData s_Item;
		SCollisionControllerAspectsSaveData::FromSimpleJson(p_Document["m_CollisionControllerAspectsData"], &s_Item);
		s_Object.m_CollisionControllerAspectsData = s_Item;
	}

	{
		SBodyContainersSaveData s_Item;
		SBodyContainersSaveData::FromSimpleJson(p_Document["m_BodyContainersData"], &s_Item);
		s_Object.m_BodyContainersData = s_Item;
	}

	{
		SMathLerpsSaveData_float32 s_Item;
		SMathLerpsSaveData_float32::FromSimpleJson(p_Document["m_MathLerpsData_float32"], &s_Item);
		s_Object.m_MathLerpsData_float32 = s_Item;
	}

	{
		SMathLerpsSaveData_SVector2 s_Item;
		SMathLerpsSaveData_SVector2::FromSimpleJson(p_Document["m_MathLerpsData_SVector2"], &s_Item);
		s_Object.m_MathLerpsData_SVector2 = s_Item;
	}

	{
		SMathLerpsSaveData_SVector3 s_Item;
		SMathLerpsSaveData_SVector3::FromSimpleJson(p_Document["m_MathLerpsData_SVector3"], &s_Item);
		s_Object.m_MathLerpsData_SVector3 = s_Item;
	}

	{
		SMathLerpsSaveData_SVector4 s_Item;
		SMathLerpsSaveData_SVector4::FromSimpleJson(p_Document["m_MathLerpsData_SVector4"], &s_Item);
		s_Object.m_MathLerpsData_SVector4 = s_Item;
	}

	{
		SMathLerpsSaveData_SColorRGB s_Item;
		SMathLerpsSaveData_SColorRGB::FromSimpleJson(p_Document["m_MathLerpsData_SColorRGB"], &s_Item);
		s_Object.m_MathLerpsData_SColorRGB = s_Item;
	}

	{
		SMathLerpsSaveData_SColorRGBA s_Item;
		SMathLerpsSaveData_SColorRGBA::FromSimpleJson(p_Document["m_MathLerpsData_SColorRGBA"], &s_Item);
		s_Object.m_MathLerpsData_SColorRGBA = s_Item;
	}

	*reinterpret_cast<SGameEntitySaveData*>(p_Target) = s_Object;
}

void SGameEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SGameEntitySaveData*>(p_Object);

	SDoorsSaveData::Serialize(&s_Object->m_DoorData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_DoorData));
	SItemsSaveData::Serialize(&s_Object->m_ItemsData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_ItemsData));
	SVolumeTriggersSaveData::Serialize(&s_Object->m_VolumeTriggersData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_VolumeTriggersData));
	SMathMultipliesSaveData_float32::Serialize(&s_Object->m_MathMultipliesData_float32, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_MathMultipliesData_float32));
	SMathMultipliesSaveData_SVector2::Serialize(&s_Object->m_MathMultipliesData_Vector2, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_MathMultipliesData_Vector2));
	SMathMultipliesSaveData_SVector3::Serialize(&s_Object->m_MathMultipliesData_Vector3, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_MathMultipliesData_Vector3));
	SMathMultipliesSaveData_SVector4::Serialize(&s_Object->m_MathMultipliesData_Vector4, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_MathMultipliesData_Vector4));
	SShotListenersSaveData::Serialize(&s_Object->m_ShotListenersData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_ShotListenersData));
	STrapsSaveData::Serialize(&s_Object->m_TrapsData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_TrapsData));
	SActorProxiesSaveData::Serialize(&s_Object->m_ActorProxiesData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_ActorProxiesData));
	SActorStandInEntitiesSaveData::Serialize(&s_Object->m_ActorStandInEntitiesData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_ActorStandInEntitiesData));
	SActorBoneAttachmentsSaveData::Serialize(&s_Object->m_ActorBoneAttachmentsData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_ActorBoneAttachmentsData));
	SActorKeywordProxiesSaveData::Serialize(&s_Object->m_ActorKeywordProxiesData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_ActorKeywordProxiesData));
	SItemKeywordProxiesSaveData::Serialize(&s_Object->m_ItemKeywordProxiesData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_ItemKeywordProxiesData));
	SLampCoreSaveData::Serialize(&s_Object->m_LampCoreData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_LampCoreData));
	SVIPEvacuationNodesSaveData::Serialize(&s_Object->m_VIPEvacuationNodesData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_VIPEvacuationNodesData));
	SCollisionControllerAspectsSaveData::Serialize(&s_Object->m_CollisionControllerAspectsData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_CollisionControllerAspectsData));
	SBodyContainersSaveData::Serialize(&s_Object->m_BodyContainersData, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_BodyContainersData));
	SMathLerpsSaveData_float32::Serialize(&s_Object->m_MathLerpsData_float32, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_MathLerpsData_float32));
	SMathLerpsSaveData_SVector2::Serialize(&s_Object->m_MathLerpsData_SVector2, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_MathLerpsData_SVector2));
	SMathLerpsSaveData_SVector3::Serialize(&s_Object->m_MathLerpsData_SVector3, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_MathLerpsData_SVector3));
	SMathLerpsSaveData_SVector4::Serialize(&s_Object->m_MathLerpsData_SVector4, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_MathLerpsData_SVector4));
	SMathLerpsSaveData_SColorRGB::Serialize(&s_Object->m_MathLerpsData_SColorRGB, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_MathLerpsData_SColorRGB));
	SMathLerpsSaveData_SColorRGBA::Serialize(&s_Object->m_MathLerpsData_SColorRGBA, p_Serializer, p_OwnOffset + offsetof(SGameEntitySaveData, m_MathLerpsData_SColorRGBA));
}

ZHMTypeInfo SPersistentEntitySaveDataList::TypeInfo = ZHMTypeInfo("SPersistentEntitySaveDataList", sizeof(SPersistentEntitySaveDataList), alignof(SPersistentEntitySaveDataList), SPersistentEntitySaveDataList::WriteJson, SPersistentEntitySaveDataList::WriteSimpleJson, SPersistentEntitySaveDataList::FromSimpleJson, SPersistentEntitySaveDataList::Serialize);

void SPersistentEntitySaveDataList::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPersistentEntitySaveDataList*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_aEntityDatas") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SPersistentEntitySaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityDatas.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityDatas[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SPersistentEntitySaveData") << "," << JsonStr("$val") << ":";
		SPersistentEntitySaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aEntityDatas.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_mDynamicObjectIDGenerationKeys") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint64>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mDynamicObjectIDGenerationKeys.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_mDynamicObjectIDGenerationKeys[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_mDynamicObjectIDGenerationKeys.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_mDynamicObjectIDGenerationValues") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint64>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mDynamicObjectIDGenerationValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_mDynamicObjectIDGenerationValues[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_mDynamicObjectIDGenerationValues.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SPersistentEntitySaveDataList::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPersistentEntitySaveDataList*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_aEntityDatas") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEntityDatas.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEntityDatas[i];
		SPersistentEntitySaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aEntityDatas.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_mDynamicObjectIDGenerationKeys") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mDynamicObjectIDGenerationKeys.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_mDynamicObjectIDGenerationKeys[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_mDynamicObjectIDGenerationKeys.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_mDynamicObjectIDGenerationValues") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_mDynamicObjectIDGenerationValues.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_mDynamicObjectIDGenerationValues[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_mDynamicObjectIDGenerationValues.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SPersistentEntitySaveDataList::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPersistentEntitySaveDataList s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEntityDatas"])
	{
		SPersistentEntitySaveData s_ArrayItem0;
		SPersistentEntitySaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aEntityDatas.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_mDynamicObjectIDGenerationKeys"])
	{
		s_Object.m_mDynamicObjectIDGenerationKeys.push_back(uint64(s_Item0));
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_mDynamicObjectIDGenerationValues"])
	{
		s_Object.m_mDynamicObjectIDGenerationValues.push_back(uint64(s_Item0));
	}

	*reinterpret_cast<SPersistentEntitySaveDataList*>(p_Target) = s_Object;
}

void SPersistentEntitySaveDataList::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SPersistentEntitySaveDataList*>(p_Object);

	TArray<SPersistentEntitySaveData>::Serialize(&s_Object->m_aEntityDatas, p_Serializer, p_OwnOffset + offsetof(SPersistentEntitySaveDataList, m_aEntityDatas));
	TArray<uint64>::Serialize(&s_Object->m_mDynamicObjectIDGenerationKeys, p_Serializer, p_OwnOffset + offsetof(SPersistentEntitySaveDataList, m_mDynamicObjectIDGenerationKeys));
	TArray<uint64>::Serialize(&s_Object->m_mDynamicObjectIDGenerationValues, p_Serializer, p_OwnOffset + offsetof(SPersistentEntitySaveDataList, m_mDynamicObjectIDGenerationValues));
}

ZHMTypeInfo ZHM5AudioEventConsumer_SAudioAnimationEventData::TypeInfo = ZHMTypeInfo("ZHM5AudioEventConsumer.SAudioAnimationEventData", sizeof(ZHM5AudioEventConsumer_SAudioAnimationEventData), alignof(ZHM5AudioEventConsumer_SAudioAnimationEventData), ZHM5AudioEventConsumer_SAudioAnimationEventData::WriteJson, ZHM5AudioEventConsumer_SAudioAnimationEventData::WriteSimpleJson, ZHM5AudioEventConsumer_SAudioAnimationEventData::FromSimpleJson, ZHM5AudioEventConsumer_SAudioAnimationEventData::Serialize);

void ZHM5AudioEventConsumer_SAudioAnimationEventData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5AudioEventConsumer_SAudioAnimationEventData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_pAudioEventRes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZResourcePtr") << "," << JsonStr("$val") << ":";
	ZResourcePtr::WriteJson(&s_Object->m_pAudioEventRes, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fAttenuation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fAttenuation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fPitch") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fPitch;
	p_Stream << "}";

	p_Stream << "}";
}

void ZHM5AudioEventConsumer_SAudioAnimationEventData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZHM5AudioEventConsumer_SAudioAnimationEventData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_pAudioEventRes") << ":";
	ZResourcePtr::WriteSimpleJson(&s_Object->m_pAudioEventRes, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fAttenuation") << ":";
	p_Stream << s_Object->m_fAttenuation;
	p_Stream << ",";

	p_Stream << JsonStr("m_fPitch") << ":";
	p_Stream << s_Object->m_fPitch;

	p_Stream << "}";
}

void ZHM5AudioEventConsumer_SAudioAnimationEventData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZHM5AudioEventConsumer_SAudioAnimationEventData s_Object;

	{
		ZResourcePtr s_Item;
		ZResourcePtr::FromSimpleJson(p_Document["m_pAudioEventRes"], &s_Item);
		s_Object.m_pAudioEventRes = s_Item;
	}

	s_Object.m_fAttenuation = static_cast<float32>(double(p_Document["m_fAttenuation"]));

	s_Object.m_fPitch = static_cast<float32>(double(p_Document["m_fPitch"]));

	*reinterpret_cast<ZHM5AudioEventConsumer_SAudioAnimationEventData*>(p_Target) = s_Object;
}

void ZHM5AudioEventConsumer_SAudioAnimationEventData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZHM5AudioEventConsumer_SAudioAnimationEventData*>(p_Object);

	ZResourcePtr::Serialize(&s_Object->m_pAudioEventRes, p_Serializer, p_OwnOffset + offsetof(ZHM5AudioEventConsumer_SAudioAnimationEventData, m_pAudioEventRes));
}

ZHMTypeInfo SConversationPart::TypeInfo = ZHMTypeInfo("SConversationPart", sizeof(SConversationPart), alignof(SConversationPart), SConversationPart::WriteJson, SConversationPart::WriteSimpleJson, SConversationPart::FromSimpleJson, SConversationPart::Serialize);

void SConversationPart::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SConversationPart*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_chance") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_chance;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_entries") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SConversationEntry>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_entries.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_entries[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SConversationEntry") << "," << JsonStr("$val") << ":";
		SConversationEntry::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_entries.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SConversationPart::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SConversationPart*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_chance") << ":";
	p_Stream << s_Object->m_chance;
	p_Stream << ",";

	p_Stream << JsonStr("m_entries") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_entries.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_entries[i];
		SConversationEntry::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_entries.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SConversationPart::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SConversationPart s_Object;

	s_Object.m_chance = static_cast<float32>(double(p_Document["m_chance"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_entries"])
	{
		SConversationEntry s_ArrayItem0;
		SConversationEntry::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_entries.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SConversationPart*>(p_Target) = s_Object;
}

void SConversationPart::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SConversationPart*>(p_Object);

	TArray<SConversationEntry>::Serialize(&s_Object->m_entries, p_Serializer, p_OwnOffset + offsetof(SConversationPart, m_entries));
}

ZHMTypeInfo ZDeadBodySituation_SState::TypeInfo = ZHMTypeInfo("ZDeadBodySituation.SState", sizeof(ZDeadBodySituation_SState), alignof(ZDeadBodySituation_SState), ZDeadBodySituation_SState::WriteJson, ZDeadBodySituation_SState::WriteSimpleJson, ZDeadBodySituation_SState::FromSimpleJson, ZDeadBodySituation_SState::Serialize);

void ZDeadBodySituation_SState::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDeadBodySituation_SState*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eFlavor") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZDeadBodySituation.ESituationFlavor") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eFlavor) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZDeadBodySituation.ESituationFlavor", static_cast<int>(s_Object->m_eFlavor))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastEscalateOrder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastEscalateOrder, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tNextStanddownTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tNextStanddownTime, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nSuspiciousDeaths") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nSuspiciousDeaths;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAcknowledged") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAcknowledged;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInspected") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInspected;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAccidentsResolved") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAccidentsResolved;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStanddownComplete") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStanddownComplete;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandDownUnconscious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStandDownUnconscious;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bEscalateUnconscious") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEscalateUnconscious;
	p_Stream << "}";

	p_Stream << "}";
}

void ZDeadBodySituation_SState::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZDeadBodySituation_SState*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eFlavor") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZDeadBodySituation.ESituationFlavor", static_cast<int>(s_Object->m_eFlavor)));
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastEscalateOrder") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastEscalateOrder, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_tNextStanddownTime") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tNextStanddownTime, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nSuspiciousDeaths") << ":";
	p_Stream << s_Object->m_nSuspiciousDeaths;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAcknowledged") << ":";
	p_Stream << s_Object->m_bAcknowledged;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInspected") << ":";
	p_Stream << s_Object->m_bInspected;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAccidentsResolved") << ":";
	p_Stream << s_Object->m_bAccidentsResolved;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStanddownComplete") << ":";
	p_Stream << s_Object->m_bStanddownComplete;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStandDownUnconscious") << ":";
	p_Stream << s_Object->m_bStandDownUnconscious;
	p_Stream << ",";

	p_Stream << JsonStr("m_bEscalateUnconscious") << ":";
	p_Stream << s_Object->m_bEscalateUnconscious;

	p_Stream << "}";
}

void ZDeadBodySituation_SState::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZDeadBodySituation_SState s_Object;

	s_Object.m_eFlavor = static_cast<ZDeadBodySituation_ESituationFlavor>(ZHMEnums::GetEnumValueByName("ZDeadBodySituation.ESituationFlavor", std::string_view(p_Document["m_eFlavor"])));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastEscalateOrder"], &s_Item);
		s_Object.m_tLastEscalateOrder = s_Item;
	}

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tNextStanddownTime"], &s_Item);
		s_Object.m_tNextStanddownTime = s_Item;
	}

	s_Object.m_nSuspiciousDeaths = static_cast<int32>(int64_t(p_Document["m_nSuspiciousDeaths"]));

	s_Object.m_bAcknowledged = bool(p_Document["m_bAcknowledged"]);

	s_Object.m_bInspected = bool(p_Document["m_bInspected"]);

	s_Object.m_bAccidentsResolved = bool(p_Document["m_bAccidentsResolved"]);

	s_Object.m_bStanddownComplete = bool(p_Document["m_bStanddownComplete"]);

	s_Object.m_bStandDownUnconscious = bool(p_Document["m_bStandDownUnconscious"]);

	s_Object.m_bEscalateUnconscious = bool(p_Document["m_bEscalateUnconscious"]);

	*reinterpret_cast<ZDeadBodySituation_SState*>(p_Target) = s_Object;
}

void ZDeadBodySituation_SState::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZDeadBodySituation_SState*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tLastEscalateOrder, p_Serializer, p_OwnOffset + offsetof(ZDeadBodySituation_SState, m_tLastEscalateOrder));
	ZGameTime::Serialize(&s_Object->m_tNextStanddownTime, p_Serializer, p_OwnOffset + offsetof(ZDeadBodySituation_SState, m_tNextStanddownTime));
}

ZHMTypeInfo SHitmanSaveData::TypeInfo = ZHMTypeInfo("SHitmanSaveData", sizeof(SHitmanSaveData), alignof(SHitmanSaveData), SHitmanSaveData::WriteJson, SHitmanSaveData::WriteSimpleJson, SHitmanSaveData::FromSimpleJson, SHitmanSaveData::Serialize);

void SHitmanSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHitmanSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_OutfitID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_OutfitID, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitCharset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOutfitCharset;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitVariation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nOutfitVariation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fHealth") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fHealth;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vRotation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vRotation, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Inventory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Inventory, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_Camera") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_Camera, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eMovementType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EBaseMovementType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eMovementType) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EBaseMovementType", static_cast<int>(s_Object->m_eMovementType))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_MovementData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZVariant") << "," << JsonStr("$val") << ":";
	ZVariant::WriteJson(&s_Object->m_MovementData, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bLethalAgilityElementUsed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bLethalAgilityElementUsed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsChangingClothes") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsChangingClothes;
	p_Stream << "}";

	p_Stream << "}";
}

void SHitmanSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHitmanSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_OutfitID") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_OutfitID, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitCharset") << ":";
	p_Stream << s_Object->m_nOutfitCharset;
	p_Stream << ",";

	p_Stream << JsonStr("m_nOutfitVariation") << ":";
	p_Stream << s_Object->m_nOutfitVariation;
	p_Stream << ",";

	p_Stream << JsonStr("m_fHealth") << ":";
	p_Stream << s_Object->m_fHealth;
	p_Stream << ",";

	p_Stream << JsonStr("m_vPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vRotation") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vRotation, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Inventory") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Inventory, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_Camera") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_Camera, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eMovementType") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EBaseMovementType", static_cast<int>(s_Object->m_eMovementType)));
	p_Stream << ",";

	p_Stream << JsonStr("m_MovementData") << ":";
	ZVariant::WriteSimpleJson(&s_Object->m_MovementData, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bLethalAgilityElementUsed") << ":";
	p_Stream << s_Object->m_bLethalAgilityElementUsed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsChangingClothes") << ":";
	p_Stream << s_Object->m_bIsChangingClothes;

	p_Stream << "}";
}

void SHitmanSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHitmanSaveData s_Object;

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_OutfitID"], &s_Item);
		s_Object.m_OutfitID = s_Item;
	}

	s_Object.m_nOutfitCharset = static_cast<int32>(int64_t(p_Document["m_nOutfitCharset"]));

	s_Object.m_nOutfitVariation = static_cast<int32>(int64_t(p_Document["m_nOutfitVariation"]));

	s_Object.m_fHealth = static_cast<float32>(double(p_Document["m_fHealth"]));

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vPosition"], &s_Item);
		s_Object.m_vPosition = s_Item;
	}

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vRotation"], &s_Item);
		s_Object.m_vRotation = s_Item;
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_Inventory"], &s_Item);
		s_Object.m_Inventory = s_Item;
	}

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_Camera"], &s_Item);
		s_Object.m_Camera = s_Item;
	}

	s_Object.m_eMovementType = static_cast<EBaseMovementType>(ZHMEnums::GetEnumValueByName("EBaseMovementType", std::string_view(p_Document["m_eMovementType"])));

	{
		ZVariant s_Item;
		ZVariant::FromSimpleJson(p_Document["m_MovementData"], &s_Item);
		s_Object.m_MovementData = s_Item;
	}

	s_Object.m_bLethalAgilityElementUsed = bool(p_Document["m_bLethalAgilityElementUsed"]);

	s_Object.m_bIsChangingClothes = bool(p_Document["m_bIsChangingClothes"]);

	*reinterpret_cast<SHitmanSaveData*>(p_Target) = s_Object;
}

void SHitmanSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHitmanSaveData*>(p_Object);

	ZRepositoryID::Serialize(&s_Object->m_OutfitID, p_Serializer, p_OwnOffset + offsetof(SHitmanSaveData, m_OutfitID));
	SVector3::Serialize(&s_Object->m_vPosition, p_Serializer, p_OwnOffset + offsetof(SHitmanSaveData, m_vPosition));
	SVector4::Serialize(&s_Object->m_vRotation, p_Serializer, p_OwnOffset + offsetof(SHitmanSaveData, m_vRotation));
	ZVariant::Serialize(&s_Object->m_Inventory, p_Serializer, p_OwnOffset + offsetof(SHitmanSaveData, m_Inventory));
	ZVariant::Serialize(&s_Object->m_Camera, p_Serializer, p_OwnOffset + offsetof(SHitmanSaveData, m_Camera));
	ZVariant::Serialize(&s_Object->m_MovementData, p_Serializer, p_OwnOffset + offsetof(SHitmanSaveData, m_MovementData));
}

ZHMTypeInfo SCharacterSpeakEntitySaveData::TypeInfo = ZHMTypeInfo("SCharacterSpeakEntitySaveData", sizeof(SCharacterSpeakEntitySaveData), alignof(SCharacterSpeakEntitySaveData), SCharacterSpeakEntitySaveData::WriteJson, SCharacterSpeakEntitySaveData::WriteSimpleJson, SCharacterSpeakEntitySaveData::FromSimpleJson, SCharacterSpeakEntitySaveData::Serialize);

void SCharacterSpeakEntitySaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCharacterSpeakEntitySaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fSeekPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fSeekPosition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nRandomSelectionSeed") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nRandomSelectionSeed;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWereSubtitlesSeen") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWereSubtitlesSeen;
	p_Stream << "}";

	p_Stream << "}";
}

void SCharacterSpeakEntitySaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCharacterSpeakEntitySaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fSeekPosition") << ":";
	p_Stream << s_Object->m_fSeekPosition;
	p_Stream << ",";

	p_Stream << JsonStr("m_nRandomSelectionSeed") << ":";
	p_Stream << s_Object->m_nRandomSelectionSeed;
	p_Stream << ",";

	p_Stream << JsonStr("m_bWereSubtitlesSeen") << ":";
	p_Stream << s_Object->m_bWereSubtitlesSeen;

	p_Stream << "}";
}

void SCharacterSpeakEntitySaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCharacterSpeakEntitySaveData s_Object;

	s_Object.m_fSeekPosition = static_cast<float32>(double(p_Document["m_fSeekPosition"]));

	s_Object.m_nRandomSelectionSeed = static_cast<uint32>(int64_t(p_Document["m_nRandomSelectionSeed"]));

	s_Object.m_bWereSubtitlesSeen = bool(p_Document["m_bWereSubtitlesSeen"]);

	*reinterpret_cast<SCharacterSpeakEntitySaveData*>(p_Target) = s_Object;
}

void SCharacterSpeakEntitySaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCharacterSpeakEntitySaveData*>(p_Object);

}

ZHMTypeInfo ZAT2Controller_SEventPreviewInfo::TypeInfo = ZHMTypeInfo("ZAT2Controller.SEventPreviewInfo", sizeof(ZAT2Controller_SEventPreviewInfo), alignof(ZAT2Controller_SEventPreviewInfo), ZAT2Controller_SEventPreviewInfo::WriteJson, ZAT2Controller_SEventPreviewInfo::WriteSimpleJson, ZAT2Controller_SEventPreviewInfo::FromSimpleJson, ZAT2Controller_SEventPreviewInfo::Serialize);

void ZAT2Controller_SEventPreviewInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAT2Controller_SEventPreviewInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEventID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEventID;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sConsumerID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sConsumerID);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sExtraDataTypeName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sExtraDataTypeName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_extraDataProperties") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TMap<ZString,ZVariant>") << "," << JsonStr("$val") << ":";
	TMap<ZString,ZVariant>::WriteJson(&s_Object->m_extraDataProperties, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZAT2Controller_SEventPreviewInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZAT2Controller_SEventPreviewInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEventID") << ":";
	p_Stream << s_Object->m_nEventID;
	p_Stream << ",";

	p_Stream << JsonStr("m_sConsumerID") << ":";
	p_Stream << JsonStr(s_Object->m_sConsumerID);
	p_Stream << ",";

	p_Stream << JsonStr("m_fDuration") << ":";
	p_Stream << s_Object->m_fDuration;
	p_Stream << ",";

	p_Stream << JsonStr("m_sExtraDataTypeName") << ":";
	p_Stream << JsonStr(s_Object->m_sExtraDataTypeName);
	p_Stream << ",";

	p_Stream << JsonStr("m_extraDataProperties") << ":";
	TMap<ZString,ZVariant>::WriteSimpleJson(&s_Object->m_extraDataProperties, p_Stream);

	p_Stream << "}";
}

void ZAT2Controller_SEventPreviewInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZAT2Controller_SEventPreviewInfo s_Object;

	s_Object.m_nEventID = static_cast<int32>(int64_t(p_Document["m_nEventID"]));

	s_Object.m_sConsumerID = std::string_view(p_Document["m_sConsumerID"]);

	s_Object.m_fDuration = static_cast<float32>(double(p_Document["m_fDuration"]));

	s_Object.m_sExtraDataTypeName = std::string_view(p_Document["m_sExtraDataTypeName"]);

	{
		TMap<ZString,ZVariant> s_Item;
		TMap<ZString,ZVariant>::FromSimpleJson(p_Document["m_extraDataProperties"], &s_Item);
		s_Object.m_extraDataProperties = s_Item;
	}

	*reinterpret_cast<ZAT2Controller_SEventPreviewInfo*>(p_Target) = s_Object;
}

void ZAT2Controller_SEventPreviewInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZAT2Controller_SEventPreviewInfo*>(p_Object);

	ZString::Serialize(&s_Object->m_sConsumerID, p_Serializer, p_OwnOffset + offsetof(ZAT2Controller_SEventPreviewInfo, m_sConsumerID));
	ZString::Serialize(&s_Object->m_sExtraDataTypeName, p_Serializer, p_OwnOffset + offsetof(ZAT2Controller_SEventPreviewInfo, m_sExtraDataTypeName));
	TMap<ZString,ZVariant>::Serialize(&s_Object->m_extraDataProperties, p_Serializer, p_OwnOffset + offsetof(ZAT2Controller_SEventPreviewInfo, m_extraDataProperties));
}

ZHMTypeInfo AnimationEventDataTypes_SLegacy::TypeInfo = ZHMTypeInfo("AnimationEventDataTypes.SLegacy", sizeof(AnimationEventDataTypes_SLegacy), alignof(AnimationEventDataTypes_SLegacy), AnimationEventDataTypes_SLegacy::WriteJson, AnimationEventDataTypes_SLegacy::WriteSimpleJson, AnimationEventDataTypes_SLegacy::FromSimpleJson, AnimationEventDataTypes_SLegacy::Serialize);

void AnimationEventDataTypes_SLegacy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AnimationEventDataTypes_SLegacy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nEventID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nEventID;
	p_Stream << "}";

	p_Stream << "}";
}

void AnimationEventDataTypes_SLegacy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AnimationEventDataTypes_SLegacy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nEventID") << ":";
	p_Stream << s_Object->m_nEventID;

	p_Stream << "}";
}

void AnimationEventDataTypes_SLegacy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AnimationEventDataTypes_SLegacy s_Object;

	s_Object.m_nEventID = static_cast<int32>(int64_t(p_Document["m_nEventID"]));

	*reinterpret_cast<AnimationEventDataTypes_SLegacy*>(p_Target) = s_Object;
}

void AnimationEventDataTypes_SLegacy::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AnimationEventDataTypes_SLegacy*>(p_Object);

}

ZHMTypeInfo IWorldMapMarker::TypeInfo = ZHMTypeInfo("IWorldMapMarker", sizeof(IWorldMapMarker), alignof(IWorldMapMarker), IWorldMapMarker::WriteJson, IWorldMapMarker::WriteSimpleJson, IWorldMapMarker::FromSimpleJson, IWorldMapMarker::Serialize);

void IWorldMapMarker::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IWorldMapMarker*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IWorldMapMarker::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IWorldMapMarker*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IWorldMapMarker::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IWorldMapMarker s_Object;

	*reinterpret_cast<IWorldMapMarker*>(p_Target) = s_Object;
}

void IWorldMapMarker::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IWorldMapMarker*>(p_Object);

}

ZHMTypeInfo SHeroEscortSituationSaveData::TypeInfo = ZHMTypeInfo("SHeroEscortSituationSaveData", sizeof(SHeroEscortSituationSaveData), alignof(SHeroEscortSituationSaveData), SHeroEscortSituationSaveData::WriteJson, SHeroEscortSituationSaveData::WriteSimpleJson, SHeroEscortSituationSaveData::FromSimpleJson, SHeroEscortSituationSaveData::Serialize);

void SHeroEscortSituationSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituationSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActivated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMayEscort") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMayEscort;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetDead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetDead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetInRange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllEscortsAreDead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllEscortsAreDead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vLastPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vLastPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetIsMoving") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetIsMoving;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHeroEscortSituationEntity.ETargetState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHeroEscortSituationEntity.ETargetState", static_cast<int>(s_Object->m_eTargetState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eTargetEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetActState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZActBehaviorEntity.EState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetActState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZActBehaviorEntity.EState", static_cast<int>(s_Object->m_eTargetActState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetNotMovingTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetNotMovingTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAgitationCooldownTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetAgitationCooldownTimer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAddedActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SHeroEscortSituationActors>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAddedActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAddedActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHeroEscortSituationActors") << "," << JsonStr("$val") << ":";
		SHeroEscortSituationActors::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aAddedActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SHeroEscortSituationActorStateSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHeroEscortSituationActorStateSaveData") << "," << JsonStr("$val") << ":";
		SHeroEscortSituationActorStateSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEscortActs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEscortActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEscortActs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEscortActs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeSinceLossOfSight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimeSinceLossOfSight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_RecordedHitmanOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_RecordedHitmanOutfit, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroEscortSituationSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituationSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bActivated") << ":";
	p_Stream << s_Object->m_bActivated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMayEscort") << ":";
	p_Stream << s_Object->m_bMayEscort;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetDead") << ":";
	p_Stream << s_Object->m_bTargetDead;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInRange") << ":";
	p_Stream << s_Object->m_bTargetInRange;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllEscortsAreDead") << ":";
	p_Stream << s_Object->m_bAllEscortsAreDead;
	p_Stream << ",";

	p_Stream << JsonStr("m_vLastPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vLastPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetIsMoving") << ":";
	p_Stream << s_Object->m_bTargetIsMoving;
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHeroEscortSituationEntity.ETargetState", static_cast<int>(s_Object->m_eTargetState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eTargetEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetActState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZActBehaviorEntity.EState", static_cast<int>(s_Object->m_eTargetActState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetNotMovingTime") << ":";
	p_Stream << s_Object->m_fTargetNotMovingTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAgitationCooldownTimer") << ":";
	p_Stream << s_Object->m_fTargetAgitationCooldownTimer;
	p_Stream << ",";

	p_Stream << JsonStr("m_aAddedActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAddedActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAddedActors[i];
		SHeroEscortSituationActors::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aAddedActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		SHeroEscortSituationActorStateSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEscortActs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEscortActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEscortActs[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEscortActs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeSinceLossOfSight") << ":";
	p_Stream << s_Object->m_fTimeSinceLossOfSight;
	p_Stream << ",";

	p_Stream << JsonStr("m_RecordedHitmanOutfit") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_RecordedHitmanOutfit, p_Stream);

	p_Stream << "}";
}

void SHeroEscortSituationSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroEscortSituationSaveData s_Object;

	s_Object.m_bActivated = bool(p_Document["m_bActivated"]);

	s_Object.m_bMayEscort = bool(p_Document["m_bMayEscort"]);

	s_Object.m_bTargetDead = bool(p_Document["m_bTargetDead"]);

	s_Object.m_bTargetInRange = bool(p_Document["m_bTargetInRange"]);

	s_Object.m_bAllEscortsAreDead = bool(p_Document["m_bAllEscortsAreDead"]);

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vLastPosition"], &s_Item);
		s_Object.m_vLastPosition = s_Item;
	}

	s_Object.m_bTargetIsMoving = bool(p_Document["m_bTargetIsMoving"]);

	s_Object.m_eTargetState = static_cast<ZHeroEscortSituationEntity_ETargetState>(ZHMEnums::GetEnumValueByName("ZHeroEscortSituationEntity.ETargetState", std::string_view(p_Document["m_eTargetState"])));

	s_Object.m_eTargetEmotionState = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_eTargetEmotionState"])));

	s_Object.m_eTargetActState = static_cast<ZActBehaviorEntity_EState>(ZHMEnums::GetEnumValueByName("ZActBehaviorEntity.EState", std::string_view(p_Document["m_eTargetActState"])));

	s_Object.m_fTargetNotMovingTime = static_cast<float32>(double(p_Document["m_fTargetNotMovingTime"]));

	s_Object.m_fTargetAgitationCooldownTimer = static_cast<float32>(double(p_Document["m_fTargetAgitationCooldownTimer"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aAddedActors"])
	{
		SHeroEscortSituationActors s_ArrayItem0;
		SHeroEscortSituationActors::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aAddedActors.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aStates"])
	{
		SHeroEscortSituationActorStateSaveData s_ArrayItem0;
		SHeroEscortSituationActorStateSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aStates.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEscortActs"])
	{
		s_Object.m_aEscortActs.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	s_Object.m_fTimeSinceLossOfSight = static_cast<float32>(double(p_Document["m_fTimeSinceLossOfSight"]));

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_RecordedHitmanOutfit"], &s_Item);
		s_Object.m_RecordedHitmanOutfit = s_Item;
	}

	*reinterpret_cast<SHeroEscortSituationSaveData*>(p_Target) = s_Object;
}

void SHeroEscortSituationSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituationSaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vLastPosition, p_Serializer, p_OwnOffset + offsetof(SHeroEscortSituationSaveData, m_vLastPosition));
	TArray<SHeroEscortSituationActors>::Serialize(&s_Object->m_aAddedActors, p_Serializer, p_OwnOffset + offsetof(SHeroEscortSituationSaveData, m_aAddedActors));
	TArray<SHeroEscortSituationActorStateSaveData>::Serialize(&s_Object->m_aStates, p_Serializer, p_OwnOffset + offsetof(SHeroEscortSituationSaveData, m_aStates));
	TArray<uint32>::Serialize(&s_Object->m_aEscortActs, p_Serializer, p_OwnOffset + offsetof(SHeroEscortSituationSaveData, m_aEscortActs));
	ZRepositoryID::Serialize(&s_Object->m_RecordedHitmanOutfit, p_Serializer, p_OwnOffset + offsetof(SHeroEscortSituationSaveData, m_RecordedHitmanOutfit));
}

ZHMTypeInfo IContractObjective_STargetCondition::TypeInfo = ZHMTypeInfo("IContractObjective.STargetCondition", sizeof(IContractObjective_STargetCondition), alignof(IContractObjective_STargetCondition), IContractObjective_STargetCondition::WriteJson, IContractObjective_STargetCondition::WriteSimpleJson, IContractObjective_STargetCondition::FromSimpleJson, IContractObjective_STargetCondition::Serialize);

void IContractObjective_STargetCondition::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IContractObjective_STargetCondition*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->type);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("repositoryId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->repositoryId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("hardCondition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->hardCondition;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("objectiveId") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGuid") << "," << JsonStr("$val") << ":";
	ZGuid::WriteJson(&s_Object->objectiveId, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sKillMethod") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sKillMethod);
	p_Stream << "}";

	p_Stream << "}";
}

void IContractObjective_STargetCondition::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IContractObjective_STargetCondition*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("type") << ":";
	p_Stream << JsonStr(s_Object->type);
	p_Stream << ",";

	p_Stream << JsonStr("repositoryId") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->repositoryId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("hardCondition") << ":";
	p_Stream << s_Object->hardCondition;
	p_Stream << ",";

	p_Stream << JsonStr("objectiveId") << ":";
	ZGuid::WriteSimpleJson(&s_Object->objectiveId, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("sKillMethod") << ":";
	p_Stream << JsonStr(s_Object->sKillMethod);

	p_Stream << "}";
}

void IContractObjective_STargetCondition::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IContractObjective_STargetCondition s_Object;

	s_Object.type = std::string_view(p_Document["type"]);

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["repositoryId"], &s_Item);
		s_Object.repositoryId = s_Item;
	}

	s_Object.hardCondition = bool(p_Document["hardCondition"]);

	{
		ZGuid s_Item;
		ZGuid::FromSimpleJson(p_Document["objectiveId"], &s_Item);
		s_Object.objectiveId = s_Item;
	}

	s_Object.sKillMethod = std::string_view(p_Document["sKillMethod"]);

	*reinterpret_cast<IContractObjective_STargetCondition*>(p_Target) = s_Object;
}

void IContractObjective_STargetCondition::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IContractObjective_STargetCondition*>(p_Object);

	ZString::Serialize(&s_Object->type, p_Serializer, p_OwnOffset + offsetof(IContractObjective_STargetCondition, type));
	ZRepositoryID::Serialize(&s_Object->repositoryId, p_Serializer, p_OwnOffset + offsetof(IContractObjective_STargetCondition, repositoryId));
	ZGuid::Serialize(&s_Object->objectiveId, p_Serializer, p_OwnOffset + offsetof(IContractObjective_STargetCondition, objectiveId));
	ZString::Serialize(&s_Object->sKillMethod, p_Serializer, p_OwnOffset + offsetof(IContractObjective_STargetCondition, sKillMethod));
}

ZHMTypeInfo SPatrolOrderSaveData::TypeInfo = ZHMTypeInfo("SPatrolOrderSaveData", sizeof(SPatrolOrderSaveData), alignof(SPatrolOrderSaveData), SPatrolOrderSaveData::WriteJson, SPatrolOrderSaveData::WriteSimpleJson, SPatrolOrderSaveData::FromSimpleJson, SPatrolOrderSaveData::Serialize);

void SPatrolOrderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPatrolOrderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void SPatrolOrderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SPatrolOrderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void SPatrolOrderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SPatrolOrderSaveData s_Object;

	*reinterpret_cast<SPatrolOrderSaveData*>(p_Target) = s_Object;
}

void SPatrolOrderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SPatrolOrderSaveData*>(p_Object);

}

ZHMTypeInfo SHeroEscortSituation2SaveData::TypeInfo = ZHMTypeInfo("SHeroEscortSituation2SaveData", sizeof(SHeroEscortSituation2SaveData), alignof(SHeroEscortSituation2SaveData), SHeroEscortSituation2SaveData::WriteJson, SHeroEscortSituation2SaveData::WriteSimpleJson, SHeroEscortSituation2SaveData::FromSimpleJson, SHeroEscortSituation2SaveData::Serialize);

void SHeroEscortSituation2SaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituation2SaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bActivated") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bActivated;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMayEscort") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMayEscort;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetDead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetDead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInRange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetInRange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllEscortsAreDead") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bAllEscortsAreDead;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vLastPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vLastPosition, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetIsMoving") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bTargetIsMoving;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHeroEscortSituation2Entity.ETargetState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHeroEscortSituation2Entity.ETargetState", static_cast<int>(s_Object->m_eTargetState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetEmotionState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EActorEmotionState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetEmotionState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eTargetEmotionState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetActState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZActBehaviorEntity.EState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eTargetActState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZActBehaviorEntity.EState", static_cast<int>(s_Object->m_eTargetActState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetNotMovingTime") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetNotMovingTime;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAgitationCooldownTimer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTargetAgitationCooldownTimer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aAddedActors") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SHeroEscortSituation2Actors>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAddedActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAddedActors[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHeroEscortSituation2Actors") << "," << JsonStr("$val") << ":";
		SHeroEscortSituation2Actors::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aAddedActors.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SHeroEscortSituation2ActorStateSaveData>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SHeroEscortSituation2ActorStateSaveData") << "," << JsonStr("$val") << ":";
		SHeroEscortSituation2ActorStateSaveData::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEscortActs") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint32>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEscortActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEscortActs[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aEscortActs.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeSinceLossOfSight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fTimeSinceLossOfSight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_RecordedHitmanOutfit") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->m_RecordedHitmanOutfit, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SHeroEscortSituation2SaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituation2SaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bActivated") << ":";
	p_Stream << s_Object->m_bActivated;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMayEscort") << ":";
	p_Stream << s_Object->m_bMayEscort;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetDead") << ":";
	p_Stream << s_Object->m_bTargetDead;
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetInRange") << ":";
	p_Stream << s_Object->m_bTargetInRange;
	p_Stream << ",";

	p_Stream << JsonStr("m_bAllEscortsAreDead") << ":";
	p_Stream << s_Object->m_bAllEscortsAreDead;
	p_Stream << ",";

	p_Stream << JsonStr("m_vLastPosition") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vLastPosition, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bTargetIsMoving") << ":";
	p_Stream << s_Object->m_bTargetIsMoving;
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHeroEscortSituation2Entity.ETargetState", static_cast<int>(s_Object->m_eTargetState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetEmotionState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EActorEmotionState", static_cast<int>(s_Object->m_eTargetEmotionState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eTargetActState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZActBehaviorEntity.EState", static_cast<int>(s_Object->m_eTargetActState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetNotMovingTime") << ":";
	p_Stream << s_Object->m_fTargetNotMovingTime;
	p_Stream << ",";

	p_Stream << JsonStr("m_fTargetAgitationCooldownTimer") << ":";
	p_Stream << s_Object->m_fTargetAgitationCooldownTimer;
	p_Stream << ",";

	p_Stream << JsonStr("m_aAddedActors") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aAddedActors.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aAddedActors[i];
		SHeroEscortSituation2Actors::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aAddedActors.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aStates") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aStates.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aStates[i];
		SHeroEscortSituation2ActorStateSaveData::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aStates.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_aEscortActs") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aEscortActs.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aEscortActs[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aEscortActs.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fTimeSinceLossOfSight") << ":";
	p_Stream << s_Object->m_fTimeSinceLossOfSight;
	p_Stream << ",";

	p_Stream << JsonStr("m_RecordedHitmanOutfit") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->m_RecordedHitmanOutfit, p_Stream);

	p_Stream << "}";
}

void SHeroEscortSituation2SaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHeroEscortSituation2SaveData s_Object;

	s_Object.m_bActivated = bool(p_Document["m_bActivated"]);

	s_Object.m_bMayEscort = bool(p_Document["m_bMayEscort"]);

	s_Object.m_bTargetDead = bool(p_Document["m_bTargetDead"]);

	s_Object.m_bTargetInRange = bool(p_Document["m_bTargetInRange"]);

	s_Object.m_bAllEscortsAreDead = bool(p_Document["m_bAllEscortsAreDead"]);

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vLastPosition"], &s_Item);
		s_Object.m_vLastPosition = s_Item;
	}

	s_Object.m_bTargetIsMoving = bool(p_Document["m_bTargetIsMoving"]);

	s_Object.m_eTargetState = static_cast<ZHeroEscortSituation2Entity_ETargetState>(ZHMEnums::GetEnumValueByName("ZHeroEscortSituation2Entity.ETargetState", std::string_view(p_Document["m_eTargetState"])));

	s_Object.m_eTargetEmotionState = static_cast<EActorEmotionState>(ZHMEnums::GetEnumValueByName("EActorEmotionState", std::string_view(p_Document["m_eTargetEmotionState"])));

	s_Object.m_eTargetActState = static_cast<ZActBehaviorEntity_EState>(ZHMEnums::GetEnumValueByName("ZActBehaviorEntity.EState", std::string_view(p_Document["m_eTargetActState"])));

	s_Object.m_fTargetNotMovingTime = static_cast<float32>(double(p_Document["m_fTargetNotMovingTime"]));

	s_Object.m_fTargetAgitationCooldownTimer = static_cast<float32>(double(p_Document["m_fTargetAgitationCooldownTimer"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aAddedActors"])
	{
		SHeroEscortSituation2Actors s_ArrayItem0;
		SHeroEscortSituation2Actors::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aAddedActors.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aStates"])
	{
		SHeroEscortSituation2ActorStateSaveData s_ArrayItem0;
		SHeroEscortSituation2ActorStateSaveData::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aStates.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aEscortActs"])
	{
		s_Object.m_aEscortActs.push_back(static_cast<uint32>(int64_t(s_Item0)));
	}

	s_Object.m_fTimeSinceLossOfSight = static_cast<float32>(double(p_Document["m_fTimeSinceLossOfSight"]));

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["m_RecordedHitmanOutfit"], &s_Item);
		s_Object.m_RecordedHitmanOutfit = s_Item;
	}

	*reinterpret_cast<SHeroEscortSituation2SaveData*>(p_Target) = s_Object;
}

void SHeroEscortSituation2SaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHeroEscortSituation2SaveData*>(p_Object);

	SVector3::Serialize(&s_Object->m_vLastPosition, p_Serializer, p_OwnOffset + offsetof(SHeroEscortSituation2SaveData, m_vLastPosition));
	TArray<SHeroEscortSituation2Actors>::Serialize(&s_Object->m_aAddedActors, p_Serializer, p_OwnOffset + offsetof(SHeroEscortSituation2SaveData, m_aAddedActors));
	TArray<SHeroEscortSituation2ActorStateSaveData>::Serialize(&s_Object->m_aStates, p_Serializer, p_OwnOffset + offsetof(SHeroEscortSituation2SaveData, m_aStates));
	TArray<uint32>::Serialize(&s_Object->m_aEscortActs, p_Serializer, p_OwnOffset + offsetof(SHeroEscortSituation2SaveData, m_aEscortActs));
	ZRepositoryID::Serialize(&s_Object->m_RecordedHitmanOutfit, p_Serializer, p_OwnOffset + offsetof(SHeroEscortSituation2SaveData, m_RecordedHitmanOutfit));
}

ZHMTypeInfo SIntelListDisplayInfoArray_dummy::TypeInfo = ZHMTypeInfo("SIntelListDisplayInfoArray_dummy", sizeof(SIntelListDisplayInfoArray_dummy), alignof(SIntelListDisplayInfoArray_dummy), SIntelListDisplayInfoArray_dummy::WriteJson, SIntelListDisplayInfoArray_dummy::WriteSimpleJson, SIntelListDisplayInfoArray_dummy::FromSimpleJson, SIntelListDisplayInfoArray_dummy::Serialize);

void SIntelListDisplayInfoArray_dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelListDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SIntelListDisplayInfo>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SIntelListDisplayInfo") << "," << JsonStr("$val") << ":";
		SIntelListDisplayInfo::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SIntelListDisplayInfoArray_dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SIntelListDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->dummy[i];
		SIntelListDisplayInfo::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SIntelListDisplayInfoArray_dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SIntelListDisplayInfoArray_dummy s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["dummy"])
	{
		SIntelListDisplayInfo s_ArrayItem0;
		SIntelListDisplayInfo::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.dummy.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SIntelListDisplayInfoArray_dummy*>(p_Target) = s_Object;
}

void SIntelListDisplayInfoArray_dummy::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SIntelListDisplayInfoArray_dummy*>(p_Object);

	TArray<SIntelListDisplayInfo>::Serialize(&s_Object->dummy, p_Serializer, p_OwnOffset + offsetof(SIntelListDisplayInfoArray_dummy, dummy));
}

ZHMTypeInfo ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo::TypeInfo = ZHMTypeInfo("ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfo", sizeof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo), alignof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo), ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo::WriteJson, ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo::WriteSimpleJson, ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo::FromSimpleJson, ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo::Serialize);

void ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("label") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("silencer") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->silencer;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("count") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->count;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("ammo") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->ammo;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("id") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRepositoryID") << "," << JsonStr("$val") << ":";
	ZRepositoryID::WriteJson(&s_Object->id, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("weaponCategory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->weaponCategory);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("itemCategory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->itemCategory);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("itemCategoryLKey") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->itemCategoryLKey);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("inventoryCategoryIcon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->inventoryCategoryIcon);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sPoisonType") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sPoisonType);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("notininventory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->notininventory;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("isIllegal") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->isIllegal;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("actionName") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->actionName);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("longDescription") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->longDescription);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("missingText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->missingText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("warningText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->warningText);
	p_Stream << "}";

	p_Stream << "}";
}

void ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("label") << ":";
	p_Stream << JsonStr(s_Object->label);
	p_Stream << ",";

	p_Stream << JsonStr("silencer") << ":";
	p_Stream << s_Object->silencer;
	p_Stream << ",";

	p_Stream << JsonStr("count") << ":";
	p_Stream << s_Object->count;
	p_Stream << ",";

	p_Stream << JsonStr("ammo") << ":";
	p_Stream << s_Object->ammo;
	p_Stream << ",";

	p_Stream << JsonStr("id") << ":";
	ZRepositoryID::WriteSimpleJson(&s_Object->id, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("weaponCategory") << ":";
	p_Stream << JsonStr(s_Object->weaponCategory);
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoRemaining") << ":";
	p_Stream << s_Object->nAmmoRemaining;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoTotal") << ":";
	p_Stream << s_Object->nAmmoTotal;
	p_Stream << ",";

	p_Stream << JsonStr("nAmmoInClip") << ":";
	p_Stream << s_Object->nAmmoInClip;
	p_Stream << ",";

	p_Stream << JsonStr("nWeaponType") << ":";
	p_Stream << s_Object->nWeaponType;
	p_Stream << ",";

	p_Stream << JsonStr("itemCategory") << ":";
	p_Stream << JsonStr(s_Object->itemCategory);
	p_Stream << ",";

	p_Stream << JsonStr("itemCategoryLKey") << ":";
	p_Stream << JsonStr(s_Object->itemCategoryLKey);
	p_Stream << ",";

	p_Stream << JsonStr("inventoryCategoryIcon") << ":";
	p_Stream << JsonStr(s_Object->inventoryCategoryIcon);
	p_Stream << ",";

	p_Stream << JsonStr("sPoisonType") << ":";
	p_Stream << JsonStr(s_Object->sPoisonType);
	p_Stream << ",";

	p_Stream << JsonStr("notininventory") << ":";
	p_Stream << s_Object->notininventory;
	p_Stream << ",";

	p_Stream << JsonStr("isIllegal") << ":";
	p_Stream << s_Object->isIllegal;
	p_Stream << ",";

	p_Stream << JsonStr("actionName") << ":";
	p_Stream << JsonStr(s_Object->actionName);
	p_Stream << ",";

	p_Stream << JsonStr("longDescription") << ":";
	p_Stream << JsonStr(s_Object->longDescription);
	p_Stream << ",";

	p_Stream << JsonStr("missingText") << ":";
	p_Stream << JsonStr(s_Object->missingText);
	p_Stream << ",";

	p_Stream << JsonStr("warningText") << ":";
	p_Stream << JsonStr(s_Object->warningText);

	p_Stream << "}";
}

void ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo s_Object;

	s_Object.label = std::string_view(p_Document["label"]);

	s_Object.silencer = bool(p_Document["silencer"]);

	s_Object.count = static_cast<int32>(int64_t(p_Document["count"]));

	s_Object.ammo = static_cast<int32>(int64_t(p_Document["ammo"]));

	{
		ZRepositoryID s_Item;
		ZRepositoryID::FromSimpleJson(p_Document["id"], &s_Item);
		s_Object.id = s_Item;
	}

	s_Object.weaponCategory = std::string_view(p_Document["weaponCategory"]);

	s_Object.nAmmoRemaining = static_cast<int32>(int64_t(p_Document["nAmmoRemaining"]));

	s_Object.nAmmoTotal = static_cast<int32>(int64_t(p_Document["nAmmoTotal"]));

	s_Object.nAmmoInClip = static_cast<int32>(int64_t(p_Document["nAmmoInClip"]));

	s_Object.nWeaponType = static_cast<int32>(int64_t(p_Document["nWeaponType"]));

	s_Object.itemCategory = std::string_view(p_Document["itemCategory"]);

	s_Object.itemCategoryLKey = std::string_view(p_Document["itemCategoryLKey"]);

	s_Object.inventoryCategoryIcon = std::string_view(p_Document["inventoryCategoryIcon"]);

	s_Object.sPoisonType = std::string_view(p_Document["sPoisonType"]);

	s_Object.notininventory = bool(p_Document["notininventory"]);

	s_Object.isIllegal = bool(p_Document["isIllegal"]);

	s_Object.actionName = std::string_view(p_Document["actionName"]);

	s_Object.longDescription = std::string_view(p_Document["longDescription"]);

	s_Object.missingText = std::string_view(p_Document["missingText"]);

	s_Object.warningText = std::string_view(p_Document["warningText"]);

	*reinterpret_cast<ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo*>(p_Target) = s_Object;
}

void ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo*>(p_Object);

	ZString::Serialize(&s_Object->label, p_Serializer, p_OwnOffset + offsetof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo, label));
	ZRepositoryID::Serialize(&s_Object->id, p_Serializer, p_OwnOffset + offsetof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo, id));
	ZString::Serialize(&s_Object->weaponCategory, p_Serializer, p_OwnOffset + offsetof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo, weaponCategory));
	ZString::Serialize(&s_Object->itemCategory, p_Serializer, p_OwnOffset + offsetof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo, itemCategory));
	ZString::Serialize(&s_Object->itemCategoryLKey, p_Serializer, p_OwnOffset + offsetof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo, itemCategoryLKey));
	ZString::Serialize(&s_Object->inventoryCategoryIcon, p_Serializer, p_OwnOffset + offsetof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo, inventoryCategoryIcon));
	ZString::Serialize(&s_Object->sPoisonType, p_Serializer, p_OwnOffset + offsetof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo, sPoisonType));
	ZString::Serialize(&s_Object->actionName, p_Serializer, p_OwnOffset + offsetof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo, actionName));
	ZString::Serialize(&s_Object->longDescription, p_Serializer, p_OwnOffset + offsetof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo, longDescription));
	ZString::Serialize(&s_Object->missingText, p_Serializer, p_OwnOffset + offsetof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo, missingText));
	ZString::Serialize(&s_Object->warningText, p_Serializer, p_OwnOffset + offsetof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo, warningText));
}

ZHMTypeInfo SSentryGroupSaveData::TypeInfo = ZHMTypeInfo("SSentryGroupSaveData", sizeof(SSentryGroupSaveData), alignof(SSentryGroupSaveData), SSentryGroupSaveData::WriteJson, SSentryGroupSaveData::WriteSimpleJson, SSentryGroupSaveData::FromSimpleJson, SSentryGroupSaveData::Serialize);

void SSentryGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSentryGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_rSentryZone") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_rSentryZone;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastEscalateOrder") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tLastEscalateOrder, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eActionPrompt") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ESentryActionPrompt") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eActionPrompt) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ESentryActionPrompt", static_cast<int>(s_Object->m_eActionPrompt))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bRequestedAction") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bRequestedAction;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowingWarning") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bShowingWarning;
	p_Stream << "}";

	p_Stream << "}";
}

void SSentryGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSentryGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_rTarget") << ":";
	p_Stream << s_Object->m_rTarget;
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_rSentryZone") << ":";
	p_Stream << s_Object->m_rSentryZone;
	p_Stream << ",";

	p_Stream << JsonStr("m_tLastEscalateOrder") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tLastEscalateOrder, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_eActionPrompt") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ESentryActionPrompt", static_cast<int>(s_Object->m_eActionPrompt)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bRequestedAction") << ":";
	p_Stream << s_Object->m_bRequestedAction;
	p_Stream << ",";

	p_Stream << JsonStr("m_bShowingWarning") << ":";
	p_Stream << s_Object->m_bShowingWarning;

	p_Stream << "}";
}

void SSentryGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSentryGroupSaveData s_Object;

	s_Object.m_rTarget = static_cast<uint32>(int64_t(p_Document["m_rTarget"]));

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	s_Object.m_rSentryZone = static_cast<uint32>(int64_t(p_Document["m_rSentryZone"]));

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tLastEscalateOrder"], &s_Item);
		s_Object.m_tLastEscalateOrder = s_Item;
	}

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	s_Object.m_eActionPrompt = static_cast<ESentryActionPrompt>(ZHMEnums::GetEnumValueByName("ESentryActionPrompt", std::string_view(p_Document["m_eActionPrompt"])));

	s_Object.m_bRequestedAction = bool(p_Document["m_bRequestedAction"]);

	s_Object.m_bShowingWarning = bool(p_Document["m_bShowingWarning"]);

	*reinterpret_cast<SSentryGroupSaveData*>(p_Target) = s_Object;
}

void SSentryGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSentryGroupSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tLastEscalateOrder, p_Serializer, p_OwnOffset + offsetof(SSentryGroupSaveData, m_tLastEscalateOrder));
	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SSentryGroupSaveData, m_fsmState));
}

ZHMTypeInfo SHUDVisibilityController2SaveData::TypeInfo = ZHMTypeInfo("SHUDVisibilityController2SaveData", sizeof(SHUDVisibilityController2SaveData), alignof(SHUDVisibilityController2SaveData), SHUDVisibilityController2SaveData::WriteJson, SHUDVisibilityController2SaveData::WriteSimpleJson, SHUDVisibilityController2SaveData::FromSimpleJson, SHUDVisibilityController2SaveData::Serialize);

void SHUDVisibilityController2SaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHUDVisibilityController2SaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eCurrentRequest") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZHUDUIRoot.EHUDVisibility") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eCurrentRequest) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZHUDUIRoot.EHUDVisibility", static_cast<int>(s_Object->m_eCurrentRequest))) << "}";
	p_Stream << "}";

	p_Stream << "}";
}

void SHUDVisibilityController2SaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHUDVisibilityController2SaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eCurrentRequest") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZHUDUIRoot.EHUDVisibility", static_cast<int>(s_Object->m_eCurrentRequest)));

	p_Stream << "}";
}

void SHUDVisibilityController2SaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHUDVisibilityController2SaveData s_Object;

	s_Object.m_eCurrentRequest = static_cast<ZHUDUIRoot_EHUDVisibility>(ZHMEnums::GetEnumValueByName("ZHUDUIRoot.EHUDVisibility", std::string_view(p_Document["m_eCurrentRequest"])));

	*reinterpret_cast<SHUDVisibilityController2SaveData*>(p_Target) = s_Object;
}

void SHUDVisibilityController2SaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHUDVisibilityController2SaveData*>(p_Object);

}

ZHMTypeInfo IBoneAnimator::TypeInfo = ZHMTypeInfo("IBoneAnimator", sizeof(IBoneAnimator), alignof(IBoneAnimator), IBoneAnimator::WriteJson, IBoneAnimator::WriteSimpleJson, IBoneAnimator::FromSimpleJson, IBoneAnimator::Serialize);

void IBoneAnimator::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IBoneAnimator*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBoneAnimator::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IBoneAnimator*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IBoneAnimator::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IBoneAnimator s_Object;

	*reinterpret_cast<IBoneAnimator*>(p_Target) = s_Object;
}

void IBoneAnimator::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IBoneAnimator*>(p_Object);

}

ZHMTypeInfo SCautiousInvestigateGroupSaveData::TypeInfo = ZHMTypeInfo("SCautiousInvestigateGroupSaveData", sizeof(SCautiousInvestigateGroupSaveData), alignof(SCautiousInvestigateGroupSaveData), SCautiousInvestigateGroupSaveData::WriteJson, SCautiousInvestigateGroupSaveData::WriteSimpleJson, SCautiousInvestigateGroupSaveData::FromSimpleJson, SCautiousInvestigateGroupSaveData::Serialize);

void SCautiousInvestigateGroupSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousInvestigateGroupSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_tGroupStarted") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_tGroupStarted, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EDisturbanceType") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_type) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nLeaderApproachNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nLeaderApproachNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nAssistantApproachNode") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nAssistantApproachNode;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eApproachOrderState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZCautiousInvestigateGroup.EApproachOrderState") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eApproachOrderState) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("ZCautiousInvestigateGroup.EApproachOrderState", static_cast<int>(s_Object->m_eApproachOrderState))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmAssistantState") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SFSMSaveData") << "," << JsonStr("$val") << ":";
	SFSMSaveData::WriteJson(&s_Object->m_fsmAssistantState, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bUsingRecurringDialog") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bUsingRecurringDialog;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bStartedInvestigateDialog") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bStartedInvestigateDialog;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDelayInvestigateDialog") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDelayInvestigateDialog;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bReservedOccupancy") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bReservedOccupancy;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSilentInvestigation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSilentInvestigation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bInvestigateDeadBody") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bInvestigateDeadBody;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bMultipleBodies") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bMultipleBodies;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCheckSuspects") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCheckSuspects;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_investigateArea") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_investigateArea, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_targetDistanceField") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExactCompressedGridFloatField") << "," << JsonStr("$val") << ":";
	SExactCompressedGridFloatField::WriteJson(&s_Object->m_targetDistanceField, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_targetLOSField") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SExactCompressedGridFloatField") << "," << JsonStr("$val") << ":";
	SExactCompressedGridFloatField::WriteJson(&s_Object->m_targetLOSField, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidTargetDistanceField") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValidTargetDistanceField;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidTargetLOSField") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bValidTargetLOSField;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceAcknowledge") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForceAcknowledge;
	p_Stream << "}";

	p_Stream << "}";
}

void SCautiousInvestigateGroupSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCautiousInvestigateGroupSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_tGroupStarted") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_tGroupStarted, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_target") << ":";
	p_Stream << s_Object->m_target;
	p_Stream << ",";

	p_Stream << JsonStr("m_type") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EDisturbanceType", static_cast<int>(s_Object->m_type)));
	p_Stream << ",";

	p_Stream << JsonStr("m_pLeader") << ":";
	p_Stream << s_Object->m_pLeader;
	p_Stream << ",";

	p_Stream << JsonStr("m_pAssistant") << ":";
	p_Stream << s_Object->m_pAssistant;
	p_Stream << ",";

	p_Stream << JsonStr("m_nLeaderApproachNode") << ":";
	p_Stream << s_Object->m_nLeaderApproachNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_nAssistantApproachNode") << ":";
	p_Stream << s_Object->m_nAssistantApproachNode;
	p_Stream << ",";

	p_Stream << JsonStr("m_eApproachOrderState") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("ZCautiousInvestigateGroup.EApproachOrderState", static_cast<int>(s_Object->m_eApproachOrderState)));
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_fsmAssistantState") << ":";
	SFSMSaveData::WriteSimpleJson(&s_Object->m_fsmAssistantState, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bUsingRecurringDialog") << ":";
	p_Stream << s_Object->m_bUsingRecurringDialog;
	p_Stream << ",";

	p_Stream << JsonStr("m_bStartedInvestigateDialog") << ":";
	p_Stream << s_Object->m_bStartedInvestigateDialog;
	p_Stream << ",";

	p_Stream << JsonStr("m_bDelayInvestigateDialog") << ":";
	p_Stream << s_Object->m_bDelayInvestigateDialog;
	p_Stream << ",";

	p_Stream << JsonStr("m_bReservedOccupancy") << ":";
	p_Stream << s_Object->m_bReservedOccupancy;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSilentInvestigation") << ":";
	p_Stream << s_Object->m_bSilentInvestigation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bInvestigateDeadBody") << ":";
	p_Stream << s_Object->m_bInvestigateDeadBody;
	p_Stream << ",";

	p_Stream << JsonStr("m_bMultipleBodies") << ":";
	p_Stream << s_Object->m_bMultipleBodies;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCheckSuspects") << ":";
	p_Stream << s_Object->m_bCheckSuspects;
	p_Stream << ",";

	p_Stream << JsonStr("m_investigateArea") << ":";
	float4::WriteSimpleJson(&s_Object->m_investigateArea, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_targetDistanceField") << ":";
	SExactCompressedGridFloatField::WriteSimpleJson(&s_Object->m_targetDistanceField, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_targetLOSField") << ":";
	SExactCompressedGridFloatField::WriteSimpleJson(&s_Object->m_targetLOSField, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidTargetDistanceField") << ":";
	p_Stream << s_Object->m_bValidTargetDistanceField;
	p_Stream << ",";

	p_Stream << JsonStr("m_bValidTargetLOSField") << ":";
	p_Stream << s_Object->m_bValidTargetLOSField;
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceAcknowledge") << ":";
	p_Stream << s_Object->m_bForceAcknowledge;

	p_Stream << "}";
}

void SCautiousInvestigateGroupSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCautiousInvestigateGroupSaveData s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_tGroupStarted"], &s_Item);
		s_Object.m_tGroupStarted = s_Item;
	}

	s_Object.m_target = static_cast<int32>(int64_t(p_Document["m_target"]));

	s_Object.m_type = static_cast<EDisturbanceType>(ZHMEnums::GetEnumValueByName("EDisturbanceType", std::string_view(p_Document["m_type"])));

	s_Object.m_pLeader = static_cast<uint32>(int64_t(p_Document["m_pLeader"]));

	s_Object.m_pAssistant = static_cast<uint32>(int64_t(p_Document["m_pAssistant"]));

	s_Object.m_nLeaderApproachNode = static_cast<int32>(int64_t(p_Document["m_nLeaderApproachNode"]));

	s_Object.m_nAssistantApproachNode = static_cast<int32>(int64_t(p_Document["m_nAssistantApproachNode"]));

	s_Object.m_eApproachOrderState = static_cast<ZCautiousInvestigateGroup_EApproachOrderState>(ZHMEnums::GetEnumValueByName("ZCautiousInvestigateGroup.EApproachOrderState", std::string_view(p_Document["m_eApproachOrderState"])));

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmState"], &s_Item);
		s_Object.m_fsmState = s_Item;
	}

	{
		SFSMSaveData s_Item;
		SFSMSaveData::FromSimpleJson(p_Document["m_fsmAssistantState"], &s_Item);
		s_Object.m_fsmAssistantState = s_Item;
	}

	s_Object.m_bUsingRecurringDialog = bool(p_Document["m_bUsingRecurringDialog"]);

	s_Object.m_bStartedInvestigateDialog = bool(p_Document["m_bStartedInvestigateDialog"]);

	s_Object.m_bDelayInvestigateDialog = bool(p_Document["m_bDelayInvestigateDialog"]);

	s_Object.m_bReservedOccupancy = bool(p_Document["m_bReservedOccupancy"]);

	s_Object.m_bSilentInvestigation = bool(p_Document["m_bSilentInvestigation"]);

	s_Object.m_bInvestigateDeadBody = bool(p_Document["m_bInvestigateDeadBody"]);

	s_Object.m_bMultipleBodies = bool(p_Document["m_bMultipleBodies"]);

	s_Object.m_bCheckSuspects = bool(p_Document["m_bCheckSuspects"]);

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_investigateArea"], &s_Item);
		s_Object.m_investigateArea = s_Item;
	}

	{
		SExactCompressedGridFloatField s_Item;
		SExactCompressedGridFloatField::FromSimpleJson(p_Document["m_targetDistanceField"], &s_Item);
		s_Object.m_targetDistanceField = s_Item;
	}

	{
		SExactCompressedGridFloatField s_Item;
		SExactCompressedGridFloatField::FromSimpleJson(p_Document["m_targetLOSField"], &s_Item);
		s_Object.m_targetLOSField = s_Item;
	}

	s_Object.m_bValidTargetDistanceField = bool(p_Document["m_bValidTargetDistanceField"]);

	s_Object.m_bValidTargetLOSField = bool(p_Document["m_bValidTargetLOSField"]);

	s_Object.m_bForceAcknowledge = bool(p_Document["m_bForceAcknowledge"]);

	*reinterpret_cast<SCautiousInvestigateGroupSaveData*>(p_Target) = s_Object;
}

void SCautiousInvestigateGroupSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCautiousInvestigateGroupSaveData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_tGroupStarted, p_Serializer, p_OwnOffset + offsetof(SCautiousInvestigateGroupSaveData, m_tGroupStarted));
	SFSMSaveData::Serialize(&s_Object->m_fsmState, p_Serializer, p_OwnOffset + offsetof(SCautiousInvestigateGroupSaveData, m_fsmState));
	SFSMSaveData::Serialize(&s_Object->m_fsmAssistantState, p_Serializer, p_OwnOffset + offsetof(SCautiousInvestigateGroupSaveData, m_fsmAssistantState));
	float4::Serialize(&s_Object->m_investigateArea, p_Serializer, p_OwnOffset + offsetof(SCautiousInvestigateGroupSaveData, m_investigateArea));
	SExactCompressedGridFloatField::Serialize(&s_Object->m_targetDistanceField, p_Serializer, p_OwnOffset + offsetof(SCautiousInvestigateGroupSaveData, m_targetDistanceField));
	SExactCompressedGridFloatField::Serialize(&s_Object->m_targetLOSField, p_Serializer, p_OwnOffset + offsetof(SCautiousInvestigateGroupSaveData, m_targetLOSField));
}

ZHMTypeInfo IActor::TypeInfo = ZHMTypeInfo("IActor", sizeof(IActor), alignof(IActor), IActor::WriteJson, IActor::WriteSimpleJson, IActor::FromSimpleJson, IActor::Serialize);

void IActor::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IActor*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IActor::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IActor*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IActor::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IActor s_Object;

	*reinterpret_cast<IActor*>(p_Target) = s_Object;
}

void IActor::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IActor*>(p_Object);

}

ZHMTypeInfo SActionRadialArcDisplayInfoArray_dummy::TypeInfo = ZHMTypeInfo("SActionRadialArcDisplayInfoArray_dummy", sizeof(SActionRadialArcDisplayInfoArray_dummy), alignof(SActionRadialArcDisplayInfoArray_dummy), SActionRadialArcDisplayInfoArray_dummy::WriteJson, SActionRadialArcDisplayInfoArray_dummy::WriteSimpleJson, SActionRadialArcDisplayInfoArray_dummy::FromSimpleJson, SActionRadialArcDisplayInfoArray_dummy::Serialize);

void SActionRadialArcDisplayInfoArray_dummy::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActionRadialArcDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SActionRadialArcDisplayInfo>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->dummy[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SActionRadialArcDisplayInfo") << "," << JsonStr("$val") << ":";
		SActionRadialArcDisplayInfo::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SActionRadialArcDisplayInfoArray_dummy::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActionRadialArcDisplayInfoArray_dummy*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("dummy") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->dummy.size(); ++i)
	{
		auto& s_Item0 = s_Object->dummy[i];
		SActionRadialArcDisplayInfo::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->dummy.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SActionRadialArcDisplayInfoArray_dummy::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActionRadialArcDisplayInfoArray_dummy s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["dummy"])
	{
		SActionRadialArcDisplayInfo s_ArrayItem0;
		SActionRadialArcDisplayInfo::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.dummy.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SActionRadialArcDisplayInfoArray_dummy*>(p_Target) = s_Object;
}

void SActionRadialArcDisplayInfoArray_dummy::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActionRadialArcDisplayInfoArray_dummy*>(p_Object);

	TArray<SActionRadialArcDisplayInfo>::Serialize(&s_Object->dummy, p_Serializer, p_OwnOffset + offsetof(SActionRadialArcDisplayInfoArray_dummy, dummy));
}

ZHMTypeInfo SInventoryMovementConfig::TypeInfo = ZHMTypeInfo("SInventoryMovementConfig", sizeof(SInventoryMovementConfig), alignof(SInventoryMovementConfig), SInventoryMovementConfig::WriteJson, SInventoryMovementConfig::WriteSimpleJson, SInventoryMovementConfig::FromSimpleJson, SInventoryMovementConfig::Serialize);

void SInventoryMovementConfig::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryMovementConfig*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_eItemHandlingRightHand") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryConfigItemHandling") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eItemHandlingRightHand) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigItemHandling", static_cast<int>(s_Object->m_eItemHandlingRightHand))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eItemHandlingLeftHand") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryConfigItemHandling") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eItemHandlingLeftHand) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigItemHandling", static_cast<int>(s_Object->m_eItemHandlingLeftHand))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eFormerEquippedItems") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryConfigFormerEquippedItems") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eFormerEquippedItems) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigFormerEquippedItems", static_cast<int>(s_Object->m_eFormerEquippedItems))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_eCustomRule") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("EInventoryConfigCustomRule") << "," << JsonStr("$val") << ":";
	p_Stream << "{" << JsonStr("$enumVal") << ":" << static_cast<int>(s_Object->m_eCustomRule) << "," << JsonStr("$enumValName") << ":" << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigCustomRule", static_cast<int>(s_Object->m_eCustomRule))) << "}";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropBackHolsteredItem") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bDropBackHolsteredItem;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSlowAnimation") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSlowAnimation;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceInstantInventoryChange") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bForceInstantInventoryChange;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bCancelIfInventoryInUse") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bCancelIfInventoryInUse;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bSafeDrop") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bSafeDrop;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vSafeDropPosition") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float4") << "," << JsonStr("$val") << ":";
	float4::WriteJson(&s_Object->m_vSafeDropPosition, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryMovementConfig::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryMovementConfig*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_eItemHandlingRightHand") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigItemHandling", static_cast<int>(s_Object->m_eItemHandlingRightHand)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eItemHandlingLeftHand") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigItemHandling", static_cast<int>(s_Object->m_eItemHandlingLeftHand)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eFormerEquippedItems") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigFormerEquippedItems", static_cast<int>(s_Object->m_eFormerEquippedItems)));
	p_Stream << ",";

	p_Stream << JsonStr("m_eCustomRule") << ":";
	p_Stream << JsonStr(ZHMEnums::GetEnumValueName("EInventoryConfigCustomRule", static_cast<int>(s_Object->m_eCustomRule)));
	p_Stream << ",";

	p_Stream << JsonStr("m_bDropBackHolsteredItem") << ":";
	p_Stream << s_Object->m_bDropBackHolsteredItem;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSlowAnimation") << ":";
	p_Stream << s_Object->m_bSlowAnimation;
	p_Stream << ",";

	p_Stream << JsonStr("m_bForceInstantInventoryChange") << ":";
	p_Stream << s_Object->m_bForceInstantInventoryChange;
	p_Stream << ",";

	p_Stream << JsonStr("m_bCancelIfInventoryInUse") << ":";
	p_Stream << s_Object->m_bCancelIfInventoryInUse;
	p_Stream << ",";

	p_Stream << JsonStr("m_bSafeDrop") << ":";
	p_Stream << s_Object->m_bSafeDrop;
	p_Stream << ",";

	p_Stream << JsonStr("m_vSafeDropPosition") << ":";
	float4::WriteSimpleJson(&s_Object->m_vSafeDropPosition, p_Stream);

	p_Stream << "}";
}

void SInventoryMovementConfig::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryMovementConfig s_Object;

	s_Object.m_eItemHandlingRightHand = static_cast<EInventoryConfigItemHandling>(ZHMEnums::GetEnumValueByName("EInventoryConfigItemHandling", std::string_view(p_Document["m_eItemHandlingRightHand"])));

	s_Object.m_eItemHandlingLeftHand = static_cast<EInventoryConfigItemHandling>(ZHMEnums::GetEnumValueByName("EInventoryConfigItemHandling", std::string_view(p_Document["m_eItemHandlingLeftHand"])));

	s_Object.m_eFormerEquippedItems = static_cast<EInventoryConfigFormerEquippedItems>(ZHMEnums::GetEnumValueByName("EInventoryConfigFormerEquippedItems", std::string_view(p_Document["m_eFormerEquippedItems"])));

	s_Object.m_eCustomRule = static_cast<EInventoryConfigCustomRule>(ZHMEnums::GetEnumValueByName("EInventoryConfigCustomRule", std::string_view(p_Document["m_eCustomRule"])));

	s_Object.m_bDropBackHolsteredItem = bool(p_Document["m_bDropBackHolsteredItem"]);

	s_Object.m_bSlowAnimation = bool(p_Document["m_bSlowAnimation"]);

	s_Object.m_bForceInstantInventoryChange = bool(p_Document["m_bForceInstantInventoryChange"]);

	s_Object.m_bCancelIfInventoryInUse = bool(p_Document["m_bCancelIfInventoryInUse"]);

	s_Object.m_bSafeDrop = bool(p_Document["m_bSafeDrop"]);

	{
		float4 s_Item;
		float4::FromSimpleJson(p_Document["m_vSafeDropPosition"], &s_Item);
		s_Object.m_vSafeDropPosition = s_Item;
	}

	*reinterpret_cast<SInventoryMovementConfig*>(p_Target) = s_Object;
}

void SInventoryMovementConfig::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SInventoryMovementConfig*>(p_Object);

	float4::Serialize(&s_Object->m_vSafeDropPosition, p_Serializer, p_OwnOffset + offsetof(SInventoryMovementConfig, m_vSafeDropPosition));
}

ZHMTypeInfo ZSetPieceIconEntity_SIconData::TypeInfo = ZHMTypeInfo("ZSetPieceIconEntity.SIconData", sizeof(ZSetPieceIconEntity_SIconData), alignof(ZSetPieceIconEntity_SIconData), ZSetPieceIconEntity_SIconData::WriteJson, ZSetPieceIconEntity_SIconData::WriteSimpleJson, ZSetPieceIconEntity_SIconData::FromSimpleJson, ZSetPieceIconEntity_SIconData::Serialize);

void ZSetPieceIconEntity_SIconData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSetPieceIconEntity_SIconData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("iCategory") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->iCategory);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("iInteraction1") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->iInteraction1);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("iInteraction2") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->iInteraction2);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("iInteraction3") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->iInteraction3);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("sMissingToolText") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->sMissingToolText);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("bShowMissingTool") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->bShowMissingTool;
	p_Stream << "}";

	p_Stream << "}";
}

void ZSetPieceIconEntity_SIconData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZSetPieceIconEntity_SIconData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("iCategory") << ":";
	p_Stream << JsonStr(s_Object->iCategory);
	p_Stream << ",";

	p_Stream << JsonStr("iInteraction1") << ":";
	p_Stream << JsonStr(s_Object->iInteraction1);
	p_Stream << ",";

	p_Stream << JsonStr("iInteraction2") << ":";
	p_Stream << JsonStr(s_Object->iInteraction2);
	p_Stream << ",";

	p_Stream << JsonStr("iInteraction3") << ":";
	p_Stream << JsonStr(s_Object->iInteraction3);
	p_Stream << ",";

	p_Stream << JsonStr("sMissingToolText") << ":";
	p_Stream << JsonStr(s_Object->sMissingToolText);
	p_Stream << ",";

	p_Stream << JsonStr("bShowMissingTool") << ":";
	p_Stream << s_Object->bShowMissingTool;

	p_Stream << "}";
}

void ZSetPieceIconEntity_SIconData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZSetPieceIconEntity_SIconData s_Object;

	s_Object.iCategory = std::string_view(p_Document["iCategory"]);

	s_Object.iInteraction1 = std::string_view(p_Document["iInteraction1"]);

	s_Object.iInteraction2 = std::string_view(p_Document["iInteraction2"]);

	s_Object.iInteraction3 = std::string_view(p_Document["iInteraction3"]);

	s_Object.sMissingToolText = std::string_view(p_Document["sMissingToolText"]);

	s_Object.bShowMissingTool = bool(p_Document["bShowMissingTool"]);

	*reinterpret_cast<ZSetPieceIconEntity_SIconData*>(p_Target) = s_Object;
}

void ZSetPieceIconEntity_SIconData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZSetPieceIconEntity_SIconData*>(p_Object);

	ZString::Serialize(&s_Object->iCategory, p_Serializer, p_OwnOffset + offsetof(ZSetPieceIconEntity_SIconData, iCategory));
	ZString::Serialize(&s_Object->iInteraction1, p_Serializer, p_OwnOffset + offsetof(ZSetPieceIconEntity_SIconData, iInteraction1));
	ZString::Serialize(&s_Object->iInteraction2, p_Serializer, p_OwnOffset + offsetof(ZSetPieceIconEntity_SIconData, iInteraction2));
	ZString::Serialize(&s_Object->iInteraction3, p_Serializer, p_OwnOffset + offsetof(ZSetPieceIconEntity_SIconData, iInteraction3));
	ZString::Serialize(&s_Object->sMissingToolText, p_Serializer, p_OwnOffset + offsetof(ZSetPieceIconEntity_SIconData, sMissingToolText));
}

ZHMTypeInfo ZInteractionGuideData::TypeInfo = ZHMTypeInfo("ZInteractionGuideData", sizeof(ZInteractionGuideData), alignof(ZInteractionGuideData), ZInteractionGuideData::WriteJson, ZInteractionGuideData::WriteSimpleJson, ZInteractionGuideData::FromSimpleJson, ZInteractionGuideData::Serialize);

void ZInteractionGuideData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInteractionGuideData*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void ZInteractionGuideData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZInteractionGuideData*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void ZInteractionGuideData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZInteractionGuideData s_Object;

	*reinterpret_cast<ZInteractionGuideData*>(p_Target) = s_Object;
}

void ZInteractionGuideData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZInteractionGuideData*>(p_Object);

}

ZHMTypeInfo AI_Private_Details_SStimulus_AgentData_SaveData::TypeInfo = ZHMTypeInfo("AI.Private.Details.SStimulus_AgentData_SaveData", sizeof(AI_Private_Details_SStimulus_AgentData_SaveData), alignof(AI_Private_Details_SStimulus_AgentData_SaveData), AI_Private_Details_SStimulus_AgentData_SaveData::WriteJson, AI_Private_Details_SStimulus_AgentData_SaveData::WriteSimpleJson, AI_Private_Details_SStimulus_AgentData_SaveData::FromSimpleJson, AI_Private_Details_SStimulus_AgentData_SaveData::Serialize);

void AI_Private_Details_SStimulus_AgentData_SaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_Private_Details_SStimulus_AgentData_SaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_AgentData") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_AgentData;
	p_Stream << "}";

	p_Stream << "}";
}

void AI_Private_Details_SStimulus_AgentData_SaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<AI_Private_Details_SStimulus_AgentData_SaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_AgentData") << ":";
	p_Stream << s_Object->m_AgentData;

	p_Stream << "}";
}

void AI_Private_Details_SStimulus_AgentData_SaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	AI_Private_Details_SStimulus_AgentData_SaveData s_Object;

	s_Object.m_AgentData = static_cast<uint32>(int64_t(p_Document["m_AgentData"]));

	*reinterpret_cast<AI_Private_Details_SStimulus_AgentData_SaveData*>(p_Target) = s_Object;
}

void AI_Private_Details_SStimulus_AgentData_SaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<AI_Private_Details_SStimulus_AgentData_SaveData*>(p_Object);

}

ZHMTypeInfo IBulletImpactListener::TypeInfo = ZHMTypeInfo("IBulletImpactListener", sizeof(IBulletImpactListener), alignof(IBulletImpactListener), IBulletImpactListener::WriteJson, IBulletImpactListener::WriteSimpleJson, IBulletImpactListener::FromSimpleJson, IBulletImpactListener::Serialize);

void IBulletImpactListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IBulletImpactListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IBulletImpactListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IBulletImpactListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IBulletImpactListener::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IBulletImpactListener s_Object;

	*reinterpret_cast<IBulletImpactListener*>(p_Target) = s_Object;
}

void IBulletImpactListener::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IBulletImpactListener*>(p_Object);

}

ZHMTypeInfo ZEntityReference::TypeInfo = ZHMTypeInfo("ZEntityReference", sizeof(ZEntityReference), alignof(ZEntityReference), ZEntityReference::WriteJson, ZEntityReference::WriteSimpleJson, ZEntityReference::FromSimpleJson, ZEntityReference::Serialize);

void ZEntityReference::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityReference*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_EntityID") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZEntityID") << "," << JsonStr("$val") << ":";
	ZEntityID::WriteJson(&s_Object->m_EntityID, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_sExposedEntity") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZString") << "," << JsonStr("$val") << ":";
	p_Stream << JsonStr(s_Object->m_sExposedEntity);
	p_Stream << "}";

	p_Stream << "}";
}

void ZEntityReference::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZEntityReference*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_EntityID") << ":";
	ZEntityID::WriteSimpleJson(&s_Object->m_EntityID, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_sExposedEntity") << ":";
	p_Stream << JsonStr(s_Object->m_sExposedEntity);

	p_Stream << "}";
}

void ZEntityReference::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZEntityReference s_Object;

	{
		ZEntityID s_Item;
		ZEntityID::FromSimpleJson(p_Document["m_EntityID"], &s_Item);
		s_Object.m_EntityID = s_Item;
	}

	s_Object.m_sExposedEntity = std::string_view(p_Document["m_sExposedEntity"]);

	*reinterpret_cast<ZEntityReference*>(p_Target) = s_Object;
}

void ZEntityReference::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZEntityReference*>(p_Object);

	ZEntityID::Serialize(&s_Object->m_EntityID, p_Serializer, p_OwnOffset + offsetof(ZEntityReference, m_EntityID));
	ZString::Serialize(&s_Object->m_sExposedEntity, p_Serializer, p_OwnOffset + offsetof(ZEntityReference, m_sExposedEntity));
}

ZHMTypeInfo SInventoryUICache::TypeInfo = ZHMTypeInfo("SInventoryUICache", sizeof(SInventoryUICache), alignof(SInventoryUICache), SInventoryUICache::WriteJson, SInventoryUICache::WriteSimpleJson, SInventoryUICache::FromSimpleJson, SInventoryUICache::Serialize);

void SInventoryUICache::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryUICache*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("mainslots") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SInventoryUISlot>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->mainslots.size(); ++i)
	{
		auto& s_Item0 = s_Object->mainslots[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryUISlot") << "," << JsonStr("$val") << ":";
		SInventoryUISlot::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->mainslots.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("otherslots") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SInventoryUISlot>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->otherslots.size(); ++i)
	{
		auto& s_Item0 = s_Object->otherslots[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SInventoryUISlot") << "," << JsonStr("$val") << ":";
		SInventoryUISlot::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->otherslots.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void SInventoryUICache::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SInventoryUICache*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("mainslots") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->mainslots.size(); ++i)
	{
		auto& s_Item0 = s_Object->mainslots[i];
		SInventoryUISlot::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->mainslots.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("otherslots") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->otherslots.size(); ++i)
	{
		auto& s_Item0 = s_Object->otherslots[i];
		SInventoryUISlot::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->otherslots.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void SInventoryUICache::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SInventoryUICache s_Object;

	for (simdjson::ondemand::value s_Item0 : p_Document["mainslots"])
	{
		SInventoryUISlot s_ArrayItem0;
		SInventoryUISlot::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.mainslots.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["otherslots"])
	{
		SInventoryUISlot s_ArrayItem0;
		SInventoryUISlot::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.otherslots.push_back(s_ArrayItem0);
	}

	*reinterpret_cast<SInventoryUICache*>(p_Target) = s_Object;
}

void SInventoryUICache::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SInventoryUICache*>(p_Object);

	TArray<SInventoryUISlot>::Serialize(&s_Object->mainslots, p_Serializer, p_OwnOffset + offsetof(SInventoryUICache, mainslots));
	TArray<SInventoryUISlot>::Serialize(&s_Object->otherslots, p_Serializer, p_OwnOffset + offsetof(SInventoryUICache, otherslots));
}

ZHMTypeInfo ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim::TypeInfo = ZHMTypeInfo("ZUIActionSelectorNavigationInventoryEntity.SActionSelectorSlotDisplayInfoSlim", sizeof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim), alignof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim), ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim::WriteJson, ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim::WriteSimpleJson, ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim::FromSimpleJson, ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim::Serialize);

void ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->icon, p_Stream);

	p_Stream << "}";
}

void ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim s_Object;

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["icon"], &s_Item);
		s_Object.icon = s_Item;
	}

	*reinterpret_cast<ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim*>(p_Target) = s_Object;
}

void ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim*>(p_Object);

	ZRuntimeResourceID::Serialize(&s_Object->icon, p_Serializer, p_OwnOffset + offsetof(ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfoSlim, icon));
}

ZHMTypeInfo SHudMissionTimerControllerData::TypeInfo = ZHMTypeInfo("SHudMissionTimerControllerData", sizeof(SHudMissionTimerControllerData), alignof(SHudMissionTimerControllerData), SHudMissionTimerControllerData::WriteJson, SHudMissionTimerControllerData::WriteSimpleJson, SHudMissionTimerControllerData::FromSimpleJson, SHudMissionTimerControllerData::Serialize);

void SHudMissionTimerControllerData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHudMissionTimerControllerData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fScoreGameTimeStart") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZGameTime") << "," << JsonStr("$val") << ":";
	ZGameTime::WriteJson(&s_Object->m_fScoreGameTimeStart, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasIntroCutFired") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bWasIntroCutFired;
	p_Stream << "}";

	p_Stream << "}";
}

void SHudMissionTimerControllerData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHudMissionTimerControllerData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fScoreGameTimeStart") << ":";
	ZGameTime::WriteSimpleJson(&s_Object->m_fScoreGameTimeStart, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_bWasIntroCutFired") << ":";
	p_Stream << s_Object->m_bWasIntroCutFired;

	p_Stream << "}";
}

void SHudMissionTimerControllerData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHudMissionTimerControllerData s_Object;

	{
		ZGameTime s_Item;
		ZGameTime::FromSimpleJson(p_Document["m_fScoreGameTimeStart"], &s_Item);
		s_Object.m_fScoreGameTimeStart = s_Item;
	}

	s_Object.m_bWasIntroCutFired = bool(p_Document["m_bWasIntroCutFired"]);

	*reinterpret_cast<SHudMissionTimerControllerData*>(p_Target) = s_Object;
}

void SHudMissionTimerControllerData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHudMissionTimerControllerData*>(p_Object);

	ZGameTime::Serialize(&s_Object->m_fScoreGameTimeStart, p_Serializer, p_OwnOffset + offsetof(SHudMissionTimerControllerData, m_fScoreGameTimeStart));
}

ZHMTypeInfo SHUDPIPControllerSaveData::TypeInfo = ZHMTypeInfo("SHUDPIPControllerSaveData", sizeof(SHUDPIPControllerSaveData), alignof(SHUDPIPControllerSaveData), SHUDPIPControllerSaveData::WriteJson, SHUDPIPControllerSaveData::WriteSimpleJson, SHUDPIPControllerSaveData::FromSimpleJson, SHUDPIPControllerSaveData::Serialize);

void SHUDPIPControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHUDPIPControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bPiPEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bPiPEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SHUDPIPControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SHUDPIPControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bPiPEnabled") << ":";
	p_Stream << s_Object->m_bPiPEnabled;

	p_Stream << "}";
}

void SHUDPIPControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SHUDPIPControllerSaveData s_Object;

	s_Object.m_bPiPEnabled = bool(p_Document["m_bPiPEnabled"]);

	*reinterpret_cast<SHUDPIPControllerSaveData*>(p_Target) = s_Object;
}

void SHUDPIPControllerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SHUDPIPControllerSaveData*>(p_Object);

}

ZHMTypeInfo ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim::TypeInfo = ZHMTypeInfo("ZUIEmoteSelectorNavigationEntity.SActionSelectorSlotDisplayInfoSlim", sizeof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim), alignof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim), ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim::WriteJson, ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim::WriteSimpleJson, ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim::FromSimpleJson, ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim::Serialize);

void ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("icon") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZRuntimeResourceID") << "," << JsonStr("$val") << ":";
	ZRuntimeResourceID::WriteJson(&s_Object->icon, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("icon") << ":";
	ZRuntimeResourceID::WriteSimpleJson(&s_Object->icon, p_Stream);

	p_Stream << "}";
}

void ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim s_Object;

	{
		ZRuntimeResourceID s_Item;
		ZRuntimeResourceID::FromSimpleJson(p_Document["icon"], &s_Item);
		s_Object.icon = s_Item;
	}

	*reinterpret_cast<ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim*>(p_Target) = s_Object;
}

void ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim*>(p_Object);

	ZRuntimeResourceID::Serialize(&s_Object->icon, p_Serializer, p_OwnOffset + offsetof(ZUIEmoteSelectorNavigationEntity_SActionSelectorSlotDisplayInfoSlim, icon));
}

ZHMTypeInfo ZScopedER64::TypeInfo = ZHMTypeInfo("ZScopedER64", sizeof(ZScopedER64), alignof(ZScopedER64), ZScopedER64::WriteJson, ZScopedER64::WriteSimpleJson, ZScopedER64::FromSimpleJson, ZScopedER64::Serialize);

void ZScopedER64::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZScopedER64*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_er64") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZER64") << "," << JsonStr("$val") << ":";
	ZER64::WriteJson(&s_Object->m_er64, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aScopePath") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<uint64>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aScopePath.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aScopePath[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint64") << "," << JsonStr("$val") << ":";
		p_Stream << s_Item0;
		p_Stream << "}";

		if (i < s_Object->m_aScopePath.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";

	p_Stream << "}";
}

void ZScopedER64::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<ZScopedER64*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_er64") << ":";
	ZER64::WriteSimpleJson(&s_Object->m_er64, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_aScopePath") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aScopePath.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aScopePath[i];
		p_Stream << s_Item0;

		if (i < s_Object->m_aScopePath.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";

	p_Stream << "}";
}

void ZScopedER64::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	ZScopedER64 s_Object;

	{
		ZER64 s_Item;
		ZER64::FromSimpleJson(p_Document["m_er64"], &s_Item);
		s_Object.m_er64 = s_Item;
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aScopePath"])
	{
		s_Object.m_aScopePath.push_back(uint64(s_Item0));
	}

	*reinterpret_cast<ZScopedER64*>(p_Target) = s_Object;
}

void ZScopedER64::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<ZScopedER64*>(p_Object);

	ZER64::Serialize(&s_Object->m_er64, p_Serializer, p_OwnOffset + offsetof(ZScopedER64, m_er64));
	TArray<uint64>::Serialize(&s_Object->m_aScopePath, p_Serializer, p_OwnOffset + offsetof(ZScopedER64, m_aScopePath));
}

ZHMTypeInfo IContractEvaluationContextListener::TypeInfo = ZHMTypeInfo("IContractEvaluationContextListener", sizeof(IContractEvaluationContextListener), alignof(IContractEvaluationContextListener), IContractEvaluationContextListener::WriteJson, IContractEvaluationContextListener::WriteSimpleJson, IContractEvaluationContextListener::FromSimpleJson, IContractEvaluationContextListener::Serialize);

void IContractEvaluationContextListener::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IContractEvaluationContextListener*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IContractEvaluationContextListener::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IContractEvaluationContextListener*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IContractEvaluationContextListener::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IContractEvaluationContextListener s_Object;

	*reinterpret_cast<IContractEvaluationContextListener*>(p_Target) = s_Object;
}

void IContractEvaluationContextListener::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IContractEvaluationContextListener*>(p_Object);

}

ZHMTypeInfo SSecuritySystemRecorderSaveData::TypeInfo = ZHMTypeInfo("SSecuritySystemRecorderSaveData", sizeof(SSecuritySystemRecorderSaveData), alignof(SSecuritySystemRecorderSaveData), SSecuritySystemRecorderSaveData::WriteJson, SSecuritySystemRecorderSaveData::WriteSimpleJson, SSecuritySystemRecorderSaveData::FromSimpleJson, SSecuritySystemRecorderSaveData::Serialize);

void SSecuritySystemRecorderSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSecuritySystemRecorderSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bHasRecordings") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bHasRecordings;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFunctional") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bIsFunctional;
	p_Stream << "}";

	p_Stream << "}";
}

void SSecuritySystemRecorderSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SSecuritySystemRecorderSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bHasRecordings") << ":";
	p_Stream << s_Object->m_bHasRecordings;
	p_Stream << ",";

	p_Stream << JsonStr("m_bIsFunctional") << ":";
	p_Stream << s_Object->m_bIsFunctional;

	p_Stream << "}";
}

void SSecuritySystemRecorderSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SSecuritySystemRecorderSaveData s_Object;

	s_Object.m_bHasRecordings = bool(p_Document["m_bHasRecordings"]);

	s_Object.m_bIsFunctional = bool(p_Document["m_bIsFunctional"]);

	*reinterpret_cast<SSecuritySystemRecorderSaveData*>(p_Target) = s_Object;
}

void SSecuritySystemRecorderSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SSecuritySystemRecorderSaveData*>(p_Object);

}

ZHMTypeInfo STrajectoryTrackSaveData::TypeInfo = ZHMTypeInfo("STrajectoryTrackSaveData", sizeof(STrajectoryTrackSaveData), alignof(STrajectoryTrackSaveData), STrajectoryTrackSaveData::WriteJson, STrajectoryTrackSaveData::WriteSimpleJson, STrajectoryTrackSaveData::FromSimpleJson, STrajectoryTrackSaveData::Serialize);

void STrajectoryTrackSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STrajectoryTrackSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_vOriginalEntityTransform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_vOriginalEntityTransform, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vTargetStartTransform") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_vTargetStartTransform, p_Stream);
	p_Stream << "}";

	p_Stream << "}";
}

void STrajectoryTrackSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<STrajectoryTrackSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_vOriginalEntityTransform") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_vOriginalEntityTransform, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vTargetStartTransform") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_vTargetStartTransform, p_Stream);

	p_Stream << "}";
}

void STrajectoryTrackSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	STrajectoryTrackSaveData s_Object;

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_vOriginalEntityTransform"], &s_Item);
		s_Object.m_vOriginalEntityTransform = s_Item;
	}

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_vTargetStartTransform"], &s_Item);
		s_Object.m_vTargetStartTransform = s_Item;
	}

	*reinterpret_cast<STrajectoryTrackSaveData*>(p_Target) = s_Object;
}

void STrajectoryTrackSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<STrajectoryTrackSaveData*>(p_Object);

	SMatrix::Serialize(&s_Object->m_vOriginalEntityTransform, p_Serializer, p_OwnOffset + offsetof(STrajectoryTrackSaveData, m_vOriginalEntityTransform));
	SMatrix::Serialize(&s_Object->m_vTargetStartTransform, p_Serializer, p_OwnOffset + offsetof(STrajectoryTrackSaveData, m_vTargetStartTransform));
}

ZHMTypeInfo SAIVisionBlockerSaveData::TypeInfo = ZHMTypeInfo("SAIVisionBlockerSaveData", sizeof(SAIVisionBlockerSaveData), alignof(SAIVisionBlockerSaveData), SAIVisionBlockerSaveData::WriteJson, SAIVisionBlockerSaveData::WriteSimpleJson, SAIVisionBlockerSaveData::FromSimpleJson, SAIVisionBlockerSaveData::Serialize);

void SAIVisionBlockerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAIVisionBlockerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("bool") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_bEnabled;
	p_Stream << "}";

	p_Stream << "}";
}

void SAIVisionBlockerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SAIVisionBlockerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_bEnabled") << ":";
	p_Stream << s_Object->m_bEnabled;

	p_Stream << "}";
}

void SAIVisionBlockerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SAIVisionBlockerSaveData s_Object;

	s_Object.m_bEnabled = bool(p_Document["m_bEnabled"]);

	*reinterpret_cast<SAIVisionBlockerSaveData*>(p_Target) = s_Object;
}

void SAIVisionBlockerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SAIVisionBlockerSaveData*>(p_Object);

}

ZHMTypeInfo SCrowdMapData::TypeInfo = ZHMTypeInfo("SCrowdMapData", sizeof(SCrowdMapData), alignof(SCrowdMapData), SCrowdMapData::WriteJson, SCrowdMapData::WriteSimpleJson, SCrowdMapData::FromSimpleJson, SCrowdMapData::Serialize);

void SCrowdMapData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdMapData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_nVersion") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nVersion;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vCellConsts") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector4") << "," << JsonStr("$val") << ":";
	SVector4::WriteJson(&s_Object->m_vCellConsts, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridSizeX") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridSizeX;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridSizeY") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridSizeY;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCellSizeX") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCellSizeX;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nCellSizeY") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("uint32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nCellSizeY;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_GridMap") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<ZCrowdGridPoint>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_GridMap.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_GridMap[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("ZCrowdGridPoint") << "," << JsonStr("$val") << ":";
		ZCrowdGridPoint::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_GridMap.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridMapHeightOffsetsScale") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGridMapHeightOffsetsScale;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridMapHeightOffsetsBias") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fGridMapHeightOffsetsBias;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CellFlags") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SCrowdCells>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_CellFlags.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_CellFlags[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdCells") << "," << JsonStr("$val") << ":";
		SCrowdCells::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_CellFlags.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_CellGroups") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SCrowdCells>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_CellGroups.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_CellGroups[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdCells") << "," << JsonStr("$val") << ":";
		SCrowdCells::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_CellGroups.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupFlowStartChannel") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("int32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGroupFlowStartChannel;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_aFlowChannels") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("TArray<SCrowdFlowChannel>") << "," << JsonStr("$val") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowChannels.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aFlowChannels[i];
		p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SCrowdFlowChannel") << "," << JsonStr("$val") << ":";
		SCrowdFlowChannel::WriteJson(&s_Item0, p_Stream);
		p_Stream << "}";

		if (i < s_Object->m_aFlowChannels.size() - 1)
			p_Stream << ",";
	}
	p_Stream << "]";
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCellSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridCellSize;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_mObjectToWorld") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SMatrix") << "," << JsonStr("$val") << ":";
	SMatrix::WriteJson(&s_Object->m_mObjectToWorld, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_vGlobalSize") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("SVector3") << "," << JsonStr("$val") << ":";
	SVector3::WriteJson(&s_Object->m_vGlobalSize, p_Stream);
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridGeneratorOffset") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_nGridGeneratorOffset;
	p_Stream << "}";

	p_Stream << "}";
}

void SCrowdMapData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SCrowdMapData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_nVersion") << ":";
	p_Stream << s_Object->m_nVersion;
	p_Stream << ",";

	p_Stream << JsonStr("m_vCellConsts") << ":";
	SVector4::WriteSimpleJson(&s_Object->m_vCellConsts, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridSizeX") << ":";
	p_Stream << s_Object->m_nGridSizeX;
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridSizeY") << ":";
	p_Stream << s_Object->m_nGridSizeY;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCellSizeX") << ":";
	p_Stream << s_Object->m_nCellSizeX;
	p_Stream << ",";

	p_Stream << JsonStr("m_nCellSizeY") << ":";
	p_Stream << s_Object->m_nCellSizeY;
	p_Stream << ",";

	p_Stream << JsonStr("m_GridMap") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_GridMap.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_GridMap[i];
		ZCrowdGridPoint::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_GridMap.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridMapHeightOffsetsScale") << ":";
	p_Stream << s_Object->m_fGridMapHeightOffsetsScale;
	p_Stream << ",";

	p_Stream << JsonStr("m_fGridMapHeightOffsetsBias") << ":";
	p_Stream << s_Object->m_fGridMapHeightOffsetsBias;
	p_Stream << ",";

	p_Stream << JsonStr("m_CellFlags") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_CellFlags.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_CellFlags[i];
		SCrowdCells::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_CellFlags.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_CellGroups") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_CellGroups.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_CellGroups[i];
		SCrowdCells::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_CellGroups.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGroupFlowStartChannel") << ":";
	p_Stream << s_Object->m_nGroupFlowStartChannel;
	p_Stream << ",";

	p_Stream << JsonStr("m_aFlowChannels") << ":";
	p_Stream << "[";
	for (size_t i = 0; i < s_Object->m_aFlowChannels.size(); ++i)
	{
		auto& s_Item0 = s_Object->m_aFlowChannels[i];
		SCrowdFlowChannel::WriteSimpleJson(&s_Item0, p_Stream);

		if (i < s_Object->m_aFlowChannels.size() - 1)
			p_Stream << ",";
	}

	p_Stream << "]";
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridCellSize") << ":";
	p_Stream << s_Object->m_nGridCellSize;
	p_Stream << ",";

	p_Stream << JsonStr("m_mObjectToWorld") << ":";
	SMatrix::WriteSimpleJson(&s_Object->m_mObjectToWorld, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_vGlobalSize") << ":";
	SVector3::WriteSimpleJson(&s_Object->m_vGlobalSize, p_Stream);
	p_Stream << ",";

	p_Stream << JsonStr("m_nGridGeneratorOffset") << ":";
	p_Stream << s_Object->m_nGridGeneratorOffset;

	p_Stream << "}";
}

void SCrowdMapData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SCrowdMapData s_Object;

	s_Object.m_nVersion = static_cast<uint32>(int64_t(p_Document["m_nVersion"]));

	{
		SVector4 s_Item;
		SVector4::FromSimpleJson(p_Document["m_vCellConsts"], &s_Item);
		s_Object.m_vCellConsts = s_Item;
	}

	s_Object.m_nGridSizeX = static_cast<uint32>(int64_t(p_Document["m_nGridSizeX"]));

	s_Object.m_nGridSizeY = static_cast<uint32>(int64_t(p_Document["m_nGridSizeY"]));

	s_Object.m_nCellSizeX = static_cast<uint32>(int64_t(p_Document["m_nCellSizeX"]));

	s_Object.m_nCellSizeY = static_cast<uint32>(int64_t(p_Document["m_nCellSizeY"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_GridMap"])
	{
		ZCrowdGridPoint s_ArrayItem0;
		ZCrowdGridPoint::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_GridMap.push_back(s_ArrayItem0);
	}

	s_Object.m_fGridMapHeightOffsetsScale = static_cast<float32>(double(p_Document["m_fGridMapHeightOffsetsScale"]));

	s_Object.m_fGridMapHeightOffsetsBias = static_cast<float32>(double(p_Document["m_fGridMapHeightOffsetsBias"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_CellFlags"])
	{
		SCrowdCells s_ArrayItem0;
		SCrowdCells::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_CellFlags.push_back(s_ArrayItem0);
	}

	for (simdjson::ondemand::value s_Item0 : p_Document["m_CellGroups"])
	{
		SCrowdCells s_ArrayItem0;
		SCrowdCells::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_CellGroups.push_back(s_ArrayItem0);
	}

	s_Object.m_nGroupFlowStartChannel = static_cast<int32>(int64_t(p_Document["m_nGroupFlowStartChannel"]));

	for (simdjson::ondemand::value s_Item0 : p_Document["m_aFlowChannels"])
	{
		SCrowdFlowChannel s_ArrayItem0;
		SCrowdFlowChannel::FromSimpleJson(s_Item0, &s_ArrayItem0);
		s_Object.m_aFlowChannels.push_back(s_ArrayItem0);
	}

	s_Object.m_nGridCellSize = static_cast<float32>(double(p_Document["m_nGridCellSize"]));

	{
		SMatrix s_Item;
		SMatrix::FromSimpleJson(p_Document["m_mObjectToWorld"], &s_Item);
		s_Object.m_mObjectToWorld = s_Item;
	}

	{
		SVector3 s_Item;
		SVector3::FromSimpleJson(p_Document["m_vGlobalSize"], &s_Item);
		s_Object.m_vGlobalSize = s_Item;
	}

	s_Object.m_nGridGeneratorOffset = static_cast<float32>(double(p_Document["m_nGridGeneratorOffset"]));

	*reinterpret_cast<SCrowdMapData*>(p_Target) = s_Object;
}

void SCrowdMapData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SCrowdMapData*>(p_Object);

	SVector4::Serialize(&s_Object->m_vCellConsts, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, m_vCellConsts));
	TArray<ZCrowdGridPoint>::Serialize(&s_Object->m_GridMap, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, m_GridMap));
	TArray<SCrowdCells>::Serialize(&s_Object->m_CellFlags, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, m_CellFlags));
	TArray<SCrowdCells>::Serialize(&s_Object->m_CellGroups, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, m_CellGroups));
	TArray<SCrowdFlowChannel>::Serialize(&s_Object->m_aFlowChannels, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, m_aFlowChannels));
	SMatrix::Serialize(&s_Object->m_mObjectToWorld, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, m_mObjectToWorld));
	SVector3::Serialize(&s_Object->m_vGlobalSize, p_Serializer, p_OwnOffset + offsetof(SCrowdMapData, m_vGlobalSize));
}

ZHMTypeInfo IMetricValue::TypeInfo = ZHMTypeInfo("IMetricValue", sizeof(IMetricValue), alignof(IMetricValue), IMetricValue::WriteJson, IMetricValue::WriteSimpleJson, IMetricValue::FromSimpleJson, IMetricValue::Serialize);

void IMetricValue::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IMetricValue*>(p_Object);

	p_Stream << "{";
	p_Stream << "}";
}

void IMetricValue::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<IMetricValue*>(p_Object);

	p_Stream << "{";

	p_Stream << "}";
}

void IMetricValue::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	IMetricValue s_Object;

	*reinterpret_cast<IMetricValue*>(p_Target) = s_Object;
}

void IMetricValue::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<IMetricValue*>(p_Object);

}

ZHMTypeInfo SActorIKControllerSaveData::TypeInfo = ZHMTypeInfo("SActorIKControllerSaveData", sizeof(SActorIKControllerSaveData), alignof(SActorIKControllerSaveData), SActorIKControllerSaveData::WriteJson, SActorIKControllerSaveData::WriteSimpleJson, SActorIKControllerSaveData::FromSimpleJson, SActorIKControllerSaveData::Serialize);

void SActorIKControllerSaveData::WriteJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorIKControllerSaveData*>(p_Object);

	p_Stream << "{";
	p_Stream << JsonStr("m_fRightHandWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRightHandWeight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLeftHandWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLeftHandWeight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fRightHandTargetWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fRightHandTargetWeight;
	p_Stream << "}";
	p_Stream << ",";

	p_Stream << JsonStr("m_fLeftHandTargetWeight") << ":";
	p_Stream << "{" << JsonStr("$type") << ":" << JsonStr("float32") << "," << JsonStr("$val") << ":";
	p_Stream << s_Object->m_fLeftHandTargetWeight;
	p_Stream << "}";

	p_Stream << "}";
}

void SActorIKControllerSaveData::WriteSimpleJson(void* p_Object, std::ostream& p_Stream)
{
	auto* s_Object = reinterpret_cast<SActorIKControllerSaveData*>(p_Object);

	p_Stream << "{";

	p_Stream << JsonStr("m_fRightHandWeight") << ":";
	p_Stream << s_Object->m_fRightHandWeight;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLeftHandWeight") << ":";
	p_Stream << s_Object->m_fLeftHandWeight;
	p_Stream << ",";

	p_Stream << JsonStr("m_fRightHandTargetWeight") << ":";
	p_Stream << s_Object->m_fRightHandTargetWeight;
	p_Stream << ",";

	p_Stream << JsonStr("m_fLeftHandTargetWeight") << ":";
	p_Stream << s_Object->m_fLeftHandTargetWeight;

	p_Stream << "}";
}

void SActorIKControllerSaveData::FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target)
{
	SActorIKControllerSaveData s_Object;

	s_Object.m_fRightHandWeight = static_cast<float32>(double(p_Document["m_fRightHandWeight"]));

	s_Object.m_fLeftHandWeight = static_cast<float32>(double(p_Document["m_fLeftHandWeight"]));

	s_Object.m_fRightHandTargetWeight = static_cast<float32>(double(p_Document["m_fRightHandTargetWeight"]));

	s_Object.m_fLeftHandTargetWeight = static_cast<float32>(double(p_Document["m_fLeftHandTargetWeight"]));

	*reinterpret_cast<SActorIKControllerSaveData*>(p_Target) = s_Object;
}

void SActorIKControllerSaveData::Serialize(void* p_Object, ZHMSerializer& p_Serializer, uintptr_t p_OwnOffset)
{
	auto* s_Object = reinterpret_cast<SActorIKControllerSaveData*>(p_Object);

}

