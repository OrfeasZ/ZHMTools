/*
 * WARNING: This file is automatically generated. DO NOT MODIFY unless you know what you're doing.
 *
 * If you wish to regenerate this file because of a game update use the ZHMTools CodeGen tool:
 * https://github.com/OrfeasZ/ZHMTools/releases
 */

#pragma once

#include <ZHM/ZHMPrimitives.h>
#include <ZHM/ZHMTypeInfo.h>

class ZHMTypeInfo;

#pragma pack(push, 1)

// Size: 0x4
class /*alignas(4)*/ AnimationEventDataTypes_SBlend
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const AnimationEventDataTypes_SBlend& p_Other) const;
	bool operator!=(const AnimationEventDataTypes_SBlend& p_Other) const { return !(*this == p_Other); }

	float32 m_fBlendTime; // 0x0
};

// Size: 0x4
class /*alignas(4)*/ AnimationEventDataTypes_SLegacy
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const AnimationEventDataTypes_SLegacy& p_Other) const;
	bool operator!=(const AnimationEventDataTypes_SLegacy& p_Other) const { return !(*this == p_Other); }

	int32 m_nEventID; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ ZRuntimeResourceID
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZRuntimeResourceID& p_Other) const;
	bool operator!=(const ZRuntimeResourceID& p_Other) const { return !(*this == p_Other); }

	uint32 m_IDHigh; // 0x0
	uint32 m_IDLow; // 0x4
};

// Size: 0xC
class /*alignas(4)*/ AnimationTakeDataTypes_SGeneric
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const AnimationTakeDataTypes_SGeneric& p_Other) const;
	bool operator!=(const AnimationTakeDataTypes_SGeneric& p_Other) const { return !(*this == p_Other); }

	float32 m_fTest; // 0x0
	ZRuntimeResourceID m_fResourceTest; // 0x4
};

// Size: 0x1
enum class AudioBusFlags : int8_t
{
	AudioBus_Master = 1,
	AudioBus_Primary = 2,
};

// Size: 0x1
enum class AudioCurve : int8_t
{
	AudioCurve_Log3 = 0,
	AudioCurve_Sine = 1,
	AudioCurve_Log1 = 2,
	AudioCurve_InvSCurve = 3,
	AudioCurve_Linear = 4,
	AudioCurve_SCurve = 5,
	AudioCurve_Exp1 = 6,
	AudioCurve_SineRecip = 7,
	AudioCurve_Exp3 = 8,
	AudioCurve_LastFadeCurve = 9,
	AudioCurve_Constant = 10,
};

// Size: 0x1
class /*alignas(1)*/ BoneId
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const BoneId& p_Other) const;
	bool operator!=(const BoneId& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x4
enum class BoneId_Enum : int32_t
{
	GROUND = 0,
	PELVIS = 1,
	SPINE = 2,
	SPINE_1 = 3,
	SPINE_2 = 4,
	NECK = 5,
	NECK1 = 6,
	HEAD = 7,
	LEFT_THIGH = 8,
	LEFT_THIGH_TWIST = 9,
	LEFT_THIGH_TWIST1 = 10,
	LEFT_THIGH_TWIST2 = 11,
	LEFT_CALF = 12,
	LEFT_FOOT = 13,
	LEFT_TOE = 14,
	LEFT_TOENUB = 15,
	RIGHT_THIGH = 16,
	RIGHT_THIGH_TWIST = 17,
	RIGHT_THIGH_TWIST1 = 18,
	RIGHT_THIGH_TWIST2 = 19,
	RIGHT_CALF = 20,
	RIGHT_FOOT = 21,
	RIGHT_TOE = 22,
	RIGHT_TOENUB = 23,
	LEFT_CLAVICLE = 24,
	LEFT_UPPER_ARM = 25,
	LEFT_UPPER_ARM_TWIST = 26,
	LEFT_UPPER_ARM_TWIST1 = 27,
	LEFT_UPPER_ARM_TWIST2 = 28,
	LEFT_FOREARM = 29,
	LEFT_FORETWIST = 30,
	LEFT_FORETWIST1 = 31,
	LEFT_FORETWIST2 = 32,
	LEFT_HAND = 33,
	LEFT_FINGER_0 = 34,
	LEFT_FINGER_01 = 35,
	LEFT_FINGER_02 = 36,
	LEFT_FINGER_1 = 37,
	LEFT_FINGER_11 = 38,
	LEFT_FINGER_12 = 39,
	LEFT_FINGER_2 = 40,
	LEFT_FINGER_21 = 41,
	LEFT_FINGER_22 = 42,
	LEFT_FINGER_3 = 43,
	LEFT_FINGER_31 = 44,
	LEFT_FINGER_32 = 45,
	LEFT_FINGER_4 = 46,
	LEFT_FINGER_41 = 47,
	LEFT_FINGER_42 = 48,
	RIGHT_CLAVICLE = 49,
	RIGHT_UPPER_ARM = 50,
	RIGHT_UPPER_ARM_TWIST = 51,
	RIGHT_UPPER_ARM_TWIST1 = 52,
	RIGHT_UPPER_ARM_TWIST2 = 53,
	RIGHT_FOREARM = 54,
	RIGHT_FORETWIST = 55,
	RIGHT_FORETWIST1 = 56,
	RIGHT_FORETWIST2 = 57,
	RIGHT_HAND = 58,
	RIGHT_FINGER_0 = 59,
	RIGHT_FINGER_01 = 60,
	RIGHT_FINGER_02 = 61,
	RIGHT_FINGER_1 = 62,
	RIGHT_FINGER_11 = 63,
	RIGHT_FINGER_12 = 64,
	RIGHT_FINGER_2 = 65,
	RIGHT_FINGER_21 = 66,
	RIGHT_FINGER_22 = 67,
	RIGHT_FINGER_3 = 68,
	RIGHT_FINGER_31 = 69,
	RIGHT_FINGER_32 = 70,
	RIGHT_FINGER_4 = 71,
	RIGHT_FINGER_41 = 72,
	RIGHT_FINGER_42 = 73,
	XTRA_MUS_R_HIP = 74,
	XTRA_MUS_L_HIP = 75,
	RIGHT_HAND_ATTACHER = 76,
	LEFT_HAND_ATTACHER = 77,
	HIP_ATTACHER = 78,
	BACK_ATTACHER = 79,
	FREE_ATTACHER = 80,
	CAMERA_ATTACHER_01 = 81,
	CAMERA_ATTACHER_02 = 82,
	FREE_ATTACHER_PROP_01 = 83,
	FREE_ATTACHER_PROP_02 = 84,
	LEFT_EYE = 85,
	LEFT_EYE_LID = 86,
	RIGHT_EYE = 87,
	RIGHT_EYE_LID = 88,
	LOWER_LIP = 89,
	JAW = 90,
	HOLSTER_ATTACHER = 91,
	LEFT_WRIST_EFFECTOR = 92,
	LEFT_FINGER_0_EFFECTOR = 93,
	LEFT_FINGER_1_EFFECTOR = 94,
	LEFT_FINGER_2_EFFECTOR = 95,
	LEFT_FINGER_3_EFFECTOR = 96,
	LEFT_FINGER_4_EFFECTOR = 97,
	RIGHT_WRIST_EFFECTOR = 98,
	RIGHT_FINGER_0_EFFECTOR = 99,
	RIGHT_FINGER_1_EFFECTOR = 100,
	RIGHT_FINGER_2_EFFECTOR = 101,
	RIGHT_FINGER_3_EFFECTOR = 102,
	RIGHT_FINGER_4_EFFECTOR = 103,
	BONEID_LAST = 104,
};

// Size: 0x4
enum class CrowdMapImpl_CellFlags : int32_t
{
	CELLFLAG_RESTRICTED_A = 1,
	CELLFLAG_RESTRICTED_B = 2,
	CELLFLAG_RESTRICTED_C = 4,
	CELLFLAG_WALKABLE = 8,
	CELLFLAG_TELEPORT_IN = 16,
	CELLFLAG_TELEPORT_OUT = 32,
	CELLFLAG_UNUSED = 64,
	CELLFLAG_PANIC_ONLY = 128,
};

// Size: 0x4
enum class CrowdReactionAIEventType : int32_t
{
	CROWDAIEVENT_NONE = 0,
	CROWDAIEVENT_CURIOUS = 1,
	CROWDAIEVENT_ALERTED = 2,
	CROWDAIEVENT_BLAME_FOR_WEAPON = 3,
	CROWDAIEVENT_BLAME_FOR_KILL = 4,
};

// Size: 0x4
enum class CrowdRegionType : int32_t
{
	CROWDSPHERE_NONE = 0,
	CROWDSPHERE_SAFE = 1,
	CROWDSPHERE_POI = 2,
	CROWDSPHERE_AVOID = 3,
	CROWDSPHERE_RELOCATE = 4,
	CROWDSPHERE_STOP = 5,
	CROWDSPHERE_ALERT = 6,
	CROWDSPHERE_SCARE = 7,
	CROWDSPHERE_GETDOWN = 8,
	CROWDSPHERE_DIE = 9,
};

// Size: 0x4
enum class CrowdUtil_ECrowdActorMood : int32_t
{
	CM_AMBIENT = 0,
	CM_ALERTED = 1,
	CM_SCARED = 2,
	CM_PANICED = 3,
	CM_DEAD = 4,
	CM_DISABLED = 5,
	NUM_ACTOR_MOOD_TYPES = 6,
};

// Size: 0x4
enum class CrowdUtil_ECrowdDirection : int32_t
{
	NORTH = 0,
	EAST = 1,
	SOUTH = 2,
	WEST = 3,
};

// Size: 0x4
enum class CrowdUtil_ECrowdFacing : int32_t
{
	FRONT = 0,
	BACK = 1,
};

// Size: 0x4
enum class CrowdUtil_ECrowdSide : int32_t
{
	LEFT = 0,
	RIGHT = 1,
};

// Size: 0x4
enum class CrowdUtil_ECrowdStandingPush : int32_t
{
	PUSH_FRONT = 0,
	PUSH_FRONT_LEFT = 1,
	PUSH_LEFT = 2,
	PUSH_BACK_LEFT = 3,
	PUSH_BACK = 4,
	PUSH_BACK_RIGHT = 5,
	PUSH_RIGHT = 6,
	PUSH_FRONT_RIGHT = 7,
};

// Size: 0x4
enum class CrowdUtil_EDefaultStateTypes : int32_t
{
	STATE_IDLE = 0,
	STATE_WALK = 1,
	STATE_PENDINGWALK = 2,
	STATE_DEAD = 3,
	STATE_SCARED = 4,
	STATE_PENDINGSCARED = 5,
	STATE_POSSESSED = 6,
	STATE_ALERT = 7,
	STATE_PRONE = 8,
	STATE_RELOCATE = 9,
	STATE_PENDINGRELOCATE = 10,
	NUM_DEFAULT_STATES = 11,
};

// Size: 0x4
enum class CrowdUtil_EGenderReq : int32_t
{
	eGender_Any = 0,
	eGender_Male = 1,
	eGender_Female = 2,
};

// Size: 0x4
enum class EAIEventType : int32_t
{
	AIET_None = 0,
	AIET_Ignore = 1,
	AIET_PreventAutoPurge = 2,
	AIET_ShootTarget = 3,
	AIET_Hunting = 4,
	AIET_FuseboxSabotaged = 5,
	AIET_Order_Target = 6,
	AIET_END_BOOLEAN_EVENTS = 7,
	AIET_LookedAt = 8,
	AIET_Killer = 9,
	AIET_Strangler = 10,
	AIET_Suspicious = 11,
	AIET_KnownBody = 12,
	AIET_Dead = 13,
	AIET_DisguiseSuspicious = 14,
	AIET_DamagingMe = 15,
	AIET_KnownInCloset = 16,
	AIET_KnownInNpcUnreachableArea = 17,
	AIET_NearSabotagedFusebox = 18,
	AIET_FuseboxAck = 19,
	AIET_DisablingFusebox = 20,
	AIET_Sense = 21,
	AIET_HasBeenInCombat = 22,
	AIET_ReportedByCamera = 23,
	AIET_SOUNDEVENTS_LOW_LOUDNESS_BEGIN = 24,
	AIET_SoundFootsteps = 25,
	AIET_SoundThrownItemCollision = 26,
	AIET_SoundGunSilenced = 27,
	AIET_SoundHitmanGunSilenced = 28,
	AIET_SoundLegalGunSilenced = 29,
	AIET_SoundLegalHitmanGunSilenced = 30,
	AIET_SoundEmptyGun = 31,
	AIET_SoundCCBreakNeck = 32,
	AIET_SoundCCChoke = 33,
	AIET_SoundCCFiberwire = 34,
	AIET_SoundBulletImpact = 35,
	AIET_SoundLegalBulletImpact = 36,
	AIET_SoundSpeakWarning = 37,
	AIET_SoundSpeakAngry = 38,
	AIET_SOUNDEVENTS_NORMAL_LOUDNESS_BEGIN = 39,
	AIET_SoundRadio = 40,
	AIET_SoundAlarm = 41,
	AIET_SoundSpeakPainBehind = 42,
	AIET_SoundCloseCombat = 43,
	AIET_SoundSpeakPain = 44,
	AIET_SOUNDEVENTS_LOUD_LOUDNESS_BEGIN = 45,
	AIET_SoundSpeakHelp = 46,
	AIET_SoundSpeakHelpLoud = 47,
	AIET_SoundGunShot = 48,
	AIET_SoundHitmanGunShot = 49,
	AIET_SoundLegalGunShot = 50,
	AIET_SoundLegalHitmanGunShot = 51,
	AIET_SoundExplosion = 52,
	AIET_SoundCustomAccident = 53,
	AIET_SoundAccident = 54,
	AIET_SoundCurious = 55,
	AIET_SoundCuriousItem = 56,
	AIET_SoundInteresting = 57,
	AIET_SoundCrowdCurious = 58,
	AIET_SoundCrowdAlerted = 59,
	AIET_SoundCrowdWantsArrest = 60,
	AIET_SOUNDEVENTS_END = 61,
	AIET_SightReaction = 62,
	AIET_SightInvestigation = 63,
	AIET_PerceptibleAware = 64,
	AIET_ItemAware = 65,
	AIET_TossSourceKnown = 66,
	AIET_InSight = 67,
	AIET_Sick = 68,
	AIET_Attention_Stage_1 = 69,
	AIET_Attention_Stage_2 = 70,
	AIET_AttentionFading = 71,
	AIET_FullAttention = 72,
	AIET_FullDisguiseAttention = 73,
	AIET_ReactedTo = 74,
	AIET_ReactTarget = 75,
	AIET_ReactSuppressed = 76,
	AIET_StanddownHolster = 77,
	AIET_ForcedIllegal = 78,
	AIET_HitByItem = 79,
	AIET_HitByCoin = 80,
	AIET_LTHitByItemOrCoin = 81,
	AIET_HitByItemOrCoinTwice = 82,
	AIET_HitByThis = 83,
	AIET_ReactedToSound = 84,
	AIET_SeenInAccident = 85,
	AIET_Trespassing_Strike_1 = 86,
	AIET_Trespassing_Strike_2 = 87,
	AIET_Trespassing_Strike_3 = 88,
	AIET_Investigate_Strike_1 = 89,
	AIET_Investigate_Strike_2 = 90,
	AIET_Weird_Strike_1 = 91,
	AIET_Weird_Strike_2 = 92,
	AIET_StandingTooClose = 93,
	AIET_PrivacyInvaded = 94,
	AIET_IgnoreDeadBodies = 95,
	AIET_DisguiseEnforcer = 96,
	AIET_Suspect = 97,
	AIET_Frisk_Strike_1 = 98,
	AIET_Frisk_Strike_2 = 99,
	AIET_Frisked = 100,
	AIET_InSentryZone = 101,
	AIET_TriggerAlarm = 102,
	AIET_LockdownIntruder = 103,
	AIET_AccuseUnconscious = 104,
	AIET_HasKnockMeDown = 105,
	AIET_HasKnockSomeoneDown = 106,
	AIET_InMyPrivateArea = 107,
	AIET_SeenInCrimeScene = 108,
	AIET_KnownNaked = 109,
	AIET_KnownDraggingBodybag = 110,
	AIET_InvestigateOrder = 111,
	AIET_ReactedSurprised = 112,
	AIET_ReportGotShot = 113,
	AIET_ReactedToSituation = 114,
	AIET_SeeAttached = 115,
	AIET_WasInvisible = 116,
	AIET_BlameHitman = 117,
	AIET_BlamedByUnconscious = 118,
	AIET_DontCareAboutBlaming = 119,
	AIET_ReactedToSniperKnowledge = 120,
	AIET_SniperCombatTarget = 121,
	AIET_SniperCombatAimTarget = 122,
	AIET_CantReachTarget = 123,
	AIET_HuntingSniper = 124,
	AIET_NeedCover = 125,
	AIET_WaitingForSniper = 126,
	AIET_HeardSniperShooting = 127,
	AIET_AgilityInCombat = 128,
	AIET_Landing = 129,
	AIET_DontReactWhileInvestigating = 130,
	AIET_ReactedWhileInvestigating = 131,
	AIET_ReactedToHitmanThrowing = 132,
	AIET_TossRealTarget = 133,
	AIET_CompleteOrderAfterReaction = 134,
	AIET_KnownHidden = 135,
	AIET_SituationTarget = 136,
	AIET_TalkingToHitman = 137,
	AIET_CuriousInvestigateTarget = 138,
	AIET_SuspiciousAction = 139,
	AIET_RadioCallHelpingActor = 140,
	AIET_WeaponContextKnown = 141,
	AIET_IdleStandDown = 142,
	AIET_IgnoreInvestigation = 143,
	AIET_NewDisguiseTarget = 144,
	AIET_SocialTarget = 145,
	AIET_SecurityCamBroken = 146,
	AIET_HeWoundedMeLongDistance = 147,
	AIET_HeWoundedMeShortDistance = 148,
	AIET_HeWoundedMeCC = 149,
	AIET_END_NORMAL_EVENTS = 150,
};

// Size: 0x4
enum class EAIGoal : int32_t
{
	AIG_Kill = 0,
	AIG_Arrest = 1,
	AIG_FightSniper = 2,
	AIG_HelpCivilian = 3,
	AIG_HelpCivilianWeapon = 4,
	AIG_Investigate = 5,
	AIG_InvestigateDisguise = 6,
	AIG_StandOffInvestigateDisguise = 7,
	AIG_InvestigateDeadBody = 8,
	AIG_HandleTrespasser = 9,
	AIG_InvestigateCautious = 10,
	AIG_InvestigateCurious = 11,
	AIG_InvestigateStanding = 12,
	AIG_InvestigateWeapon = 13,
	AIG_DetectedInPrivate = 14,
	AIG_RecoverUnconscious = 15,
	AIG_RecoverUnconsciousAlerted = 16,
	AIG_DeliverWeapon = 17,
	AIG_HandleFusebox = 18,
	AIG_AvoidExplosion = 19,
	AIG_Hunt = 20,
	AIG_Frisk = 21,
	AIG_GuardBody = 22,
	AIG_DragBody = 23,
	AIG_Accident = 24,
	AIG_Sentry = 25,
	AIG_HelpGeneric = 26,
	AIG_Evacuate = 27,
	AIG_Entourage = 28,
	AIG_AvoidDangerousArea = 29,
	AIG_Spectator = 30,
	AIG_None = 31,
};

// Size: 0x4
enum class EAILegalType : int32_t
{
	AILT_Weapon = 0,
	AILT_Shooting = 1,
	AILT_Aiming = 2,
	AILT_CloseCombat = 3,
	AILT_ChangeOutfit = 4,
	AILT_Count = 5,
};

// Size: 0x4
enum class EAIModifierScope : int32_t
{
	AIMS_Volume = 0,
	AIMS_Behavior = 1,
	AIMS_Role = 2,
	AIMS_Item = 3,
	AIMS_Situation = 4,
	AIMS_Outfit = 5,
	AIMS_Override = 6,
	AIMS_Status = 7,
};

// Size: 0x4
enum class EAIModifiers : int32_t
{
	AIM_Invalid = 0,
	AIM_IgnoreLowNoise = 1,
	AIM_IgnoreHitmanPropToss = 2,
	AIM_IgnoreAnnoyingHitman = 4,
	AIM_IgnoreSneakyHitman = 8,
	AIM_IgnoreAgileHitman = 16,
	AIM_IgnoreSillyHitman = 30,
	AIM_NeverInvestigateCurious = 32,
	AIM_PreferredInvestigator = 64,
	AIM_AccidentShy = 128,
	AIM_PreferredAccidentInvestigator = 256,
	AIM_BlockFiberWireInteraction = 512,
	AIM_BlockCloseCombatInteraction = 1024,
	AIM_BlockDragBodyInteraction = 2048,
	AIM_BlockAllInteractions = 3584,
	AIM_IgnoreTrespassing = 4096,
	AIM_IgnoreWeapons = 8192,
	AIM_IgnoreLockdown = 16384,
	AIM_DisableHelpCivilian = 32768,
	AIM_NeverInvestigateStanding = 65536,
	AIM_NeverInvestigateDistractions = 65568,
	AIM_WantsPrivacy = 131072,
	AIM_ConversationHelper = 262144,
	AIM_ConversationHelperFast = 524288,
	AIM_OneHitpoint = 1048576,
	AIM_BlockDeadlyThrow = 2097152,
	AIM_SuppressSocialGreeting = 4194304,
	AIM_NeverInvestigateAccidents = 8388608,
	AIM_BlockDeath = 16777216,
	AIM_IgnoreDeadBody = 33554432,
	AIM_NeverSpectate = 67108864,
};

// Size: 0x4
enum class EAISharedEventType : int32_t
{
	AISET_None = 0,
	AISET_StandOffCrowdReactionDone = 1,
	AISET_Shoot = 2,
	AISET_ShootBlind = 3,
	AISET_Scared = 4,
	AISET_CloseCombatRunIn = 5,
	AISET_CloseCombatArrest = 6,
	AISET_ReadyForCloseCombatArrest = 7,
	AISET_DeadByAccident = 8,
	AISET_BloodPool = 9,
	AISET_SituationConversation = 10,
	AISET_LAST_BOOLEAN_EVENT = 11,
	AISET_IllegalBehavior = 12,
	AISET_BeingWatched = 13,
	AISET_Sneaking = 14,
	AISET_Agility = 15,
	AISET_IllegalAgility = 16,
	AISET_ChangingOutfit = 17,
	AISET_CoverToCover = 18,
	AISET_Trespassing = 19,
	AISET_InTrespassZone = 20,
	AISET_DraggingBody = 21,
	AISET_KillingWithFiberwire = 22,
	AISET_KillingWithPull = 23,
	AISET_KillingWithPush = 24,
	AISET_KillingWithKick = 25,
	AISET_KillingWithKnife = 26,
	AISET_KillingWithDeadlyThrow = 27,
	AISET_PullingFromLedge = 28,
	AISET_PacifyingWithPull = 29,
	AISET_PacifyingWithPush = 30,
	AISET_PacifyingWithKick = 31,
	AISET_PacifyingWithKnockDownThrow = 32,
	AISET_PacifyingWithStrangle = 33,
	AISET_PacifyingWithKnife = 34,
	AISET_ThrowingSomething = 35,
	AISET_ThrowingExplosives = 36,
	AISET_KnockingDown = 37,
	AISET_InCloset = 38,
	AISET_InNpcUnreachableArea = 39,
	AISET_Peeking = 40,
	AISET_EnteringCloset = 41,
	AISET_ExitingCloset = 42,
	AISET_InCover = 43,
	AISET_HasWeapon = 44,
	AISET_WeaponEquipped = 45,
	AISET_WeaponFired = 46,
	AISET_WeaponReloading = 47,
	AISET_Aiming = 48,
	AISET_GuardDisguise = 49,
	AISET_PulledByHitmanOnLedge = 50,
	AISET_CombatNoHold = 51,
	AISET_CombatFireAtWill = 52,
	AISET_InOrderedPosition = 53,
	AISET_ORDERS_BEGIN = 54,
	AISET_Order_Act = 55,
	AISET_Order_Investigate = 56,
	AISET_Order_SearchPosition = 57,
	AISET_Order_Approach = 58,
	AISET_Order_GetHelp = 59,
	AISET_Order_StandDown = 60,
	AISET_Order_Escalate = 61,
	AISET_Order_Arrest = 62,
	AISET_Order_Avoid = 63,
	AISET_Order_Flee = 64,
	AISET_Order_Patrol = 65,
	AISET_Order_Reposition = 66,
	AISET_Order_Chase = 67,
	AISET_Order_AimFromPosition = 68,
	AISET_Order_HoldPosition = 69,
	AISET_Order_HoldCoverPosition = 70,
	AISET_Order_FightFromCover = 71,
	AISET_Order_FightFromPosition = 72,
	AISET_Order_ShootFromPosition = 73,
	AISET_Order_GuardPosition = 74,
	AISET_Order_GuardBody = 75,
	AISET_Order_WakeUpUnconscious = 76,
	AISET_Order_DragBody = 77,
	AISET_Order_HumanShieldLeader = 78,
	AISET_Order_HumanShieldSupport = 79,
	AISET_Order_TriggerAlarm = 80,
	AISET_Order_DispatchSuspectInfo = 81,
	AISET_Order_RecieveSuspectInfo = 82,
	AISET_Order_RequestBackup = 83,
	AISET_Order_CheckLastPosition = 84,
	AISET_Order_StandoffLastWarning = 85,
	AISET_Order_Evacuate = 86,
	AISET_Order_AgitatedBystander = 87,
	AISET_Order_CuriousBystander = 88,
	AISET_Order_Face = 89,
	AISET_Order_Holster = 90,
	AISET_Order_Unholster = 91,
	AISET_Order_MoveTo = 92,
	AISET_Order_JumpTo = 93,
	AISET_Order_FormationMove = 94,
	AISET_Order_SentryFrisk = 95,
	AISET_Order_SentryWarning = 96,
	AISET_Order_SentryGreeting = 97,
	AISET_Order_SentryCheckItem = 98,
	AISET_Order_DeliverWeapon = 99,
	AISET_Order_RecoverUnconscious = 100,
	AISET_Order_GetOutfit = 101,
	AISET_Order_LockdownWarning = 102,
	AISET_Order_VIPEvacuateIdle = 103,
	AISET_Order_VIPSafeRoom = 104,
	AISET_Order_VIPSafeRoomTrespasser = 105,
	AISET_Order_VIPScared = 106,
	AISET_Order_DefendVIP = 107,
	AISET_Order_CautiousVIP = 108,
	AISET_Order_CautiousGuardVIP = 109,
	AISET_Order_EscortOut = 110,
	AISET_Order_MoveInCover = 111,
	AISET_Order_MoveToCover = 112,
	AISET_Order_Conversation = 113,
	AISET_Order_AttentionToPerson = 114,
	AISET_Order_WaitForItemHandled = 115,
	AISET_ORDERS_END = 116,
	AISET_IMPULSES_BEGIN = 117,
	AISET_Impulse_ReceiveHuntTarget = 118,
	AISET_Impulse_AckHuntTarget = 119,
	AISET_Impulse_TransmitHuntTarget = 120,
	AISET_Impulse_ActiveRadioCall = 121,
	AISET_IMPULSES_END = 122,
	AISET_ForceFullAttention = 123,
	AISET_InCameraView2D = 124,
	AISET_BeingLookedAt = 125,
	AISET_BeingAimedAt = 126,
	AISET_BeingShotAt = 127,
	AISET_BeingFlanked = 128,
	AISET_BeingBumped = 129,
	AISET_BeingEscortedOut = 130,
	AISET_EscortingOut = 131,
	AISET_EscortOutFarewell = 132,
	AISET_HMTrespassing = 133,
	AISET_HMInEntryArea = 134,
	AISET_HMTakingDamage = 135,
	AISET_OpeningCPDoor = 136,
	AISET_HumanShield = 137,
	AISET_DisablingFusebox = 138,
	AISET_IllegalAction = 139,
	AISET_IllegalActionSevere = 140,
	AISET_TakingKeyCard = 141,
	AISET_TakingSecurityTape = 142,
	AISET_DumpingBody = 143,
	AISET_Shooting = 144,
	AISET_BlindFire = 145,
	AISET_ShootingBallet = 146,
	AISET_Running = 147,
	AISET_Walking = 148,
	AISET_UsingKeyCard = 149,
	AISET_WeaponDropped = 150,
	AISET_WeaponPickedUp = 151,
	AISET_ItemPickedUp = 152,
	AISET_ItemDropped = 153,
	AISET_Surrendering = 154,
	AISET_RequestSurrender = 155,
	AISET_StandOffEscalated = 156,
	AISET_Standing = 157,
	AISET_Enforcer = 158,
	AISET_DisguiseEnforcer = 159,
	AISET_Dead = 160,
	AISET_DeadByUnnoticed = 161,
	AISET_DeadBySniper = 162,
	AISET_InMorgue = 163,
	AISET_InAccident = 164,
	AISET_Accident = 165,
	AISET_Dying = 166,
	AISET_InInvestigateDisguise = 167,
	AISET_InArrest = 168,
	AISET_Arrestor = 169,
	AISET_InCombat = 170,
	AISET_InCombatWithGuards = 171,
	AISET_Hunted = 172,
	AISET_ForceHunted = 173,
	AISET_CloseCombat = 174,
	AISET_TakingProjectileDamage = 175,
	AISET_TakingHeadshotDamage = 176,
	AISET_TakingExplosionDamage = 177,
	AISET_TakingThrowDamage = 178,
	AISET_ForceKillHM = 179,
	AISET_Armed = 180,
	AISET_BeingHumanShield = 181,
	AISET_BeingPulledOutOfWindow = 182,
	AISET_BeingPushedOverRail = 183,
	AISET_BeingFiberwired = 184,
	AISET_BeingPulledFromLedge = 185,
	AISET_BeingDragged = 186,
	AISET_OnScreen = 187,
	AISET_ExplosionImminent = 188,
	AISET_DisguiseSafeZone = 189,
	AISET_DisguiseCanBlendIn = 190,
	AISET_DisguiseBlendIn = 191,
	AISET_DisguiseBroken = 192,
	AISET_InWarZone = 193,
	AISET_HearLockdownAlarm = 194,
	AISET_InCrowd = 195,
	AISET_InCrowdHighDensity = 196,
	AISET_InCrowdAlert = 197,
	AISET_InCrowdPanic = 198,
	AISET_HiddenByCrowd = 199,
	AISET_CrowdDisguise = 200,
	AISET_BeingStrangled = 201,
	AISET_BeingSnapNecked = 202,
	AISET_BeingKnockedDown = 203,
	AISET_BeingContextKilled = 204,
	AISET_CloseCombatTakedown = 205,
	AISET_ContextKill = 206,
	AISET_ExecutePistol = 207,
	AISET_SedativePoison = 208,
	AISET_SpawnedActor = 209,
	AISET_SoundRadio = 210,
	AISET_Pickup = 211,
	AISET_PickupByHM = 212,
	AISET_Weapon = 213,
	AISET_Item = 214,
	AISET_ItemThrown = 215,
	AISET_OwnedByHM = 216,
	AISET_Coin = 217,
	AISET_Perceptible = 218,
	AISET_InLimitVisionAreaZone = 219,
	AISET_InsideLimitVisionArea = 220,
	AISET_BlockedByLimitVisionArea = 221,
	AISET_AmbientOnly = 222,
	AISET_HasBeenInCombat = 223,
	AISET_HitByItem = 224,
	AISET_CloseCombatAllowed = 225,
	AISET_CollateralTarget = 226,
	AISET_CheckedLastPosition = 227,
	AISET_HuntAct = 228,
	AISET_Sick = 229,
	AISET_Naked = 230,
	AISET_Investigated = 231,
	AISET_ShouldHaveGuard = 232,
	AISET_FreshBody = 233,
	AISET_InDeadBodyArea = 234,
	AISET_InCrimeScene = 235,
	AISET_SeenThrowing = 236,
	AISET_SeenThrowingCoin = 237,
	AISET_SeenDeadlyThrowVictim = 238,
	AISET_IWillBeDeadlyThrowVictim = 239,
	AISET_Suspect = 240,
	AISET_BeingFrisked = 241,
	AISET_RequestFrisk = 242,
	AISET_FriskComplying = 243,
	AISET_FriskApproachReady = 244,
	AISET_FriskReady = 245,
	AISET_Frisked = 246,
	AISET_FriskFailed = 247,
	AISET_FriskFoundWeapon = 248,
	AISET_AntiSocial = 249,
	AISET_Introvert = 250,
	AISET_InLockdownZone = 251,
	AISET_EnteringLockdownZone = 252,
	AISET_InSentryZone = 253,
	AISET_InSentryWarningZone = 254,
	AISET_InSentryFriskWarningZone = 255,
	AISET_SuppressTrespassing = 256,
	AISET_ReportedDisturbance = 257,
	AISET_InLockdown = 258,
	AISET_ToldToEvacuate = 259,
	AISET_CurrentTarget = 260,
	AISET_RequestShowItem = 261,
	AISET_RequestComplying = 262,
	AISET_WokenByNPC = 263,
	AISET_Silly = 264,
	AISET_TriggerLockDownAlarm = 265,
	AISET_CombatFromEvacuate = 266,
	AISET_DontMakeFunPlease = 267,
	AISET_TempCrowdKnowledge = 268,
	AISET_Attached = 269,
	AISET_DontReact = 270,
	AISET_Sentry = 271,
	AISET_HardSentry = 272,
	AISET_FriskingSentry = 273,
	AISET_CrowdActorCrimeScene = 274,
	AISET_Guarded = 275,
	AISET_CloseCombatFinisher = 276,
	AISET_Pacified = 277,
	AISET_SomeoneIsSniping = 278,
	AISET_FlashpointSeen = 279,
	AISET_SniperLocation = 280,
	AISET_WeaponContextKnown = 281,
	AISET_Distracted = 282,
	AISET_LockedInAgility = 283,
	AISET_ActorAlreadyAlive = 284,
	AISET_DraggingBodyBag = 285,
	AISET_UncosciousBlamingFailed = 286,
	AISET_PropagateFromAgility = 287,
	AISET_VaultingOverObstacle = 288,
	AISET_ClimbingWindow = 289,
	AISET_Combat_Brave = 290,
	AISET_Combat_OneTimeBrave = 291,
	AISET_Combat_PrimaryRange = 292,
	AISET_Combat_CloseToGuards = 293,
	AISET_Combat_RecentlySeen = 294,
	AISET_InTheAirDeadly = 295,
	AISET_InTheAir = 296,
	AISET_Landing = 297,
	AISET_ReactingToToss = 298,
	AISET_InvestigatingToss = 299,
	AISET_InSentrySituation = 300,
	AISET_Wounded = 301,
	AISET_RecoveredFromWounded = 302,
	AISET_ReactedToTossAlerted = 303,
	AISET_ReactedToHitAlerted = 304,
	AISET_GettingHelp = 305,
	AISET_HelpingCivilian = 306,
	AISET_InvestigatingMurder = 307,
	AISET_InvestigatingMurderOrGunshot = 308,
	AISET_InvestigateDisguiseGroupLeader = 309,
	AISET_InvestigateDisguiseMovingBack = 310,
	AISET_BodyguardVIPDead = 311,
	AISET_SilentlyKilled = 312,
	AISET_SilentlyKilling = 313,
	AISET_SoundGunShot = 314,
	AISET_SoundHitmanGunShot = 315,
	AISET_AlertedReactionPlayed = 316,
	AISET_ChangingOutfitFromBody = 317,
	AISET_SpeedBoost = 318,
	AISET_ManhuntMember = 319,
	AISET_InvestigateDisguiseMember = 320,
	AISET_EvacuateAfterRecover = 321,
	AISET_Woozy = 322,
	AISET_HasAmbientEscort = 323,
	AISET_IsEscortingVIP = 324,
	AISET_StrangleVictim = 325,
	AISET_DontStandDownIfIdling = 326,
	AISET_Jumping = 327,
	AISET_GetHelpDone = 328,
	AISET_VIPHandleOwnCuriousInvestigation = 329,
	AISET_InDangerousArea = 330,
	AISET_RadioCallHelpComming = 331,
	AISET_RadioCallHelpFailed = 332,
	AISET_RadioCallHelpArrived = 333,
	AISET_SocialCooldown = 334,
	AISET_VIPEscaping = 335,
	AISET_VisionCone_AlignToActorOrientation = 336,
	AISET_InterestingLocation = 337,
	AISET_SeeDeathExplained = 338,
	AISET_HMHasVictim = 339,
	AISET_PrivateSituationLeader = 340,
	AISET_LongTermMemorySetGoal = 341,
	AISET_InEvacuateTrespassGroup = 342,
	AISET_ENFORCER_DISABLE_FLAG_BEGIN = 343,
	AISET_Enforcer_Disable_HideInPlainSight = 344,
	AISET_ENFORCER_DISABLE_FLAG_END = 345,
	AISET_DYNAMIC_ENFORCER_FLAG_BEGIN = 346,
	AISET_DynamicEnforcer_SharedHitmanSensor = 347,
	AISET_DynamicEnforcer_NakedActor = 348,
	AISET_DynamicEnforcer_SeenItemThrown = 349,
	AISET_DynamicEnforcer_HitByItemOrCoin = 350,
	AISET_DynamicEnforcer_Setpiece = 351,
	AISET_DynamicEnforcer_SillyHitman = 352,
	AISET_DynamicEnforcer_PrivateArea = 353,
	AISET_DynamicEnforcer_SuspiciousMovement = 354,
	AISET_DYNAMIC_ENFORCER_FLAG_INCA_BEGIN = 355,
	AISET_DynamicEnforcer_Explosion = 356,
	AISET_DynamicEnforcer_GunshotSound = 357,
	AISET_DynamicEnforcer_BulletImpactSound = 358,
	AISET_DynamicEnforcer_CloseCombatSound = 359,
	AISET_DynamicEnforcer_DeadlyThrowVictim = 360,
	AISET_DynamicEnforcer_PacifyingThrowVictim = 361,
	AISET_DynamicEnforcer_SeenMurderVictimNotHeardGunshot = 362,
	AISET_DynamicEnforcer_SeenMurderVictimHeardGunshot = 363,
	AISET_DynamicEnforcer_MurderAttempt = 364,
	AISET_DynamicEnforcer_DeadBody = 365,
	AISET_DynamicEnforcer_PacifiedBody = 366,
	AISET_DynamicEnforcer_Hunt = 367,
	AISET_DYNAMIC_ENFORCER_FLAG_INCA_END = 368,
	AISET_DYNAMIC_ENFORCER_FLAG_END = 369,
	AISET_DYNAMIC_ENFORCER_DISABLE_FLAG_BEGIN = 370,
	AISET_DynamicEnforcer_Disable_CivilianInInvestigateCautious = 371,
	AISET_DYNAMIC_ENFORCER_DISABLE_FLAG_END = 372,
	AISET_DYNAMIC_ENFORCER_CIVILIAN_DISGUISE_ONLY_FLAG_BEGIN = 373,
	AISET_DynamicEnforcer_InvestigateWeapon = 374,
	AISET_DYNAMIC_ENFORCER_CIVILIAN_DISGUISE_ONLY_FLAG_END = 375,
	AISET_DYNAMIC_ENFORCER_ARREST_REASON_BEGIN = 376,
	AISET_DynamicEnforcer_ArrestReason_Murder = 377,
	AISET_DynamicEnforcer_ArrestReason_MurderAttempt = 378,
	AISET_DynamicEnforcer_ArrestReason_HitByItemOrCoin = 379,
	AISET_DynamicEnforcer_ArrestReason_NearDeadBody = 380,
	AISET_DynamicEnforcer_ArrestReason_NearPacifiedBody = 381,
	AISET_DynamicEnforcer_ArrestReason_GunshotSound = 382,
	AISET_DynamicEnforcer_ArrestReason_CloseCombatSound = 383,
	AISET_DynamicEnforcer_ArrestReason_BulletImpactSound = 384,
	AISET_DynamicEnforcer_ArrestReason_Hunt = 385,
	AISET_DynamicEnforcer_ArrestReason_Explosion = 386,
	AISET_DynamicEnforcer_ArrestReason_PrivateArea = 387,
	AISET_DynamicEnforcer_ArrestReason_Weapon = 388,
	AISET_DynamicEnforcer_ArrestReason_Setpiece = 389,
	AISET_DynamicEnforcer_ArrestReason_KnockdownThrow = 390,
	AISET_DynamicEnforcer_ArrestReason_SillyHitman = 391,
	AISET_DYNAMIC_ENFORCER_ARREST_REASON_END = 392,
};

// Size: 0x4
enum class EAISituation : int32_t
{
	AIS_GENERIC = 0,
	AIS_SPECIAL = 1,
	AIS_SENSOR = 2,
	AIS_TRESPASSING = 3,
	AIS_STANDOFF = 4,
	AIS_SMUGGLE = 5,
	AIS_GET_HELP = 6,
	AIS_CONVERSTION_GROUP = 7,
	AIS_PROTO_COMBAT = 8,
	AIS_SENTRY = 9,
	AIS_LEAD_ESCORT = 10,
	AIS_INVESTIGATE_WEAPON = 11,
	AIS_INVESTIGATE_STANDING = 12,
	AIS_INVESTIGATE_CURIOUS = 13,
	AIS_INVESTIGATE_CAUTIOUS = 14,
	AIS_HERO_ESCORT = 15,
	AIS_EVACUATE = 16,
	AIS_ESCORT = 17,
	AIS_ENTOURAGE = 18,
	AIS_DRAMA = 19,
	AIS_DISGUISE = 20,
	AIS_DEAD_BODY = 21,
	AIS_COMBAT = 22,
	AIS_CLOSE_COMBAT = 23,
	AIS_AVOID_EXPLOSION = 24,
	AIS_ACCIDENT = 25,
	AIS_PRIVATE = 26,
	AIS_GUARD_BODY = 27,
	AIS_RECOVER_UNC = 28,
	AIS_SNIPER = 29,
};

// Size: 0x4
enum class EAISituationEvent : int32_t
{
	AISE_Any = 0,
	AISE_ActorJoined = 1,
	AISE_ActorLeft = 2,
	AISE_Data = 3,
};

// Size: 0x4
enum class EAISoundEventLoudness : int32_t
{
	EAISEL_Default = 0,
	EAISEL_VeryLow = 1,
	EAISEL_Low = 2,
	EAISEL_Normal = 3,
	EAISEL_Loud = 4,
	EAISEL_VeryLoud = 5,
};

// Size: 0x4
enum class EActBodyType : int32_t
{
	ABT_UpperBodyOnly = 0,
	ABT_FullBodyWithLeadIn = 1,
	ABT_FullBodyOnly = 2,
};

// Size: 0x4
enum class EActionPromptState : int32_t
{
	eActionPromptState_Disabled = 0,
	eActionPromptState_Enabled = 1,
	eActionPromptState_Activated = 2,
	eActionPromptState_Held = 3,
};

// Size: 0x4
enum class EActionRadialArcIconType : int32_t
{
	EARAIT_NoIcon = 0,
	EARAIT_Locked = 1,
	EARAIT_NeedTool = 2,
	EARAIT_IsRunning = 3,
	EARAIT_Crowbar = 4,
	EARAIT_Wrench = 5,
	EARAIT_Card = 6,
	EARAIT_Lockpick = 7,
	EARAIT_Screwdriver = 8,
	EARAIT_AmmoBullet = 9,
	EARAIT_Flower = 10,
	EARAIT_ChemicalTube = 11,
	EARAIT_Golfball = 12,
	EARAIT_Keypad = 13,
	EARAIT_Key = 14,
	EARAIT_Coin = 15,
	EARAIT_Poison = 16,
	EARAIT_Exsplosive = 17,
};

// Size: 0x4
enum class EActionType : int32_t
{
	AT_INVALID = 0,
	AT_OPENDOOR = 1,
	AT_CLOSEDOOR = 2,
	AT_PICKUP = 4,
	AT_GENERIC = 8,
	AT_REMOTE = 16,
	AT_OUTFIT = 32,
	AT_CLOTHBUNDLE = 64,
	AT_DRAGBODY = 128,
	AT_RETRIEVE_ITEM_FROM_CONTAINER = 256,
	AT_RELEASEHUMANSHIELD = 512,
	AT_HERO_MOVEMENT = 1024,
	AT_SWAPITEM = 2048,
	AT_DUMPBODY = 4096,
	AT_COUP_DE_GRACE = 8192,
	AT_INTERACTION_GROUP = 16384,
	AT_USE_NORMAL = 32768,
	AT_STASHPOINT_PICKUP = 65536,
	AT_ENTERCLOSET = 131072,
	AT_EXITCLOSET = 262144,
	AT_ENTERSAFEZONE = 524288,
	AT_EXITSAFEZONE = 1048576,
	AT_CANCEL = 2097152,
	AT_CONTAINERFLUSHBODY = 4194304,
	AT_VENTILATORSHAFT = 8388608,
	AT_PLACE_ITEM_IN_CONTAINER = 16777216,
	AT_USE_DOWN = 33554432,
	AT_USE_HOLD = 67108864,
	AT_CONTEXTACTION = 134217728,
	AT_KILLHUMANSHIELD = 268435456,
	AT_ITEMCONTAINER = 536870912,
	AT_USE_QUICK = 1073741824,
	AT_ITEM_INTERACTION = -2147483648,
};

// Size: 0x4
enum class EActorAIState : int32_t
{
	eAAIS_None = 0,
	eAAIS_Distracted = 1,
	eAAIS_PotentialThreat = 2,
	eAAIS_PotentialThreatDistracted = 3,
	eAAIS_PotentialThreatDisabled = 4,
	eAAIS_Aggressive = 5,
	eAAIS_EscortingOut = 6,
	eAAIS_Fleeing = 7,
	eAAIS_Unconscious = 8,
	eAAIS_DisabledInCombat = 9,
	eAAIS_Disabled = 10,
	eAAIS_Max = 11,
};

// Size: 0x4
enum class EActorAnimationOrder : int32_t
{
	AAO_None = 0,
	AAO_Stand = 1,
	AAO_Move = 2,
	AAO_React = 3,
	AAO_Act = 4,
	AAO_MoveToAct = 5,
	AAO_MoveToCover = 6,
	AAO_ShootFromCover = 7,
	AAO_PeekFromCover = 8,
	AAO_Death = 9,
	AAO_Impact = 10,
	AAO_Controlled = 11,
};

// Size: 0x4
enum class EActorCCPreset : int32_t
{
	ACCP_CivilianFemale = 0,
	ACCP_CivilianeMale = 1,
	ACCP_GuardMale = 2,
	ACCP_GuardMaleElite = 3,
	ACCP_GuardMaleSuperElite = 4,
	ACCP_Ignore = 5,
	ACCP_None = 6,
};

// Size: 0x4
enum class EActorEmotionState : int32_t
{
	AES_Ambient = 0,
	AES_Alerted = 1,
	AES_Scared = 2,
	AES_Hunt = 3,
	AES_Combat = 4,
	AES_None = 268435455,
};

// Size: 0x4
enum class EActorEventTypes : int32_t
{
	eAET_OnAlive = 0,
	eAET_OnPacified = 1,
	eAET_OnMurdered = 2,
	eAET_OnAccidentDeath = 3,
	eAET_OnUnnoticableKill = 4,
	eAET_OnBodyNoticed = 5,
	eAET_OnBodyBagged = 6,
	eAET_OnDying = 7,
	eAET_OnDead = 8,
	eAET_OnBodyHidden = 9,
	eAET_OnBodyFlushed = 10,
	eAET_OnBodyDumped = 11,
	eAET_OnDelete = 12,
};

// Size: 0x4
enum class EActorFaction : int32_t
{
	eActorFaction_Default = 0,
	eActorFaction_VIP_1 = 1,
	eActorFaction_VIP_2 = 2,
	eActorFaction_VIP_3 = 3,
	eActorFaction_VIP_4 = 4,
	eActorFaction_VIP_5 = 5,
	eActorFaction_VIP_6 = 6,
	eActorFaction_VIP_7 = 7,
};

// Size: 0x4
enum class EActorGroup : int32_t
{
	eAG_Group_A = 0,
	eAG_Group_B = 1,
	eAG_Group_C = 2,
	eAG_Group_D = 3,
	eAG_Count = 4,
};

// Size: 0x4
enum class EActorLookAtPriority : int32_t
{
	eALAPriority_Ambient = 0,
	eALAPriority_AmbientHigh = 1,
	eALAPriority_Alert = 2,
	eALAPriority_AlertHigh = 3,
	eALAPriority_Hunt = 4,
	eALAPriority_HuntHigh = 5,
	eALAPriority_Combat = 6,
	eALAPriority_CombatHigh = 7,
};

// Size: 0x4
enum class EActorLookAtStopReason : int32_t
{
	eSR_Unknown = 0,
	eSR_Disabled = 1,
	eSR_DurationExpired = 2,
	eSR_OutOfRange = 3,
	eSR_OutOfSight = 4,
	eSR_OutOfRemainingPathDistance = 5,
	eSR_Interrupted = 6,
	eSR_TargetRemoved = 7,
	eSR_HigherPriorityProfile = 8,
	eSR_HideInPlainSight = 9,
};

// Size: 0x4
enum class EActorLookAtTargetType : int32_t
{
	eALAT_Invalid = 0,
	eALAT_PositionTarget = 1,
	eALAT_KnownEntityType = 2,
	eALAT_PointOfInterest = 3,
	eALAT_Hero = 4,
	eALAT_Screenplay = 5,
	eALAPT_Max = 6,
};

// Size: 0x4
enum class EActorPerceptionSensitivity : int32_t
{
	APS_AMBIENT_DEAFBLIND = 0,
	APS_AMBIENT_SLEEPING = 1,
	APS_AMBIENT_PREOCCUPIED = 2,
	APS_AMBIENT = 3,
	APS_ALERT_LOW = 4,
	APS_ALERT = 5,
	APS_COMBAT = 6,
	APS_SPIDER_SENSE = 7,
};

// Size: 0x4
enum class EActorRank : int32_t
{
	AR_Default = 0,
	AR_Elite = 1,
	AR_Cop = 2,
	AR_Goon = 3,
};

// Size: 0x4
enum class EActorRole : int32_t
{
	eActorRole_Default = 0,
	eActorRole_Bodyguard = 1,
	eActorRole_VIP = 2,
};

// Size: 0x4
enum class EActorSecondaryIconState : int32_t
{
	eSIS_Clear = 0,
	eSIS_Infected = 1,
};

// Size: 0x4
enum class EActorState : int32_t
{
	AS_DEACTIVATED = 0,
	AS_ALIVE = 1,
	AS_DYING = 2,
	AS_DEAD = 3,
	AS_DISABLED = 4,
};

// Size: 0x4
enum class EActorType : int32_t
{
	eAT_Civilian = 0,
	eAT_Guard = 1,
	eAT_Hitman = 2,
	eAT_Last = 3,
};

// Size: 0x4
enum class EActorVoiceVariation : int32_t
{
	eAVV_Undefined = 0,
	eAVV_ABIATTI = 1,
	eAVV_BERG = 2,
	eAVV_BDYGRD04 = 3,
	eAVV_BDYGRD01 = 4,
	eAVV_BDYGRD02 = 5,
	eAVV_BDYGRD03 = 6,
	eAVV_BUSEY = 7,
	eAVV_CARUSO = 8,
	eAVV_CHEF01 = 9,
	eAVV_CHEF02 = 10,
	eAVV_CHEF03 = 11,
	eAVV_CHEF04 = 12,
	eAVV_CHURCHSTAFF01 = 13,
	eAVV_CHURCHSTAFF02 = 14,
	eAVV_CHURCHSTAFF03 = 15,
	eAVV_CIVFEM01 = 16,
	eAVV_CIVFEM02 = 17,
	eAVV_CIVFEM03 = 18,
	eAVV_CIVFEM04 = 19,
	eAVV_CIVFEM05 = 20,
	eAVV_CIVMALE01 = 21,
	eAVV_CIVMALE02 = 22,
	eAVV_CIVMALE03 = 23,
	eAVV_CIVMALE04 = 24,
	eAVV_CIVMALE05 = 25,
	eAVV_CIVMALE06 = 26,
	eAVV_CLEANER01 = 27,
	eAVV_CLEANER02 = 28,
	eAVV_CLEANER03 = 29,
	eAVV_CLEANERFEM01 = 30,
	eAVV_CLEANERFEM02 = 31,
	eAVV_CLEANERFEM03 = 32,
	eAVV_CREW01 = 33,
	eAVV_CREW02 = 34,
	eAVV_CREW04 = 35,
	eAVV_CROSS = 36,
	eAVV_DALIA = 37,
	eAVV_DESANTIS = 38,
	eAVV_DINO_BOSCO = 39,
	eAVV_DOCTOR01 = 40,
	eAVV_DOCTOR06 = 41,
	eAVV_DOCTORFEM03 = 42,
	eAVV_DOCTORFEM04 = 43,
	eAVV_ET_ARGUS = 44,
	eAVV_ET_CARDINAL = 45,
	eAVV_ET_CONNER = 46,
	eAVV_ET_DYLAN = 47,
	eAVV_ET_GARY_LUNN = 48,
	eAVV_ET_HARVERFOEK = 49,
	eAVV_ET_LARIN = 50,
	eAVV_ET_MOXON = 51,
	eAVV_ET_MR_GIGGLES = 52,
	eAVV_ET_PHILLIPOS = 53,
	eAVV_ET_SCOTT_SARNO = 54,
	eAVV_ET_TORVIK = 55,
	eAVV_ET_TROUTT = 56,
	eAVV_ET_VITO_DURIC = 57,
	eAVV_FILMCREW01 = 58,
	eAVV_FILMCREW02 = 59,
	eAVV_FILMCREW03 = 60,
	eAVV_FILMCREW04 = 61,
	eAVV_FILMCREWFEM01 = 62,
	eAVV_FILMCREWFEM02 = 63,
	eAVV_FILMCREWFEM03 = 64,
	eAVV_FILMCREWFEM04 = 65,
	eAVV_FILMCREWFEM05 = 66,
	eAVV_FOD_FEM = 67,
	eAVV_FOD_MALE = 68,
	eAVV_GARDENER01 = 69,
	eAVV_GARDENER02 = 70,
	eAVV_GARDENER03 = 71,
	eAVV_GARDENERFEM01 = 72,
	eAVV_GARDENERFEM02 = 73,
	eAVV_GARDENERFEM03 = 74,
	eAVV_GRAVES = 75,
	eAVV_GUARDIA02 = 76,
	eAVV_GUARDIA03 = 77,
	eAVV_HOUSSTFF01 = 78,
	eAVV_HOUSSTFF02 = 79,
	eAVV_HOUSSTFF03 = 80,
	eAVV_HOUSSTFF06 = 81,
	eAVV_HOUSSTFFEM01 = 82,
	eAVV_HOUSSTFFEM02 = 83,
	eAVV_HOUSSTFFEM03 = 84,
	eAVV_INTERN = 85,
	eAVV_KONG = 86,
	eAVV_MAMBACREW01 = 87,
	eAVV_MAMBACREW02 = 88,
	eAVV_MAMBACREW03 = 89,
	eAVV_MAMBACREW04 = 90,
	eAVV_MECH01 = 91,
	eAVV_MECH02 = 92,
	eAVV_MECH03 = 93,
	eAVV_MENDOLA = 94,
	eAVV_MODEL01 = 95,
	eAVV_MODEL02 = 96,
	eAVV_MODEL03 = 97,
	eAVV_MODELFEM01 = 98,
	eAVV_MODELFEM02 = 99,
	eAVV_MODELFEM03 = 100,
	eAVV_MORGAN = 101,
	eAVV_NOVIKOV = 102,
	eAVV_NORFOLK = 103,
	eAAV_PRIEST01 = 104,
	eAVV_RITTER = 105,
	eAVV_ROSE = 106,
	eAVV_SANTA = 107,
	eAVV_SCIENTIST01 = 108,
	eAVV_SCIENTIST02 = 109,
	eAVV_SCIENTIST03 = 110,
	eAVV_SCIENTIST04 = 111,
	eAVV_SCIENTISTFEM01 = 112,
	eAVV_SCIENTISTFEM02 = 113,
	eAVV_SCIENTISTFEM03 = 114,
	eAVV_SCIENTISTFEM04 = 115,
	eAVV_SOFTGRD01 = 116,
	eAVV_SOFTGRD02 = 117,
	eAVV_SOFTGRD03 = 118,
	eAVV_SOLDIER01 = 119,
	eAVV_SOLDIER02 = 120,
	eAVV_SOLDIER03 = 121,
	eAVV_SOLDIERBOSS01 = 122,
	eAVV_SOLDIERBOSS02 = 123,
	eAVV_SOLDIERBOSS03 = 124,
	eAVV_SPECOPS01 = 125,
	eAVV_SPECOPS02 = 126,
	eAVV_SPECOPS03 = 127,
	eAVV_STAFFMALE01 = 128,
	eAVV_STAFFMALE02 = 129,
	eAVV_STAFFMALE03 = 130,
	eAVV_STAFFMALE04 = 131,
	eAVV_STAFFMALE05 = 132,
	eAVV_STAFFMALE06 = 133,
	eAVV_STAFFEM03 = 134,
	eAVV_STAFFEM04 = 135,
	eAVV_STAFFEM05 = 136,
	eAVV_STRANDBERG = 137,
	eAVV_STYLIST01 = 138,
	eAVV_STYLIST02 = 139,
	eAVV_STYLIST03 = 140,
	eAVV_STYLIST04 = 141,
	eAVV_STYLISTFEM01 = 142,
	eAVV_STYLISTFEM02 = 143,
	eAVV_STYLISTFEM03 = 144,
	eAVV_STYLISTFEM04 = 145,
	eAVV_PARVATI = 146,
	eAVV_WAITER01 = 147,
	eAVV_WAITER02 = 148,
	eAVV_WAITER03 = 149,
	eAVV_WAITER04 = 150,
	eAVV_WAITERFEM01 = 151,
	eAVV_WAITERFEM02 = 152,
	eAVV_WAITERFEM03 = 153,
	eAVV_WAITERFEM04 = 154,
	eAVV_YACHTCREW01 = 155,
	eAVV_YACHTCREW02 = 156,
	eAVV_YACHTCREW03 = 157,
	eAVV_YACHTCREW04 = 158,
	eAVV_YAMASAKI = 159,
	eAVV_ZAYDAN = 160,
	eAVV_WS_BOULTON = 161,
	eAVV_WS_NEWMAN = 162,
	eAVV_WS_WATSON = 163,
};

// Size: 0x4
enum class EAgilityState : int32_t
{
	eAgState_JumpToHangFromLocomotion = 0,
	eAgState_ClimbOnToLedgeFromLocomotion = 1,
	eAgState_ClimbToHangFromLocomotion = 2,
	eAgState_WalkOnFromLocomotion = 3,
	eAgState_WalkOffToLocomoton = 4,
	eAgState_PullUpToLedgeWalk = 5,
	eAgState_PullUpToLocomotion = 6,
	eAgState_LedgeJumpOffToLocomotion = 7,
	eAgState_VaultOverLedgeFromCover = 8,
	eAgState_ClimbOnToLedgeFromCover = 9,
	eAgState_LedgeHangDefault = 10,
	eAgState_LedgeWalkDefault = 11,
	eAgState_TransLedgeHangDownToWalk = 12,
	eAgState_TransLedgeHangUpToWalk = 13,
	eAgState_TransLedgeWalkDownToHang = 14,
	eAgState_TransLedgeWalkUpToHang = 15,
	eAgState_TransLedgeHangUpToRail = 16,
	eAgState_TransLedgeHangToLocomotion = 17,
	eAgState_TransLedgeWalkToLocomotion = 18,
	eAgState_LedgeHangJumpLeft = 19,
	eAgState_LedgeHangJumpRight = 20,
	eAgState_LedgeWalkJumpLeft = 21,
	eAgState_LedgeWalkJumpRight = 22,
	eAgState_SneakPastWindowLeftToRight = 23,
	eAgState_SneakPastWindowRightToLeft = 24,
	eAgState_ClimbWindowFromLedgeToLocomotion = 25,
	eAgState_ClimbWindowFromLocomotionToLedge = 26,
	eAgState_ClimbWindowFromLocomotionToLocomotion = 27,
	eAgState_ClimbWindowFromCoverToLocomotion = 28,
	eAgState_ClimbWindowFromCoverToLedge = 29,
	eAgState_ClimbOnToLedgeFromDrainPipe = 30,
	eAgState_ClimbToHangFromDrainPipe = 31,
	eAgState_ClimbToWalkFromDrainPipeLeft = 32,
	eAgState_ClimbToWalkFromDrainPipeRight = 33,
	eAgState_Deactivate = 34,
	eAgState_Unknown = 35,
};

// Size: 0x4
enum class EAimAssistGameModeFilter : int32_t
{
	AATF_ANY = 0,
	AATF_POINTSHOOTING = 1,
};

// Size: 0x4
enum class EAlertedDebugMode : int32_t
{
	ADM_RandomMovement = 0,
	ADM_Patrol = 1,
};

// Size: 0x4
enum class EAnimBlendMode : int32_t
{
	EAnimBlendMode_InterpAttInterpPos = 0,
	EAnimBlendMode_InterpAttAddPos = 1,
	EAnimBlendMode_AddAttLeavePos = 2,
	EAnimBlendMode_AddAttAddPos = 3,
};

// Size: 0x4
enum class EAnimSetState : int32_t
{
	EASES_DEFAULT = 0,
	EASES_AMBIENT_ARMED = 1,
	EASES_AMBIENT_VIP_ESCORT = 2,
	EASES_COMBAT_EVACUATE = 3,
	EASES_COMBAT_EVACUATE_VIP_SOLO = 4,
	EASES_SICK = 5,
};

// Size: 0x4
enum class EAnimSetType : int32_t
{
	EAST_UNDEFINED = 0,
	EAST_DEFAULT = 1,
	EAST_PISTOL = 2,
	EAST_REVOLVER = 3,
	EAST_SMG = 4,
	EAST_SNIPER = 5,
	EAST_ASSULT = 6,
	EAST_SHOTGUN = 7,
	EAST_BODYBAG = 8,
	EAST_GLASS = 9,
	EAST_BOX = 10,
	EAST_PLATE = 11,
	EAST_SMALLOBJ = 12,
	EAST_SUITCASE = 13,
	EAST_TRAY = 14,
	EAST_TROLLY = 15,
	EAST_FLASHLIGHT = 16,
	EAST_CARRY_1HANDEDWEAPON = 17,
	EAST_CARRY_2HANDEDWEAPON = 18,
	EAST_CARRY_RAKE = 19,
	EAST_CARRY_WEAPON_ITEM = 20,
	EAST_CARRY_BRICK_MINE = 21,
	EAST_CARRY_PROXY_MINE = 22,
	EAST_CARRY_LEAD_PIPES = 23,
	EAST_CARRY_TUBE = 24,
};

// Size: 0x4
enum class EAnimationPose : int32_t
{
	AP_Undefined = 0,
	AP_Standing = 1,
	AP_SittingChair = 2,
	AP_SittingGround = 3,
	AP_LyingGround = 4,
	AP_Crouching = 5,
	AP_SittingBench = 6,
	AP_SittingChairTable = 7,
};

// Size: 0x4
enum class EAttachLocation : int32_t
{
	eALRightHand = 0,
	eALLeftHand = 1,
	eALFreeBone = 2,
	eALAttachCount = 3,
	eALUndefined = 4,
};

// Size: 0x4
enum class EAutoScanMode : int32_t
{
	ASM_GEOMETRY = 0,
	ASM_VOLUMEBOX = 1,
};

// Size: 0x4
enum class EBaseMovementType : int32_t
{
	eMovementNone = -1,
	eMovementDead = 0,
	eMovementAgility = 1,
	eMovementShootingBallet = 2,
	eMovementAlign = 3,
	eMovementCover = 4,
	eMovementDrainPipe = 5,
	eMovementLadder = 6,
	eMovementPullVictimFromWindow = 7,
	eMovementFiberWireKill = 8,
	eMovementDumpBody = 9,
	eMovementThrowBodyOverRail = 10,
	eMovementDumpBodyOverLedge = 11,
	eMovementOperateCPDoor = 12,
	eMovementDisguiseSafeZone = 13,
	eMovementHideInCloset = 14,
	eMovementHumanShield = 15,
	eMovementTakeDown = 16,
	eMovementCloseCombat = 17,
	eMovementRecoveryFinisher = 18,
	eMovementContextAction = 19,
	eMovementSubaction = 20,
	eMovementVentilatorShaft = 21,
	eMovementGrabVictim = 22,
	eMovementPushVictimThroughWindowAndRail = 23,
	eMovementContextKill = 24,
	eMovementKickVictimOverLedge = 25,
	eMovementDragBody = 26,
	eMovementTakeClothes = 27,
	eMovementCoupDeGrace = 28,
	eMovementThrow = 29,
	eMovementPlace = 30,
	eMovementSurrender = 31,
	eMovementFrisk = 32,
	eMovementShowItem = 33,
	eMovementPickupItem = 34,
	eMovementPeek = 35,
	eMovementFocusedInteraction = 36,
	eMovementLocomotion = 37,
	eMovementLast = 38,
};

// Size: 0x4
enum class EBehaviorTreeVariableType : int32_t
{
	BTVT_Invalid = -1,
	BTVT_SceneReference = 0,
	BTVT_Contextual = 1,
	BTVT_Dynamic = 2,
	BTVT_NumTypes = 3,
};

// Size: 0x4
enum class EBoolCheckType : int32_t
{
	eBCT_IGNORE = 0,
	eBCT_TRUE = 1,
	eBCT_FALSE = 2,
};

// Size: 0x4
enum class EBooleanOption : int32_t
{
	BO_Off = 0,
	BO_On = 1,
	BO_Default = 2,
};

// Size: 0x4
enum class EBulletType : int32_t
{
	BULLET_TYPE_NONE = 0,
	BULLET_TYPE_GUN = 1,
	BULLET_TYPE_REVOLVER = 2,
	BULLET_TYPE_SMG = 3,
	BULLET_TYPE_MG = 4,
	BULLET_TYPE_RIFLE = 5,
	BULLET_TYPE_SHOTGUN = 6,
	BULLET_TYPE_SNIPER = 7,
	BULLET_TYPE_RPG = 8,
};

// Size: 0x4
enum class EButtonDisplay : int32_t
{
	BUTTON_DISPLAY_AT_OPENDOOR = 0,
	BUTTON_DISPLAY_AT_PICKUP = 1,
	BUTTON_DISPLAY_AT_STARTDIALOG = 2,
	BUTTON_DISPLAY_AT_RESET = 3,
	BUTTON_DISPLAY_AT_OUTFIT = 4,
	BUTTON_DISPLAY_AT_CLOTHBUNDLE = 5,
	BUTTON_DISPLAY_AT_DRAGBODY = 6,
	BUTTON_DISPLAY_AT_HUMANSHIELD = 7,
	BUTTON_DISPLAY_AT_RELEASEHUMANSHIELD = 8,
	BUTTON_DISPLAY_AT_KILLHUMANSHIELD = 9,
	BUTTON_DISPLAY_AT_SWITCHBOX = 10,
	BUTTON_DISPLAY_AT_SWAPITEM = 11,
	BUTTON_DISPLAY_AT_DUMPBODY = 12,
	BUTTON_DISPLAY_AT_OPENLID = 13,
	BUTTON_DISPLAY_AT_CHECKPOINTDOOR = 14,
	BUTTON_DISPLAY_AT_SIMPLE = 15,
	BUTTON_DISPLAY_AT_ENTERCLOSET = 16,
	BUTTON_DISPLAY_AT_EXITCLOSET = 17,
	BUTTON_DISPLAY_AT_ENTERSAFEZONE = 18,
	BUTTON_DISPLAY_AT_EXITSAFEZONE = 19,
	BUTTON_DISPLAY_AT_DISABLEFUSEBOX = 20,
	BUTTON_DISPLAY_AT_CONTAINERFLUSHBODY = 21,
	BUTTON_DISPLAY_AT_CONTEXTACTION = 22,
	BUTTON_DISPLAY_AT_VENTILATORSHAFT = 23,
	BUTTON_DISPLAY_AT_HEALTHSTATION = 24,
	BUTTON_DISPLAY_AT_KEYCARDREADER = 25,
	BUTTON_DISPLAY_AT_ITEMCONTAINER = 26,
	BUTTON_DISPLAY_AT_USE_QUICK = 27,
	BUTTON_DISPLAY_AT_USE = 28,
	BUTTON_DISPLAY_SHOOTING_BALLET = 29,
	BUTTON_DISPLAY_SHOOTING_BALLET_START = 30,
	BUTTON_DISPLAY_SHOOTING_BALLET_ZOOM = 31,
	BUTTON_DISPLAY_SHOOTING_BALLET_TAG = 32,
	BUTTON_DISPLAY_SHOOTING_BALLET_CANCEL = 33,
	BUTTON_DISPLAY_SHOOTING_BALLET_SLOWDOWN = 34,
	BUTTON_DISPLAY_SHOOTING_BALLET_CINEMATIC = 35,
	BUTTON_DISPLAY_SHOOTING_BALLET_HOLD_CAMERA = 36,
	BUTTON_DISPLAY_SHOOTING_BALLET_NEXT_CAMERA = 37,
	BUTTON_DISPLAY_RELOAD = 38,
	BUTTON_DISPLAY_HOLSTER = 39,
	BUTTON_DISPLAY_CHANGE_WEAPON_MODE = 40,
	BUTTON_DISPLAY_REMOTE_DETONATE = 41,
	BUTTON_DISPLAY_INVENTORY_ACCEPT = 42,
	BUTTON_DISPLAY_INVENTORY_CANCEL = 43,
	BUTTON_DISPLAY_HINTMESSAGE_CONTINUE = 44,
	BUTTON_DISPLAY_CLOSECOMBAT_TAKEDOWN = 45,
	BUTTON_DISPLAY_CLOSECOMBAT_COUNTERATTACK = 46,
	BUTTON_DISPLAY_CLOSECOMBAT_SILENT = 47,
	BUTTON_DISPLAY_CLOSECOMBAT_SNAPNECK = 48,
	BUTTON_DISPLAY_CLOSECOMBAT_CHOKE = 49,
	BUTTON_DISPLAY_CLOSECOMBAT_CHOKE_TARGET = 50,
	BUTTON_DISPLAY_CLOSECOMBAT_CHAIN_HIT = 51,
	BUTTON_DISPLAY_PISTOL_FINISHER = 52,
	BUTTON_DISPLAY_PEEK_VENT = 53,
	BUTTON_DISPLAY_PEEK_CLOSET = 54,
	BUTTON_DISPLAY_CLIMB_LADDER = 55,
	BUTTON_DISPLAY_SLIDE_LADDER = 56,
	BUTTON_DISPLAY_LEDGE = 57,
	BUTTON_DISPLAY_LEDGE_STEPON = 58,
	BUTTON_DISPLAY_LEDGEJUMP = 59,
	BUTTON_DISPLAY_LEDGE_PULL_UP = 60,
	BUTTON_DISPLAY_LEDGE_CLIMB_DOWN = 61,
	BUTTON_DISPLAY_LEDGE_DROP_DOWN = 62,
	BUTTON_DISPLAY_WINDOW = 63,
	BUTTON_DISPLAY_WINDOWSNEAK = 64,
	BUTTON_DISPLAY_PULLVICTIM = 65,
	BUTTON_DISPLAY_PUSHVICTIM = 66,
	BUTTON_DISPLAY_SURRENDER = 67,
	BUTTON_DISPLAY_COVERTOCOVER = 68,
	BUTTON_DISPLAY_COVERCORNER = 69,
	BUTTON_DISPLAY_COVEREXITFORWARD = 70,
	BUTTON_DISPLAY_COVERSCALEEXIT = 71,
	BUTTON_DISPLAY_TAKEDISGUISE = 72,
	BUTTON_DISPLAY_VENTILATOR_EXIT = 73,
	BUTTON_DISPLAY_DROPBODY = 74,
	BUTTON_DISPLAY_ABORT_CHECKPOINTDOOR = 75,
	BUTTON_DISPLAY_QUICKSWAP = 76,
	BUTTON_DISPLAY_OPERATE_LEVER = 77,
	BUTTON_DISPLAY_CLOSECOMBAT_CHAIN_HIGH = 78,
	BUTTON_DISPLAY_CLOSECOMBAT_CHAIN_LOW = 79,
	BUTTON_DISPLAY_CLOSECOMBAT_CHAIN_COUNTER = 80,
	BUTTON_DISPLAY_FIBERWIRE_KILL = 81,
	BUTTON_DISPLAY_DROP_ITEM = 82,
	BUTTON_DISPLAY_ABORT_MINIGAME = 83,
	BUTTON_DISPLAY_CONTRACT_MARK = 84,
	BUTTON_DISPLAY_CONTRACT_UNMARK = 85,
	BUTTON_DISPLAY_COMPLY = 86,
	BUTTON_DISPLAY_MAX = 87,
};

// Size: 0x4
enum class EButtonPressType : int32_t
{
	BUTTON_PRESS = 0,
	BUTTON_HOLD = 1,
	BUTTON_REPEAT = 2,
	BUTTON_TAP = 3,
	BUTTON_ROTATE_CCW = 4,
	BUTTON_PRESS_TYPE_MAX = 5,
};

// Size: 0x4
enum class EButtonState : int32_t
{
	BUTTON_STATE_DISABLED = -1,
	BUTTON_STATE_NONE = 0,
	BUTTON_STATE_ENABLED = 1,
	BUTTON_STATE_PRESSED = 2,
	BUTTON_STATE_BLINKING = 3,
};

// Size: 0x4
enum class EBystanderPointType : int32_t
{
	BPT_Scared = 0,
	BPT_Alerted = 1,
};

// Size: 0x4
enum class ECCDUsage : int32_t
{
	ECCDUSAGE_DISABLED = 0,
	ECCDUSAGE_AGAINST_STATIC = 1,
	ECCDUSAGE_AGAINST_STATIC_DYNAMIC = 2,
};

// Size: 0x4
enum class ECCDecalEffect : int32_t
{
	eCCDecalEffect_None = 0,
	eCCDecalEffect_Stab = 1,
	eCCDecalEffect_Blunt1H = 2,
	eCCDecalEffect_Blunt2H = 3,
	eCCDecalEffect_Slash1H = 4,
	eCCDecalEffect_Shatter = 5,
	eCCDecalEffect_AxeCleave = 6,
	eCCDecalEffect_AxePull = 7,
	eCCDecalEffect_AxeSlitThroat = 8,
	eCCDecalEffect_SlitThroat = 9,
	eCCDecalEffect_FacePunch = 10,
	eCCDecalEffect_Bruise = 11,
};

// Size: 0x4
enum class ECCEmitterEffect : int32_t
{
	eCCEmitterEffect_None = 0,
	eCCEmitterEffect_Stab = 1,
	eCCEmitterEffect_Blunt1H = 2,
	eCCEmitterEffect_Blunt2H = 3,
	eCCEmitterEffect_Slash1H = 4,
	eCCEmitterEffect_Shatter = 5,
	eCCEmitterEffect_AxeCleave = 6,
	eCCEmitterEffect_AxePull = 7,
	eCCEmitterEffect_AxeSlitThroat = 8,
	eCCEmitterEffect_SlitThroat = 9,
	eCCEmitterEffect_FacePunch = 10,
	eCCEmitterEffect_Blood = 11,
};

// Size: 0x4
enum class ECCNodeSubtype : int32_t
{
	eCCNodeSubtype_Left = 0,
	eCCNodeSubtype_Right = 1,
	eCCNodeSubtype_Front = 2,
	eCCNodeSubtype_Back = 3,
	eCCNodeSubtype_StairsAbove = 4,
	eCCNodeSubtype_StairsBelow = 5,
	eCCNodeSubtype_StairsAbove_Back = 6,
	eCCNodeSubtype_StairsBelow_Back = 7,
	eCCNodeSubtype_Front_Back = 8,
	eCCNodeSubtype_Count = 9,
};

// Size: 0x4
enum class ECCNodeType : int32_t
{
	eCCNodeType_Counter = 0,
	eCCNodeType_ExecutePistol = 1,
	eCCNodeType_React = 2,
	eCCNodeType_SilentTakeDownEnd = 3,
	eCCNodeType_SilentKill = 4,
	eCCNodeType_SlitThroat1H = 5,
	eCCNodeType_Swing1H = 6,
	eCCNodeType_Bash1H = 7,
	eCCNodeType_Stab1H = 8,
	eCCNodeType_Syringe1H = 9,
	eCCNodeType_Strangle1H = 10,
	eCCNodeType_Smash1H = 11,
	eCCNodeType_Swing2H = 12,
	eCCNodeType_Stab2H = 13,
	eCCNodeType_Bash2H = 14,
	eCCNodeType_Strangle2H = 15,
	eCCNodeType_Axe = 16,
	eCCNodeType_Sword1H = 17,
	eCCNodeType_AttackChain = 18,
	eCCNodeType_AttackChainCivilian = 19,
	eCCNodeType_AttackChainHeavy = 20,
	eCCNodeType_FailChain = 21,
	eCCNodeType_FinishChainHigh = 22,
	eCCNodeType_FinishChainLow = 23,
	eCCNodeType_FinishChainKill = 24,
	eCCNodeType_StairsChain = 25,
	eCCNodeType_CounterChain = 26,
	eCCNodeType_AttackIdle = 27,
	eCCNodeType_AttackPassify = 28,
	eCCNodeType_FailChainPush = 29,
	eCCNodeType_Count = 30,
};

// Size: 0x4
enum class ECCWeaponAnimSet : int32_t
{
	AS_SLIT_THROAT_1H = 0,
	AS_SWING_1H = 1,
	AS_BASH_1H = 2,
	AS_STAB_1H = 3,
	AS_SYRINGE_1H = 4,
	AS_SMASH_1H = 5,
	AS_STRANGLE = 6,
	AS_SWING_2H = 7,
	AS_BASH_2H = 8,
	AS_STAB_2H = 9,
	AS_STRANGLE_2H = 10,
	AS_SWORD_1H = 11,
	AS_AXE = 12,
};

// Size: 0x4
enum class ECOMUsage : int32_t
{
	ECOMUSAGE_AUTOCOMPUTE = 0,
	ECOMUSAGE_PIVOT = 1,
};

// Size: 0x4
enum class ECameraControls : int32_t
{
	eCameraControlsNormal = 0,
	eCameraControlsOTS = 1,
};

// Size: 0x4
enum class ECameraOffset_old : int32_t
{
	eCameraOffset_Center = 0,
	eCameraOffset_Left = 1,
	eCameraOffset_Right = 2,
};

// Size: 0x4
enum class ECameraShakerChannel : int32_t
{
	eCameraShakerChannel_Default = 0,
	eCameraShakerChannle_Locomotion = 1,
	eCameraShakerChannel_Ambient = 2,
	eCameraShakerChannel_Weapon = 3,
	eCameraShakerChannel_CloseCombat = 4,
	eCameraShakerChannel_Num = 5,
};

// Size: 0x4
enum class ECameraState : int32_t
{
	eCamSneakStand = 0,
	eCamSneakWalk = 1,
	eCamSneakRoadyRun = 2,
	eCamNormalStand = 3,
	eCamNormalWalk = 4,
	eCamNormalRun = 5,
	eCamLocomotion = 6,
	eCamCrowdStand = 7,
	eCamCrowdWalk = 8,
	eCamCrowdRun = 9,
	eCamCrowdSneakStand = 10,
	eCamCrowdSneakWalk = 11,
	eCamCrowdSneakRoadyRun = 12,
	eCamCrowdLocomotion = 13,
	eCamDead = 14,
	eCamLadder = 15,
	eCamDrainPipe = 16,
	eCamDrag = 17,
	eCamHumanShield = 18,
	eCamSBTag = 19,
	eCamSBTagOTS = 20,
	eCamCloseCombat = 21,
	eCamFiberWire = 22,
	eCamWindowPull = 23,
	eCamRailPush = 24,
	eCamLedgeKick = 25,
	eCamLedgePull = 26,
	eCamLedgeHang = 27,
	eCamLedgeWalk = 28,
	eCamLedgeWalkOTS = 29,
	eCamCoverLow = 30,
	eCamCoverMedium = 31,
	eCamCoverHigh = 32,
	eCamCoverLowOTS = 33,
	eCamCoverHighOTS = 34,
	eCamCoverLowScope = 35,
	eCamCoverHighScope = 36,
	eCamCoverLowTakedownOver = 37,
	eCamCoverLowTakedownCorner = 38,
	eCamCoverHighTakedownCorner = 39,
	eCamTakeDisguise = 40,
	eCamOTS = 41,
	eCamOTSHigh = 42,
	eCamOTSLow = 43,
	eCamUnAimedShooting = 44,
	eCamUnAimedShootingHigh = 45,
	eCamUnAimedShootingLow = 46,
	eCamScope = 47,
	eCamScopeHigh = 48,
	eCamScopeLow = 49,
	eCamVaultLow = 50,
	eCamVaultHigh = 51,
	eCamTakedown = 52,
	eCamTakedownChair = 53,
	eCamNumProfiles = 54,
	eCamAll = 55,
};

// Size: 0x4
enum class ECautiousDisturbanceState : int32_t
{
	eCDS_Pending = 0,
	eCDS_Expired = 1,
	eCDS_Handled = 2,
	eCDS_GetHelpGroup = 3,
	eCDS_InvestigationGroup = 4,
	eCDS_InvestigateAfterExplosion = 5,
	eCDS_Ignored = 6,
	eCDS_NoInvestigator = 7,
	eCDS_Similar = 8,
	eCDS_ManHunt = 9,
	eCDS_CombatSuppressGunshots = 10,
};

// Size: 0x4
enum class ECharSetCharacterType : int32_t
{
	ECSCT_Actor = 0,
	ECSCT_Nude = 1,
	ECSCT_HeroA = 2,
	ECSCT_HeroB = 3,
	ECSCT_HeroC = 4,
};

// Size: 0x4
enum class ECheatGroup : int32_t
{
	eCGNone = 0,
	eCGPistols = 1,
	eCGSMGs = 2,
	eCGAssaultRifles = 3,
	eCGShotguns = 4,
	eCGSniper = 5,
	eCGExotics = 6,
	eCGDevices = 7,
};

// Size: 0x4
enum class EClipSpawnAxis : int32_t
{
	eCSA_XPos = 0,
	eCSA_XNeg = 1,
	eCSA_YPos = 2,
	eCSA_YNeg = 3,
	eCSA_ZPos = 4,
	eCSA_ZNeg = 5,
};

// Size: 0x4
enum class EClothBendConstrainType : int32_t
{
	eClothBendConstrainType_Stick = 0,
	eClothBendConstrainType_Triangle = 1,
};

// Size: 0x4
enum class EClothColliderFilter : int32_t
{
	EClothColliderFilter_Environment = 0,
	EClothColliderFilter_Character = 1,
	EClothColliderFilter_Character_Environment = 2,
};

// Size: 0x4
enum class EClothStretchConstrainType : int32_t
{
	eClothBendConstrainType_Anchor = 0,
	eClothBendConstrainType_LRA = 1,
	eClothBendConstrainType_None = 2,
};

// Size: 0x4
enum class ECollidableLayer : int32_t
{
	eCollLayer_COLLIDE_WITH_ALL = 0,
	eCollLayer_STATIC_COLLIDABLES_ONLY = 1,
	eCollLayer_DYNAMIC_COLLIDABLES_ONLY = 2,
	eCollLayer_STAIRS = 3,
	eCollLayer_SHOT_ONLY_COLLISION = 4,
	eCollLayer_DYNAMIC_CLOTH_ONLY = 5,
	eCollLayer_DYNAMIC_TRASH_COLLIDABLES = 6,
	eCollLayer_KINEMATIC_COLLIDABLES_ONLY = 7,
	eCollLayer_CHARACTER_CLOTHING_ONLY = 8,
	eCollLayer_STATIC_COLLIDABLES_ONLY_TRANSPARENT = 9,
	eCollLayer_DYNAMIC_COLLIDABLES_ONLY_TRANSPARENT = 10,
	eCollLayer_KINEMATIC_COLLIDABLES_ONLY_TRANSPARENT = 11,
	eCollLayer_STAIRS_STEPS = 12,
	eCollLayer_STAIRS_SLOPE = 13,
	eCollLayer_AUXILIARY = 14,
	eCollLayer_HERO_PROXY = 15,
	eCollLayer_ACTOR_PROXY = 16,
	eCollLayer_CLIP = 17,
	eCollLayer_ACTOR_RAGDOLL = 18,
	eCollLayer_CROWD_RAGDOLL = 19,
	eCollLayer_LEDGE_ANCHOR = 20,
	eCollLayer_ACTOR_DYN_BODY = 21,
	eCollLayer_HERO_DYN_BODY = 22,
	eCollLayer_ITEMS = 23,
	eCollLayer_WEAPONS = 24,
	eCollLayer_COLLISION_VOLUME_HITMAN_ON = 25,
	eCollLayer_COLLISION_VOLUME_HITMAN_OFF = 26,
	eCollLayer_DYNAMIC_COLLIDABLES_ONLY_NO_CHARACTER = 27,
	eCollLayer_DYNAMIC_COLLIDABLES_ONLY_NO_CHARACTER_TRANSPARENT = 28,
	eCollLayer_COLLIDE_WITH_STATIC_ONLY = 29,
	eCollLayer_AI_VISION_BLOCKER = 30,
	eCollLayer_AI_VISION_BLOCKER_AMBIENT_ONLY = 31,
	eCollayer_UNUSED_LAST = 32,
};

// Size: 0x4
enum class ECollidableShape : int32_t
{
	ECOLLIDABLESHAPE_SPHERE = 0,
	ECOLLIDABLESHAPE_CAPSULE = 1,
	ECOLLIDABLESHAPE_BOX = 2,
};

// Size: 0x4
enum class ECollidablesType : int32_t
{
	ECST_STATIC_AND_DYNAMIC = 0,
	ECST_STATIC_ONLY = 1,
	ECST_DYNAMIC_ONLY = 2,
};

// Size: 0x4
enum class ECollisionPriority : int32_t
{
	ECOLLISIONPRIORITY_LOW = 0,
	ECOLLISIONPRIORITY_NORMAL = 1,
	ECOLLISIONPRIORITY_HIGH = 2,
	ECOLLISIONPRIORITY_CRITICAL = 3,
};

// Size: 0x1
enum class ECollisionResponse : int8_t
{
	REFLECT_VELOCITY = 0,
	SLIDE_ON = 1,
	STAY_AT_COLLISION_POINT = 2,
	CUSTOM = 3,
};

// Size: 0x4
enum class ECombatZoneState : int32_t
{
	CZS_Inactive = 0,
	CZS_Triggered = 1,
	CZS_Engaged = 2,
};

// Size: 0x4
enum class ECommunicationBarMessage : int32_t
{
	ECBM_Unknown = 0,
	ECBM_Spotted = 1,
	ECBM_Frisking = 2,
	ECBM_HostileArea = 3,
	ECBM_InvestigatingArea = 4,
	ECBM_Clear = 5,
	ECBM_Suspicious = 6,
	ECBM_Alerted = 7,
	ECBM_Hunting = 8,
	ECBM_Arresting = 9,
	ECBM_Hostile = 10,
	ECBM_IdentityKnown = 11,
	ECBM_Agitated = 12,
	ECBM_VipRunsToSafeArea = 13,
	ECBM_VipEscaping = 14,
	ECBM_BodyFound = 15,
	ECBM_GunshotHeard = 16,
	ECBM_CloseCombatHeard = 17,
	ECBM_CrimeNoticed = 18,
	ECBM_BulletImpactNoticed = 19,
	ECBM_SpottedByCamera = 20,
	ECBM_UnconsciousWitness = 21,
};

// Size: 0x4
enum class ECommunicationBarState : int32_t
{
	COMMUNICATION_BAR_NONE = 0,
	COMMUNICATION_BAR_CLEAR = 1,
	COMMUNICATION_BAR_SEARCHING = 2,
	COMMUNICATION_BAR_SUSPICIOUS = 3,
	COMMUNICATION_BAR_HUNTING = 4,
	COMMUNICATION_BAR_HOSTILE = 5,
	COMMUNICATION_BAR_BLOOD_FOUND = 6,
	COMMUNICATION_BAR_BODY_FOUND = 7,
	COMMUNICATION_BAR_GUARDS_ALERTED = 8,
	COMMUNICATION_BAR_BACKUP_ARRIVED = 9,
};

// Size: 0x4
enum class ECompiledBehaviorType : int32_t
{
	BT_ConditionScope = 0,
	BT_Random = 1,
	BT_Match = 2,
	BT_Sequence = 3,
	BT_BEHAVIORS_BEGIN = 4,
	BT_Dummy = 4,
	BT_Dummy2 = 5,
	BT_Error = 6,
	BT_Wait = 7,
	BT_WaitBasedOnDistanceToTarget = 8,
	BT_WaitForItemHandled = 9,
	BT_AbandonOrder = 10,
	BT_CompleteOrder = 11,
	BT_PlayAct = 12,
	BT_PlayReaction = 13,
	BT_SimpleReaction = 14,
	BT_SituationAct = 15,
	BT_SituationApproach = 16,
	BT_SituationGetHelp = 17,
	BT_SituationFace = 18,
	BT_SituationConversation = 19,
	BT_Holster = 20,
	BT_SpeakWait = 21,
	BT_Pickup = 22,
	BT_Drop = 23,
	BT_MoveTo = 24,
	BT_Reposition = 25,
	BT_SituationMoveTo = 26,
	BT_FormationMove = 27,
	BT_SituationJumpTo = 28,
	BT_AmbientWalk = 29,
	BT_AmbientStand = 30,
	BT_CrowdAmbientStand = 31,
	BT_AmbientItemUse = 32,
	BT_AmbientLook = 33,
	BT_Act = 34,
	BT_Patrol = 35,
	BT_MoveToPosition = 36,
	BT_AlertedStand = 37,
	BT_AlertedDebug = 38,
	BT_AttentionToPerson = 39,
	BT_CuriousInvestigate = 40,
	BT_CuriousIdle = 41,
	BT_InvestigateWeapon = 42,
	BT_DeliverWeapon = 43,
	BT_RecoverUnconscious = 44,
	BT_GetOutfit = 45,
	BT_RadioCall = 46,
	BT_EscortOut = 47,
	BT_CautiousSearchPosition = 48,
	BT_LockdownWarning = 49,
	BT_WakeUpUnconscious = 50,
	BT_DeadBodyInvestigate = 51,
	BT_GuardDeadBody = 52,
	BT_DragDeadBody = 53,
	BT_CuriousBystander = 54,
	BT_StandOffArrest = 55,
	BT_StandOffReposition = 56,
	BT_StandAndAim = 57,
	BT_CloseCombat = 58,
	BT_MoveToCloseCombat = 59,
	BT_MoveAwayFromCloseCombat = 60,
	BT_Fight = 61,
	BT_CoverFight = 62,
	BT_ShootFromPosition = 63,
	BT_StandAndShoot = 64,
	BT_HoldCoverPosition = 65,
	BT_CheckLastPosition = 66,
	BT_ProtoCombatHandleHumanShield = 67,
	BT_ProtoSearchIdle = 68,
	BT_ProtoApproachSearchArea = 69,
	BT_ProtoSearchPosition = 70,
	BT_ShootTarget = 71,
	BT_TriggerAlarm = 72,
	BT_MoveInCover = 73,
	BT_MoveToCover = 74,
	BT_AgitatedPatrol = 75,
	BT_AgitatedGuard = 76,
	BT_HeroEscort = 77,
	BT_Escort = 78,
	BT_EscortFormation = 79,
	BT_EscortSearch = 80,
	BT_LeadEscort = 81,
	BT_LeadEscort2 = 82,
	BT_AimReaction = 83,
	BT_FollowHitman = 84,
	BT_RideTheLightning = 85,
	BT_Scared = 86,
	BT_Flee = 87,
	BT_AgitatedBystander = 88,
	BT_SentryFrisk = 89,
	BT_SentryIdle = 90,
	BT_SentryWarning = 91,
	BT_SentryCheckItem = 92,
	BT_VIPScared = 93,
	BT_VIPSafeRoomTrespasser = 94,
	BT_DefendVIP = 95,
	BT_CautiousVIP = 96,
	BT_CautiousGuardVIP = 97,
	BT_Smart = 98,
	BT_SpeakTest = 99,
	BT_Conversation = 100,
	BT_RunToHelp = 101,
	BT_BEHAVIORS_END = 102,
	BT_COMMANDS_BEGIN = 103,
	BT_RenewEvent = 103,
	BT_ExpireEvent = 104,
	BT_SetEventHandled = 105,
	BT_RenewSharedEvent = 106,
	BT_ExpireSharedEvent = 107,
	BT_ExpireAllEvents = 108,
	BT_CreateOrJoinSituation = 109,
	BT_JoinSituation = 110,
	BT_JoinSituationWithActor = 111,
	BT_LeaveSituation = 112,
	BT_GotoPhase = 113,
	BT_RenewGoal = 114,
	BT_ExpireGoal = 115,
	BT_RenewGoalOf = 116,
	BT_SetTension = 117,
	BT_TriggerSpotted = 118,
	BT_CopyKnownLocation = 119,
	BT_UpdateKnownLocation = 120,
	BT_Speak = 121,
	BT_Log = 122,
	BT_COMMANDS_END = 123,
	BT_Invalid = 124,
};

// Size: 0x4
enum class ECompiledConditionType : int32_t
{
	CT_IsCurrent = 0,
	CT_Current = 1,
	CT_IsExpired = 2,
	CT_HasGoal = 3,
	CT_HasUnhandledGoal = 4,
	CT_MaxActorsWithGoal = 5,
	CT_MinExpired = 6,
	CT_MaxExpired = 7,
	CT_MinAge = 8,
	CT_MaxAge = 9,
	CT_IsSharedOlder = 10,
	CT_IsSharedEventCurrent = 11,
	CT_SharedEventCurrent = 12,
	CT_IsSharedEventExpired = 13,
	CT_MinSharedEventExpired = 14,
	CT_MaxSharedEventExpired = 15,
	CT_MinSharedEventAge = 16,
	CT_MaxSharedEventAge = 17,
	CT_IsNull = 18,
	CT_IsEqual = 19,
	CT_IsOfType = 20,
	CT_IsOfActorType = 21,
	CT_IsOfActorRank = 22,
	CT_IsOfActorRole = 23,
	CT_IsActorRoleBodyguard = 24,
	CT_IsActorRoleVIP = 25,
	CT_HasTension = 26,
	CT_HasTensionOrHigher = 27,
	CT_IsAIModified = 28,
	CT_HasSameOutfit = 29,
	CT_IsLegal = 30,
	CT_IsItemLegalOnHitman = 31,
	CT_IsItemIllegalOnHitman = 32,
	CT_IsItemSuspiciousOnHitman = 33,
	CT_AreVisibleItemsLegal = 34,
	CT_AreVisibleItemsIllegal = 35,
	CT_AreVisibleItemsSuspicious = 36,
	CT_AreVisibleWeaponsLegal = 37,
	CT_AreVisibleWeaponsIllegal = 38,
	CT_AreVisibleWeaponsSuspicious = 39,
	CT_OnlyLegalWeaponsDropped = 40,
	CT_IllegalWeaponDropped = 41,
	CT_SuspiciousWeaponDropped = 42,
	CT_OnlyLegalItemsDropped = 43,
	CT_IllegalItemDropped = 44,
	CT_SuspiciousItemDropped = 45,
	CT_OnlyLegalWeaponsPickedUp = 46,
	CT_IllegalWeaponPickedUp = 47,
	CT_SuspiciousWeaponPickedUp = 48,
	CT_OnlyLegalItemsPickedUp = 49,
	CT_IllegalItemPickedUp = 50,
	CT_SuspiciousItemPickedUp = 51,
	CT_MinDistance = 52,
	CT_MaxDistance = 53,
	CT_MinActualDistance = 54,
	CT_MaxActualDistance = 55,
	CT_ActualInsideSlice = 56,
	CT_MaxDistanceToKnownPosition = 57,
	CT_InSituation = 58,
	CT_SituationTarget = 59,
	CT_SituationHuntTarget = 60,
	CT_IsSituationTarget = 61,
	CT_SituationFromActors = 62,
	CT_SituationFromTarget = 63,
	CT_MaxSituationAge = 64,
	CT_MinSituationAge = 65,
	CT_InPhase = 66,
	CT_MinPhaseAge = 67,
	CT_MaxPhaseAge = 68,
	CT_IsOrderInvalid = 69,
	CT_IsSituationOlderThanSharedEvent = 70,
	CT_HasOrder = 71,
	CT_HasPendingOrder = 72,
	CT_Breakpoint = 73,
	CT_Cooldown = 74,
	CT_Trigger = 75,
	CT_IsInSniperIsland = 76,
	CT_SituationIsType = 77,
	CT_IntRuntimeParamEqualsTo = 78,
	CT_IsCombatDisabled = 79,
	CT_CanJoinSituation = 80,
};

// Size: 0x4
enum class EControlButtonName : int32_t
{
	eCN_ABORT = 0,
	eCN_ACTION = 1,
	eCN_ACTIVATE_PROP = 2,
	eCN_AGILITY_DOWN = 3,
	eCN_AGILITY_ENTERWINDOW = 4,
	eCN_AGILITY_SNEAKPASTWINDOW = 5,
	eCN_AGILITY_THROWOVERRAIL = 6,
	eCN_AGILITY_UP = 7,
	eCN_AIM = 8,
	eCN_COVER_ENTER = 9,
	eCN_COVER_TAKEDOWN = 10,
	eCN_COVER_TO_COVER = 11,
	eCN_CROUCH = 12,
	eCN_DRAGBODY = 13,
	eCN_DUMPBODY = 14,
	eCN_FIBERWIRE = 15,
	eCN_HUMANSHIELD = 16,
	eCN_INSTINCT = 17,
	eCN_INVENTORY_HOLSTER = 18,
	eCN_INVENTORY_LONGRANGE = 19,
	eCN_INVENTORY_PROP = 20,
	eCN_INVENTORY_SHORTRANGE = 21,
	eCN_ITEM_DROP = 22,
	eCN_ITEM_THROW = 23,
	eCN_MELEE_HIT = 24,
	eCN_MELEE_TAKEDOWN = 25,
	eCN_PICKUP = 26,
	eCN_RUN = 27,
	eCN_SB_ACTIVATE = 28,
	eCN_SB_CANCEL = 29,
	eCN_SB_EXECUTE = 30,
	eCN_SB_REMOVETAG = 31,
	eCN_SHOOT = 32,
	eCN_NOTEBOOK = 33,
	eCN_PAUSE = 34,
	eCN_NO_ICON = 35,
};

// Size: 0x4
enum class EControlledStates : int32_t
{
	CS_HumanShield = 0,
	CS_CloseCombat = 1,
	CS_PuppetAct = 2,
};

// Size: 0x4
enum class EControllerButton : int32_t
{
	BUTTON_NONE = 0,
	BUTTON_CROSS = 1,
	BUTTON_TRIANGLE = 2,
	BUTTON_SQUARE = 3,
	BUTTON_CIRCLE = 4,
	BUTTON_UP = 5,
	BUTTON_RIGHT = 6,
	BUTTON_DOWN = 7,
	BUTTON_LEFT = 8,
	BUTTON_R1 = 9,
	BUTTON_R2 = 10,
	BUTTON_R3 = 11,
	BUTTON_R_STICK = 12,
	BUTTON_L1 = 13,
	BUTTON_L2 = 14,
	BUTTON_L3 = 15,
	BUTTON_L_STICK = 16,
	BUTTON_START = 17,
	BUTTON_SELECT = 18,
	BUTTON_UP_DOWN = 19,
	BUTTON_LEFT_RIGHT = 20,
	BUTTON_LEFT_RIGHT_UP_DOWN = 21,
	BUTTON_L1_R1 = 22,
	BUTTON_L2_R2 = 23,
	BUTTON_KEYBOARD = 24,
	BUTTON_ESCAPE = 25,
};

// Size: 0x4
enum class ECoordinateSpace : int32_t
{
	CSPACE_INVALID = 0,
	CSPACE_OBJECT_TO_WORLD = 1,
	CSPACE_OBJECT_TO_PARENT = 2,
	CSPACE_SEQUENCE_ORIGIN = 3,
	CSPACE_CHARACTER_RELATIVE = 4,
};

// Size: 0x4
enum class ECoverPosition : int32_t
{
	COVER_POSITION_NONE = 0,
	COVER_POSITION_LEFT = 1,
	COVER_POSITION_RIGHT = 2,
	COVER_POSITION_MIDDLE = 3,
};

// Size: 0x4
enum class ECrossHairType : int32_t
{
	CROSSHAIR_NONE = 0,
	CROSSHAIR_PISTOL = 1,
	CROSSHAIR_REVOLVER = 2,
	CROSSHAIR_SMG = 3,
	CROSSHAIR_RIFLE = 4,
	CROSSHAIR_SHOTGUN = 5,
	CROSSHAIR_SNIPER = 6,
	CROSSHAIR_HARDBALLER = 7,
	CROSSHAIR_UNAIMED = 8,
	CROSSHAIR_POINTER = 9,
	CROSSHAIR_WORLDCENTERMARKER = 10,
	CROSSHAIR_BLINDFIRE = 11,
};

// Size: 0x4
enum class ECrowdFlowCandidates : int32_t
{
	NONE = 0,
	EVERYONE = 1,
	SPAWNED_ON_FLOW = 2,
};

// Size: 0x4
enum class EDamageEvent : int32_t
{
	eDE_UNDEFINED = 0,
	eDE_InCloset = 1,
	eDE_Subdue = 2,
	eDE_CloseCombat = 4,
	eDE_HumanShield = 8,
	eDE_PushOver = 16,
	eDE_KickDownStairs = 32,
	eDE_DeadlyThrow = 64,
	eDE_Shoot = 128,
	eDE_Sedated = 256,
	eDE_InstantTakeDown = 512,
	eDE_CoupDeGrace = 1024,
	eDE_ContextKill = 2048,
	eDE_Garotte = 4096,
	eDE_Poison = 8192,
	eDE_Electric = 16384,
	eDE_SuspendedObject = 32768,
	eDE_Burn = 65536,
	eDE_Drop = 131072,
	eDE_Drown = 262144,
};

// Size: 0x4
enum class EDeathAnimationType : int32_t
{
	DAT_None = 0,
	DAT_SingleShot = 1,
	DAT_BurstShot = 2,
	DAT_HeavyShot = 3,
	DAT_Unknown = 4,
};

// Size: 0x4
enum class EDeathBehavior : int32_t
{
	eDB_IMPACT_ANIM = 0,
	eDB_NO_IMPACT_ANIM = 1,
	eDB_NO_VELOCITY = 2,
	eDB_NO_RAGDOLL = 3,
};

// Size: 0x4
enum class EDeathContext : int32_t
{
	eDC_UNDEFINED = 0,
	eDC_NOT_HERO = 1,
	eDC_HIDDEN = 2,
	eDC_ACCIDENT = 3,
	eDC_MURDER = 4,
};

// Size: 0x4
enum class EDeathType : int32_t
{
	eDT_UNDEFINED = 0,
	eDT_PACIFY = 1,
	eDT_KILL = 2,
	eDT_BLOODY_KILL = 3,
};

// Size: 0x4
enum class EDefaultCollidableLayer : int32_t
{
	DCL_STATIC = 0,
	DCL_KINEMATIC = 1,
	DCL_KINEMATIC_TRANSPARENT = 2,
	DCL_DYNAMIC = 3,
	DCL_DYNAMIC_TRANSPARENT = 4,
	DCL_AUXILIARY = 5,
	DCL_COLLIDE_ALL = 6,
	DCL_STATIC_TRANSPARENT = 7,
	DCL_COLLIDE_STATIC_ONLY = 8,
	DCL_UNUSED_LAST = 9,
};

// Size: 0x4
enum class EDetachUsage : int32_t
{
	EDU_NEVER = 0,
	EDU_ALWAYS = 1,
	EDU_RAGDOLL_ONLY = 2,
};

// Size: 0x4
enum class EDialogEventEndReason : int32_t
{
	EDialogEvent_Completed = 0,
	EDialogEvent_Stopped = 1,
};

// Size: 0x4
enum class EDifficultyParameter : int32_t
{
	EDP_Invalid = 0,
	EDP_AIAttentionGainMultiplier = 1,
	EDP_AIAudioPerceptionAlwaysEmitFootstepSoundEvents = 2,
	EDP_AIIllegalActionAttentionModifier = 3,
	EDP_AIInvestigateCautiousAttentionToPersonEnabled = 4,
	EDP_AIInvestigateDisguiseMembersFollowDistance = 5,
	EDP_AIRunningAttentionModifier = 6,
	EDP_AISuspiciousMovementDisguiseAttentionModifier = 7,
	EDP_AISuspiciousMovementSensorEnabled = 8,
	EDP_AllowInstinctGlow = 9,
	EDP_ArrestEscalateIllegalWeapon = 10,
	EDP_ArrestEscalateMaximum = 11,
	EDP_ArrestEscalateMoving = 12,
	EDP_ArrestEscalateRunning = 13,
	EDP_ArrestTargetLostTime = 14,
	EDP_CloseCombatChainFailDamage = 15,
	EDP_CloseCombatChoiceWindowLength = 16,
	EDP_CloseCombatChokePressCount_Civilian = 17,
	EDP_CloseCombatChokePressCount_Elite = 18,
	EDP_CloseCombatChokePressCount_Guard = 19,
	EDP_CloseCombatCounterEndLength = 20,
	EDP_CloseCombatCounterFailDamage = 21,
	EDP_CloseCombatShowSnapNeckPressCount_Civilian = 22,
	EDP_CloseCombatShowSnapNeckPressCount_Elite = 23,
	EDP_CloseCombatShowSnapNeckPressCount_Guard = 24,
	EDP_DisguiseRuiningEnabled = 25,
	EDP_GameMissionSaveLimit = 26,
	EDP_GameOpportunitiesEnabled = 27,
	EDP_HearRangeBulletImpact = 28,
	EDP_HearRangeBulletImpactOnBody = 29,
	EDP_HearRangeCloseCombatBreakNeck = 30,
	EDP_HearRangeCloseCombatChoke = 31,
	EDP_HearRangeCloseCombatFiberWire = 32,
	EDP_HearRangeCloseCombatHitFromBehind = 33,
	EDP_HearRangeCloseCombatL1 = 34,
	EDP_HearRangeCloseCombatL2 = 35,
	EDP_HearRangeCloseCombatL3 = 36,
	EDP_HearRangeEventAccident = 37,
	EDP_HearRangeEventAlarm = 38,
	EDP_HearRangeEventExplosion = 39,
	EDP_HearRangeEventRadio = 40,
	EDP_HearRangeEventStrange = 41,
	EDP_HearRangeEventThrownItem = 42,
	EDP_HearRangeFootstepHardCrouchRun = 43,
	EDP_HearRangeFootstepHardCrouchWalk = 44,
	EDP_HearRangeFootstepHardStandRun = 45,
	EDP_HearRangeFootstepHardStandWalk = 46,
	EDP_HearRangeFootstepNormalCrouchRun = 47,
	EDP_HearRangeFootstepNormalCrouchWalk = 48,
	EDP_HearRangeFootstepNormalStandRun = 49,
	EDP_HearRangeFootstepNormalStandWalk = 50,
	EDP_HearRangeFootstepSoftCrouchRun = 51,
	EDP_HearRangeFootstepSoftCrouchWalk = 52,
	EDP_HearRangeFootstepSoftStandRun = 53,
	EDP_HearRangeFootstepSoftStandWalk = 54,
	EDP_HearRangeFootstepVisionAreaLimitCrouchRun = 55,
	EDP_HearRangeFootstepVisionAreaLimitCrouchWalk = 56,
	EDP_HearRangeFootstepVisionAreaLimitStandRun = 57,
	EDP_HearRangeFootstepVisionAreaLimitStandWalk = 58,
	EDP_HearRangeGunEmpty = 59,
	EDP_HearRangeGunShot = 60,
	EDP_HearRangeGunSilenced = 61,
	EDP_HearRangeGunSuperSilenced = 62,
	EDP_HearRangeSpeakAngry = 63,
	EDP_HearRangeSpeakHelp = 64,
	EDP_HearRangeSpeakHelpLoud = 65,
	EDP_HearRangeSpeakPain = 66,
	EDP_HearRangeSpeakPainLow = 67,
	EDP_HearRangeSpeakWarning = 68,
	EDP_HitmanDamageReceivedMultiplier = 69,
	EDP_InstinctModeBurnRate = 70,
	EDP_InstinctRegenCap = 71,
	EDP_InstinctRegenRate = 72,
	EDP_ManhuntGroupMaxSearchTime = 73,
	EDP_ManhuntGroupSearchAreaHackMaxDistance = 74,
	EDP_ManhuntGroupSearchAreaRadius = 75,
	EDP_MaxCoverShootActorCountMultiplier = 76,
	EDP_MinAttentionToForceLookAt = 77,
	EDP_MinAttentionToForceLookAtIfIncreasing = 78,
	EDP_NPCDamageReceivedMultiplier = 79,
	EDP_PlayerDamagePerSecondDistance = 80,
	EDP_PlayerDamagePerSecondLimitFar = 81,
	EDP_PlayerDamagePerSecondLimitNear = 82,
	EDP_PlayerDamagePerSecondThreshold = 83,
	EDP_PlayerHitPointsMax = 84,
	EDP_PlayerHitPointsRegenerationDelay = 85,
	EDP_PlayerHitPointsRegenerationPerSecond = 86,
	EDP_SecurityCameras = 87,
	EDP_SightReactionMinAttention = 88,
	EDP_SightInvestigationMinAttention = 89,
	EDP_ShootingBalletBurnRateA = 90,
	EDP_ShootingBalletBurnRateB = 91,
	EDP_ShootingBalletPostFee = 92,
	EDP_ShootingBalletTimeAB = 93,
	EDP_ShootSpreadMax = 94,
	EDP_ShootSpreadMin = 95,
	EDP_ShootSpreadRange = 96,
	EDP_SocialGreetingAngle = 97,
	EDP_SocialGreetingCooldown = 98,
	EDP_SocialGreetingCooldownAlertLevel = 99,
	EDP_SocialGreetingCooldownLastSpeak = 100,
	EDP_SocialGreetingCooldownPlayer = 101,
	EDP_SocialGreetingCooldownSequence = 102,
	EDP_SocialGreetingDistance = 103,
	EDP_SocialLookAtTimeMax = 104,
	EDP_SocialLookAtTimeMin = 105,
	EDP_SocialSillyCooldown = 106,
	EDP_SocialSillyDistance = 107,
	EDP_SocialSillyTriggerTime = 108,
	EDP_SocialStandingCooldown = 109,
	EDP_SocialStandingDistance = 110,
	EDP_SocialStandingDistanceImmediate = 111,
	EDP_SocialStandingTriggerTime = 112,
	EDP_SpotHitmanShootingDistance = 113,
	EDP_StrictItemRules = 114,
	EDP_COUNT = 115,
};

// Size: 0x4
enum class EDisposalType : int32_t
{
	DISPOSAL_UNDEFINED = 0,
	DISPOSAL_NOTHING = 1,
	DISPOSAL_HOLSTER = 2,
	DISPOSAL_HIDE = 3,
	DISPOSAL_PLACE = 4,
	DISPOSAL_DROP = 5,
	DISPOSAL_DROP_HIDE = 6,
	DISPOSAL_DESTROY = 7,
	DISPOSAL_COUNT = 8,
};

// Size: 0x4
enum class EDisturbanceType : int32_t
{
	DT_Generic = 0,
	DT_SeeWeapon = 1,
	DT_BodyNeedsBagging = 2,
	DT_SoundCloseCombat = 3,
	DT_SoundGunSilenced = 4,
	DT_SoundBulletImpact = 5,
	DT_SoundNeckBreak = 6,
	DT_SoundSpeakPain = 7,
	DT_SoundGunshot = 8,
	DT_SoundExplosion = 9,
	DT_SeeExplosion = 10,
	DT_DeadBody = 11,
	DT_HitmanNearDeadBody = 12,
	DT_HitmanNearPacifiedBody = 13,
	DT_BloodPool = 14,
	DT_SeeOpenCPDoor = 15,
	DT_SeeTakeKeyCard = 16,
	DT_SeeTakeSecurityTape = 17,
	DT_SeeDisableFusebox = 18,
	DT_SeeChangeOutfit = 19,
	DT_SeeTrespasser = 20,
	DT_SeeBrokenDisguise = 21,
	DT_SeeIllegalWeapon = 22,
	DT_SeeDraggingBody = 23,
	DT_SeeDeath = 24,
	DT_SeeKilling = 25,
	DT_UnconsciousVictim = 26,
	DT_HuntTarget = 27,
	DT_CrowdAlerted = 28,
	DT_SeeGunshotVictim = 29,
	DT_SoundThrownItem = 30,
	DT_SoundThrownItemSeenThrowing = 31,
	DT_HitByItemOrCoin = 32,
	DT_PrivateAreaViolated = 33,
	DT_SetpieceInteraction = 34,
	DT_IllegalAction = 35,
	DT_KnockdownMelee = 36,
	DT_KnockdownThrow = 37,
	DT_BumpedTooMuch = 38,
	DT_Murder = 39,
	DT_Strangle = 40,
	DT_GotShot = 41,
	DT_MurderAttempt = 42,
	DT_LongTermMemory = 43,
	DT_MAX = 44,
};

// Size: 0x4
enum class EDynamicVariableType : int32_t
{
	DV_Invalid = -1,
	DV_Me = 0,
	DV_Hitman = 1,
	DV_InSight = 2,
	DV_RecentlyInSight = 3,
	DV_Sounds = 4,
	DV_NumVariables = 5,
};

// Size: 0x4
enum class EEntityOrdering : int32_t
{
	EO_LOW = 0,
	EO_NORMAL = 1,
	EO_HIGH = 2,
};

// Size: 0x4
enum class EEquipAbility : int32_t
{
	EA_EQUIP_IN_HANDS = 0,
	EA_CANNOT_BE_EQUIPPED = 1,
};

// Size: 0x4
enum class EFSMInternalEvent : int32_t
{
	eFSMEvent_Completed = 0,
	eFSMEvent_Failed = 1,
	eFSMEvent_Choice = 2,
	eFSMEvent_Max = 3,
};

// Size: 0x4
enum class EFSMStateStatus : int32_t
{
	eInactive = 0,
	eActive = 1,
	eCompleted = 2,
	eFailed = 3,
	eInterrupted = 4,
};

// Size: 0x4
enum class EFocusBarState : int32_t
{
	FOCUS_BAR_NORMAL = 0,
	FOCUS_BAR_INSTINCT = 1,
	FOCUS_BAR_BURNING = 2,
};

// Size: 0x4
enum class EFontFlags : int32_t
{
	FV_Original = 16,
	FV_NoAutoFit = 32,
	FV_Normal = 0,
	FV_Italic = 1,
	FV_Bold = 2,
	FV_BoldItalic = 3,
	FV_FauxItalic = 4,
	FV_FauxBold = 8,
	FV_FauxBoldItalic = 12,
};

// Size: 0x4
enum class EGSBodyPart : int32_t
{
	GSBODYPART_UNKNOWN = 0,
	GSBODYPART_HEAD = 1,
	GSBODYPART_TORSO = 2,
	GSBODYPART_ARM = 3,
	GSBODYPART_LEG = 4,
};

// Size: 0x4
enum class EGSEvent : int32_t
{
	GSEvent_StrayBullet = 0,
	GSEvent_TookDamage = 1,
	GSEvent_UsedCover = 2,
	GSEvent_UsedRun = 3,
	GSEvent_UsedEliminate = 4,
	GSEvent_UsedChokeOut = 5,
	GSEvent_UsedKnockOutByHand = 6,
	GSEvent_Pacified = 7,
	GSEvent_TargetPacified = 8,
	GSEvent_Recover = 9,
	GSEvent_CaughtArmed = 10,
	GSEvent_BodyFound = 11,
	GSEvent_BloodPoolFound = 12,
	GSEvent_InvestigateCurious = 13,
	GSEvent_NPCKilled = 14,
	GSEvent_KilledNPCHidden = 15,
	GSEvent_InvestigateCautious = 16,
	GSEvent_PrecisionAimedKill = 17,
	GSEvent_BlendInActivated = 18,
	GSEvent_PropKill = 19,
	GSEvent_SpottedThroughDisguise = 20,
	GSEvent_TakeOutNonLethal = 21,
	GSEvent_TargetKilled = 22,
	GSEvent_NonTargetKilled = 23,
	GSEvent_AllTargetsKilled = 24,
	GSEvent_AccidentKill = 25,
	GSEvent_ObjectiveUpdate = 26,
	GSEvent_TargetAccidentKill = 27,
	GSEvent_ObjectiveActivate = 28,
	GSEvent_Headshot = 29,
	GSEvent_Fiberwire = 30,
	GSEvent_UsedEliminateSilent = 31,
	GSEvent_ItemFound = 32,
	GSEvent_ItemStashed = 33,
	GSEvent_BodyBagPlaced = 34,
	GSEvent_Projectile_HeadShot = 35,
	GSEvent_Projectile_BodyShot = 36,
	GSEvent_Projectile_Crowd_HeadShot = 37,
	GSEvent_Projectile_Crowd_BodyShot = 38,
	GSEvent_Projectile_Missed = 39,
};

// Size: 0x4
enum class EGSExplodingPropType : int32_t
{
	eGSExplodingProp_Unknown = 0,
	eGSExplodingProp_Barrel = 1,
	eGSExplodingProp_PetrolCan = 2,
	eGSExplodingProp_GasCanister = 3,
	eGSExplodingProp_GasTank = 4,
	eGSExplodingProp_Mine = 5,
	eGSExplodingProp_Pig = 6,
	eGSExplodingProp_Pigeon = 7,
	eGSExplodingProp_FireworksBox = 8,
	eGSExplodingProp_Car = 9,
};

// Size: 0x4
enum class EGSKillSituation : int32_t
{
	GSKILLSITUATION_UNKNOWN = 0,
	GSKILLSITUATION_CLOSECOMBAT = 1,
	GSKILLSITUATION_SILENT = 2,
	GSKILLSITUATION_ENVIRONMENT = 3,
	GSKILLSITUATION_ACTION = 4,
	GSKILLSITUATION_SHOOTINGBALLET = 5,
	GSKILLSITUATION_DEADLYTHROW = 6,
	GSKILLSITUATION_PULLTHROUGHWINDOW = 7,
	GSKILLSITUATION_PUSHOVERRAILING = 8,
	GSKILLSITUATION_PACIFY = 9,
	GSKILLSITUATION_FIBERWIRE = 10,
};

// Size: 0x4
enum class EGSKillVictim : int32_t
{
	GSKILLVICTIM_UNKNOWN = 0,
	GSKILLVICTIM_CIVILIAN = 1,
	GSKILLVICTIM_GUARD = 2,
	GSKILLVICTIM_TARGET = 3,
};

// Size: 0x4
enum class EGait : int32_t
{
	eGait_Normal = 0,
	eGait_Reposition = 1,
	eGait_Alert = 2,
	eGait_Scared = 3,
	eGait_Prone = 4,
	eGait_Dead = 5,
	eGait_Angry = 6,
	eGait_Cheer = 7,
	eGait_Clap = 8,
	eGait_Party = 9,
	eGait_Mingle = 10,
	eGait_Protest = 11,
	eGait_Shop = 12,
	eGait_Excited = 13,
	eGait_Jeer = 14,
	eGait_Haggle = 15,
	eGait_Rally = 16,
	eGait_Chatting = 17,
	eGait_Concerned = 18,
	eGait_Custom0 = 19,
	eGait_Custom1 = 20,
	eGait_Custom2 = 21,
	eGait_Custom3 = 22,
	eGait_Custom4 = 23,
	eGait_Custom5 = 24,
	eGait_Custom6 = 25,
	eGait_Custom7 = 26,
	eGait_Custom8 = 27,
	eGait_Custom9 = 28,
};

// Size: 0x4
enum class EGameEventArgType : int32_t
{
	GE_ARGS_KILL = 0,
	GE_ARGS_PRIORITYKILL = 1,
	GE_ARGS_SITUATION = 2,
	GE_ARGS_INVENTORY = 3,
	GE_ARGS_SHOOTINGBALLET = 4,
	GE_ARGS_EXPLODINGPROP = 5,
	GE_ARGS_EVENT = 6,
	GE_ARGS_CHECKPOINTEVENT = 7,
	GE_ARGS_AI_SITUATION = 8,
};

// Size: 0x4
enum class EGameTension : int32_t
{
	EGT_Undefined = 0,
	EGT_Ambient = 1,
	EGT_Agitated = 2,
	EGT_Searching = 3,
	EGT_AlertedLow = 4,
	EGT_AlertedHigh = 5,
	EGT_Hunting = 6,
	EGT_Arrest = 7,
	EGT_Combat = 8,
};

// Size: 0x4
enum class EGameUIMenu : int32_t
{
	eUIMenu_IntroMenu = 0,
	eUIMenu_PauseMenu = 1,
	eUIMenu_PhoneMenu = 2,
	eUIMenu_MapMenu = 3,
	eUIMenu_ModalDialogMenu = 4,
	eUIMenu_GameplayMenu = 5,
	eUIMenu_InventorySelectorMenu = 6,
	eUIMenu_ActionSelectorMenu = 7,
	eUIMenu_ActionSelectorInventoryMenu = 8,
	eUIMenu_IntelSelectorMenu = 9,
	eUIMenu_NotebookMenu = 10,
	eUIMenu_LogbookMenu = 11,
	eUIMenu_TutorialMenu = 12,
	eUIMenu_SplashHintMenu = 13,
	eUIMenu_Count = 14,
};

// Size: 0x4
enum class EGestureCategory : int32_t
{
	EGC_None = 0,
	EGC_AmbientDialog = 1,
	EGC_TrespassWarn1 = 2,
	EGC_TrespassWarn2 = 3,
	EGC_TrespassWarn3 = 4,
	EGC_StopWarn = 5,
};

// Size: 0x4
enum class EGuardPointType : int32_t
{
	GPT_Hold = 0,
	GPT_Combat = 1,
	GPT_CombatAndHold = 2,
	GPT_VIPSafeRoom = 3,
};

// Size: 0x4
enum class EHM5GameInputFlag : int32_t
{
	eGameInputActionPerform = 0,
	eGameInputActionPickup = 1,
	eGameInputActionAbort = 2,
	eGameInputActionDoor = 3,
	eGameInputWeaponZoomIn = 4,
	eGameInputWeaponZoomOut = 5,
	eGameInputActionShoot = 6,
	eGameInputActionPrecisionShoot = 7,
	eGameInputAimOTS = 8,
	eGameInputCoverAction = 9,
	eGameInputCoverAlternativeAction = 10,
	eGameInputInventoryAccept = 11,
	eGameInputEquipCloseCombatProps = 12,
	eGameInputEquipCloseCombatPropsInverse = 13,
	eGameInputEquipShortRange = 14,
	eGameInputEquipLongRange = 15,
	eGameInputHolsterItem = 16,
	eGameInputDropItem = 17,
	eGameInputTogglePlacement = 18,
	eGameInputActivatePropQuick = 19,
	eGameInputActivateProp = 20,
	eGameInputActivatePropHold = 21,
	eGameInputActivatePropSecondary = 22,
	eGameInputShootingBalletActivate = 23,
	eGameInputShootingBalletExecute = 24,
	eGameInputShootingBalletCancel = 25,
	eGameInputShootingBalletHMView = 26,
	eGameInputGuideAction = 27,
	eGameInputGuideActionHold = 28,
	eGameInputGuideActionSecondary = 29,
	eGameInputGuideEnterWindow = 30,
	eGameInputGuideSneakPastWindow = 31,
	eGameInputGuideSneakPastWindowHold = 32,
	eGameInputGuideKill = 33,
	eGameInputSlideLadder = 34,
	eGameInputCloseCombat = 35,
	eGameInputFiberwire = 36,
	eGameInputCloseCombatCounter = 37,
	eGameInputCloseCombatTakeDown = 38,
	eGameInputCloseCombatDisarm = 39,
	eGameInputSurrender = 40,
	eGameInputShowItem = 41,
	eGameInputReload = 42,
	eGameInputTakeDisguise = 43,
	eGameInputDragDropBody = 44,
	eGameInputDumpBody = 45,
	eGameInputSneakToggle = 46,
	eGameInputCamSwitch = 47,
	eGameInputActivateRun = 48,
	eGameInputInstinctMode = 49,
	eGameInputContractTargetTag = 50,
	eGameInputThrow = 51,
	eGameInputCloseCombatChainHigh = 52,
	eGameInputCloseCombatChainLow = 53,
	eGameInputCloseCombatChainCounter = 54,
	eGameInputTakeHumanShield = 55,
	eGameInputSkipCutSequence = 56,
	eGameInputCloseCombatChoke = 57,
	eGameInputFocusedInteractionFaceUp = 58,
	eGameInputFocusedInteractionFaceLeft = 59,
	eGameInputFocusedInteractionFaceDown = 60,
	eGameInputFocusedInteractionLeftStickAnalog = 61,
	eGameInputActionsNUM = 62,
};

// Size: 0x4
enum class EHM5SoundBulletType : int32_t
{
	ESBT_SMALL = 0,
	ESBT_MEDIUM = 1,
	ESBT_LARGE = 2,
	ESBT_GORGEOUS = 3,
	ESBT_ANY = 4,
};

// Size: 0x4
enum class EHM5SoundCloseCombatEvent : int32_t
{
	ECCE_PUNCH_FACE = 0,
	ECCE_PUNCH_BODY = 1,
	ECCE_ATTACK_ELBOW = 2,
	ECCE_ATTACK_KNEE = 3,
	ECCE_ATTACK_KICK = 4,
	ECCE_SWOOSH_SHORT = 5,
	ECCE_SWOOSH_LONG = 6,
	ECCE_CLOTH_SWOOSH = 7,
	ECCE_CLOTH_RUSTLE = 8,
	ECCE_CLOTH_STRETCH = 9,
	ECCE_GRAB = 10,
	ECCE_BONE_BREAK = 11,
	ECCE_NECK_SNAP = 12,
	ECCE_BODY_FALL = 13,
	ECCE_SKULL_CRACK = 14,
	ECCE_ANY = 15,
};

// Size: 0x4
enum class EHM5SoundFootstepEmitterTarget : int32_t
{
	EFSAT_MAIN = 0,
	EFSAT_NPC = 1,
};

// Size: 0x4
enum class EHM5SoundFootstepEvent : int32_t
{
	EFSE_START = 0,
	EFSE_STOP = 1,
	EFSE_LEFT = 2,
	EFSE_RIGHT = 3,
	EFSE_TURN = 4,
	EFSE_SLIDE = 5,
	EFSE_JUMP = 6,
	EFSE_LAND = 7,
};

// Size: 0x4
enum class EHM5SoundFootstepStance : int32_t
{
	EFSS_SNEAK = 0,
	EFSS_SNEAKRUN = 1,
	EFSS_WALKSLOWLY = 2,
	EFSS_WALK = 3,
	EFSS_RUN = 4,
	EFSS_ANY = 5,
};

// Size: 0x4
enum class EHM5SoundFootwearType : int32_t
{
	EFWT_UNDEFINED = 0,
	EFWT_BAREFOOT = 1,
	EFWT_SLIPPERS = 2,
	EFWT_DISPOSABLE_SLIPPERS = 3,
	EFWT_SANDALS = 4,
	EFWT_SNEAKERS = 5,
	EFWT_SNEAKERS_METALLEG = 6,
	EFWT_LEATHER = 7,
	EFWT_FEMALE_LEATHER = 8,
	EFWT_BOOTS = 9,
	EFWT_COWBOY_BOOTS = 10,
	EFWT_FEMALE_COWBOY_BOOTS = 11,
	EFWT_RUBBER_BOOTS = 12,
	EFWT_HIGH_HEELS = 13,
	EFWT_LEATHER_KEYS = 14,
	EFWT_SWAT_BOOTS = 15,
};

// Size: 0x4
enum class EHM5SoundRicochetType : int32_t
{
	ESRT_VARIATION1 = 0,
	ESRT_VARIATION2 = 1,
};

// Size: 0x4
enum class EHUDElement : int32_t
{
	HUD_ELEMENT_NONE = 0,
	HUD_ELEMENT_MINIMAP = 1,
	HUD_ELEMENT_DISGUISE = 2,
	HUD_ELEMENT_WEAPON_DISPLAY = 4,
	HUD_ELEMENT_FOCUS_BAR = 8,
	HUD_ELEMENT_RETICULES = 16,
	HUD_ELEMENT_WEAPON_SELECTOR = 32,
	HUD_ELEMENT_SPECIAL_BAR = 64,
	HUD_ELEMENT_TEXT_MESSAGES = 128,
	HUD_ELEMENT_CONTRACT_MARKS = 256,
	HUD_ELEMENT_RATING_UPDATE = 512,
	HUD_ELEMENT_RANKING = 1024,
	HUD_ELEMENT_CHALLENGES = 2048,
	HUD_ELEMENT_CUSTOM_TEXTS = 4096,
	HUD_ELEMENT_ACTION_BUTTONS = 8192,
	HUD_ELEMENT_ATTENTION_PEAKS = 16384,
	HUD_ELEMENT_RATING_TRACKER = 32768,
	HUD_ELEMENT_TARGET_TRACKER = 65536,
	HUD_ELEMENT_HINTS = 131072,
	HUD_ELEMENT_CONTRACT_SCORING = 262144,
	HUD_ELEMENT_TUTORIAL = 524288,
	HUD_ELEMENT_HEALTH_BAR = 1048576,
	HUD_ELEMENT_OBJECTIVES = 2097152,
	HUD_ALL_ELEMENTS = 8388607,
};

// Size: 0x4
enum class EHUDIconFlags : int32_t
{
	HUD_ICON_FLAG_POSITION = 1,
	HUD_ICON_FLAG_VALUE = 2,
	HUD_ICON_FLAG_SCALE = 4,
	HUD_ICON_FLAG_TEXT = 8,
};

// Size: 0x4
enum class EHUDIconType : int32_t
{
	HUD_ICON_NONE = 0,
	HUD_ICON_ALARM_TIMER = 1,
	HUD_ICON_CLOSECOMBAT = 2,
	HUD_ICON_BREADCRUMB = 3,
	HUD_ICON_EXIT = 4,
	HUD_ICON_OBJECTIVE = 5,
	HUD_ICON_TARGET = 6,
	HUD_ICON_TUTORIAL_ARROW = 7,
};

// Size: 0x4
enum class EHUDMessageStatus : int32_t
{
	HUD_MESSAGE_UNUSED = 0,
	HUD_MESSAGE_ATTACH = 1,
	HUD_MESSAGE_FADEIN = 2,
	HUD_MESSAGE_DISPLAY = 3,
	HUD_MESSAGE_FADEOUT = 4,
};

// Size: 0x4
enum class EHandleClosetSpeechState : int32_t
{
	HCSS_Initial = 0,
	HCSS_Taunt = 1,
	HCSS_Fire = 2,
	HCSS_Done = 3,
};

// Size: 0x4
enum class EHeroGameState : int32_t
{
	eHGS_Reserved_QueryALL = 0,
	eHGS_Reserved_QueryAny = 1,
	eHGS_InstinctModeActive = 2,
	eHGS_IsHardToSee = 3,
	eHGS_Sneaking = 4,
	eHGS_InCloseCombat = 5,
	eHGS_ItemHandlingActive = 6,
	eHGS_CamSwitched = 7,
	eHGS_SniperMode = 8,
	eHGS_OTSMode = 9,
	eHGS_DualWielding = 10,
	eHGS_PreciseAim = 11,
	eHGS_ActivatingAltFire = 12,
	eHGS_FiredLastFrFocusBurnRate = 13,
	eHGS_FiredLastFrFocusGainValue = 14,
	eHGS_BurningFocus = 15,
	eHGS_InsideCloset = 16,
	eHGS_Peeking = 17,
	eHGS_FocusedInteraction = 18,
	eHGS_HoldsUtility = 19,
	eHGS_FacingRight = 20,
	eHGS_MvAgility = 21,
	eHGS_MvCover = 22,
	eHGS_MvDragging = 23,
	eHGS_MvHumanShield = 24,
	eHGS_MvVentilatorShaft = 25,
	eHGS_MvDrainPipe = 26,
	eHGS_MvLedgeWalk = 27,
	eHGS_MvLedgeHang = 28,
	eHGS_MvLocomotion = 29,
	eHGS_MvShootingBallet = 30,
	eHGS_MvCloseCombat = 31,
	eHGS_MvSurrendering = 32,
	eHGS_MvFriskComplying = 33,
	eHGS_MvShowItem = 34,
	eHGS_MvThrow = 35,
	eHGS_MvFiberWireKill = 36,
	eHGS_MvAlign = 37,
	eHGS_MvTakedown = 38,
	eHGS_MvSubAction = 39,
	eHGS_NUM = 40,
};

// Size: 0x4
enum class EHintMessageSoundType : int32_t
{
	EHintMessageSound_None = 0,
	EHintMessageSound_GeneralHint = 1,
	EHintMessageSound_UsefulItem = 2,
	EHintMessageSound_NeedsItem = 3,
	EHintMessageSound_ObjectiveExit = 4,
	EHintMessageSound_Target = 5,
	EHintMessageSound_AccidentKill = 6,
	EHintMessageSound_Trespassing = 7,
	EHintMessageSound_CanBeTurnedOn = 8,
	EHintMessageSound_CanBeTurnedOff = 9,
	EHintMessageSound_Agility = 10,
};

// Size: 0x4
enum class EHintMessageType : int32_t
{
	EHintMessageType_Hint = 0,
	EHintMessageType_InstinctHint = 1,
	EHintMessageType_InstinctPrompt = 2,
	EHintMessageType_Tutorial = 3,
};

// Size: 0x4
enum class EHitmanPermissionFlag : int32_t
{
	eHPFlag_InventorySelect = 0,
	eHPFlag_CanHolsterItem = 1,
	eHPFlag_CanDropItem = 2,
	eHPFlag_CanDualWield = 3,
	eHPFlag_CameraControl = 4,
	eHPFlag_MovementControl = 5,
	eHPFlag_AimControl = 6,
	eHPFlag_CanOpenNotebook = 7,
	eHPFlag_CanOpenPauseMenu = 8,
	eHPFlag_PermissionsNUM = 9,
};

// Size: 0x4
enum class EHumanShieldSpeechState : int32_t
{
	HMSS_FirstWarning = 0,
	HMSS_SecondWarningVictim = 1,
	HMSS_SecondWarning = 2,
	HMSS_ThirdWarning = 3,
	HMSS_FlankTarget = 4,
	HMSS_TakeDown = 5,
	HMSS_Done = 6,
};

// Size: 0x4
enum class EInformationBarMessage : int32_t
{
	eIBM_Clear = 0,
	eIBM_LastEnemyKilledCP = 1,
	eIBM_InvestigateStand = 2,
	eIBM_BodyFound = 3,
	eIBM_BloodPoolFound = 4,
	eIBM_Suspicious = 5,
	eIBM_DisguiseBlown = 6,
	eIBM_Hunt = 7,
	eIBM_Exposed = 8,
	eIBM_LandMineArmed = 9,
	eIBM_RadioOn = 10,
	eIBM_Trespassing = 11,
	eIBM_NUM = 12,
};

// Size: 0x4
enum class EIntelStage : int32_t
{
	eIT_MAIN = 0,
	eIT_STAGE = 1,
	eIT_HINT = 2,
};

// Size: 0x4
enum class EIntelTensionLevel : int32_t
{
	eITL_Undefined = 0,
	eITL_Ambient = 1,
	eITL_Agitated = 2,
	eITL_Searching = 3,
	eITL_AlertedLow = 4,
	eITL_AlertedHigh = 5,
	eITL_Hunting = 6,
	eITL_Arrest = 7,
	eITL_Combat = 8,
};

// Size: 0x4
enum class EIntelType : int32_t
{
	eIT_DATA = 0,
	eIT_OPPORTUNITY = 1,
	eIT_BACKGROUND = 2,
	eIT_HANDLER = 3,
	eIT_UNDEFINED = 4,
};

// Size: 0x4
enum class EInteractionIndicatorState : int32_t
{
	EIIS_AVAILABLE = 0,
	EIIS_COLLAPSED = 1,
	EIIS_ACTIVATING = 2,
	EIIS_NOTAVAILABLE = 3,
};

// Size: 0x4
enum class EInteractionInputType : int32_t
{
	EIIT_UNKNOWN = 0,
	EIIT_PRESS = 1,
	EIIT_HOLD = 2,
	EIIT_HOLD_DOWN = 3,
	EIIT_REPEAT = 4,
	EIIT_GUIDE = 5,
};

// Size: 0x4
enum class EInvestigationState : int32_t
{
	IS_FindTargetLocation = 0,
	IS_WaitForVIPGroup = 1,
	IS_WaitForLeader = 2,
	IS_PreAcknowledge = 3,
	IS_Acknowledge = 4,
	IS_Acknowledging = 5,
	IS_Investigate = 6,
	IS_Investigating = 7,
	IS_Resolve = 8,
	IS_Resolving = 9,
	IS_Completed = 10,
};

// Size: 0x4
enum class EInvestigationType : int32_t
{
	IT_Generic = 0,
	IT_HearBulletImpact = 1,
	IT_HearFootsteps = 2,
	IT_CarAlarm = 3,
	IT_HearBark = 4,
	IT_HearPain = 5,
	IT_HearRadio = 6,
	IT_HearItemToss = 7,
	IT_SeeItemToss = 8,
	IT_HearAccident = 9,
	IT_CuriousSound = 10,
	IT_CuriousItemSound = 11,
	IT_SeeWeapon = 12,
	IT_SeeItem = 13,
	IT_Perceptible = 14,
	IT_Toss = 15,
	IT_CrowdCurious = 16,
	IT_CameraDefect = 17,
};

// Size: 0x4
enum class EItemLocation : int32_t
{
	eIL_Anywhere = 0,
	eIL_Inventory = 1,
	eIL_RightHand = 2,
	eIL_LeftHand = 3,
	eIL_FreeBone = 4,
	eIL_Count = 5,
};

// Size: 0x4
enum class EItemModifierType : int32_t
{
	MODIFIER_NONE = 0,
	MODIFIER_THROW = 1,
	MODIFIER_CARRY = 2,
	MODIFIER_AMMO = 3,
	MODIFIER_PRECISION = 4,
	MODIFIER_DAMAGE = 5,
	MODIFIER_POINTSHOOTING = 6,
	MODIFIER_IMPACT = 7,
	MODIFIER_EXPLOSIVE = 8,
	MODIFIER_RANGE = 9,
	MODIFIER_ZOOM = 10,
	MODIFIER_SUPPRESSOR = 11,
	MODIFIER_RECOIL = 12,
	MODIFIER_RATEOFFIRE = 13,
	MODIFIER_SCOPEBOBBING = 14,
	MODIFIER_MUZZLEVELOCITY = 15,
	MODIFIER_PIERCING = 16,
	MODIFIER_KNOCKDOWN = 17,
	MODIFIER_FULLAUTO = 18,
	MODIFIER_PRECISIONSHOT = 19,
	MODIFIER_SCOPETIMESLOWDOWN = 20,
	MODIFIER_STYLE = 21,
};

// Size: 0x4
enum class EKeywordSetBehavior : int32_t
{
	EKWSB_All = 0,
	EKWSB_None = 1,
	EKWSB_Any = 2,
	EKWSB_No = 3,
};

// Size: 0x4
enum class EKillType : int32_t
{
	EKillType_Undefined = 0,
	EKillType_Throw = 1,
	EKillType_Fiberwire = 2,
	EKillType_PistolExecute = 3,
	EKillType_ItemTakeOutFront = 4,
	EKillType_ItemTakeOutBack = 5,
	EKillType_ChokeOut = 6,
	EKillType_SnapNeck = 7,
	EKillType_KnockOut = 8,
	EKillType_Push = 9,
	EKillType_Pull = 10,
	EKillType_HumanShield = 11,
	eKillType_ShootingBallet = 12,
};

// Size: 0x4
enum class EKnownEntityType : int32_t
{
	KET_UNKNOWN = 0,
	KET_HITMAN = 1,
	KET_ACTOR = 2,
	KET_ITEM = 3,
	KET_LOCATION = 4,
	KET_OBJECT = 5,
	KET_COVER = 6,
	KET_PERCEPTIBLE = 7,
	KET_TEMPCROWDBODY = 8,
};

// Size: 0x4
enum class ELastSoundTension : int32_t
{
	EST_Unknown = 0,
	EST_Ambient = 1,
	EST_Yellow = 2,
	EST_Orange = 3,
	EST_Red = 4,
};

// Size: 0x4
enum class ELedgeDismountBehavior : int32_t
{
	eLDB_DontCare = 0,
	eLDB_Stand = 1,
	eLDB_Crouch = 2,
};

// Size: 0x4
enum class ELedgeDismountDirection : int32_t
{
	eLDD_DontCare = 0,
	eLDD_FaceLedge = 1,
	eLDD_FaceLeft = 2,
	eLDD_FaceRight = 3,
	eLDD_Turn180 = 4,
};

// Size: 0x4
enum class ELocale : int32_t
{
	Locale_En = 0,
	Locale_Fr = 1,
	Locale_It = 2,
	Locale_De = 3,
	Locale_Es = 4,
	Locale_Ru = 5,
	Locale_Mx = 6,
	Locale_Br = 7,
	Locale_Pl = 8,
	Locale_Cn = 9,
	Locale_Jp = 10,
};

// Size: 0x4
enum class EMarkerClipAlgorithm : int32_t
{
	MCA_NONE = 0,
	MCA_SIMPLE = 1,
	MCA_ADVANCED = 2,
};

// Size: 0x4
enum class EMarkerInclusionMode : int32_t
{
	MIM_DEFAULT = 0,
	MIM_IF_FORCE_INCLUDED_ONLY = 1,
};

// Size: 0x4
enum class EMeBarState : int32_t
{
	ME_BAR_NONE = 0,
	ME_BAR_TRESPASSING = 1,
	ME_BAR_DEEPTRESPASSING = 2,
	ME_BAR_VISIBLY_ARMED = 3,
	ME_BAR_CHANGING_DISGUISE = 4,
	ME_BAR_DISGUISE_BLOWN = 5,
	ME_BAR_DISGUISE_SUSPICIOUS = 6,
	ME_BAR_NEAR_BODY = 7,
};

// Size: 0x4
enum class EMorphemeEventId : int32_t
{
	eDE_None = 0,
	eDE_UnholsterWeapon = 18,
	eDE_HolsterWeapon = 19,
	eDE_FireWeapon = 20,
	eDE_AttachWeapon = 21,
	eDE_DetachWeapon = 22,
	eDE_LegR = 100,
	eDE_LegL = 101,
	eDE_TransitionEnd_LegR = 200,
	eDE_TransitionEnd_LegL = 201,
	eDE_Finish = 255,
	eDE_InterpolationStart = 300,
	eDE_InterpolationEnd = 301,
	eDE_TransitionSignal = 400,
	eDE_TransitionEnd = 500,
	eDE_DisableNPCHitmanCollision = 700,
	eDE_EnableNPCHitmanCollision = 701,
	eDE_EnableRagdollRangeStart = 800,
	eDE_EnableRagdollRangeEnd = 801,
	eDE_StartBlendingOut = 850,
	eDE_FinishBlendingOut = 851,
	eDE_StartOrientationBlend = 860,
	eDE_FinishOrientationBlend = 861,
	eDE_RecoveryPowerRagdollEnd = 862,
	eDE_RecoveryBlendEnd = 863,
	eDE_ImpactFinished = 900,
	eDE_ActFinished = 1000,
	eDE_ActFinishedWhenMoving = 1001,
	eDE_ActReached = 1005,
	eDE_ActLoop = 1050,
	eDE_ActFullbodyStartMarker = 1090,
	eDE_ActFullbodyEndMarker = 1091,
	eDE_ReactionFinished = 1100,
	eDE_StandToCrouch = 1500,
	eDE_CrouchToStand = 1501,
	eDE_OffHandIKEnable = 1600,
	eDE_OffHandIKDisable = 1601,
	eDE_StandToMoveRotationToTranslation = 1700,
	eDE_MoveToStandTranslationToRotation = 1701,
	eDE_HeadIKEnable = 1800,
	eDE_HeadIKDisable = 1801,
	eDE_WindowLeaningEnable = 2000,
	eDE_WindowLeaningDisable = 2001,
	eDE_PreventDeathAnimations = 2002,
	eDE_AllowDeathAnimations = 2003,
	eDE_HeadControlEnable = 2010,
	eDE_HeadControlDisable = 2011,
	eDE_CombatActEndMarker = 3000,
	eDE_CombatAim = 3100,
	eDE_CombatEnableRightHandIK = 3010,
	eDE_CombatEnableLeftHandIK = 3011,
	eDE_CombatEndEnableIK = 3015,
	eDE_CombatStartDisableIK = 3020,
	eDE_CombatEndDisableIK = 3025,
	eDE_CombatEnableShoot = 3030,
	eDE_CombatDisableShoot = 3040,
	eDE_CombatEnableBlindShoot = 3050,
	eDE_CombatDisableBlindShoot = 3060,
	eDE_ActBehaviorEventStart = 4000,
	eDE_ActItemPickup = 4001,
	eDE_ActItemDrop = 4002,
	eDE_AmbientItemUseMarker = 4010,
	eDE_ActBehaviorEventEnd = 4999,
	eDE_Act_LeadIn_Marker = 10301,
	eDE_Act_UB_BlendIn_End = 10050,
	eDE_Act_FB_BlendIn_Start = 10051,
	eDE_Act_FB_BlendIn_End = 10052,
	eDE_Act_FB_BlendOut_End = 10053,
};

// Size: 0x4
enum class EMotionType : int32_t
{
	MOTION_LOCKED = 0,
	MOTION_LIMITED = 1,
	MOTION_FREE = 2,
};

// Size: 0x4
enum class EMoveEndState : int32_t
{
	MES_Moving = 0,
	MES_Stopping = 1,
	MES_Standing = 2,
};

// Size: 0x4
enum class EMoveSpeed : int32_t
{
	MS_Sneaking = 0,
	MS_Walking = 1,
	MS_Jogging = 2,
	MS_Sprinting = 3,
	MS_Flash = 4,
};

// Size: 0x4
enum class EObjectiveType : int32_t
{
	OBJECTIVE_PRIMARY = 0,
	OBJECTIVE_SECONDARY = 1,
	OBJECTIVE_TERTIARY = 2,
};

// Size: 0x4
enum class EOnlinTest : int32_t
{
	eHELLO = 0,
	eWORLD = 1,
};

// Size: 0x1
enum class EOrderCompletionStatus : int8_t
{
	OCS_Undetermined = 0,
	OCS_Succeeded = 1,
	OCS_Interrupted = 2,
	OCS_Blocked = 3,
	OCS_Failed = 4,
};

// Size: 0x4
enum class EOutfitAICategory : int32_t
{
	OAC_Undefined = 0,
	OAC_Fallback = 1,
	OAC_47Suit = 2,
	OAC_47TRAINING = 3,
	OAC_47MARRAKESH = 4,
	OAC_47SAPIENZA = 5,
	OAC_47BANGKOK = 6,
	OAC_47COLORADO = 7,
	OAC_47HOKKAIDO = 8,
	OAC_47PREORDER = 9,
	OAC_Bodyguard = 10,
	OAC_CameraMan = 11,
	OAC_Chef = 12,
	OAC_Cleaner = 13,
	OAC_Cop = 14,
	OAC_Crew = 15,
	OAC_DaSilva = 16,
	OAC_Gardner = 17,
	OAC_Hazmat = 18,
	OAC_HouseStaff = 19,
	OAC_Maintenance = 20,
	OAC_Officer = 21,
	OAC_Priest = 22,
	OAC_Printer = 23,
	OAC_Scientist = 24,
	OAC_Security = 25,
	OAC_Sheik = 26,
	OAC_Stylist = 27,
	OAC_Waiter = 28,
	OAC_Busker = 29,
	OAC_Caddie = 30,
	OAC_ChurchStaff = 31,
	OAC_Cyclist = 32,
	OAC_Filmcrew = 33,
	OAC_Fortune = 34,
	OAC_Hippie = 35,
	OAC_Investor = 36,
	OAC_KGB = 37,
	OAC_Lawyer = 38,
	OAC_Kruger = 39,
	OAC_Masseur = 40,
	OAC_Mechanic = 41,
	OAC_Norfolk = 42,
	OAC_Plague = 43,
	OAC_Psych = 44,
	OAC_Shopkeep = 45,
	OAC_Soldier = 46,
	OAC_Tux = 47,
	OAC_Vampire = 48,
	OAC_YachtCrew = 49,
	OAC_Exterminator = 50,
	OAC_SoundCrew = 51,
	OAC_Intern = 52,
	OAC_Stalker = 53,
	OAC_Scarecrow = 54,
	OAC_Hacker = 55,
	OAC_SpecOps = 56,
	OAC_Berg = 57,
	OAC_Morgue = 58,
	OAC_Surgeon = 59,
	OAC_Doctor = 60,
	OAC_Director = 61,
	OAC_Ninja = 62,
	OAC_Baseball = 63,
	OAC_KillBill = 64,
	OAC_Pilot = 65,
	OAC_Yoga = 66,
	OAC_Mummy = 67,
	OAC_Cowboy = 68,
	OAC_Staff = 69,
	OAC_Santa = 70,
	OAC_MambaCrew = 71,
	OAC_Delivery = 72,
	OAC_GOTY_Clown = 73,
	OAC_GOTY_Cowboy = 74,
	OAC_GOTY_DarkSniper = 75,
};

// Size: 0x1
enum class EParticleColorUsage : int8_t
{
	REPLACE_PARTICLE_COLOR = 0,
	LEAVE_PARTICLE_COLOR = 1,
};

// Size: 0x4
enum class EParticleDecalSpawnEntity_Constraints : int32_t
{
	FACTOR_AND_RANDOMIZE = 0,
	SIZE_RANGE = 1,
};

// Size: 0x4
enum class EParticleModifierImpulseDirections : int32_t
{
	TARGET_ZAXIS_DIRECTION = 0,
	TOWARDS_TARGET_PIVOT = 1,
	AWAY_FROM_TARGET_PIVOT = 2,
};

// Size: 0x1
enum class EParticleSpritePivotLocation : int8_t
{
	CENTER_PIVOT = 0,
	BOTTOM_PIVOT = 1,
	TOP_PIVOT = 2,
};

// Size: 0x4
enum class EPathFinderBoxType : int32_t
{
	PFBT_INCLUDE_MESH_COLLISION = 0,
	PFBT_EXCLUDE_MESH_COLLISION = 1,
	PFBT_CREATE_MESH_COLLISION = 2,
	PFBT_REGION = 3,
	PFBT_IGNORE = 4,
};

// Size: 0x4
enum class EPhysicsObjectType : int32_t
{
	EPHYSICSOBJECTTYPE_UNKNOWN = 0,
	EPHYSICSOBJECTTYPE_DYNAMIC = 1,
	EPHYSICSOBJECTTYPE_KINEMATIC = 2,
	EPHYSICSOBJECTTYPE_STATIC = 3,
};

// Size: 0x4
enum class EPlaceableType : int32_t
{
	PLACEABLE_NOT = 0,
	PLACEABLE_FULL_PHYSICS = 1,
	PLACEABLE_SLEEP_PHYSICS = 2,
	PLACEABLE_NO_PHYSICS = 3,
	PLACEABLE_ATTACH = 4,
};

// Size: 0x4
enum class EPlayMode : int32_t
{
	PLAYMODE_STOPPED = 1,
	PLAYMODE_PAUSED = 2,
	PLAYMODE_PLAYING = 3,
};

// Size: 0x4
enum class EPostProcessorComponentType : int32_t
{
	MRP_LOOKAT = 1,
	MRP_AIM = 2,
	MRP_LEDGEFEETLOCK = 16,
	MRP_LEDGEHANG = 32,
	MRP_SHOOTINGBALLET = 256,
	MRP_IMPACT = 1024,
	MRP_BLINDFIRE = 2048,
};

// Size: 0x4
enum class EPushNotificationType : int32_t
{
	PUSH_NOTIFICATION_OBJECTIVE = 0,
	PUSH_NOTIFICATION_DISGUISE = 1,
	PUSH_NOTIFICATION_CONTRACT = 2,
	PUSH_NOTIFICATION_CHALLENGE = 3,
	PUSH_NOTIFICATION_RATING = 4,
	PUSH_NOTIFICATION_SPECIAL_RATING_UNLOCKED = 5,
	PUSH_NOTIFICATION_CONTRACT_PICKED_UP = 6,
	PUSH_NOTIFICATION_TECHNIQUE_UNLOCKED = 7,
	PUSH_NOTIFICATION_SCORE_COMPARISON = 8,
};

// Size: 0x4
enum class ERANDOM_DISTRIBUTION : int32_t
{
	RND_UNIFORM = 0,
	RND_SAWTOOTH = 1,
};

// Size: 0x4
enum class ERatingCategory : int32_t
{
	ERatingCategory_Invalid = 0,
	ERatingCategory_Flawless = 1,
	ERatingCategory_Violence = 2,
	ERatingCategory_Cunning = 3,
	ERatingCategory_Noise = 4,
	ERatingCategory_COUNT = 5,
};

// Size: 0x4
enum class ERatingTitle : int32_t
{
	ERatingTitle_SilentAssassin = 0,
	ERatingTitle_PerfectAssassin = 1,
	ERatingTitle_Ninja = 2,
	ERatingTitle_GloryBlazer = 3,
	ERatingTitle_Eraser = 4,
	ERatingTitle_Exhibitionist = 5,
	ERatingTitle_Trickster = 6,
	ERatingTitle_Chameleon = 7,
	ERatingTitle_Spider = 8,
	ERatingTitle_Angel = 9,
	ERatingTitle_COUNT = 10,
};

// Size: 0x4
enum class ERatingTitleRequirement : int32_t
{
	ERatingTitleRequirement_Optional = 0,
	ERatingTitleRequirement_Required = 1,
	ERatingTitleRequirement_Fails = 2,
};

// Size: 0x1
enum class ERayDetailLevel : int8_t
{
	RAYDETAILS_NONE = 0,
	RAYDETAILS_BONES = 1,
	RAYDETAILS_MESH = 2,
};

// Size: 0x4
enum class ERayType : int32_t
{
	ERAY_CLOSESTHIT_SIMPLE = 0,
	ERAY_CLOSESTHIT_DETAILED = 1,
};

// Size: 0x4
enum class ERegionId : int32_t
{
	RegionId_Default = 0,
	RegionId_Japan = 1,
	RegionId_Asia = 2,
};

// Size: 0x4
enum class ERegionMask : int32_t
{
	eRM_None = 1,
	eRM_LowCover = 2,
	eRM_HighCover = 4,
	eRM_Stairs = 8,
	eRM_Separator = 16,
	eRM_User_1 = 32,
	eRM_User_2 = 64,
	eRM_User_3 = 128,
	eRM_User_4 = 256,
	eRM_User_5 = 512,
	eRM_User_6 = 1024,
	eRM_User_7 = 2048,
	eRM_User_8 = 4096,
};

// Size: 0x1
enum class ERenderGlowTypes : int8_t
{
	ERENDERGLOWTYPE_NONE = 0,
	ERENDERGLOWTYPE_ENEMIES = 1,
	ERENDERGLOWTYPE_ALLIES = 2,
	ERENDERGLOWTYPE_CIVILIAN = 3,
	ERENDERGLOWTYPE_ITEMS = 4,
	ERENDERGLOWTYPE_STASHED_ITEMS = 5,
	ERENDERGLOWTYPE_SETPIECE = 6,
	ERENDERGLOWTYPE_BACKGROUND = 7,
	ERENDERGLOWTYPE_CONTRACT_TARGET = 8,
	ERENDERGLOWTYPE_OBJECTIVES = 9,
	ERENDERGLOWTYPE_ENFORCER = 10,
	ERENDERGLOWTYPE_LTMEMORY = 11,
	ERENDERGLOWTYPE_TAGGED = 12,
	ERENDERGLOWTYPE_TAGFOCUS_UNTAGGED = 13,
	ERENDERGLOWTYPE_TAGFOCUS_TAGGED = 14,
	ERENDERGLOWTYPE_BACKGROUNDUNMASKED = 15,
	ERENDERGLOWTYPE_INTERACTION = 16,
	ERENDERGLOWTYPE_TRAVERSAL = 17,
	ERENDERGLOWTYPE_EMISSIVE_UI = 18,
};

// Size: 0x4
enum class ERequirementId : int32_t
{
	EREQUIREMENT_INVALID = 0,
	EREQUIREMENT_TOKEN_OUTFIT_LEGACY_HERO_REQUIEMSUIT = 1,
	EREQUIREMENT_FIREARMS_HERO_PISTOL_TACTICAL_015_SU_SKIN05 = 2,
	EREQUIREMENT_PROP_DEVICE_SONYPREORDER_WHITE_RUBBERDUCK_REMOTE_EXPLOSIVE = 3,
	EREQUIREMENT_GOTY_PATIENT_ZERO = 4,
	EREQUIREMENT_GOTY_TOKEN_OUTFIT_PARIS_CLOWN = 5,
	EREQUIREMENT_GOTY_TOKEN_OUTFIT_HOKKAIDO_COWBOY = 6,
	EREQUIREMENT_GOTY_TOKEN_OUTFIT_MARRAKESH_DARK_SNIPER = 7,
	EREQUIREMENT_ANNIVERSARY_OUTFITS = 8,
};

// Size: 0x4
enum class ESBCamProfileBone : int32_t
{
	eSBCamProfileBone_Neck = 0,
	eSBCamProfileBone_Spine = 1,
	eSBCamProfileBone_Hand = 2,
	eSBCamProfileBone_Ground = 3,
	eSBCamProfileBone_Num = 4,
};

// Size: 0x4
enum class ESBPose : int32_t
{
	eSBPose_RifleShootPose = 0,
	eSBPose_DualLeftHigh = 1,
	eSBPose_DualFrontHigh = 2,
	eSBPose_DualBackLeftHigh = 3,
	eSBPose_DualBackRightHigh = 4,
	eSBPose_DualRightHigh = 5,
	eSBPose_PistolShootPose = 6,
	eSBPose_ShotGunShootPoseHigh = 7,
	eSBPose_ShotGunShootPoseHip = 8,
	eSBPose_Num = 9,
};

// Size: 0x4
enum class ESOUND_3DROLLOFF_TYPE : int32_t
{
	SOUND_3D_LINEAR_ROLLOFF = 0,
	SOUND_3D_LOGARITHMIC_ROLLOFF = 1,
	SOUND_3D_CUSTOM_ROLLOFF = 2,
};

// Size: 0x4
enum class ESaveLoadStatus : int32_t
{
	ESaveLoadStatus_OK = 0,
	ESaveLoadStatus_PROCESSING = 1,
	ESaveLoadStatus_MISSING = 2,
	ESaveLoadStatus_ERROR_NODISKSPACE = 3,
	ESaveLoadStatus_ERROR_DEVICEREMOVED = 4,
	ESaveLoadStatus_ERROR_CORRUPT = 5,
	ESaveLoadStatus_ERROR_VERSION = 6,
	ESaveLoadStatus_ERROR_TAMPERED = 7,
	ESaveLoadStatus_ERROR_SAVING = 8,
	ESaveLoadStatus_ERROR_FATAL = 9,
	ESaveLoadStatus_ERROR_ONLINE = 10,
	ESaveLoadStatus_ERROR_REQUIREMENTCHECK = 11,
	ESaveLoadStatus_ERROR_INVALIDATED = 12,
};

// Size: 0x4
enum class ESaveType : int32_t
{
	ESaveType_AutoSave = 0,
	ESaveType_QuickSave = 1,
	ESaveType_SystemData = 2,
	ESaveType_LocalProfile = 3,
};

// Size: 0x4
enum class EScreenAnchor : int32_t
{
	SCREEN_ANCHOR_TOP_LEFT = 0,
	SCREEN_ANCHOR_TOP_CENTER = 1,
	SCREEN_ANCHOR_TOP_RIGHT = 2,
	SCREEN_ANCHOR_MIDDLE_LEFT = 3,
	SCREEN_ANCHOR_MIDDLE_CENTER = 4,
	SCREEN_ANCHOR_MIDDLE_RIGHT = 5,
	SCREEN_ANCHOR_BOTTOM_LEFT = 6,
	SCREEN_ANCHOR_BOTTOM_CENTER = 7,
	SCREEN_ANCHOR_BOTTOM_RIGHT = 8,
};

// Size: 0x4
enum class EScreenplayTriggerEvent : int32_t
{
	STT_ReportCrime = 0,
	STT_ReportCrimeToHitman = 1,
	STT_ReportCrimeMoveBack = 2,
};

// Size: 0x4
enum class ESentryActionPrompt : int32_t
{
	eSAP_None = 0,
	eSAP_Frisk = 1,
	eSAP_ShowItem = 2,
	eSAP_Max = 3,
};

// Size: 0x4
enum class ESequencePreviewState : int32_t
{
	PREVIEW_STOPPED = 0,
	PREVIEW_PLAYING = 1,
	PREVIEW_PAUSED = 2,
};

// Size: 0x4
enum class ESettingsParam : int32_t
{
	ESP_ProjectileDamage = 0,
	ESP_ProjectileDPSThreshold = 1,
	ESP_AttentionGain = 2,
	ESP_VisibilityDistance = 3,
	ESP_VisibilityConeHeight = 4,
	ESP_ShootMaxSpread = 5,
	ESP_ShootMinSpread = 6,
	ESP_ShootMaxSpreadRange = 7,
	ESP_CCounterEndLength = 8,
	ESP_CCChoiceWindowLength = 9,
	ESP_CCChainFailDamage = 10,
	ESP_CCCounterFailDamage = 11,
};

// Size: 0x4
enum class EShatterSystemCoreBehavior : int32_t
{
	eSSCB_Static = 0,
	eSSCB_Kinematic = 1,
	eSSCB_Dynamic = 2,
};

// Size: 0x4
enum class EShootIntensity : int32_t
{
	SHOOT_INTENSITY_LOW = 0,
	SHOOT_INTENSITY_MEDIUM = 1,
	SHOOT_INTENSITY_HIGH = 2,
};

// Size: 0x4
enum class ESituationJoinReason : int32_t
{
	AISJR_Default = 0,
	AISJR_HeardSound = 1,
	AISJR_Alarm = 2,
	AISJR_HitmanStrange = 3,
	AISJR_HitmanIllegal = 4,
	AISJR_Assist = 5,
	AISJR_Propagate = 6,
	AISJR_Spawned = 7,
	AISJR_HelpCivilian = 8,
	AISJR_Escalating = 9,
	AISJR_DeadBody = 10,
	AISJR_Bloodpool = 11,
	AISJR_StandDown = 12,
	AISJR_Report = 13,
	AISJR_ForcedToHold = 14,
};

// Size: 0x4
enum class ESituationType : int32_t
{
	AIST_Any = 0,
	AIST_DetectedInPrivate = 1,
	AIST_InvestigateStanding = 2,
	AIST_InvestigateCurious = 3,
	AIST_InvestigateWeapon = 4,
	AIST_GuardBody = 5,
	AIST_Entourage = 6,
	AIST_HandleTrespassing = 7,
	AIST_DeadBody = 8,
	AIST_InvestigateCautious = 9,
	AIST_Sentry = 10,
	AIST_HandleDisguise = 11,
	AIST_SniperCombat = 12,
	AIST_StandOff = 13,
	AIST_RecoverUnconscious = 14,
	AIST_AvoidExplosion = 15,
	AIST_Evacuate = 16,
	AIST_ProtoCombat = 17,
	AIST_DangerousArea = 18,
	AIST_CloseCombat = 19,
	AIST_Accident = 20,
	AIST_Spectator = 21,
	ESituationType_Count = 22,
};

// Size: 0x4
enum class ESmartBehaviorOrder : int32_t
{
	SBO_Stand = 0,
	SBO_Move = 1,
	SBO_React = 2,
	SBO_Act = 3,
	SBO_MoveToAct = 4,
	SBO_MoveToCover = 5,
	SBO_ShootFromCover = 6,
	SBO_Death = 7,
	SBO_Teleport = 8,
};

// Size: 0x4
enum class ESmartWaitCondition : int32_t
{
	SWC_Time = 0,
	SWC_Distance = 1,
	SWC_Executing = 2,
	SWC_Executed = 3,
};

// Size: 0x4
enum class ESmoothingMode : int32_t
{
	ESM_LINEAR = 0,
	ESM_EXPONENTIAL = 1,
};

// Size: 0x4
enum class ESniperScoreMessageType : int32_t
{
	ESSMT_STYLE_DEFAULT = 0,
	ESSMT_STYLE_SCORE = 1,
	ESSMT_STYLE_PENALTY = 2,
	ESSMT_STYLE_STREAK = 3,
	ESSMT_STYLE_CIVKILL = 4,
};

// Size: 0x4
enum class ESoundChannelGroup : int32_t
{
	ESCG_NONE = 0,
	SND_Default = 1,
	SND_Phys_Rigidbody = 2,
	SND_Phys_Shatter = 3,
	SND_Wpn_HM = 4,
	SND_Wpn_HM_Shot = 5,
	SND_Wpn_NPC = 6,
	SND_Wpn_Impacts = 7,
	SND_Wpn_Flybys = 8,
	SND_Characters = 9,
	SND_Ambience = 10,
	SND_Props = 11,
	SND_Prop_Item = 12,
	SND_FS_HM = 13,
	SND_FS_NPC = 14,
	SND_VisualFX = 15,
	SND_VisualFX_ShotActivate = 16,
	SND_VisualFX_Explosions = 17,
	SND_Diag_HM = 18,
	SND_Diag_NPC = 19,
	SND_CS_Ingame = 20,
	SND_CS_PreRend = 21,
	SND_Music_Env = 22,
	SND_MusicNonEnv = 23,
	SND_SpecialFX_ShootingBallet = 24,
	SND_SpecialFX_CC = 25,
	SND_SpecialFX_Jumps = 26,
	SND_SpecialFX_Closet = 27,
	SND_SpecialFX_Vent = 28,
	SND_SpecialFX_Instinct = 29,
	SND_SpecialFX_HumanShield = 30,
	SND_SpecialFX_Disguise = 31,
	SND_SpecialFX_Agility = 32,
	SND_Stingers_SFX = 33,
	SND_GUI = 34,
	SND_Test = 35,
	ANIM_HM_Generic = 36,
	ANIM_HM_Loco = 37,
	ANIM_HM_Agility = 38,
	ANIM_HM_Suit_Flap = 39,
	ANIM_HM_Suit_Release = 40,
	ANIM_HM_Suit_Slide = 41,
	ANIM_HM_Suit_LandImpact = 42,
	ANIM_HM_Suit_Grab = 43,
	ANIM_HM_Suit_Roll = 44,
	ANIM_HM_Suit_Swoosh_Body = 45,
	ANIM_HM_Suit_Swoosh_Fast = 46,
	ANIM_HM_CC_Impacts = 47,
	ANIM_HM_CC_Movement = 48,
	ANIM_NPC_Generic = 49,
	ANIM_NPC_Loco = 50,
	ANIM_NPC_CC_Impacts = 51,
	ANIM_NPC_CC_Movement = 52,
	SND_Wpn_HM_Tail = 53,
	SND_Wpn_NPC_Tail = 54,
	SND_Diag_NPC_Crowd = 55,
	SND_Phys_RigidBody_Ragdoll = 56,
	SND_Diag_VO = 57,
	SND_GUI_Menu = 58,
	SND_Props_Doors = 59,
	SND_Wpn_HM_Handguns = 60,
	SND_Wpn_HM_Revolvers = 61,
	SND_Wpn_HM_Rifles = 62,
	SND_Wpn_HM_Shotguns = 63,
	SND_Wpn_HM_Smgs = 64,
	SND_Wpn_HM_Snipers = 65,
	SND_Wpn_HM_Other = 66,
	SND_Wpn_NPC_Handguns = 67,
	SND_Wpn_NPC_Revolvers = 68,
	SND_Wpn_NPC_Rifles = 69,
	SND_Wpn_NPC_Shotguns = 70,
	SND_Wpn_NPC_Smgs = 71,
	SND_Wpn_NPC_Snipers = 72,
	SND_Wpn_NPC_Other = 73,
	SND_Diag_NPC_Oneliner = 74,
	SND_Moments = 75,
};

// Size: 0x4
enum class ESoundCollisionType : int32_t
{
	ESCT_IMPACT = 0,
	ESCT_ROLLING = 1,
	ESCT_SLIDING = 2,
	ESCT_ENDED = 3,
	ESCT_SHATTER = 4,
};

// Size: 0x4
enum class ESoundGateFlags : int32_t
{
	SOUNDGATE_FLAGS_AMBIENCE = 1,
	SOUNDGATE_FLAGS_OCCLUSION = 2,
	SOUNDGATE_FLAGS_ALL = 255,
};

// Size: 0x4
enum class ESoundGateType : int32_t
{
	SOUNDGATE_TYPE_ROUND = 0,
	SOUNDGATE_TYPE_SHARPCORNERS = 1,
};

// Size: 0x4
enum class ESoundMaterialType : int32_t
{
	eWood = 0,
	eWoodPlank = 1,
	eMetal = 2,
	eMetalHeavy = 3,
	eMetalCar = 4,
	eMetalRattle = 5,
	eMetalFence = 6,
	eMetalSteamPipe = 7,
	eMetalNoDecal = 8,
	eGlass = 9,
	eGlassShards = 10,
	ePlastic = 11,
	ePlasticHollow = 12,
	eWater = 13,
	eWaterDeep = 14,
	eConcrete = 15,
	eGround = 16,
	eFlesh = 17,
	eHeroFlesh = 18,
	eGravel = 19,
	eDirt = 20,
	eGrass = 21,
	eCeramic = 22,
	ePaper = 23,
	eCloth = 24,
	eWoodCreaky = 25,
	eFabric = 26,
	eMetalThin = 27,
	eMetalChainLinkFence = 28,
	eMetalOilBarrels = 29,
	eMetalWeapon = 30,
	eRubber = 31,
	eShell = 32,
	eMarble = 33,
	eCatwalk = 34,
	eWoodAwesome = 35,
	ePaperBag = 36,
	eMetalTube = 37,
	eInaudible = 38,
	eRagdoll_Body = 39,
	eRagdoll_Feet = 40,
	eRagdoll_Hand = 41,
	eRagdoll_Head = 42,
	eSword = 43,
	eMetalMechanical = 44,
	eWoodStickMetal = 45,
	ePropsCoin = 46,
	ePropsScrewdriver = 47,
	ePropsCrowbar = 48,
	ePropsWrench = 49,
	ePropsKnife = 50,
	eRoofTiles = 51,
	eGlassCar = 52,
	eMetalPlate = 53,
	ePropsBat = 54,
	ePropsClub = 55,
	ePropsShovel = 56,
	ePropsAxe = 57,
	ePropsHammer = 58,
	ePropsRubberRod = 59,
	ePropsMetalRod = 60,
	ePropsFireExtinguisher = 61,
	ePropsCan = 62,
	ePropsMarbelBall = 63,
	ePropsBrick = 64,
	eSand = 65,
	eRoofTile = 66,
	ePropsPlasticDevice = 67,
	ePropsSuitcaseMetal = 68,
	ePropsSuitcaseLeather = 69,
	ePropsSuitcaseScissors = 70,
	eCarpet = 71,
	eWeaponClip = 72,
	eWindowGlass = 73,
	eSilent = 74,
	eSnowHard = 75,
	ePropsBatJapan = 76,
	eUndefined = 77,
};

// Size: 0x4
enum class ESoundPlayParameters : int32_t
{
	SOUND_PLAY_SINGLE = 0,
	SOUND_PLAY_RANDOM = 1,
	SOUND_PLAY_SHUFFLE = 2,
};

// Size: 0x4
enum class ESpeechPriority : int32_t
{
	SP_AMBIENT = 0,
	SP_ALERTED = 1,
	SP_PAIN = 2,
	SP_ALERTED_IMPORTANT = 3,
	SP_COMBAT = 4,
	SP_COMBAT_IMPORTANT = 5,
	SP_DEATH = 6,
	SP_MAX = 7,
	SP_COUNT__ = 8,
};

// Size: 0x4
enum class ESpeed : int32_t
{
	eSpeed_Idle = 0,
	eSpeed_Slow = 1,
	eSpeed_Normal = 2,
	eSpeed_Fast = 3,
	eSpeed_Sprint = 4,
};

// Size: 0x4
enum class EStandDownType : int32_t
{
	SDT_None = 0,
	SDT_Response = 1,
	SDT_Specific = 2,
};

// Size: 0x4
enum class EStandRepositionStrategy : int32_t
{
	SRS_InPlaceRepositioning = 0,
	SRS_NoRepositioning = 1,
};

// Size: 0x4
enum class EStashpointContainedEntityType : int32_t
{
	PICKUP_NONE = 0,
	PICKUP_ITEMS = 1,
	PICKUP_OUTFIT = 2,
	PICKUP_PICKEDUP = 3,
};

// Size: 0x4
enum class EStealthSituation : int32_t
{
	SS_TAKE_HUMAN_SHIELD = 0,
	SS_HUMAN_SHIELD_DEAD = 1,
	SS_HUMAN_SHIELD_EXIT = 2,
	SS_DISGUISE_TAKEN = 3,
	SS_DISGUISE_TRESPASSING = 4,
	SS_DISGUISE_ILLEGAL_ACTION = 5,
	SS_DISGUISE_REMOVED = 6,
	SS_DISGUISE_INVESTIGATED = 7,
	SS_DISGUISE_BLOWN = 8,
	SS_HIDE_IN_CLOSET_FIRSTTIME = 9,
	SS_HIDE_IN_CLOSET = 10,
	SS_DOOR_START_LOCKPICKING = 11,
	SS_DOOR_CANCEL_LOCKPICKING = 12,
	SS_LANDMINE_ARMED = 13,
	SS_RADIO_ON = 14,
	SS_VENT_ENTER = 15,
	SS_VENT_EXIT = 16,
	SS_BLEND_IN_ACTIVATED = 17,
	SS_BODY_DISCOVERED = 18,
	SS_BLOODPOOL_DISCOVERED = 19,
	SS_INVESTIGATE_GUNSHOT = 20,
	SS_INVESTIGATE_NOISE = 21,
	SS_INVESTIGATE_EXPLOSION = 22,
	SS_FUSEBOX_DISABLE_UNIQUE = 23,
	SS_FUSEBOX_DISABLE = 24,
	SS_INVESTIGATING_FUSEBOX = 25,
	SS_FUSEBOX_FIXED = 26,
	SS_KEYCARD_PICKUP = 27,
	SS_KEYCARD_USE = 28,
	SS_BODY_PUT_IN_CONTAINER = 29,
	SS_BODY_DRAGGING_SEEN = 30,
	SS_BODY_OVER_RAIL = 31,
	SS_BODY_OVER_LEDGE = 32,
	SS_USE_HEALTH_STATION = 33,
	SS_HITMAN_SPOTTED = 34,
	SS_HITMAN_HIDDEN = 35,
	SS_HITMAN_ENTERED_COMBAT = 36,
	SS_TRESPASSING = 37,
	SS_SECURITYTAPE_PICKUP = 38,
	SS_NEWOBJECTIVE = 39,
	SS_FOCUSADDED = 40,
	SS_FOCUSFULL = 41,
	SS_FOCUSEMPTY = 42,
	SS_STARTED_SPRINTING = 43,
	SS_STARTED_SNEAKING = 44,
	SS_TOOK_COVER = 45,
	SS_INVESTIGATE_CURIOUS = 46,
	SS_GENERIC_PICKUP = 47,
	SS_ATTENTION_ON = 48,
	SS_ATTENTION_OFF = 49,
	SS_DEADBODY_SEEN = 50,
	SS_TARGET_EVACUATES = 51,
	SS_UNKNOWN_BODY_SPOTTED = 52,
};

// Size: 0x4
enum class ESyncEvent : int32_t
{
	eSyncEvent_None = 0,
	eSyncEvent_LeftFoot = 100,
	eSyncEvent_RightFoot = 200,
};

// Size: 0x4
enum class ETakeDownAnim : int32_t
{
	eCoverLowOverNarrowCloseFront = 0,
	eCoverLowOverNarrowCloseBack = 1,
	eCoverLowOverNarrowFarFront = 2,
	eCoverLowOverNarrowFarBack = 3,
	eCoverLowOverWideFront = 4,
	eCoverLowOverWideBack = 5,
	eCoverLowCornerFront = 6,
	eCoverLowCornerBack = 7,
	eCoverHighCornerFront = 8,
	eCoverHighCornerBack = 9,
	eLocomotionBack = 10,
	eLocomotionFallback = 11,
	eLocomotionChair = 12,
	eChokeGroundLoop = 13,
	eChokeGroundEndPacify = 14,
	eChokeGroundEndKill = 15,
	eChokeGroundFallBackLoop = 16,
	eChokeGroundFallBackEndPacify = 17,
	eChokeGroundFallBackEndKill = 18,
	eChokeChairLoop = 19,
	eChokeChairEndPacify = 20,
	eChokeChairEndKill = 21,
	eChokeChairEndLeft90 = 22,
	eChokeChairEndLeft45 = 23,
	eChokeChairEndFront = 24,
	eChokeChairEndRight45 = 25,
	eChokeChairEndRight90 = 26,
	eTakeDownAnimLast = 27,
};

// Size: 0x4
enum class ETakeDownState : int32_t
{
	eTD_Cover = 0,
	eTD_Locomotion = 1,
	eTD_ChokeLoop = 2,
	eTD_ChokeFinish = 3,
	eTD_Deactivating = 4,
	eTD_Unknown = 5,
};

// Size: 0x1
enum class ETessellationFactorMode : int8_t
{
	TESSELLATIONFACTORMODE_FIXED = 0,
	TESSELLATIONFACTORMODE_OBJECT = 1,
	TESSELLATIONFACTORMODE_TRIANGLE = 2,
};

// Size: 0x1
enum class ETessellationMode : int8_t
{
	TESSELLATIONMODE_FLAT = 0,
	TESSELLATIONMODE_PHONG = 1,
};

// Size: 0x4
enum class ETestEnumForPG2 : int32_t
{
	TestEnum_Alpha = 0,
	TestEnum_Beta = 1,
	TestEnum_Gamma = 2,
	TestEnum_Delta = 3,
	TestEnum_Epsilon = 4,
};

// Size: 0x4
enum class ETextAlignment : int32_t
{
	TEXT_ALIGN_LEFT = 0,
	TEXT_ALIGN_CENTER = 1,
	TEXT_ALIGN_RIGHT = 2,
};

// Size: 0x4
enum class EThrowType : int32_t
{
	THROW_NONE = 0,
	THROW_COIN = 1,
	THROW_NORMAL = 2,
	THROW_HEAVY = 3,
	THROW_PACIFY_LIGHT = 4,
	THROW_PACIFY_HEAVY = 5,
	THROW_DEADLY_LIGHT = 6,
	THROW_DEADLY_HEAVY = 7,
};

// Size: 0x4
enum class EThrownCollisionSoundLoudness : int32_t
{
	eLoudness_Default = 0,
	eLoudness_Low = 1,
	eLoudness_Normal = 2,
	eLoudness_Loud = 3,
};

// Size: 0x4
enum class ETimerEntityCommandType : int32_t
{
	ETECT_Add = 0,
	ETECT_Remove = 1,
	ETECT_Reset = 2,
};

// Size: 0x4
enum class EUIActionGroupIcon : int32_t
{
	EUIAGI_NoIcon = 0,
	EUIAGI_GenericTool = 1,
	EUIAGI_Crowbar = 2,
	EUIAGI_Wrench = 3,
	EUIAGI_Screwdriver = 4,
	EUIAGI_ExplosiveDevice = 5,
	EUIAGI_Poison = 6,
	EUIAGI_Coin = 7,
	EUIAGI_Lockpick = 8,
	EUIAGI_LockpickElectic = 9,
	EUIAGI_Card = 10,
	EUIAGI_Key = 11,
	EUIAGI_Password = 12,
	EUIAGI_SAPIENZA_GolfBall = 13,
	EUIAGI_SAPIENZA_ChemicalTube = 14,
	EUIAGI_SAPIENZA_FlowBouquet = 15,
	EUIAGI_SAPIENZA_Ammunitions = 16,
	EUIAGI_RatFood = 17,
	EUIAGI_Gunpowder = 18,
	EUIAGI_Cannonball = 19,
	EUIAGI_FuguFish = 20,
	EUIAGI_CakeTopper = 21,
	EUIAGI_Knife = 22,
	EUIAGI_SpaghettiCan = 23,
	EUIAGI_MAX = 24,
};

// Size: 0x4
enum class EUIBusyOperationId : int32_t
{
	eOperationId_GameSave = 0,
	eOperationId_MenuTransition = 1,
	eOperationId_ManuallyTriggered = 2,
	eOperationId_TriggerBootFlow = 3,
	eOperationId_SaveContract = 4,
	eOperationId_StartContract = 5,
	eOperationId_SessionStart = 6,
	eOperationId_ReportContract = 7,
	eOperationId_ConnectionFlow = 8,
	eOperationId_LoadingTransitionDelayed = 9,
	eOperationId_SaveSuccess = 10,
	eOperationId_SaveFailed = 11,
	eOperationId_SessionReconnect = 12,
	eOperationId_DefaultLoadout = 13,
	eOperationId_Max = 13,
	eOperationId_Custom_01 = 14,
	eOperationId_Custom_Begin = 14,
	eOperationId_Custom_02 = 15,
	eOperationId_Custom_03 = 16,
	eOperationId_Custom_04 = 17,
	eOperationId_Custom_05 = 18,
	eOperationId_Custom_06 = 19,
	eOperationId_Custom_07 = 20,
	eOperationId_Custom_08 = 21,
	eOperationId_Custom_09 = 22,
	eOperationId_Custom_10 = 23,
	eOperationId_Custom_11 = 24,
	eOperationId_Custom_12 = 25,
	eOperationId_Custom_13 = 26,
	eOperationId_Custom_14 = 27,
	eOperationId_Custom_15 = 28,
	eOperationId_Custom_16 = 29,
	eOperationId_Custom_17 = 30,
	eOperationId_Custom_18 = 31,
	eOperationId_Custom_19 = 32,
	eOperationId_Custom_20 = 33,
	eOperationId_Custom_21 = 34,
	eOperationId_Custom_22 = 35,
	eOperationId_Custom_23 = 36,
	eOperationId_Custom_24 = 37,
	eOperationId_Custom_25 = 38,
	eOperationId_Custom_End = 39,
	eOperationId_None = 40,
};

// Size: 0x4
enum class EUIBusyState : int32_t
{
	eBusyState_Saving = 0,
	eBusyState_Saving_Failed = 1,
	eBusyState_Saving_Success = 2,
	eBusyState_Online_Connecting = 3,
	eBusyState_Loading = 4,
	eBusyState_Fetching = 5,
	eBusyState_None = 6,
};

// Size: 0x4
enum class EVIPInvestigateReason : int32_t
{
	VIR_Undefined = 0,
	VIR_HearBulletImpact = 1,
	VIR_HearPain = 2,
	VIR_HearCarAlarm = 3,
	VIR_HearRadio = 4,
	VIR_HearItemToss = 5,
	VIR_HearWarning = 6,
	VIR_HearAccident = 7,
	VIR_HearCuriousSoundFromItem = 8,
	VIR_HearCuriousSound = 9,
	VIR_SeeWeapon = 10,
	VIR_SeeSuspiciousPerceptible = 11,
	VIR_SeeInterestingItem = 12,
	VIR_SightInvestigation = 13,
	VIR_HearFootSteps = 14,
	VIR_HearAngrySpeaks = 15,
	VIR_HearCloseCombat = 16,
	VIR_HearSilencedGun = 17,
	VIR_HearNeckBreak = 18,
	VIR_HearEmptyGun = 19,
	VIR_HearFyberwire = 20,
	VIR_HearCCChoke = 21,
	VIR_HearGunshot = 22,
	VIR_HearExplosion = 23,
	VIR_SeeDeadBody = 24,
	VIR_SeeGuardBody = 25,
	VIR_SeeDeath = 26,
	VIR_SeeProjectileDamage = 27,
	VIR_SeeExplosionDamage = 28,
	VIR_SeeNPCBeingShot = 29,
	VIR_SeeHMThrowing = 30,
	VIR_SightReaction = 31,
	VIR_SeeAgility = 32,
	VIR_SeeHMEnteringACloset = 33,
	VIR_SeeHMExitingACloset = 34,
	VIR_HMBumpingIntoMe = 35,
	VIR_SeeSickNPC = 36,
	VIR_SeeHMInMiPrivateSpace = 37,
	VIR_HitByItem = 38,
};

// Size: 0x1
enum class EValueUpdateStrategy : int8_t
{
	UPDATE_STRATEGY_REPLACE = 0,
	UPDATE_STRATEGY_ADD_TO = 1,
	UPDATE_STRATEGY_MULTIPLY = 2,
};

// Size: 0x4
enum class EVictimMovementType : int32_t
{
	eVictimMovementNone = -1,
	eVictimMovementPullVictimFromWindow = 0,
	eVictimMovementThrowBodyOverRail = 1,
	eVictimMovementDumpBodyOverLedge = 2,
	eVictimMovementTakeDown = 3,
	eVictimMovementRecoveryFinisher = 4,
	eVictimMovementGrabVictim = 5,
	eVictimMovementPushVictimThroughWindowAndRail = 6,
	eVictimMovementContextKill = 7,
	eVictimMovementKickVictimOverLedge = 8,
	eVictimMovementCoupDeGrace = 9,
	eVictimMovementCloseCombat = 10,
	eVictimMovementLast = 11,
};

// Size: 0x4
enum class EViewportLock : int32_t
{
	VPL_None = 0,
	VPL_Rectangular = 1,
	VPL_Rectangular_AvoidMinimapOverlap = 2,
};

// Size: 0x4
enum class EVolumeTriggerEntityTypeFlags : int32_t
{
	VTET_Hitman = 1,
	VTET_ActorAlive = 2,
	VTET_ActorDead = 4,
	VTET_ActorPacified = 8,
	VTET_ThrownItem = 16,
	VTET_Spatial = 32,
	VTET_SoundSweetener = 64,
	VTET_ExplodeableItem = 128,
	VTET_Item = 256,
	VTET_SpatialVisible = 512,
};

// Size: 0x4
enum class EWaypointRotationAlignment : int32_t
{
	RA_NONE = 0,
	RA_LOOSE = 1,
	RA_EXACT = 2,
};

// Size: 0x4
enum class EWeaponAnimationCategory : int32_t
{
	eWAC_Undefined = 0,
	eWAC_Pistol = 1,
	eWAC_Revolver = 2,
	eWAC_SMG_2H = 3,
	eWAC_SMG_1H = 4,
	eWAC_Rifle = 5,
	eWAC_Sniper = 6,
	eWAC_Shotgun_Pump = 7,
	eWAC_Shotgun_Semi = 8,
};

// Size: 0x4
enum class EWeaponSpecialSituation : int32_t
{
	WSS_NORMAL = 0,
	WSS_BAREHANDS = 1,
	WSS_EXPLOSION = 2,
	WSS_ACCIDENT = 3,
	WSS_NPC_FRIENDLY_FIRE = 4,
	WSS_EXECUTE_PISTOL = 5,
	WSS_ANY_WEAPON = 6,
	WSS_INVISIBLE = 7,
};

// Size: 0x4
enum class EWeaponUpgradeIcon : int32_t
{
	WEAPON_UPGRADE_ICON_NONE = 0,
	WEAPON_UPGRADE_ICON_SILENCER = 1,
	WEAPON_UPGRADE_ICON_RED_DOT_SIGHT = 2,
	WEAPON_UPGRADE_ICON_AMMUNITION = 3,
	WEAPON_UPGRADE_ICON_MAGAZINE = 4,
	WEAPON_UPGRADE_ICON_EXTCLIP = 5,
	WEAPON_UPGRADE_ICON_SHELLS = 6,
	WEAPON_UPGRADE_ICON_SLIDE = 7,
	WEAPON_UPGRADE_ICON_BOLT = 8,
	WEAPON_UPGRADE_ICON_BARREL = 9,
	WEAPON_UPGRADE_ICON_HAMMER = 10,
	WEAPON_UPGRADE_ICON_CHUTE = 11,
	WEAPON_UPGRADE_ICON_DUALWIELD = 12,
	WEAPON_UPGRADE_ICON_MAGNUM = 13,
	WEAPON_UPGRADE_ICON_STOCK = 14,
};

// Size: 0x4
enum class EWeaponUpgradeUse : int32_t
{
	eWUU_PrimaryOnly = 0,
	eWUU_SecondaryOnly = 1,
	eWUU_AllFireModes = 2,
};

// Size: 0x8
class /*alignas(0)*/ IActor
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IActor& p_Other) const;
	bool operator!=(const IActor& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IActorProvider
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IActorProvider& p_Other) const;
	bool operator!=(const IActorProvider& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IActorProviderFilter
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IActorProviderFilter& p_Other) const;
	bool operator!=(const IActorProviderFilter& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IAnimPlayerEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IAnimPlayerEntity& p_Other) const;
	bool operator!=(const IAnimPlayerEntity& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IAudioEmitter
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IAudioEmitter& p_Other) const;
	bool operator!=(const IAudioEmitter& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IBodybagEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IBodybagEntity& p_Other) const;
	bool operator!=(const IBodybagEntity& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IBoneAnimator
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IBoneAnimator& p_Other) const;
	bool operator!=(const IBoneAnimator& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IBoneCollidable
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IBoneCollidable& p_Other) const;
	bool operator!=(const IBoneCollidable& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IBulletImpactListener
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IBulletImpactListener& p_Other) const;
	bool operator!=(const IBulletImpactListener& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x4
enum class ICameraEntity_EProjectionType : int32_t
{
	ePerspectiveRH = 0,
	eOrtogonalRH = 1,
	eCustom = 2,
};

// Size: 0x4
enum class ICloset_EClosetType : int32_t
{
	eTypeClosetNormal = 0,
	eTypeClosetCake = 1,
	eTypeClosetDumpster = 2,
	eTypeClosetLast = 3,
};

// Size: 0x8
class /*alignas(0)*/ IComponentInterface
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IComponentInterface& p_Other) const;
	bool operator!=(const IComponentInterface& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IContractEvaluationContextListener
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IContractEvaluationContextListener& p_Other) const;
	bool operator!=(const IContractEvaluationContextListener& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IContractObjective
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IContractObjective& p_Other) const;
	bool operator!=(const IContractObjective& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x4
enum class IContractObjective_Category : int32_t
{
	PRIMARY = 0,
	SECONDARY = 1,
	CONDITION = 2,
};

// Size: 0x4
enum class IContractObjective_ObjectiveType : int32_t
{
	KILL = 0,
	SETPIECE = 1,
	CUSTOMKILL = 2,
	CUSTOM = 3,
};

// Size: 0x10
class /*alignas(8)*/ ZGuid
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZGuid& p_Other) const;
	bool operator!=(const ZGuid& p_Other) const { return !(*this == p_Other); }

	uint32 _a; // 0x0
	uint16 _b; // 0x4
	uint16 _c; // 0x6
	uint8 _d; // 0x8
	uint8 _e; // 0x9
	uint8 _f; // 0xA
	uint8 _g; // 0xB
	uint8 _h; // 0xC
	uint8 _i; // 0xD
	uint8 _j; // 0xE
	uint8 _k; // 0xF
};

// Size: 0x48
class /*alignas(8)*/ IContractObjective_STargetCondition
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IContractObjective_STargetCondition& p_Other) const;
	bool operator!=(const IContractObjective_STargetCondition& p_Other) const { return !(*this == p_Other); }

	ZString type; // 0x0
	ZRepositoryID repositoryId; // 0x10
	bool hardCondition; // 0x20
	uint8_t _pad21[7] {};
	ZGuid objectiveId; // 0x28
	ZString sKillMethod; // 0x38
};

// Size: 0x4
enum class IContractObjective_State : int32_t
{
	IN_PROGRESS = 0,
	COMPLETED = 1,
	FAILED = 2,
};

// Size: 0x4
enum class IContractObjective_Type : int32_t
{
	CONTRACT_OBJ_EVENT_BASED = 0,
	CONTRACT_OBJ_SM_BASED = 1,
};

// Size: 0x8
class /*alignas(0)*/ IEscortOutSituation
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IEscortOutSituation& p_Other) const;
	bool operator!=(const IEscortOutSituation& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IEventConsumerCollection
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IEventConsumerCollection& p_Other) const;
	bool operator!=(const IEventConsumerCollection& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IFreeCameraControl
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IFreeCameraControl& p_Other) const;
	bool operator!=(const IFreeCameraControl& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IHM5Door
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IHM5Door& p_Other) const;
	bool operator!=(const IHM5Door& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x4
enum class IHM5Door_ECPDoorLockType : int32_t
{
	CPDLT_NORMAL_LOCK = 0,
	CPDLT_PUSH_BAR_PAD_LOCK = 1,
};

// Size: 0x4
enum class IHM5Door_EInitialState : int32_t
{
	IS_CLOSED = 0,
	IS_OPEN = 1,
	IS_OPEN_IN = 2,
	IS_OPEN_OUT = 3,
};

// Size: 0x4
enum class IHM5Door_EOpenDir : int32_t
{
	OD_AWAY = 0,
	OD_TOWARS = 1,
	OD_IN = 2,
	OD_OUT = 3,
};

// Size: 0x4
enum class IHM5Door_EOpenMode : int32_t
{
	OM_TWO_WAY = 0,
	OM_OPEN_POS_SIDE_ONLY = 1,
	OM_OPEN_NEG_SIDE_ONLY = 2,
	OM_DISABLED = 3,
};

// Size: 0x4
enum class IHM5Door_eCloseMode : int32_t
{
	CM_AUTOCLOSE = 0,
	CM_MANUALCLOSE = 1,
	CM_NEVERCLOSE = 2,
};

// Size: 0x8
class /*alignas(0)*/ IHM5WeaponInventory
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IHM5WeaponInventory& p_Other) const;
	bool operator!=(const IHM5WeaponInventory& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IHumanBody
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IHumanBody& p_Other) const;
	bool operator!=(const IHumanBody& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x4
enum class IItemWeapon_EDeadlyThrowType : int32_t
{
	DEADLYTHROW_NONE = 0,
	DEADLYTHROW_LIGHT = 1,
	DEADLYTHROW_HEAVY = 2,
};

// Size: 0x4
enum class IKEndEffector : int32_t
{
	BEE_Pelvis = 0,
	BEE_SpineOrigin = 1,
	BEE_SpineEnd = 2,
	BEE_Head = 3,
	BEE_LeftUpperArm = 4,
	BEE_RightUpperArm = 5,
	BEE_LeftForeArm = 6,
	BEE_RightForeArm = 7,
	BEE_LeftHand = 8,
	BEE_LeftHandThumb = 9,
	BEE_LeftHandIndex = 10,
	BEE_LeftHandMiddle = 11,
	BEE_LeftHandRing = 12,
	BEE_LeftHandPinky = 13,
	BEE_RightHand = 14,
	BEE_RightHandThumb = 15,
	BEE_RightHandIndex = 16,
	BEE_RightHandMiddle = 17,
	BEE_RightHandRing = 18,
	BEE_RightHandPinky = 19,
	BEE_LeftFoot = 20,
	BEE_RightFoot = 21,
	BEE_LeftToe = 22,
	BEE_RightToe = 23,
	BEE_Count = 24,
};

// Size: 0x4
enum class ILightEntity_EFrameIndexStrategy : int32_t
{
	WRAP = 0,
	CLAMP = 1,
};

// Size: 0x1
enum class ILightEntity_ELightType : int8_t
{
	LT_DIRECTIONAL = 0,
	LT_ENVIRONMENT = 1,
	LT_OMNI = 2,
	LT_SPOT = 3,
	LT_SQUARESPOT = 4,
	LT_CAPSULE = 5,
	LT_AREA_QUAD = 6,
};

// Size: 0x4
enum class ILightEntity_ERoomLightFlow : int32_t
{
	AUTOMATIC = 0,
	LOCAL = 1,
	ALLROOMS = 2,
};

// Size: 0x8
class /*alignas(0)*/ IMetricValue
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IMetricValue& p_Other) const;
	bool operator!=(const IMetricValue& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IMorphemeCutSequenceAnimatable
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IMorphemeCutSequenceAnimatable& p_Other) const;
	bool operator!=(const IMorphemeCutSequenceAnimatable& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IMorphemeCutSequenceAnimationEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IMorphemeCutSequenceAnimationEntity& p_Other) const;
	bool operator!=(const IMorphemeCutSequenceAnimationEntity& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IMorphemeEventConsumer
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IMorphemeEventConsumer& p_Other) const;
	bool operator!=(const IMorphemeEventConsumer& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IOnlineConfigurationListener
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IOnlineConfigurationListener& p_Other) const;
	bool operator!=(const IOnlineConfigurationListener& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IPureWaterReflectable
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IPureWaterReflectable& p_Other) const;
	bool operator!=(const IPureWaterReflectable& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x1
class /*alignas(1)*/ IRenderCompositorEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IRenderCompositorEntity& p_Other) const;
	bool operator!=(const IRenderCompositorEntity& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x4
enum class IRenderCompositorEntity_EMode : int32_t
{
	eSourceA = 0,
	eSourceB = 1,
	eLayered = 2,
	eAlphaLayered = 3,
};

// Size: 0x4
enum class IRenderCompositorEntity_EViewportAnchor : int32_t
{
	eFill = 0,
	eTopLeft = 1,
	eTopRight = 2,
	eBottomLeft = 3,
	eBottomRight = 4,
};

// Size: 0x8
class /*alignas(0)*/ IRenderMaterialDescriptor
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IRenderMaterialDescriptor& p_Other) const;
	bool operator!=(const IRenderMaterialDescriptor& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x4
enum class IRenderMaterialEntity_EModifierOperation : int32_t
{
	eLeave = 0,
	eReplace = 1,
	eModulate = 2,
	eAdd = 3,
	eColor = 128,
};

// Size: 0x4
enum class IRoomEntity_EReasoningGridImportance : int32_t
{
	RGI_NoGrid = 0,
	RGI_Low = 1,
	RGI_Normal = 2,
	RGI_High = 3,
	RGI_Extreme = 4,
};

// Size: 0x4
enum class IScatterContainerEntity_EBrushStampMode : int32_t
{
	BRUSHSTAMP_ADD = 0,
	BRUSHSTAMP_SUB = 1,
	BRUSHSTAMP_SOLID = 2,
};

// Size: 0x4
enum class IScatterContainerEntity_EBrushType : int32_t
{
	BRUSH_SQUARE = 0,
	BRUSH_CIRCLE = 1,
};

// Size: 0x4
enum class IScatterContainerEntity_ECanvasClearMode : int32_t
{
	CLEAR_ALL = 0,
	CLEAR_INTENSITY = 1,
	CLEAR_SPECIFICMATERIAL = 2,
	CLEAR_ALLMATERIALS = 3,
	CLEAR_SETINTENSITYVALUECLEARMATERIAL = 4,
	CLEAR_SETINTENSITYVALUEKEEPMATERIAL = 5,
	CLEAR_SETINTENSITYVALUEANDMATERIAL = 6,
	CLEAR_SETMATERIALKEEPINTENSITYVALUE = 7,
};

// Size: 0x4
enum class IScatterContainerEntity_ECanvasSize : int32_t
{
	SIZE_128 = 0,
	SIZE_256 = 1,
	SIZE_512 = 2,
	SIZE_1024 = 3,
	SIZE_2048 = 4,
	SIZE_4096 = 5,
};

// Size: 0x4
enum class IScatterContainerEntity_EResizeMode : int32_t
{
	MODE_CLEAR = 0,
	MODE_KEEPASCENTER = 1,
	MODE_SCALE = 2,
};

// Size: 0x8
class /*alignas(0)*/ ISequenceTarget
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ISequenceTarget& p_Other) const;
	bool operator!=(const ISequenceTarget& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ ISituation
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ISituation& p_Other) const;
	bool operator!=(const ISituation& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ ISoundMaterialDescriptor
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ISoundMaterialDescriptor& p_Other) const;
	bool operator!=(const ISoundMaterialDescriptor& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ ITriggerListener
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ITriggerListener& p_Other) const;
	bool operator!=(const ITriggerListener& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IUIDataListener
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IUIDataListener& p_Other) const;
	bool operator!=(const IUIDataListener& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IValueEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IValueEntity& p_Other) const;
	bool operator!=(const IValueEntity& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x8
class /*alignas(0)*/ IWorldMapMarker
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const IWorldMapMarker& p_Other) const;
	bool operator!=(const IWorldMapMarker& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x4
enum class InputControlNamesp_eHM5InputAction : int32_t
{
	eIAButtonFaceDown_Downedge = 0,
	eIAButtonFaceDown_FastTap = 1,
	eIAButtonFaceDown_HldDwnOnce = 2,
	eIAButtonFaceDown_Hold = 3,
	eIAButtonFaceDown_HoldDown = 4,
	eIAButtonFaceLeft_Downedge = 5,
	eIAButtonFaceLeft_HldDwnOnce = 6,
	eIAButtonFaceLeft_Hold = 7,
	eIAButtonFaceLeft_HoldDown = 8,
	eIAButtonFaceLeft_FastTap = 9,
	eIAButtonFaceLeft_Tap = 10,
	eIAButtonFaceLeft_Release = 11,
	eIAButtonFaceLeft_Repeat = 12,
	eIAButtonFaceRight_Downedge = 13,
	eIAButtonFaceRight_HldDwnOnce = 14,
	eIAButtonFaceRight_Hold = 15,
	eIAButtonFaceRight_HoldDown = 16,
	eIAButtonFaceRight_FastTap = 17,
	eIAButtonFaceRight_Tap = 18,
	eIAButtonFaceRight_Release = 19,
	eIAButtonFaceRight_Repeat = 20,
	eIAButtonFaceUp_Downedge = 21,
	eIAButtonFaceUp_FastTap = 22,
	eIAButtonFaceUp_HldDwnOnce = 23,
	eIAButtonFaceUp_Hold = 24,
	eIAButtonFaceUp_HoldDown = 25,
	eIABumperLeft_FastTap = 26,
	eIABumperLeft_Hold = 27,
	eIABumperLeft_Holddown = 28,
	eIABumperRight_FastTap = 29,
	eIABumperRight_Hold = 30,
	eIABumperRight_Holddown = 31,
	eIADpadUp_Downedge = 32,
	eIADpadUp_HldDwnOnce = 33,
	eIADpadUp_FastTap = 34,
	eIADpadDown_Downedge = 35,
	eIADpadDown_FastTap = 36,
	eIADpadDown_HldDwnOnce = 37,
	eIADpadLeft_Downedge = 38,
	eIADpadRight_Downedge = 39,
	eIAThumbRight_Downedge = 40,
	eIAThumbLeft_Hold = 41,
	eIAThumbLeft_DownEdge = 42,
	eIATriggerLeft_FastTap = 43,
	eIATriggerLeft_Hold = 44,
	eIATriggerLeft_Holddown = 45,
	eIATriggerRight_FastTap = 46,
	eIATriggerRight_Hold = 47,
	eIATriggerRight_Holddown = 48,
	eIAGenericStart_Hold = 49,
	eIAKBMMoveUp = 50,
	eIAKBMMoveDown = 51,
	eIAKBMMoveLeft = 52,
	eIAKBMMoveRight = 53,
	eIAKBMUse = 54,
	eIAKBMUse2 = 55,
	eIAKBMUse2Hold = 56,
	eIAKBMPickup = 57,
	eIAKBMCover = 58,
	eIAKBMDragBody = 59,
	eIAKBMMelee = 60,
	eIAKBMMelee_Repeat = 61,
	eIAKBMActivateProp = 62,
	eIAKBMActivateProp_HldDwnOnce = 63,
	eIAKBMTakeDisguise = 64,
	eIAKBMRun = 65,
	eIAKBMAim = 66,
	eIAKBMShoot = 67,
	eIAKBMShoot_Downedge = 68,
	eIAKBMShoot_Release = 69,
	eIAKBMReload = 70,
	eIAKBMInstinct = 71,
	eIAKBMCamSwitch = 72,
	eIAKBMSneak = 73,
	eIAKBMHolster = 74,
	eIAKBMFireMode = 75,
	eIAKBMNotebook = 76,
	eIAKBMPause = 77,
	eIAKBMWeapon1 = 78,
	eIAKBMWeapon2 = 79,
	eIAKBMWeapon3 = 80,
	eIAKBMWeapon4 = 81,
	eIAKBMWeapon5 = 82,
	eIAKBMWeapon6 = 83,
	eIAKBMWeapon7 = 84,
	eIAKBMPrecisionAim = 85,
	eIAKBMZoomIn = 86,
	eIAKBMZoomOut = 87,
	eIAKBMDropItem = 88,
	eIAKBMInventory = 89,
	eIAKBMSurrender = 90,
	eIAKBMSurrender_Hold = 91,
	eIAKBMSurrender_HoldDown = 92,
	eIAKBMSurrender_HoldDownOnce = 93,
	eIAKBMTogglePlacement = 94,
	eIAKBMOkay = 95,
	eIAKBMCancel = 96,
	eIAKBMAccept = 97,
	eIATriggerLeft_Analog = 98,
	eIATriggerRight_Analog = 99,
	eIAStickLeftHorizontal_Analog = 100,
	eIAStickLeftVertical_Analog = 101,
	eIAStickRightHorizontal_Analog = 102,
	eIAStickRightVertical_Analog = 103,
	eIAStickLeftHorizontal_Raw = 104,
	eIAStickLeftVertical_Raw = 105,
	eIAStickRightHorizontal_Raw = 106,
	eIAStickRightVertical_Raw = 107,
	eIABumperLeft_Analog = 108,
	eIABumperRight_Analog = 109,
	eIAKBMMoveHorizontal = 110,
	eIAKBMMoveVertical = 111,
	eIAKBMLookHorizontal = 112,
	eIAKBMLookVertical = 113,
	eIActionsNUM = 114,
};

// Size: 0x4
enum class InputControlNamesp_eHM5InputActionID : int32_t
{
	eIDButtonFaceDown = 0,
	eIDButtonFaceLeft = 1,
	eIDButtonFaceRight = 2,
	eIDButtonFaceUp = 3,
	eIDBumperLeft = 4,
	eIDBumperRight = 5,
	eIDDpadDown = 6,
	eIDDpadLeft = 7,
	eIDDpadRight = 8,
	eIDDpadUp = 9,
	eIDThumbLeft = 10,
	eIDThumbRight = 11,
	eIDButtonStart = 12,
	eIDButtonSelect = 13,
	eIDTriggerLeft = 14,
	eIDTriggerRight = 15,
	eIDStickLeftHorizontal = 16,
	eIDStickLeftVertical = 17,
	eIDStickRightHorizontal = 18,
	eIDStickRightVertical = 19,
	eIDKeyboard = 20,
	eID_INVALID = 21,
};

// Size: 0x4
enum class InputControlNamesp_eHM5InputActionType : int32_t
{
	eTypeGet = 0,
	eTypeHold = 1,
	eTypeRepeat = 2,
	eTypeTap = 3,
	eTypeRelease = 4,
	eTypeDownedge = 5,
	eTypeFastTap = 6,
	eTypeHoldDown = 7,
	eTypeFireOnceHoldDown = 8,
	eTypeClickHold = 9,
	eTypePress = 10,
	eTypeANALOG = 11,
	eTypeANALOGRAW = 12,
	eTypeRELATIVE = 13,
	eTYPE_INVALID = 14,
};

// Size: 0x4
enum class MenuWeaponUpgradeData_EUpgradeAction : int32_t
{
	EUPGRADE_ACTION_NONE = 0,
	EUPGRADE_ACTION_INSTALL = 1,
	EUPGRADE_ACTION_REMOVE = 2,
	EUPGRADE_ACTION_UNLOCK_SLOT = 3,
	EUPGRADE_ACTION_BUY_NEXT_LEVEL = 4,
	EUPGRADE_ACTION_EQUIP_WEAPON = 5,
	EUPGRADE_ACTION_UNEQUIP_WEAPON = 6,
	EUPGRADE_ACTION_CLEAR_LEVELS = 7,
};

// Size: 0x28
class /*alignas(4)*/ S25DProjectionSettings
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const S25DProjectionSettings& p_Other) const;
	bool operator!=(const S25DProjectionSettings& p_Other) const { return !(*this == p_Other); }

	float32 fNearDistance; // 0x0
	float32 fFarDistance; // 0x4
	float32 fNearScale; // 0x8
	float32 fFarScale; // 0xC
	float32 fScaleFactor; // 0x10
	float32 fNearAlpha; // 0x14
	float32 fFarAlpha; // 0x18
	float32 fAlphaFactor; // 0x1C
	EViewportLock eViewportLock; // 0x20
	float32 fViewportGutter; // 0x24
};

// Size: 0x8
class /*alignas(4)*/ S3rdPersonCameraSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const S3rdPersonCameraSaveData& p_Other) const;
	bool operator!=(const S3rdPersonCameraSaveData& p_Other) const { return !(*this == p_Other); }

	float32 m_fAngleYaw; // 0x0
	float32 m_fAnglePitch; // 0x4
};

// Size: 0x8
class /*alignas(8)*/ ZGameTime
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZGameTime& p_Other) const;
	bool operator!=(const ZGameTime& p_Other) const { return !(*this == p_Other); }

	int64 m_nTicks; // 0x0
};

// Size: 0x18
class /*alignas(8)*/ SAIEventSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAIEventSaveData& p_Other) const;
	bool operator!=(const SAIEventSaveData& p_Other) const { return !(*this == p_Other); }

	EAIEventType m_eType; // 0x0
	bool m_bHandled; // 0x4
	uint8_t _pad5[3] {};
	ZGameTime m_nStart; // 0x8
	ZGameTime m_nEnd; // 0x10
};

// Size: 0x28
class /*alignas(4)*/ SAIModifierServiceActorSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAIModifierServiceActorSaveData& p_Other) const;
	bool operator!=(const SAIModifierServiceActorSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActorRef; // 0x0
	bool m_bNeedsVolumeUpdate; // 0x4
	bool m_bNeedsKnowledgeUpdate; // 0x5
	uint8_t _pad6[2] {};
	uint32 m_uiModVolume; // 0x8
	uint32 m_uiModBehavior; // 0xC
	uint32 m_uiModRole; // 0x10
	uint32 m_uiModItem; // 0x14
	uint32 m_uiModSituation; // 0x18
	uint32 m_uiModOutfit; // 0x1C
	uint32 m_uiModOverride; // 0x20
	uint32 m_uiModStatus; // 0x24
};

// Size: 0x20
class /*alignas(8)*/ SAIModifierServiceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAIModifierServiceSaveData& p_Other) const;
	bool operator!=(const SAIModifierServiceSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bFullVolumeUpdate; // 0x0
	uint8_t _pad1[7] {};
	TArray<SAIModifierServiceActorSaveData> m_aActors; // 0x8
};

// Size: 0x1
class /*alignas(1)*/ SAIPerceptibleEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAIPerceptibleEntitySaveData& p_Other) const;
	bool operator!=(const SAIPerceptibleEntitySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bPerceptibleEnabled; // 0x0
};

// Size: 0x1
class /*alignas(1)*/ SAIVisionBlockerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAIVisionBlockerSaveData& p_Other) const;
	bool operator!=(const SAIVisionBlockerSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
};

// Size: 0xC
class /*alignas(4)*/ SAccessoryItemSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAccessoryItemSaveData& p_Other) const;
	bool operator!=(const SAccessoryItemSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rEntity; // 0x0
	uint32 m_nBoneId; // 0x4
	bool m_bAttached; // 0x8
	bool m_bVisible; // 0x9
	uint8_t _padA[2] {};
};

// Size: 0x4
enum class ZActBehaviorEntity_EState : int32_t
{
	UNDEFINED = 0,
	IDLE = 1,
	STOPPING = 2,
	PREPARING = 3,
	MOVING = 4,
	ENTERING = 5,
	RUNNING = 6,
	TIMEDOUT = 7,
	COMPLETE = 8,
};

// Size: 0x10
class /*alignas(8)*/ SActBehaviorEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActBehaviorEntitySaveData& p_Other) const;
	bool operator!=(const SActBehaviorEntitySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bStartedSignalSent; // 0x0
	bool m_bReachedSignalSent; // 0x1
	uint8_t _pad2[2] {};
	ZActBehaviorEntity_EState m_nState; // 0x4
	ZGameTime m_ActStartTime; // 0x8
};

// Size: 0x10
class /*alignas(16)*/ float4
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const float4& p_Other) const;
	bool operator!=(const float4& p_Other) const { return !(*this == p_Other); }

	float32 x; // 0x0
	float32 y; // 0x4
	float32 z; // 0x8
	float32 w; // 0xC
};

// Size: 0x40
class /*alignas(16)*/ SActOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActOrderSaveData& p_Other) const;
	bool operator!=(const SActOrderSaveData& p_Other) const { return !(*this == p_Other); }

	ZString m_sAct; // 0x0
	float32 m_fDuration; // 0x10
	uint32 m_rChildNetworkEntity; // 0x14
	uint8_t _pad18[8] {};
	float4 m_faceTarget; // 0x20
	bool m_bBlendOutImmediatelyUponTimeout; // 0x30
	bool m_bDropCarriedItems; // 0x31
	bool m_bStopCurrentActFast; // 0x32
	uint8_t _pad33[13] {};
};

// Size: 0x18
class /*alignas(8)*/ SActionRadialArcDisplayInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActionRadialArcDisplayInfo& p_Other) const;
	bool operator!=(const SActionRadialArcDisplayInfo& p_Other) const { return !(*this == p_Other); }

	bool hidden; // 0x0
	bool locked; // 0x1
	bool active; // 0x2
	bool illegal; // 0x3
	int32 icon; // 0x4
	ZString label; // 0x8
};

// Size: 0x18
class /*alignas(8)*/ SActionRadialArcDisplayInfoArray_dummy
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActionRadialArcDisplayInfoArray_dummy& p_Other) const;
	bool operator!=(const SActionRadialArcDisplayInfoArray_dummy& p_Other) const { return !(*this == p_Other); }

	TArray<SActionRadialArcDisplayInfo> dummy; // 0x0
};

// Size: 0x4
class /*alignas(4)*/ SActorAccessoryItemActionSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorAccessoryItemActionSaveData& p_Other) const;
	bool operator!=(const SActorAccessoryItemActionSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
};

// Size: 0x18
class /*alignas(4)*/ SActorAnimSetSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorAnimSetSaveData& p_Other) const;
	bool operator!=(const SActorAnimSetSaveData& p_Other) const { return !(*this == p_Other); }

	EAnimSetType m_eAnimSet; // 0x0
	uint32 m_rCustomAnimationSet; // 0x4
	EGameTension m_eVariationResourceMaxTension; // 0x8
	EActorEmotionState m_eVariationResourceMaxEmotionState; // 0xC
	EAnimSetState m_eAnimSetEmotionState; // 0x10
	EAnimSetType m_ePreCustomAnimSet; // 0x14
};

// Size: 0x8
class /*alignas(4)*/ SActorBoneAttachSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorBoneAttachSaveData& p_Other) const;
	bool operator!=(const SActorBoneAttachSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rAttachmentTarget; // 0x0
	bool m_bIsAttached; // 0x4
	uint8_t _pad5[3] {};
};

// Size: 0x30
class /*alignas(8)*/ SActorBoneAttachmentsSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorBoneAttachmentsSaveData& p_Other) const;
	bool operator!=(const SActorBoneAttachmentsSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SActorBoneAttachSaveData> m_aData; // 0x18
};

// Size: 0x10
class /*alignas(4)*/ SVector4
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVector4& p_Other) const;
	bool operator!=(const SVector4& p_Other) const { return !(*this == p_Other); }

	float32 x; // 0x0
	float32 y; // 0x4
	float32 z; // 0x8
	float32 w; // 0xC
};

// Size: 0x20
class /*alignas(4)*/ SActorBoneSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorBoneSaveData& p_Other) const;
	bool operator!=(const SActorBoneSaveData& p_Other) const { return !(*this == p_Other); }

	SVector4 mQuaterion; // 0x0
	SVector4 mTranslation; // 0x10
};

// Size: 0x4
enum class SActorSoundDefs_EDefinition : int32_t
{
	_NoSound = 0,
	Dth_BrkNck = 1,
	Dth_Fll = 2,
	Dth_GnSht = 3,
	Dth_HdSht = 4,
	Dth_Mpct = 5,
	Dth_SltThrt = 6,
	Dth_Strngl = 7,
	Dth_Xplo = 8,
	Dth_PrpF = 9,
	Dth_Electro = 10,
	Dth_Burn = 11,
	Dth_Crush = 12,
	Dth_Scrm = 13,
	Dth_Hrt = 14,
	Dth_SrpsGrab = 15,
	Dth_HumShldStrain = 16,
	Dth_Snore = 17,
	Dth_Groan = 18,
	Dth_Dump = 19,
	Dth_PrpTssFrntAck = 20,
	Dth_Headlock = 21,
	Gen_Grt47 = 22,
	Gen_GrtGrd47WGun = 23,
	Gen_GrtTrgt = 24,
	Gen_GrtTrgtRsp = 25,
	Gen_NPC2NPCGrt = 26,
	Gen_NPC2NPCRsp = 27,
	Gen_GtHlp = 28,
	Gen_GtHlpLd = 29,
	Gen_GtHlp47Knwn = 30,
	Gen_Mssng = 31,
	Gen_HMHere = 32,
	Gen_HMThere = 33,
	Gen_SrpsLow = 34,
	Gen_SrpsLowShort = 35,
	Gen_Srps = 36,
	Gen_SrpsLd = 37,
	Gen_StndRsp = 38,
	Gen_Stop = 39,
	Gen_StopLd = 40,
	Gen_Reveal = 41,
	Gen_ThumbsUp = 42,
	Gen_BrknAck = 43,
	Gen_Ack = 44,
	Gen_AckLd = 45,
	Gen_AckNtnse = 46,
	Gen_BumpAck = 47,
	Gen_Curse = 48,
	Gen_CurseLow = 49,
	Gen_DrpGun = 50,
	Gen_DrpCase = 51,
	Gen_CoinCurse = 52,
	Gen_TransportGreet = 53,
	Gen_NoWay1 = 54,
	Gen_NoWay2Kidding = 55,
	Gen_NoWay3Joke = 56,
	Gen_NoWay44Real = 57,
	Gen_NoWay5DntBeliv = 58,
	Gen_NoWay6Serious = 59,
	Gen_NoWay7Horrible = 60,
	Gen_Way1 = 61,
	Gen_Way2Kidding = 62,
	Gen_Way3Joke = 63,
	Gen_Way44Real = 64,
	Gen_Way5DntBeliv = 65,
	Gen_Way6Serious = 66,
	Gen_Way7Horrible = 67,
	Gen_NkdRunAck = 68,
	Gen_Grasp = 69,
	Gen_Amused = 70,
	Gen_Annoyed = 71,
	Gen_BdygrdArrive = 72,
	Gen_BdygrdMovOut = 73,
	Gen_GiveUp = 74,
	Gen_Off = 75,
	Gen_On = 76,
	Gen_PanicLow = 77,
	Gen_Sick = 78,
	Gen_SmellAck = 79,
	Gen_SmrtPhnAct = 80,
	Gen_PhoneAct = 81,
	Gtag = 82,
	ClsCmbt_Ack = 83,
	ClsCmbt_Tnt = 84,
	Cmbt_BackupCll = 85,
	Cmbt_BadDsg = 86,
	Cmbt_Beg = 87,
	Cmbt_ClsAck = 88,
	Cmbt_Fire = 89,
	Cmbt_FireLdr = 90,
	Cmbt_GtHit = 91,
	Cmbt_HitHM = 92,
	Cmbt_HMClsCmbtAck = 93,
	Cmbt_HMCvr = 94,
	Cmbt_HMFire = 95,
	Cmbt_HMFlnk = 96,
	Cmbt_HMHeadPopr = 97,
	Cmbt_HMKll = 98,
	Cmbt_HMKllCiv = 99,
	Cmbt_HMKllName = 100,
	Cmbt_HMKllPrpTss = 101,
	Cmbt_HMMssTnt = 102,
	Cmbt_HMShrpShtr = 103,
	Cmbt_HMSpttd = 104,
	Cmbt_HMVnshd = 105,
	Cmbt_Hold = 106,
	Cmbt_HoldLdr = 107,
	Cmbt_HumShldRls1 = 108,
	Cmbt_HumShldRls2 = 109,
	Cmbt_HumShldRls3 = 110,
	Cmbt_HumShldRlsFem1 = 111,
	Cmbt_HumShldRlsFem2 = 112,
	Cmbt_HumShldRlsFem3 = 113,
	Cmbt_HumShldVctm = 114,
	Cmbt_HumShldLdr = 115,
	Cmbt_LngLst = 116,
	Cmbt_LngLstRsp = 117,
	Cmbt_LstMnStn = 118,
	Cmbt_LstSght = 119,
	Cmbt_LstSghtRsp = 120,
	Cmbt_NdrAttck = 121,
	Cmbt_Relod = 122,
	Cmbt_Scrm = 123,
	Cmbt_TkDwnLdr = 124,
	Cmbt_VntAck = 125,
	Cmbt_Whmp = 126,
	Cmbt_StalemateHold = 127,
	Cmbt_StalemateTnt = 128,
	Cmbt_TriggerTheAlarm = 129,
	Cmbt_47Mpty = 130,
	Cmbt_47SuperSize = 131,
	Evac_PrtTrgtSolo = 132,
	Evac_PrtTrgtAck = 133,
	Evac_PrtTrgtAckLdr = 134,
	Evac_PrtTrgtEscrt = 135,
	Evac_PrtTrgtStop = 136,
	Evac_PrtTrgtStnd = 137,
	Evac_PrtTrgtStndRsp = 138,
	Evac_Cornered = 139,
	Evac_MovOut = 140,
	Evac_PathChange = 141,
	Evac_PeelOff = 142,
	Evac_LastPeelOff = 143,
	Evac_ShltrArrv = 144,
	Evac_ShltrBad = 145,
	Evac_ShltrLdr = 146,
	Evac_ShltrRsp = 147,
	Evac_TrgtHitRsp = 148,
	AvoidXplo_Ack = 149,
	AvoidXplo_Stnd = 150,
	Ar_47BadAction = 151,
	Ar_47X = 152,
	Ar_BadDsg = 153,
	Ar_BlmeKll = 154,
	Ar_BlameKnckDwn = 155,
	Ar_BlameKnckDwnPT = 156,
	Ar_BlameKllPT = 157,
	Ar_47BadActionPT = 158,
	Ar_DrgBody = 159,
	Ar_FkeSrrdrTnt = 160,
	Ar_HMDoor = 161,
	Ar_Strangle = 162,
	Ar_Trspss = 163,
	Ar_WeapWrn1 = 164,
	Ar_WeapWrn2 = 165,
	Ar_Wrn1 = 166,
	Ar_Wrn2 = 167,
	Ar_Wrn3 = 168,
	Ar_VictimAck = 169,
	Ar_Thief = 170,
	Sniper_Ack = 171,
	InCa_BackupCll = 172,
	InCa_ChckCvr = 173,
	InCa_CivRptFail = 174,
	InCa_CivUpset = 175,
	InCa_ClstTnt = 176,
	InCa_HMTnt = 177,
	InCa_Idle = 178,
	InCa_NitiateHMKnwn = 179,
	InCa_SrchLdr = 180,
	InCa_Stnd = 181,
	InCa_StndAgtd = 182,
	InCa_StndAgtdLdr = 183,
	InCa_StndAgtdHMKnwn = 184,
	InCa_StndAgtdHMKnwnLdr = 185,
	InCa_StndHMKnwn = 186,
	InCa_StndHMKnwnLdr = 187,
	InCa_StndLdr = 188,
	InCa_StndRsp = 189,
	InCa_StndLckDwnFlsAlrm = 190,
	InCa_VntTnt = 191,
	InCa_Brk2Civ = 192,
	InCa_Brk2Grd = 193,
	InCa_Brk2Rdo = 194,
	InCa_BrkAsk = 195,
	InCa_GhostAsk = 196,
	InCa_TriggerTheAlarm = 197,
	InCa_Xpln47Thief = 198,
	InCa_DstrssInv = 199,
	InCa_DstrssLdr = 200,
	InCa_DstrssInvLdr = 201,
	InCa_WakeAsk = 202,
	InCa_47Rcall = 203,
	InCa_WakerStnd = 204,
	InCa_ClsCmbtAck = 205,
	InCa_SeeDthInv = 206,
	InCa_SeeDthInvLdr = 207,
	InCa_SeeDthLdr = 208,
	InCa_XploInv = 209,
	InCa_XploInvLdr = 210,
	InCa_XploLdr = 211,
	InCa_AlarmAck = 212,
	InCa_GnShtInv = 213,
	InCa_GnShtInvLdr = 214,
	InCa_GnShtLdr = 215,
	InCa_RecurSvrInv = 216,
	InCa_RecurSvrInvLdr = 217,
	InCa_RecurSvrInvRsp = 218,
	InCa_RecurSvrLdr = 219,
	InCa_RecurSvrRsp = 220,
	InCa_LckDwnGtOutLdr = 221,
	InCa_LckDwnGtOutRsp = 222,
	InCa_LckDwnWrn1 = 223,
	InCa_LckDwnWrn2 = 224,
	InCa_LckDwnWrn3 = 225,
	InCa_LckDwnCivCmnt = 226,
	InCa_FrskAck = 227,
	InCa_Frsk = 228,
	InCa_FrskCln = 229,
	InCa_FrskWpn = 230,
	InCa_Xpln47Wpn = 231,
	InCa_XplnAccdnt = 232,
	InCa_XplnDedBdy = 233,
	InCa_XplnDedBdyMassive = 234,
	InCa_XplnDrgBdy = 235,
	InCa_XplnDstrss = 236,
	InCa_XplnExplo = 237,
	InCa_XplnGhost = 238,
	InCa_XplnGnsht = 239,
	InCa_XplnNkdBdy = 240,
	InCa_XplnPcfdBdy = 241,
	InCa_XplnSeeDth = 242,
	InCa_XplnTrspss = 243,
	InCa_XplnX = 244,
	InCa_XplnWpn = 245,
	InCa_XplnDsg = 246,
	InCa_XplnImposter = 247,
	InCa_XplnRecurSvr = 248,
	InCa_XplnRsp = 249,
	InCa_XplnAckRdo = 250,
	InCa_XplnKnckDwn = 251,
	InCa_XplnKnckDwnVctm = 252,
	InCa_XplnKnckDwnGhost = 253,
	InCa_XplnSeeStrngl = 254,
	InCa_XplnHuntTargetWin = 255,
	InCa_XplnHuntTargetFail = 256,
	InCa_VIPDownAck = 257,
	InCa_VIPKillAck = 258,
	Accdnt_Inv = 259,
	InDedBdy_BloodPllAck = 260,
	InDedBdy_Ack = 261,
	InDedBdy_NkdAck = 262,
	InDedBdy_Inv = 263,
	InDedBdy_BllPllRpt = 264,
	InDedBdy_Massive = 265,
	InDedBdy_PcfdInv = 266,
	InDedBdy_CntnAck = 267,
	InDedBdy_Stnd = 268,
	InDedBdy_CircleBdy = 269,
	InDedBdy_CivCmnt = 270,
	InDedBdy_PrmtrBrchWrn1 = 271,
	InDedBdy_PrmtrBrchWrn2 = 272,
	InDedBdy_47AsGrdAck = 273,
	InDedBdy_BodyGone = 274,
	InDedBdy_VctmRcvr = 275,
	InDedBdy_WakerWake = 276,
	InDedBdy_WakeRsp = 277,
	InDedBdy_WakeNkdLdr = 278,
	InDedBdy_WakeNkdRsp = 279,
	Rcvr_Xpln47 = 280,
	Rcvr_XplnDsg = 281,
	Rcvr_XplnKnckDwn = 282,
	InDsg_FllwWrn1 = 283,
	InDsg_FllwWrn2 = 284,
	InDsg_FllwWrn3 = 285,
	InDsg_Pzzl = 286,
	InDsg_Stnd = 287,
	InDsg_StndDistance = 288,
	InDsg_StndHidden = 289,
	InDsg_HdNPlnSght = 290,
	InDsg_FllwWrn1Ack = 291,
	InDsg_FllwWrn1BadAction = 292,
	InDsg_FllwWrn1Wpn = 293,
	InDsg_FllwWrn1BadSound = 294,
	InDsg_FllwWrnJoinr = 295,
	InDsg_FllwWrn1ShadyItem = 296,
	Trspss_Stnd = 297,
	Trspss_Wrn1 = 298,
	Trspss_Wrn2 = 299,
	Trspss_Wrn3 = 300,
	Trspss_Rsp = 301,
	Trspss_SrchAckLegal47 = 302,
	Trspss_EscortAck = 303,
	Trspss_EscortRequest = 304,
	Trspss_EscortRequestRepeat = 305,
	Trspss_EscortStayClose = 306,
	Trspss_EscortOk = 307,
	Trspss_EscortStnd = 308,
	Trspss_EscortArrest = 309,
	Trspss_EscortExit = 310,
	Trspss_EscortStayRequest = 311,
	InCu_Brk2Rdo = 312,
	InCu_CivCmnd = 313,
	InCu_Stnd = 314,
	InCu_CivRsp = 315,
	InCu_BackupRqst = 316,
	InCu_CrAlrmAck = 317,
	InCu_CrAlrmLdr = 318,
	InCu_CrAlrmStndRsp = 319,
	InCu_FtStpsAck = 320,
	InCu_FtStpsStnd = 321,
	InCu_PrpTssHearAck = 322,
	InCu_PrpTssHearInv = 323,
	InCu_PrpTssHearLdr = 324,
	InCu_PrpTssHearStndRsp = 325,
	InCu_PrpTssSeeAck = 326,
	InCu_PrpTssSeeInv = 327,
	InCu_PrpTssSeeLdr = 328,
	InCu_PrpTssSeeStndRsp = 329,
	InCu_RdoAck = 330,
	InCu_RdoInv = 331,
	InCu_RdoLdr = 332,
	InCu_RdoStndRsp = 333,
	InCu_WpnInv = 334,
	InCu_RecurAck = 335,
	InCu_RecurInv = 336,
	InCu_RecurLdr = 337,
	InCu_RecurRsp = 338,
	InCu_ItemAckLdr = 339,
	InCu_CrAlrmStndStndRsp = 340,
	InCu_EscrtTrgtRedLight = 341,
	InCu_EscrtTrgtGreenLight = 342,
	InSt_HMAglty = 343,
	InSt_HMBz = 344,
	InSt_HMBzStnd = 345,
	InSt_HMEntXit = 346,
	InSt_HMInCvr = 347,
	InSt_HMSnkng = 348,
	InSt_PrpTssSee = 349,
	InSt_Stnd = 350,
	InSt_Wrn = 351,
	InSt_HM2Cls = 352,
	InSt_SickAck = 353,
	InSt_AdiosRequest = 354,
	InSt_PQ = 355,
	FseBx_Fixed = 356,
	FseBx_Fixing = 357,
	FseBx_GoFix = 358,
	FseBx_SabAck = 359,
	Sentry_DenyEntry = 360,
	Sentry_Frsk = 361,
	Sentry_FrskRequest = 362,
	Sentry_ItemRequest = 363,
	Sentry_Accepted = 364,
	Sentry_FrskWpnAck = 365,
	Sentry_47LoiterAck = 366,
	Sentry_DenyDsg = 367,
	VIP_MssgnA_Ldr = 368,
	VIP_MssgnB_Rsp = 369,
	VIP_MssgnC_Ldr = 370,
	VIP_MssgnD_Rsp = 371,
	VIP_MssngCallOut = 372,
	Dth_Sick = 373,
	Dth_Poison = 374,
	Gen_Avoid = 375,
	Gen_CloseCall = 376,
	Gen_PhnPckUP = 377,
	Gen_PhoneActLockdown = 378,
	Cmbt_FlushOutLdr = 379,
	Cmbt_HMPrptssKnckOut = 380,
	InCa_FrskHeadsUpLdr = 381,
	InCa_FrskHeadsUpRdo = 382,
	InCa_XplnLOS = 383,
	InCa_XplnGotShot = 384,
	InDedBdy_CivCmntPhone = 385,
	InDedBdy_NoFaulVctmXpln = 386,
	InDsg_FllwWrn1Nkd = 387,
	Ar_BlameKnckDwnMelee = 388,
	Exp_Carry = 389,
	Exp_ClearThroat = 390,
	Exp_Cough = 391,
	Exp_Drink = 392,
	Exp_Exhale = 393,
	Exp_Idle = 394,
	Exp_Inhale = 395,
	Exp_InhaleFast = 396,
	Exp_Sniff = 397,
	Exp_Swallow = 398,
	Exp_Think = 399,
	Exp_Scared = 400,
	Exp_Gld = 401,
	Exp_Dsppntd = 402,
	Exp_InPain = 403,
	InCa_AckBdy = 404,
	InCa_AckBdyLdr = 405,
	InDedBdy_CivCmntPcfd = 406,
	InDedBdy_CivCmntPhonePcfd = 407,
	Gen_SocialAck = 408,
};

// Size: 0x60
class /*alignas(8)*/ SActorDamageControlSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorDamageControlSaveData& p_Other) const;
	bool operator!=(const SActorDamageControlSaveData& p_Other) const { return !(*this == p_Other); }

	bool bExplosive; // 0x0
	bool bProjectile; // 0x1
	bool bHeadshot; // 0x2
	bool bSniperShot; // 0x3
	bool bThroughWall; // 0x4
	bool bKillByAccident; // 0x5
	bool bWeaponSilenced; // 0x6
	bool bLongRange; // 0x7
	float32 fTotalDamage; // 0x8
	float32 fPacifyDamage; // 0xC
	float32 fSBDamage; // 0x10
	int32 nImpactBodyPart; // 0x14
	EDeathType maxDeathType; // 0x18
	EDeathContext maxDeathContext; // 0x1C
	uint32 rAccidentSetup; // 0x20
	bool bFirearmPacifiesTarget; // 0x24
	uint8_t _pad25[3] {};
	float32 fHitsNumberTimeout; // 0x28
	float32 fHealthPercentTimeout; // 0x2C
	uint32 rSource; // 0x30
	uint8_t _pad34[4] {};
	ZRepositoryID m_accuseUnconsciousOutfit; // 0x38
	bool m_bValidAccuseUnconsciousOutfit; // 0x48
	uint8_t _pad49[3] {};
	SActorSoundDefs_EDefinition eDeathSpeak; // 0x4C
	bool bDefaultDeathSound; // 0x50
	uint8_t _pad51[3] {};
	int32 iEvents; // 0x54
	float32 fAgilityElementUncosciousTime; // 0x58
	uint8_t _pad5C[4] {};
};

// Size: 0xC
class /*alignas(4)*/ SActorDynamicTemplateHandlerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorDynamicTemplateHandlerSaveData& p_Other) const;
	bool operator!=(const SActorDynamicTemplateHandlerSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
	uint32 m_rItem; // 0x4
	uint32 m_rSetpiece; // 0x8
};

// Size: 0x4
class /*alignas(4)*/ SActorDynamicTemplateManipulatorSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorDynamicTemplateManipulatorSaveData& p_Other) const;
	bool operator!=(const SActorDynamicTemplateManipulatorSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
};

// Size: 0x40
class /*alignas(8)*/ SActorDynamicTemplateSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorDynamicTemplateSaveData& p_Other) const;
	bool operator!=(const SActorDynamicTemplateSaveData& p_Other) const { return !(*this == p_Other); }

	ZString m_sName; // 0x0
	EGameTension m_eTensionLimit; // 0x10
	EActorEmotionState m_eEmotionLimit; // 0x14
	ZGameTime m_nTimeLimit; // 0x18
	EGameTension m_eTensionRemoveLimit; // 0x20
	EActorEmotionState m_eEmotionRemoveLimit; // 0x24
	ZGameTime m_nTimeRemoveLimit; // 0x28
	int64 m_resourceID; // 0x30
	uint32 m_rInstance; // 0x38
	uint8_t _pad3C[4] {};
};

// Size: 0x60
class /*alignas(8)*/ SActorGoalSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorGoalSaveData& p_Other) const;
	bool operator!=(const SActorGoalSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<int32> m_aEntities; // 0x0
	TArray<bool> m_aHandled; // 0x18
	TArray<bool> m_aIsCurrent; // 0x30
	TArray<float32> m_fExpiredTime; // 0x48
};

// Size: 0x10
class /*alignas(4)*/ SActorInventoryItemSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorInventoryItemSaveData& p_Other) const;
	bool operator!=(const SActorInventoryItemSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rItem; // 0x0
	EAttachLocation m_eAttachLocation; // 0x4
	EGameTension m_eMaxTension; // 0x8
	bool m_bLeftHand; // 0xC
	bool m_bWeapon; // 0xD
	uint8_t _padE[2] {};
};

// Size: 0x18
class /*alignas(8)*/ SActorInventorySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorInventorySaveData& p_Other) const;
	bool operator!=(const SActorInventorySaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SActorInventoryItemSaveData> m_aItems; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ SActorItemActionSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorItemActionSaveData& p_Other) const;
	bool operator!=(const SActorItemActionSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
	uint32 m_rItem; // 0x4
};

// Size: 0x4
class /*alignas(4)*/ SActorKeywordProxySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorKeywordProxySaveData& p_Other) const;
	bool operator!=(const SActorKeywordProxySaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
};

// Size: 0x30
class /*alignas(8)*/ SActorKeywordProxiesSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorKeywordProxiesSaveData& p_Other) const;
	bool operator!=(const SActorKeywordProxiesSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SActorKeywordProxySaveData> m_aData; // 0x18
};

// Size: 0x18
class /*alignas(8)*/ SActorManagerReferencableData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorManagerReferencableData& p_Other) const;
	bool operator!=(const SActorManagerReferencableData& p_Other) const { return !(*this == p_Other); }

	TArray<ESituationType> m_aSituationTypes; // 0x0
};

// Size: 0x4
class /*alignas(4)*/ SActorProviderApproachSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorProviderApproachSaveData& p_Other) const;
	bool operator!=(const SActorProviderApproachSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rCastActor; // 0x0
};

// Size: 0x20
class /*alignas(8)*/ SActorProviderDirectSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorProviderDirectSaveData& p_Other) const;
	bool operator!=(const SActorProviderDirectSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aActors; // 0x0
	bool m_bRunning; // 0x18
	uint8_t _pad19[7] {};
};

// Size: 0xC
class /*alignas(4)*/ SVector3
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVector3& p_Other) const;
	bool operator!=(const SVector3& p_Other) const { return !(*this == p_Other); }

	float32 x; // 0x0
	float32 y; // 0x4
	float32 z; // 0x8
};

// Size: 0x40
class /*alignas(8)*/ SActorRagdollPoseSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorRagdollPoseSaveData& p_Other) const;
	bool operator!=(const SActorRagdollPoseSaveData& p_Other) const { return !(*this == p_Other); }

	SVector3 m_vBodyVelocity; // 0x0
	uint8_t _padC[4] {};
	TArray<SActorBoneSaveData> m_aBones; // 0x10
	TArray<uint32> m_aBoneIndices; // 0x28
};

// Size: 0x18
class /*alignas(8)*/ SEventHistorySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEventHistorySaveData& p_Other) const;
	bool operator!=(const SEventHistorySaveData& p_Other) const { return !(*this == p_Other); }

	TArray<ZGameTime> m_aOccurences; // 0x0
};

// Size: 0x40
class /*alignas(16)*/ SMatrix
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMatrix& p_Other) const;
	bool operator!=(const SMatrix& p_Other) const { return !(*this == p_Other); }

	float4 XAxis; // 0x0
	float4 YAxis; // 0x10
	float4 ZAxis; // 0x20
	float4 Trans; // 0x30
};

// Size: 0x80
class /*alignas(16)*/ SKnownEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SKnownEntitySaveData& p_Other) const;
	bool operator!=(const SKnownEntitySaveData& p_Other) const { return !(*this == p_Other); }

	int32 m_nSharedIndex; // 0x0
	uint8_t _pad4[4] {};
	TArray<SAIEventSaveData> m_aEvents; // 0x8
	uint32 m_nBooleanEvents; // 0x20
	uint32 m_nBooleanEventsHandled; // 0x24
	uint8_t _pad28[8] {};
	SMatrix m_knownWorldMatrix; // 0x30
	ZGameTime m_tLastWorldMatrixUpdate; // 0x70
	uint16 m_nGoals; // 0x78
	uint8_t _pad7A[6] {};
};

// Size: 0xC88
class /*alignas(8)*/ SKnowledgeSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SKnowledgeSaveData& p_Other) const;
	bool operator!=(const SKnowledgeSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SKnownEntitySaveData> m_aKnownEntities; // 0x0
	TFixedArray<EAIGoal, 31> m_aGoalKeys; // 0x18
	uint8_t _pad94[4] {};
	TFixedArray<SActorGoalSaveData, 31> m_aGoals; // 0x98
	float32 m_fHMAttention; // 0xC38
	float32 m_fHMAttentionLastUpdate; // 0xC3C
	float32 m_fHMDisguiseAttention; // 0xC40
	float32 m_fHMTrespassingAttention; // 0xC44
	float32 m_fHMLastTrespassingAttentionMax; // 0xC48
	uint8_t _padC4C[4] {};
	ZGameTime m_tLastTrespassingAttentionGain; // 0xC50
	ZGameTime m_tLastAttentionEvaluate; // 0xC58
	float32 m_fHMWeaponAttention; // 0xC60
	float32 m_fHMWeaponAttentionChange; // 0xC64
	EGameTension m_eGameTension; // 0xC68
	uint8_t _padC6C[4] {};
	ZGameTime m_tAmbientStartTime; // 0xC70
	ZGameTime m_tExpiredAIModifierSuppressSocialGreeting; // 0xC78
	uint32 m_behaviorModifiers; // 0xC80
	uint8_t _padC84[4] {};
};

// Size: 0x18
class /*alignas(8)*/ SLongTermMemorySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLongTermMemorySaveData& p_Other) const;
	bool operator!=(const SLongTermMemorySaveData& p_Other) const { return !(*this == p_Other); }

	ZRepositoryID m_sOutfit; // 0x0
	uint8 m_Memory; // 0x10
	uint8_t _pad11[7] {};
};

// Size: 0xED0
class /*alignas(16)*/ SActorSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorSaveData& p_Other) const;
	bool operator!=(const SActorSaveData& p_Other) const { return !(*this == p_Other); }

	SVector3 m_vPosition; // 0x0
	SVector4 m_vQuaternion; // 0xC
	uint8_t _pad1C[4] {};
	SActorInventorySaveData m_Inventory; // 0x20
	SActorAnimSetSaveData m_AnimSet; // 0x38
	int32 m_nCurrentBehaviorType; // 0x50
	uint8_t _pad54[4] {};
	ZVariant m_CurrentBehaviorState; // 0x58
	TArray<uint32> m_aCurrentBehaviorEntities; // 0x68
	TArray<uint32> m_aBehaviorEntities; // 0x80
	SKnowledgeSaveData m_KnowledgeData; // 0x98
	ZRepositoryID m_OutfitRepositoryId; // 0xD20
	int32 m_nOutfitCharset; // 0xD30
	int32 m_nOutfitVariation; // 0xD34
	ZGameTime m_tSequenceEndTime; // 0xD38
	EActorState m_nState; // 0xD40
	uint32 m_rBodyContainerEntity; // 0xD44
	int32 m_nBodyContainerSlot; // 0xD48
	EActorEmotionState m_eEmotionState; // 0xD4C
	uint32 m_rCorpseBodybagEntity; // 0xD50
	uint32 m_rDragBodybagEntity; // 0xD54
	SActorDamageControlSaveData m_ActorDamageControlData; // 0xD58
	ZVariant m_AnimatedActorOrderData; // 0xDB8
	float32 m_fStepsFraction; // 0xDC8
	float32 m_fZBeforeEnteringStairs; // 0xDCC
	TArray<SActorDynamicTemplateSaveData> m_aDynamicTemplates; // 0xDD0
	float32 m_fTimeSinceLastGroan; // 0xDE8
	uint8_t _padDEC[4] {};
	SMatrix m_sEndOrientation; // 0xDF0
	EActorAIState m_eOverrideSensorState; // 0xE30
	EDeathBehavior m_eDeathBehavior; // 0xE34
	float32 m_fOverrideIndiciatorDrawDistance; // 0xE38
	uint8_t _padE3C[4] {};
	SEventHistorySaveData m_bumpsHistory; // 0xE40
	SActorRagdollPoseSaveData m_RagdollPose; // 0xE58
	TArray<SLongTermMemorySaveData> m_aLongTermMemorySaveData; // 0xE98
	bool m_bNude; // 0xEB0
	bool m_bActiveEnforcer; // 0xEB1
	bool m_bIsPotentialEnforcer; // 0xEB2
	bool m_bDynamicEnforcer; // 0xEB3
	bool m_bIsCrowdCharacter; // 0xEB4
	bool m_bIsSnoring; // 0xEB5
	bool m_bHiddenWithHitman; // 0xEB6
	bool m_bIsWoozy; // 0xEB7
	bool m_bIsSpreadingSickness; // 0xEB8
	bool m_bBlendingOrientation; // 0xEB9
	bool m_bMakeMainWeaponUndroppable; // 0xEBA
	bool m_bWeaponIsHidden; // 0xEBB
	bool m_bRegisteredForLT; // 0xEBC
	bool m_bKeepOverrideSensorStateAfterBeingUnconscious; // 0xEBD
	bool m_bWeaponReady; // 0xEBE
	bool m_bDynamicWeaponUnholstered; // 0xEBF
	bool m_bForceInteractionGlow; // 0xEC0
	bool m_bIsOutfitRuined; // 0xEC1
	uint8_t _padEC2[14] {};
};

// Size: 0x18
class /*alignas(8)*/ SEventSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEventSaveData& p_Other) const;
	bool operator!=(const SEventSaveData& p_Other) const { return !(*this == p_Other); }

	EAISharedEventType m_nType; // 0x0
	uint8_t _pad4[4] {};
	ZGameTime m_nStart; // 0x8
	ZGameTime m_nEnd; // 0x10
};

// Size: 0x80
class /*alignas(16)*/ SSharedKnowledgeSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSharedKnowledgeSaveData& p_Other) const;
	bool operator!=(const SSharedKnowledgeSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rEntity; // 0x0
	uint8_t _pad4[4] {};
	ZRepositoryID m_OutfitId; // 0x8
	uint8_t _pad18[8] {};
	SMatrix m_ActualMatrix; // 0x20
	bool m_bIsPerceptible; // 0x60
	uint8_t _pad61[7] {};
	TArray<SEventSaveData> m_aEvents; // 0x68
};

// Size: 0x48
class /*alignas(8)*/ SSituationGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSituationGroupSaveData& p_Other) const;
	bool operator!=(const SSituationGroupSaveData& p_Other) const { return !(*this == p_Other); }

	ZString m_sClassTypeName; // 0x0
	uint32 m_nSituation; // 0x10
	uint8_t _pad14[4] {};
	TArray<uint32> m_aActors; // 0x18
	int32 m_nGroupID; // 0x30
	uint8_t _pad34[4] {};
	ZVariant m_CustomData; // 0x38
};

// Size: 0x48
class /*alignas(8)*/ SSituationMemberSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSituationMemberSaveData& p_Other) const;
	bool operator!=(const SSituationMemberSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
	ESituationJoinReason m_eJoinReason; // 0x4
	bool m_bIsOrderValid; // 0x8
	uint8_t _pad9[7] {};
	ZVariant m_OrderData; // 0x10
	ZVariant m_PendingOrderData; // 0x20
	uint32 m_rDramaRole; // 0x30
	uint8_t _pad34[4] {};
	ZVariant m_CustomData; // 0x38
};

// Size: 0x68
class /*alignas(8)*/ SSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSituationSaveData& p_Other) const;
	bool operator!=(const SSituationSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rSituation; // 0x0
	ESituationType m_eType; // 0x4
	int32 m_nTargetSharedEntity; // 0x8
	uint8_t _padC[4] {};
	ZVariant m_Data; // 0x10
	TArray<SSituationMemberSaveData> m_aMemberData; // 0x20
	TArray<SSituationGroupSaveData> m_aGroupData; // 0x38
	int32 m_nNextGroupID; // 0x50
	uint8_t _pad54[4] {};
	ZGameTime m_situationStartTime; // 0x58
	bool m_bSituationEnded; // 0x60
	uint8_t _pad61[7] {};
};

// Size: 0x178
class /*alignas(8)*/ SActorManagerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorManagerSaveData& p_Other) const;
	bool operator!=(const SActorManagerSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SSharedKnowledgeSaveData> m_aSharedKnowledgeSaveData; // 0x0
	int32 m_nCurrentHitman; // 0x18
	uint8_t _pad1C[4] {};
	TArray<SSituationSaveData> m_aSituations; // 0x20
	TArray<uint32> m_aActors; // 0x38
	TArray<SActorSaveData> m_aActorData; // 0x50
	TArray<uint32> m_aActorProviders; // 0x68
	TArray<SActorProviderDirectSaveData> m_aActorProvidersData; // 0x80
	TArray<uint32> m_aActorApproachProviders; // 0x98
	TArray<SActorProviderApproachSaveData> m_aActorApproachProvidersData; // 0xB0
	ZVariant m_BodySensorData; // 0xC8
	ZVariant m_CrimeSceneServiceData; // 0xD8
	ZVariant m_CrowdServiceData; // 0xE8
	ZVariant m_CuriousEventServiceData; // 0xF8
	ZVariant m_GetHelpServiceData; // 0x108
	ZVariant m_DynamicEnforcerServiceData; // 0x118
	ZVariant m_AIModifierServiceData; // 0x128
	ZVariant m_LockdownManagerData; // 0x138
	ZVariant m_DangerousAreaServiceData; // 0x148
	ZVariant m_TargetTrackingServiceData; // 0x158
	ZVariant m_ManHuntServiceData; // 0x168
};

// Size: 0x4
class /*alignas(4)*/ SActorProxySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorProxySaveData& p_Other) const;
	bool operator!=(const SActorProxySaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
};

// Size: 0x30
class /*alignas(8)*/ SActorProxiesSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorProxiesSaveData& p_Other) const;
	bool operator!=(const SActorProxiesSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SActorProxySaveData> m_aData; // 0x18
};

// Size: 0x1
class /*alignas(1)*/ SActorSoundDefs
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorSoundDefs& p_Other) const;
	bool operator!=(const SActorSoundDefs& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x18
class /*alignas(8)*/ SActorSpreadControllerCandidateSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorSpreadControllerCandidateSaveData& p_Other) const;
	bool operator!=(const SActorSpreadControllerCandidateSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_CandidateActor; // 0x0
	uint8_t _pad4[4] {};
	ZGameTime m_CandidateTime; // 0x8
	bool m_bValidCandidate; // 0x10
	uint8_t _pad11[7] {};
};

// Size: 0x78
class /*alignas(8)*/ SActorSpreadControllerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorSpreadControllerSaveData& p_Other) const;
	bool operator!=(const SActorSpreadControllerSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aSpreadingActors; // 0x0
	TArray<ZGameTime> m_aSpreadingActorsAddedTime; // 0x18
	TArray<uint32> m_aNewCandidates; // 0x30
	TArray<SActorSpreadControllerCandidateSaveData> m_aCandidates; // 0x48
	uint32 m_rCurrentSpreadingActor; // 0x60
	uint32 m_nCurrentActorIndex; // 0x64
	bool m_bPlayerCheckEnabled; // 0x68
	bool m_bPlayerSpreading; // 0x69
	bool m_bPlayerIsValidCandidate; // 0x6A
	bool m_bPlayerIsCandidate; // 0x6B
	uint8_t _pad6C[4] {};
	ZGameTime m_PlayerCandidateTime; // 0x70
};

// Size: 0x8
class /*alignas(4)*/ SActorSpreadTransitionOperatorMaterialActorSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorSpreadTransitionOperatorMaterialActorSaveData& p_Other) const;
	bool operator!=(const SActorSpreadTransitionOperatorMaterialActorSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_Actor; // 0x0
	float32 m_fOpacity; // 0x4
};

// Size: 0x18
class /*alignas(8)*/ SActorSpreadTransitionOperatorMaterialSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorSpreadTransitionOperatorMaterialSaveData& p_Other) const;
	bool operator!=(const SActorSpreadTransitionOperatorMaterialSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SActorSpreadTransitionOperatorMaterialActorSaveData> m_aActorMaterialOverrides; // 0x0
};

// Size: 0x4
class /*alignas(4)*/ SActorStandInSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorStandInSaveData& p_Other) const;
	bool operator!=(const SActorStandInSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
};

// Size: 0x30
class /*alignas(8)*/ SActorStandInEntitiesSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorStandInEntitiesSaveData& p_Other) const;
	bool operator!=(const SActorStandInEntitiesSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SActorStandInSaveData> m_aData; // 0x18
};

// Size: 0x8
class /*alignas(4)*/ SActorTagSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorTagSaveData& p_Other) const;
	bool operator!=(const SActorTagSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bSeen; // 0x0
	bool m_bTagged; // 0x1
	uint8_t _pad2[2] {};
	uint32 m_rActorRef; // 0x4
};

// Size: 0x28
class /*alignas(8)*/ SActorTagManagerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SActorTagManagerSaveData& p_Other) const;
	bool operator!=(const SActorTagManagerSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bContractsCreationMode; // 0x0
	uint8_t _pad1[3] {};
	int32 m_nTagCount; // 0x4
	int32 m_nMaxTagCount; // 0x8
	bool m_bTaggingEnabled; // 0xC
	uint8_t _padD[3] {};
	TArray<SActorTagSaveData> m_aActorTagData; // 0x10
};

// Size: 0x40
class /*alignas(8)*/ SAgencyPickupInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAgencyPickupInfo& p_Other) const;
	bool operator!=(const SAgencyPickupInfo& p_Other) const { return !(*this == p_Other); }

	ZRepositoryID m_AgencyPickupId; // 0x0
	TArray<ZRepositoryID> m_aItemIds; // 0x10
	TArray<ZRepositoryID> m_aModifierIds; // 0x28
};

// Size: 0x30
class /*alignas(16)*/ SAgitatedBystanderOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAgitatedBystanderOrderSaveData& p_Other) const;
	bool operator!=(const SAgitatedBystanderOrderSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rBystanderPoint; // 0x0
	uint8_t _pad4[12] {};
	float4 m_vCover; // 0x10
	float4 m_vCoverDir; // 0x20
};

// Size: 0x20
class /*alignas(4)*/ SBoneTransformSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBoneTransformSaveData& p_Other) const;
	bool operator!=(const SBoneTransformSaveData& p_Other) const { return !(*this == p_Other); }

	SVector4 mQuaterion; // 0x0
	SVector4 mTranslation; // 0x10
};

// Size: 0x38
class /*alignas(8)*/ SAnimPlayerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAnimPlayerSaveData& p_Other) const;
	bool operator!=(const SAnimPlayerSaveData& p_Other) const { return !(*this == p_Other); }

	SVector4 mTrajectoryQuaterion; // 0x0
	SVector4 mTrajectoryTranslation; // 0x10
	TArray<SBoneTransformSaveData> m_aBones; // 0x20
};

// Size: 0x28
class /*alignas(4)*/ SAnimatedActorActOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAnimatedActorActOrderSaveData& p_Other) const;
	bool operator!=(const SAnimatedActorActOrderSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bOverrideExistingAct; // 0x0
	uint8_t _pad1[3] {};
	uint32 m_nForcedAnimationNode; // 0x4
	uint32 m_rChildNetworkAct; // 0x8
	SVector3 m_vOriginPosition; // 0xC
	SVector4 m_vOriginQuaternion; // 0x18
};

// Size: 0x20
class /*alignas(4)*/ SAnimatedActorMoveOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAnimatedActorMoveOrderSaveData& p_Other) const;
	bool operator!=(const SAnimatedActorMoveOrderSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bPrecisePositioning; // 0x0
	bool m_bPreciseOrientation; // 0x1
	bool m_bIgnoreEndCollision; // 0x2
	bool m_bForcedEnpointSet; // 0x3
	float32 m_fStopMoveDistance; // 0x4
	SVector3 m_vWaypoint; // 0x8
	SVector3 m_vFacingDirection; // 0x14
};

// Size: 0x18
class /*alignas(8)*/ SAnimatedActorOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAnimatedActorOrderSaveData& p_Other) const;
	bool operator!=(const SAnimatedActorOrderSaveData& p_Other) const { return !(*this == p_Other); }

	EActorAnimationOrder m_eOrderType; // 0x0
	uint8_t _pad4[4] {};
	ZVariant m_OrderData; // 0x8
};

// Size: 0x38
class /*alignas(8)*/ SAnimatedActorReactOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAnimatedActorReactOrderSaveData& p_Other) const;
	bool operator!=(const SAnimatedActorReactOrderSaveData& p_Other) const { return !(*this == p_Other); }

	SVector3 m_vFaceTarget; // 0x0
	SVector3 m_vLookAtTarget; // 0xC
	uint32 m_rChildNetworkEntity; // 0x18
	EActorEmotionState m_targetEmotionState; // 0x1C
	bool m_bDeadbody; // 0x20
	bool m_bExplosion; // 0x21
	bool m_bTrespassing; // 0x22
	bool m_bDropCarriedItems; // 0x23
	bool m_bFaceTargetSet; // 0x24
	bool m_bLookAtTargetSet; // 0x25
	uint8_t _pad26[2] {};
	ZString m_sAct; // 0x28
};

// Size: 0xC
class /*alignas(4)*/ SAnimatedActorStandOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAnimatedActorStandOrderSaveData& p_Other) const;
	bool operator!=(const SAnimatedActorStandOrderSaveData& p_Other) const { return !(*this == p_Other); }

	SVector3 m_vFacingDirection; // 0x0
};

// Size: 0x14
class /*alignas(4)*/ SAttentionHUDUIElement
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAttentionHUDUIElement& p_Other) const;
	bool operator!=(const SAttentionHUDUIElement& p_Other) const { return !(*this == p_Other); }

	float32 fAngle; // 0x0
	float32 fAttention; // 0x4
	float32 fAlpha; // 0x8
	float32 fRadius; // 0xC
	int32 nColor; // 0x10
};

// Size: 0x18
class /*alignas(8)*/ SAttentionHUDUIElementArray_Dummy
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAttentionHUDUIElementArray_Dummy& p_Other) const;
	bool operator!=(const SAttentionHUDUIElementArray_Dummy& p_Other) const { return !(*this == p_Other); }

	TArray<SAttentionHUDUIElement> dummy; // 0x0
};

// Size: 0x14
class /*alignas(4)*/ SAudioEmitterEventSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAudioEmitterEventSaveData& p_Other) const;
	bool operator!=(const SAudioEmitterEventSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_nEventId; // 0x0
	bool m_bPaused; // 0x4
	uint8_t _pad5[3] {};
	uint32 m_nFlags; // 0x8
	uint32 m_rEventSender; // 0xC
	int32 m_nSeekPosition; // 0x10
};

// Size: 0x8
class /*alignas(4)*/ SAudioEmitterRTPCSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAudioEmitterRTPCSaveData& p_Other) const;
	bool operator!=(const SAudioEmitterRTPCSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_nParamId; // 0x0
	float32 m_fValue; // 0x4
};

// Size: 0x10
class /*alignas(4)*/ SAudioEmitterSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAudioEmitterSaveData& p_Other) const;
	bool operator!=(const SAudioEmitterSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rEmitter; // 0x0
	uint32 m_nNumberOfEvents; // 0x4
	uint32 m_nNumberOfRTPCs; // 0x8
	uint32 m_nNumberOfSwitches; // 0xC
};

// Size: 0x8
class /*alignas(4)*/ SAudioEmitterStateSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAudioEmitterStateSaveData& p_Other) const;
	bool operator!=(const SAudioEmitterStateSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_nGroupId; // 0x0
	uint32 m_nStateId; // 0x4
};

// Size: 0x8
class /*alignas(4)*/ SAudioEmitterSwitchSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAudioEmitterSwitchSaveData& p_Other) const;
	bool operator!=(const SAudioEmitterSwitchSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_nGroupId; // 0x0
	uint32 m_nStateId; // 0x4
};

// Size: 0x10
class /*alignas(8)*/ SAudioEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAudioEventData& p_Other) const;
	bool operator!=(const SAudioEventData& p_Other) const { return !(*this == p_Other); }

	uint64 m_EmitterID; // 0x0
	uint32 m_EventID; // 0x8
	uint32 m_PlayingID; // 0xC
};

// Size: 0xA8
class /*alignas(8)*/ SAudioSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAudioSaveData& p_Other) const;
	bool operator!=(const SAudioSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SAudioEmitterSaveData> m_aEmitters; // 0x0
	TArray<SAudioEmitterEventSaveData> m_aEmitterEvents; // 0x18
	TArray<SAudioEmitterRTPCSaveData> m_aEmitterRTPCs; // 0x30
	TArray<SAudioEmitterSwitchSaveData> m_aEmitterSwitches; // 0x48
	TArray<SAudioEmitterStateSaveData> m_aGlobalStates; // 0x60
	TArray<SAudioEmitterRTPCSaveData> m_aGlobalRTPCs; // 0x78
	TArray<uint32> m_aEventsEnabledAfterInit; // 0x90
};

// Size: 0x18
class /*alignas(8)*/ SFSMSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SFSMSaveData& p_Other) const;
	bool operator!=(const SFSMSaveData& p_Other) const { return !(*this == p_Other); }

	EFSMStateStatus m_eStateStatus; // 0x0
	int32 m_state; // 0x4
	int32 m_prevState; // 0x8
	uint8_t _padC[4] {};
	ZGameTime m_tCurrentStateEnterTime; // 0x10
};

// Size: 0x40
class /*alignas(16)*/ SAvoidDangerousAreaGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SAvoidDangerousAreaGroupSaveData& p_Other) const;
	bool operator!=(const SAvoidDangerousAreaGroupSaveData& p_Other) const { return !(*this == p_Other); }

	SFSMSaveData m_fsmState; // 0x0
	uint32 m_rDangerousArea; // 0x18
	uint8_t _pad1C[4] {};
	float4 m_vDestinationPoint; // 0x20
	int32 m_iGridId; // 0x30
	bool m_bWaitUntilDangerEnds; // 0x34
	uint8_t _pad35[11] {};
};

// Size: 0x18
class /*alignas(8)*/ SBehaviorTreeEntityReference
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBehaviorTreeEntityReference& p_Other) const;
	bool operator!=(const SBehaviorTreeEntityReference& p_Other) const { return !(*this == p_Other); }

	bool m_bList; // 0x0
	uint8_t _pad1[7] {};
	ZString m_sName; // 0x8
};

// Size: 0x18
class /*alignas(8)*/ SBehaviorTreeEvaluationLogEntry
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBehaviorTreeEvaluationLogEntry& p_Other) const;
	bool operator!=(const SBehaviorTreeEvaluationLogEntry& p_Other) const { return !(*this == p_Other); }

	uint32 m_nBehaviorTreeIndex; // 0x0
	uint8_t _pad4[4] {};
	uint64 m_nConditionOffset; // 0x8
	bool m_bResult; // 0x10
	uint8_t _pad11[7] {};
};

// Size: 0x10
class /*alignas(8)*/ ZResourceID
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZResourceID& p_Other) const;
	bool operator!=(const ZResourceID& p_Other) const { return !(*this == p_Other); }

	ZString m_uri; // 0x0
};

// Size: 0x30
class /*alignas(8)*/ SBehaviorTreeEvaluationLog
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBehaviorTreeEvaluationLog& p_Other) const;
	bool operator!=(const SBehaviorTreeEvaluationLog& p_Other) const { return !(*this == p_Other); }

	TArray<ZResourceID> m_BehaviorTrees; // 0x0
	TArray<SBehaviorTreeEvaluationLogEntry> m_Entries; // 0x18
};

// Size: 0x10
class /*alignas(8)*/ SBehaviorTreeInputPinCondition
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBehaviorTreeInputPinCondition& p_Other) const;
	bool operator!=(const SBehaviorTreeInputPinCondition& p_Other) const { return !(*this == p_Other); }

	ZString m_sName; // 0x0
};

// Size: 0x30
class /*alignas(8)*/ SBehaviorTreeInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBehaviorTreeInfo& p_Other) const;
	bool operator!=(const SBehaviorTreeInfo& p_Other) const { return !(*this == p_Other); }

	TArray<SBehaviorTreeEntityReference> m_references; // 0x0
	TArray<SBehaviorTreeInputPinCondition> m_inputPinConditions; // 0x18
};

// Size: 0x18
class /*alignas(8)*/ SBlobsConfigResourceEntry
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBlobsConfigResourceEntry& p_Other) const;
	bool operator!=(const SBlobsConfigResourceEntry& p_Other) const { return !(*this == p_Other); }

	ZString Id; // 0x0
	ZRuntimeResourceID BlobRid; // 0x10
};

// Size: 0x4
enum class ZHM5BodyContainer_EBCState : int32_t
{
	BC_CLOSED = 0,
	BC_OPEN = 1,
	BC_FLUSH = 2,
	BC_OPENING = 3,
	BC_CLOSING = 4,
	BC_FLUSHING = 5,
};

// Size: 0x10
class /*alignas(4)*/ SBodyContainerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBodyContainerSaveData& p_Other) const;
	bool operator!=(const SBodyContainerSaveData& p_Other) const { return !(*this == p_Other); }

	ZHM5BodyContainer_EBCState m_eBCState; // 0x0
	float32 m_fLidAutoCloseTime; // 0x4
	float32 m_fLidOpenFraction; // 0x8
	bool m_bFrameUpdateActive; // 0xC
	uint8_t _padD[3] {};
};

// Size: 0x30
class /*alignas(8)*/ SBodyContainersSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBodyContainersSaveData& p_Other) const;
	bool operator!=(const SBodyContainersSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SBodyContainerSaveData> m_aData; // 0x18
};

// Size: 0x34
class /*alignas(4)*/ SBodyPartDamageMultipliers
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBodyPartDamageMultipliers& p_Other) const;
	bool operator!=(const SBodyPartDamageMultipliers& p_Other) const { return !(*this == p_Other); }

	float32 m_fHeadDamageMultiplier; // 0x0
	float32 m_fFaceDamageMultiplier; // 0x4
	float32 m_fArmDamageMultiplier; // 0x8
	float32 m_fLArmDamageScalar; // 0xC
	float32 m_fRArmDamageScalar; // 0x10
	float32 m_fHandDamageMultiplier; // 0x14
	float32 m_fLHandDamageScalar; // 0x18
	float32 m_fRHandDamageScalar; // 0x1C
	float32 m_fLegDamageMultiplier; // 0x20
	float32 m_fLLegDamageScalar; // 0x24
	float32 m_fRLegDamageScalar; // 0x28
	float32 m_fTorsoDamageMultiplier; // 0x2C
	bool m_bApplyLeftRightScalars; // 0x30
	uint8_t _pad31[3] {};
};

// Size: 0x20
class /*alignas(4)*/ SBodybagBoneSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBodybagBoneSaveData& p_Other) const;
	bool operator!=(const SBodybagBoneSaveData& p_Other) const { return !(*this == p_Other); }

	SVector4 mQuaterion; // 0x0
	SVector4 mTranslation; // 0x10
};

// Size: 0x58
class /*alignas(8)*/ SBodybagSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBodybagSaveData& p_Other) const;
	bool operator!=(const SBodybagSaveData& p_Other) const { return !(*this == p_Other); }

	SVector3 m_vLinkedPosition; // 0x0
	SVector4 m_vLinkedQuaternionRotation; // 0xC
	uint8_t _pad1C[4] {};
	TArray<SBodybagBoneSaveData> m_aBones; // 0x20
	TArray<uint32> m_aBoneIndices; // 0x38
	uint32 m_rDeadActor; // 0x50
	uint8_t _pad54[4] {};
};

// Size: 0x8
class /*alignas(4)*/ SBoneAttachSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBoneAttachSaveData& p_Other) const;
	bool operator!=(const SBoneAttachSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rEntity; // 0x0
	bool m_bIsAttached; // 0x4
	uint8_t _pad5[3] {};
};

// Size: 0x18
class /*alignas(8)*/ SBoneScalesList
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SBoneScalesList& p_Other) const;
	bool operator!=(const SBoneScalesList& p_Other) const { return !(*this == p_Other); }

	TArray<SVector3> m_aBoneScales; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ SCamBone
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCamBone& p_Other) const;
	bool operator!=(const SCamBone& p_Other) const { return !(*this == p_Other); }

	BoneId_Enum m_eBoneId; // 0x0
	float32 m_fWeight; // 0x4
};

// Size: 0x4
enum class ZCautiousBackupGroup_EGroupState : int32_t
{
	GS_DistanceField = 0,
	GS_SendBackup = 1,
	GS_Waiting = 2,
	GS_Completed = 3,
};

// Size: 0x50
class /*alignas(8)*/ SCautiousBackupGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCautiousBackupGroupSaveData& p_Other) const;
	bool operator!=(const SCautiousBackupGroupSaveData& p_Other) const { return !(*this == p_Other); }

	ZCautiousBackupGroup_EGroupState m_eGroupState; // 0x0
	uint32 m_pLeader; // 0x4
	uint16 m_nTargetNodeIndex; // 0x8
	uint8_t _padA[6] {};
	TArray<uint32> m_aCandidates; // 0x10
	uint32 m_pCandidate; // 0x28
	uint8_t _pad2C[4] {};
	TArray<uint16> m_aReservedApproachNodeIndices; // 0x30
	ZGameTime m_tStart; // 0x48
};

// Size: 0x38
class /*alignas(8)*/ SCautiousHuntSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCautiousHuntSaveData& p_Other) const;
	bool operator!=(const SCautiousHuntSaveData& p_Other) const { return !(*this == p_Other); }

	SFSMSaveData m_fsmState; // 0x0
	ZGameTime m_tAnnounceHuntCoolDown; // 0x18
	ZGameTime m_tAnnouncedHunt; // 0x20
	ZGameTime m_tShareHuntTargetCoolDown; // 0x28
	bool m_bAnnounceHunt; // 0x30
	bool m_bAnnouncedHunt; // 0x31
	bool m_bPlayAnnouncementDialog; // 0x32
	bool m_bHuntTargetKnownKiller; // 0x33
	bool m_bSharedHuntTarget; // 0x34
	bool m_bTargetBlamed; // 0x35
	bool m_bRuleActive; // 0x36
	uint8_t _pad37[1] {};
};

// Size: 0x40
class /*alignas(8)*/ SExactCompressedGridFloatField
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SExactCompressedGridFloatField& p_Other) const;
	bool operator!=(const SExactCompressedGridFloatField& p_Other) const { return !(*this == p_Other); }

	float32 m_fInitialValue; // 0x0
	uint32 m_nFieldSize; // 0x4
	uint32 m_nGridCRC; // 0x8
	uint8_t _padC[4] {};
	TArray<uint16> m_aIndices; // 0x10
	TArray<float32> m_aValues; // 0x28
};

// Size: 0x4
enum class ZCautiousInvestigateGroup_EApproachOrderState : int32_t
{
	AOS_RequestHuntApproachNode = 0,
	AOS_RequestLeaderApproachNode = 1,
	AOS_WaitForApproachNode = 2,
	AOS_RequestLOSNode = 3,
	AOS_Ready = 4,
	AOS_NoApproachNode = 5,
};

// Size: 0x100
class /*alignas(16)*/ SCautiousInvestigateGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCautiousInvestigateGroupSaveData& p_Other) const;
	bool operator!=(const SCautiousInvestigateGroupSaveData& p_Other) const { return !(*this == p_Other); }

	ZGameTime m_tGroupStarted; // 0x0
	int32 m_target; // 0x8
	EDisturbanceType m_type; // 0xC
	uint32 m_pLeader; // 0x10
	uint32 m_pAssistant; // 0x14
	int32 m_nLeaderApproachNode; // 0x18
	int32 m_nAssistantApproachNode; // 0x1C
	ZCautiousInvestigateGroup_EApproachOrderState m_eApproachOrderState; // 0x20
	uint8_t _pad24[4] {};
	SFSMSaveData m_fsmState; // 0x28
	SFSMSaveData m_fsmAssistantState; // 0x40
	bool m_bUsingRecurringDialog; // 0x58
	bool m_bStartedInvestigateDialog; // 0x59
	bool m_bDelayInvestigateDialog; // 0x5A
	bool m_bReservedOccupancy; // 0x5B
	bool m_bSilentInvestigation; // 0x5C
	bool m_bInvestigateDeadBody; // 0x5D
	bool m_bMultipleBodies; // 0x5E
	bool m_bCheckSuspects; // 0x5F
	float4 m_investigateArea; // 0x60
	SExactCompressedGridFloatField m_targetDistanceField; // 0x70
	SExactCompressedGridFloatField m_targetLOSField; // 0xB0
	bool m_bValidTargetDistanceField; // 0xF0
	bool m_bValidTargetLOSField; // 0xF1
	bool m_bForceAcknowledge; // 0xF2
	uint8_t _padF3[13] {};
};

// Size: 0x40
class /*alignas(8)*/ SCompressedGridFloatField
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCompressedGridFloatField& p_Other) const;
	bool operator!=(const SCompressedGridFloatField& p_Other) const { return !(*this == p_Other); }

	bool m_bIsSparse; // 0x0
	uint8_t _pad1[3] {};
	uint32 m_nFieldSize; // 0x4
	float32 m_fInitialValue; // 0x8
	uint32 m_nGridCRC; // 0xC
	TArray<uint16> m_aIndices; // 0x10
	TArray<uint8> m_aValues; // 0x28
};

// Size: 0x20
class /*alignas(8)*/ SDisturbanceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDisturbanceSaveData& p_Other) const;
	bool operator!=(const SDisturbanceSaveData& p_Other) const { return !(*this == p_Other); }

	int32 m_object; // 0x0
	EDisturbanceType m_type; // 0x4
	ECautiousDisturbanceState m_state; // 0x8
	uint8_t _padC[4] {};
	ZGameTime m_started; // 0x10
	int32 m_pInvestigateGroup; // 0x18
	bool m_bLockOnHitmanPosition; // 0x1C
	uint8_t _pad1D[3] {};
};

// Size: 0x4
enum class ZInvestigateCautiousSituation_EBystanderState : int32_t
{
	BS_SelectCandidate = 0,
	BS_SelectPoint = 1,
	BS_SearchDangerField = 2,
};

// Size: 0x4
enum class ZInvestigateCautiousSituation_ESituationState : int32_t
{
	SS_Main = 0,
	SS_StandDownPending = 1,
	SS_StandDown = 2,
};

// Size: 0x70
class /*alignas(8)*/ ZInvestigateCautiousSituation_SStateData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZInvestigateCautiousSituation_SStateData& p_Other) const;
	bool operator!=(const ZInvestigateCautiousSituation_SStateData& p_Other) const { return !(*this == p_Other); }

	ZInvestigateCautiousSituation_ESituationState m_state; // 0x0
	ZInvestigateCautiousSituation_EBystanderState m_eBystanderState; // 0x4
	ZGameTime m_tLastInvestigationEnded; // 0x8
	ZGameTime m_tLastApproachOrder; // 0x10
	ZGameTime m_tLastBackupGroupEnded; // 0x18
	ZGameTime m_tLastHunt; // 0x20
	ZGameTime m_tHuntTargetLastUpdate; // 0x28
	ZGameTime m_tNewHuntTargetTimer; // 0x30
	float32 m_fCombatAge; // 0x38
	uint8_t _pad3C[20] {};
	bool m_bLockdownZoneDisturbanceAdded; // 0x50
	bool m_bLockdownSituation; // 0x51
	bool m_bLockdownFalseAlarm; // 0x52
	bool m_bLockdownGracePeriod; // 0x53
	bool m_bHMInGuardDisguise; // 0x54
	bool m_bFrisked; // 0x55
	bool m_bAnnouncedFrisk; // 0x56
	bool m_bReasonToFrisk; // 0x57
	bool m_bSomeoneHasBeenInCombat; // 0x58
	bool m_bInvestigationGroupActive; // 0x59
	bool m_bStandDownGuards; // 0x5A
	uint8_t _pad5B[5] {};
	ZGameTime m_tStandDownDelay; // 0x60
	EDisturbanceType m_eMostSevereDisturbance; // 0x68
	bool m_bDiscoveredDeadBody; // 0x6C
	bool m_bDiscoveredPacifiedBody; // 0x6D
	uint8_t _pad6E[2] {};
};

// Size: 0x1D8
class /*alignas(8)*/ SCautiousInvestigateSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCautiousInvestigateSituationSaveData& p_Other) const;
	bool operator!=(const SCautiousInvestigateSituationSaveData& p_Other) const { return !(*this == p_Other); }

	ZInvestigateCautiousSituation_SStateData m_StateData; // 0x0
	int32 m_pGetHelpGroup; // 0x70
	int32 m_pBackupGroup; // 0x74
	int32 m_rTriggerAlarmGroup; // 0x78
	int32 m_pInvestigateDisguiseGroup; // 0x7C
	TArray<int32> m_cautiousVIPGroups; // 0x80
	TArray<int32> m_friskGroups; // 0x98
	ZGameTime m_tFriskCooldown; // 0xB0
	ZGameTime m_tFriskGroupEnd; // 0xB8
	ZGameTime m_tRecoverUnconsciousGroupEnd; // 0xC0
	int32 m_nHuntTarget; // 0xC8
	uint32 m_rZone; // 0xCC
	TArray<uint32> m_aGuardMembers; // 0xD0
	TArray<SDisturbanceSaveData> m_disturbances; // 0xE8
	bool m_bValidDisturbanceField; // 0x100
	uint8_t _pad101[7] {};
	SCompressedGridFloatField m_disturbanceField; // 0x108
	int32 m_recoverUnconsciousGroup; // 0x148
	bool m_bSuspendSearchOnInitialGetHelpGroup; // 0x14C
	uint8_t _pad14D[3] {};
	EDisturbanceType m_lastArrestReason; // 0x150
	EDisturbanceType m_lastStaticArrestReason; // 0x154
	EDisturbanceType m_lastStaticCombatReason; // 0x158
	bool m_bAnyGunshotDisturbance; // 0x15C
	bool m_deadBodyMassiveReported; // 0x15D
	uint8_t _pad15E[2] {};
	int32 m_deadBodiesDiscovered; // 0x160
	int32 m_deadCrowdBodiesDiscovered; // 0x164
	TArray<EAISharedEventType> m_aDynamicEnforceEventsForSearchers; // 0x168
	ZGameTime m_tLastIdleStanddown; // 0x180
	TArray<int32> m_aAvoidDangerGroups; // 0x188
	SCautiousHuntSaveData m_cautiousHuntData; // 0x1A0
};

// Size: 0x4
enum class ZCautiousSearchGroup_EAssistantState : int32_t
{
	AS_CalculateFields = 0,
	AS_RequestNode = 1,
	AS_Approach = 2,
	AS_Approaching = 3,
	AS_Act = 4,
	AS_Acting = 5,
};

// Size: 0x4
enum class ZCautiousSearchGroup_ESearchGroupState : int32_t
{
	SGS_Acknowledge = 0,
	SGS_Approach = 1,
	SGS_Approaching = 2,
	SGS_Waiting = 3,
	SGS_Completed = 4,
};

// Size: 0x14
class /*alignas(4)*/ SCautiousSearchGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCautiousSearchGroupSaveData& p_Other) const;
	bool operator!=(const SCautiousSearchGroupSaveData& p_Other) const { return !(*this == p_Other); }

	uint16 m_searchNode; // 0x0
	uint16 m_assistantApproachNode; // 0x2
	ZCautiousSearchGroup_ESearchGroupState m_eGroupState; // 0x4
	ZCautiousSearchGroup_EAssistantState m_eAssistantState; // 0x8
	uint32 m_pLeader; // 0xC
	uint32 m_pAssistant; // 0x10
};

// Size: 0x48
class /*alignas(8)*/ SCautiousSituationMemberSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCautiousSituationMemberSaveData& p_Other) const;
	bool operator!=(const SCautiousSituationMemberSaveData& p_Other) const { return !(*this == p_Other); }

	ZGameTime m_tLastDisturbance; // 0x0
	ZGameTime m_tLastSearchCalc; // 0x8
	ZGameTime m_tLastInfluenceCalc; // 0x10
	ZGameTime m_tLastSearchCompleted; // 0x18
	ZGameTime m_tLastInvestigationCompleted; // 0x20
	ZGameTime m_tTimeIdling; // 0x28
	uint32 m_pGuardDutyPoint; // 0x30
	int32 m_nBulletImpactsHeard; // 0x34
	int32 m_nPatrolWaypointIndex; // 0x38
	uint32 m_nPatrolWaypointSubIndex; // 0x3C
	bool m_bBanterCandidate; // 0x40
	bool m_bCivOccupant; // 0x41
	bool m_bRecievingNewHuntTarget; // 0x42
	bool m_bLockdownEnforcer; // 0x43
	uint8_t _pad44[4] {};
};

// Size: 0x8
class /*alignas(8)*/ SCautiousVIPGroupState
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCautiousVIPGroupState& p_Other) const;
	bool operator!=(const SCautiousVIPGroupState& p_Other) const { return !(*this == p_Other); }

	ZGameTime m_tMove; // 0x0
};

// Size: 0x30
class /*alignas(8)*/ SCautiousVIPGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCautiousVIPGroupSaveData& p_Other) const;
	bool operator!=(const SCautiousVIPGroupSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_vip; // 0x0
	uint8_t _pad4[4] {};
	SFSMSaveData m_fsmState; // 0x8
	SCautiousVIPGroupState m_stateData; // 0x20
	int32 m_vipTargetNode; // 0x28
	int32 m_occupancyNode; // 0x2C
};

// Size: 0x8
class /*alignas(4)*/ SChairSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SChairSaveData& p_Other) const;
	bool operator!=(const SChairSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
	bool m_bAttached; // 0x4
	uint8_t _pad5[3] {};
};

// Size: 0x10
class /*alignas(8)*/ ZDynamicObject
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZDynamicObject& p_Other) const;
	bool operator!=(const ZDynamicObject& p_Other) const { return !(*this == p_Other); }

	ZVariant m_value; // 0x0
};

// Size: 0x20
class /*alignas(8)*/ SChallengeSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SChallengeSaveData& p_Other) const;
	bool operator!=(const SChallengeSaveData& p_Other) const { return !(*this == p_Other); }

	ZString m_sId; // 0x0
	ZDynamicObject m_State; // 0x10
};

// Size: 0x18
class /*alignas(8)*/ SChallengesSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SChallengesSaveData& p_Other) const;
	bool operator!=(const SChallengesSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SChallengeSaveData> m_mChallengeStates; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ SCharacterSpeakEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCharacterSpeakEntitySaveData& p_Other) const;
	bool operator!=(const SCharacterSpeakEntitySaveData& p_Other) const { return !(*this == p_Other); }

	float32 m_fSeekPosition; // 0x0
	bool m_bWereSubtitlesSeen; // 0x4
	uint8_t _pad5[3] {};
};

// Size: 0x10
class /*alignas(4)*/ SCheckLastPositionGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCheckLastPositionGroupSaveData& p_Other) const;
	bool operator!=(const SCheckLastPositionGroupSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_pLeader; // 0x0
	uint32 m_pAssistant; // 0x4
	uint16 m_nLeaderTargetNodeIndex; // 0x8
	bool m_bLeaderOrderAssigned; // 0xA
	bool m_bAssistantOrderAssigned; // 0xB
	bool m_bSearchCompleted; // 0xC
	uint8_t _padD[3] {};
};

// Size: 0x40
class /*alignas(8)*/ SClothBundleSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SClothBundleSaveData& p_Other) const;
	bool operator!=(const SClothBundleSaveData& p_Other) const { return !(*this == p_Other); }

	SVector3 m_vPosition; // 0x0
	SVector4 m_vQuaternion; // 0xC
	uint8_t _pad1C[4] {};
	ZRepositoryID m_OutfitID; // 0x20
	int32 m_nOutfitVariation; // 0x30
	int32 m_nOutfitCharset; // 0x34
	bool bSpawnedByHitman; // 0x38
	uint8_t _pad39[7] {};
};

// Size: 0x4
class /*alignas(4)*/ SClothBundleSpawnSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SClothBundleSpawnSaveData& p_Other) const;
	bool operator!=(const SClothBundleSpawnSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rClothbundle; // 0x0
};

// Size: 0x4
class /*alignas(2)*/ SClothVertex
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SClothVertex& p_Other) const;
	bool operator!=(const SClothVertex& p_Other) const { return !(*this == p_Other); }

	uint16 m_nColumn; // 0x0
	uint16 m_nRow; // 0x2
};

// Size: 0x8
class /*alignas(4)*/ SClothWireEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SClothWireEntitySaveData& p_Other) const;
	bool operator!=(const SClothWireEntitySaveData& p_Other) const { return !(*this == p_Other); }

	float32 m_fWireLength; // 0x0
	bool m_bAttachToAnchorTransform; // 0x4
	bool m_bSimulationEnabled; // 0x5
	uint8_t _pad6[2] {};
};

// Size: 0x40
class /*alignas(16)*/ SCollidingParticle
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCollidingParticle& p_Other) const;
	bool operator!=(const SCollidingParticle& p_Other) const { return !(*this == p_Other); }

	float4 m_vPosition; // 0x0
	float4 m_vVelocity; // 0x10
	float4 m_vNewVelocity; // 0x20
	uint32 m_nColor; // 0x30
	float32 m_fSize; // 0x34
	uint8_t _pad38[8] {};
};

// Size: 0x2
class /*alignas(1)*/ SCollisionControllerAspectSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCollisionControllerAspectSaveData& p_Other) const;
	bool operator!=(const SCollisionControllerAspectSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bCollideHitman; // 0x0
	bool m_bCollideCamera; // 0x1
};

// Size: 0x30
class /*alignas(8)*/ SCollisionControllerAspectsSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCollisionControllerAspectsSaveData& p_Other) const;
	bool operator!=(const SCollisionControllerAspectsSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SCollisionControllerAspectSaveData> m_aData; // 0x18
};

// Size: 0xC
class /*alignas(4)*/ SColorRGB
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SColorRGB& p_Other) const;
	bool operator!=(const SColorRGB& p_Other) const { return !(*this == p_Other); }

	float32 r; // 0x0
	float32 g; // 0x4
	float32 b; // 0x8
};

// Size: 0x10
class /*alignas(4)*/ SColorRGBA
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SColorRGBA& p_Other) const;
	bool operator!=(const SColorRGBA& p_Other) const { return !(*this == p_Other); }

	float32 r; // 0x0
	float32 g; // 0x4
	float32 b; // 0x8
	float32 a; // 0xC
};

// Size: 0x30
class /*alignas(8)*/ SColorRGBSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SColorRGBSaveData& p_Other) const;
	bool operator!=(const SColorRGBSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SColorRGB> m_aData; // 0x18
};

// Size: 0x20
class /*alignas(16)*/ SCombatOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCombatOrderSaveData& p_Other) const;
	bool operator!=(const SCombatOrderSaveData& p_Other) const { return !(*this == p_Other); }

	float4 m_vPos; // 0x0
	uint32 m_coverPlane; // 0x10
	uint32 m_rInteraction; // 0x14
	uint8_t _pad18[8] {};
};

// Size: 0x20
class /*alignas(8)*/ SCombatSituationMemberSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCombatSituationMemberSaveData& p_Other) const;
	bool operator!=(const SCombatSituationMemberSaveData& p_Other) const { return !(*this == p_Other); }

	ZGameTime m_tAggressiveModeTimer; // 0x0
	float32 m_fDistanceTargetMoved; // 0x8
	float32 m_fDistanceToTarget; // 0xC
	float32 m_fDistanceFieldValue; // 0x10
	EDisturbanceType m_civilianJoinReason; // 0x14
	bool m_bIsPreferredToFire; // 0x18
	bool m_bIsReinforcing; // 0x19
	bool m_bDialogPreventShooting; // 0x1A
	bool m_bCanFlee; // 0x1B
	bool m_bCantFleeNoPath; // 0x1C
	bool m_bReportedToGuard; // 0x1D
	bool m_bStandAndShoot; // 0x1E
	bool m_bAggressiveMode; // 0x1F
};

// Size: 0x20
class /*alignas(8)*/ SCombatZoneEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCombatZoneEntitySaveData& p_Other) const;
	bool operator!=(const SCombatZoneEntitySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bIsInLockdown; // 0x0
	bool m_bIsFalseAlarm; // 0x1
	uint8_t _pad2[2] {};
	ECombatZoneState m_nState; // 0x4
	ZGameTime m_tLockdownTime; // 0x8
	ZGameTime m_tTriggerTime; // 0x10
	ZGameTime m_tEngageTime; // 0x18
};

// Size: 0x8
class /*alignas(4)*/ ZBehaviorTreeVariable
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZBehaviorTreeVariable& p_Other) const;
	bool operator!=(const ZBehaviorTreeVariable& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x10
class /*alignas(4)*/ SConditionBase
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SConditionBase& p_Other) const;
	bool operator!=(const SConditionBase& p_Other) const { return !(*this == p_Other); }

	ECompiledConditionType eConditionType; // 0x0
	uint32 nConditionModifiers; // 0x4
	ZBehaviorTreeVariable assignTo; // 0x8
};

// Size: 0xC
class /*alignas(4)*/ SConditionalTimerEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SConditionalTimerEntitySaveData& p_Other) const;
	bool operator!=(const SConditionalTimerEntitySaveData& p_Other) const { return !(*this == p_Other); }

	int32 m_nInterval; // 0x0
	int32 m_nRemaining; // 0x4
	bool m_bValue; // 0x8
	uint8_t _pad9[3] {};
};

// Size: 0x3
class /*alignas(1)*/ SContextActionSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SContextActionSaveData& p_Other) const;
	bool operator!=(const SContextActionSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
	bool m_bTriggered; // 0x1
	bool m_bShouldShow; // 0x2
};

// Size: 0x18
class /*alignas(8)*/ SContractConfigResourceEntry
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SContractConfigResourceEntry& p_Other) const;
	bool operator!=(const SContractConfigResourceEntry& p_Other) const { return !(*this == p_Other); }

	ZString Id; // 0x0
	ZRuntimeResourceID ContractRid; // 0x10
};

// Size: 0x1
class /*alignas(1)*/ SContractObjectiveHudHintEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SContractObjectiveHudHintEntitySaveData& p_Other) const;
	bool operator!=(const SContractObjectiveHudHintEntitySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bVisible; // 0x0
};

// Size: 0x140
class /*alignas(8)*/ SContractObjectiveSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SContractObjectiveSaveData& p_Other) const;
	bool operator!=(const SContractObjectiveSaveData& p_Other) const { return !(*this == p_Other); }

	ZGuid m_Id; // 0x0
	ZString m_sText; // 0x10
	IContractObjective_Category m_eCategory; // 0x20
	bool m_bCompleted; // 0x24
	bool m_bFailed; // 0x25
	bool m_bIsHidden; // 0x26
	uint8_t _pad27[1] {};
	ZString m_sSuccessEventName; // 0x28
	ZDynamicObject m_SuccessEventValues; // 0x38
	ZString m_sFailedEventName; // 0x48
	ZDynamicObject m_FailedEventValues; // 0x58
	ZString m_sResetEventName; // 0x68
	ZDynamicObject m_ResetEventValues; // 0x78
	ZDynamicObject m_sBriefingText; // 0x88
	ZDynamicObject m_sLongBriefingText; // 0x98
	ZDynamicObject m_sHUDText; // 0xA8
	int32 m_iRepeatSuccess; // 0xB8
	int32 m_iRepeatFailed; // 0xBC
	int32 m_iCurrentSuccess; // 0xC0
	int32 m_iCurrentFailed; // 0xC4
	ZDynamicObject m_ActivationCondition; // 0xC8
	bool m_ActivationValue; // 0xD8
	bool m_bUpdateActivationOnCompleted; // 0xD9
	bool m_bDisplayAsKill; // 0xDA
	bool m_bIgnoreIfInactive; // 0xDB
	bool m_bShowInHud; // 0xDC
	bool m_bCombinedDisplayInHud; // 0xDD
	uint8_t _padDE[2] {};
	ZDynamicObject m_OnInactive; // 0xE0
	ZDynamicObject m_OnActive; // 0xF0
	ZDynamicObject m_aExits; // 0x100
	ZString m_sImage; // 0x110
	ZString m_sObjectiveType; // 0x120
	ZString m_sBriefingName; // 0x130
};

// Size: 0x138
class /*alignas(8)*/ SContractObjectiveStateMachineSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SContractObjectiveStateMachineSaveData& p_Other) const;
	bool operator!=(const SContractObjectiveStateMachineSaveData& p_Other) const { return !(*this == p_Other); }

	ZGuid m_Id; // 0x0
	IContractObjective_Category m_eCategory; // 0x10
	uint8_t _pad14[4] {};
	ZDynamicObject m_sBriefingText; // 0x18
	ZDynamicObject m_sLongBriefingText; // 0x28
	ZDynamicObject m_State; // 0x38
	ZDynamicObject m_Definition; // 0x48
	ZDynamicObject m_aTargets; // 0x58
	bool m_bTargetsHidden; // 0x68
	uint8_t _pad69[7] {};
	ZDynamicObject m_HUDTmpl; // 0x70
	ZDynamicObject m_ActivationCondition; // 0x80
	bool m_bActivationValue; // 0x90
	bool m_bUpdateActivationOnCompleted; // 0x91
	uint8_t _pad92[6] {};
	ZDynamicObject m_OnInactive; // 0x98
	ZDynamicObject m_OnActive; // 0xA8
	ZDynamicObject m_aExits; // 0xB8
	float64 m_timerEndTime; // 0xC8
	bool m_bTimerHasJustStarted; // 0xD0
	bool m_bTimerHasJustStopped; // 0xD1
	bool m_bIsActiveTimerVisible; // 0xD2
	bool m_bDisplayAsKill; // 0xD3
	bool m_bIgnoreIfInactive; // 0xD4
	bool m_bShowInHud; // 0xD5
	bool m_bCombinedDisplayInHud; // 0xD6
	bool m_bIsCounterVisibleInTile; // 0xD7
	TArray<IContractObjective_STargetCondition> m_aTargetConditions; // 0xD8
	ZString m_sImage; // 0xF0
	ZString m_sObjectiveType; // 0x100
	ZString m_sBriefingName; // 0x110
	int32 m_nObjectivesCounterCount; // 0x120
	uint8_t _pad124[4] {};
	ZString m_sObjectivesCounterHeader; // 0x128
};

// Size: 0x18
class /*alignas(8)*/ SEntityTemplateProperty
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEntityTemplateProperty& p_Other) const;
	bool operator!=(const SEntityTemplateProperty& p_Other) const { return !(*this == p_Other); }

	uint32 nPropertyID; // 0x0
	uint8_t _pad4[4] {};
	ZVariant value; // 0x8
};

// Size: 0x20
class /*alignas(8)*/ SCppEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCppEntity& p_Other) const;
	bool operator!=(const SCppEntity& p_Other) const { return !(*this == p_Other); }

	int32 blueprintIndexInResourceHeader; // 0x0
	uint8_t _pad4[4] {};
	TArray<SEntityTemplateProperty> propertyValues; // 0x8
};

// Size: 0x18
class /*alignas(8)*/ SCppEntitySubsetInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCppEntitySubsetInfo& p_Other) const;
	bool operator!=(const SCppEntitySubsetInfo& p_Other) const { return !(*this == p_Other); }

	ZString name; // 0x0
	uint32 flags; // 0x10
	uint8_t _pad14[4] {};
};

// Size: 0x20
class /*alignas(8)*/ SCppEntityBlueprint
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCppEntityBlueprint& p_Other) const;
	bool operator!=(const SCppEntityBlueprint& p_Other) const { return !(*this == p_Other); }

	TypeID typeName; // 0x0
	TArray<SCppEntitySubsetInfo> subsets; // 0x8
};

// Size: 0x30
class /*alignas(16)*/ SCrimeSceneSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrimeSceneSaveData& p_Other) const;
	bool operator!=(const SCrimeSceneSaveData& p_Other) const { return !(*this == p_Other); }

	float4 m_vPos; // 0x0
	ZGameTime m_tStart; // 0x10
	float32 m_fDuration; // 0x18
	int32 m_rSharedKnowledge; // 0x1C
	float32 m_fMaxSize; // 0x20
	bool m_bSuspicionZone; // 0x24
	uint8_t _pad25[11] {};
};

// Size: 0x18
class /*alignas(8)*/ SCrimeSceneServiceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrimeSceneServiceSaveData& p_Other) const;
	bool operator!=(const SCrimeSceneServiceSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SCrimeSceneSaveData> m_aCrimeScenes; // 0x0
};

// Size: 0x10
class /*alignas(4)*/ SCrowdActivitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdActivitySaveData& p_Other) const;
	bool operator!=(const SCrowdActivitySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
	uint8_t _pad1[3] {};
	EGait m_eGait; // 0x4
	float32 m_nMaxEnterDelaySec; // 0x8
	float32 m_nMaxLeaveDelaySec; // 0xC
};

// Size: 0x50
class /*alignas(16)*/ SCrowdActorSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdActorSaveData& p_Other) const;
	bool operator!=(const SCrowdActorSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
	uint8_t _pad1[3] {};
	ESpeed m_eWantedSpeed; // 0x4
	EGait m_eWantedGait; // 0x8
	uint32 m_nAnimSourceID; // 0xC
	uint32 m_nAnimSourceIndex; // 0x10
	uint8_t _pad14[12] {};
	float4 m_vPosition; // 0x20
	float4 m_vForward; // 0x30
	float32 m_fSpeed; // 0x40
	CrowdUtil_ECrowdActorMood m_eMood; // 0x44
	uint8_t _pad48[8] {};
};

// Size: 0x38
class /*alignas(8)*/ SCrowdBodySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdBodySaveData& p_Other) const;
	bool operator!=(const SCrowdBodySaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_pCorpseBodybagEntity; // 0x0
	uint32 m_rCrowdEntity; // 0x4
	uint16 m_iActorIndex; // 0x8
	uint8_t _padA[2] {};
	uint32 m_rPerceptibleEntity; // 0xC
	TArray<uint32> m_aKnownBy; // 0x10
	ZGameTime m_tStart; // 0x28
	bool m_bManaged; // 0x30
	uint8_t _pad31[3] {};
	int32 m_rBagSharedKnowledge; // 0x34
};

// Size: 0x80
class /*alignas(128)*/ SCrowdCells
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdCells& p_Other) const;
	bool operator!=(const SCrowdCells& p_Other) const { return !(*this == p_Other); }

	TFixedArray<uint8, 128> m_cells; // 0x0
};

// Size: 0x20
class /*alignas(4)*/ SCrowdPoseBoneSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdPoseBoneSaveData& p_Other) const;
	bool operator!=(const SCrowdPoseBoneSaveData& p_Other) const { return !(*this == p_Other); }

	SVector4 mQuaterion; // 0x0
	SVector4 mTranslation; // 0x10
};

// Size: 0x18
class /*alignas(8)*/ SCrowdPoseSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdPoseSaveData& p_Other) const;
	bool operator!=(const SCrowdPoseSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SCrowdPoseBoneSaveData> m_aBones; // 0x0
};

// Size: 0x20
class /*alignas(8)*/ SCrowdPoseCollectionSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdPoseCollectionSaveData& p_Other) const;
	bool operator!=(const SCrowdPoseCollectionSaveData& p_Other) const { return !(*this == p_Other); }

	uint64 m_id; // 0x0
	TArray<SCrowdPoseSaveData> m_aPoses; // 0x8
};

// Size: 0x18
class /*alignas(8)*/ SCrowdDeadPoseRepositorySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdDeadPoseRepositorySaveData& p_Other) const;
	bool operator!=(const SCrowdDeadPoseRepositorySaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SCrowdPoseCollectionSaveData> m_aPoseCollections; // 0x0
};

// Size: 0x40
class /*alignas(16)*/ SRegionSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SRegionSaveData& p_Other) const;
	bool operator!=(const SRegionSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_nIndex; // 0x0
	CrowdRegionType m_eType; // 0x4
	uint8_t _pad8[8] {};
	float4 m_vCenter; // 0x10
	float32 m_nDirection; // 0x20
	float32 m_nRadius; // 0x24
	uint32 m_nAngle; // 0x28
	float32 m_nLifetime; // 0x2C
	float32 m_nAge; // 0x30
	uint8 m_nGroupID; // 0x34
	uint8_t _pad35[1] {};
	int16 m_nObstacleActorIndex; // 0x36
	uint8_t _pad38[8] {};
};

// Size: 0x80
class /*alignas(8)*/ SCrowdEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdEntitySaveData& p_Other) const;
	bool operator!=(const SCrowdEntitySaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SCrowdActorSaveData> m_CrowdActorData; // 0x0
	TArray<SRegionSaveData> m_RegionData; // 0x18
	bool m_bIsCrowdAmbient; // 0x30
	uint8_t _pad31[7] {};
	SCrowdDeadPoseRepositorySaveData m_DeadPoseRepository; // 0x38
	TArray<uint32> m_aCrowdAiPoolActorsMale; // 0x50
	TArray<uint32> m_aCrowdAiPoolActorsFemale; // 0x68
};

// Size: 0x30
class /*alignas(8)*/ SCrowdFlowChannel
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdFlowChannel& p_Other) const;
	bool operator!=(const SCrowdFlowChannel& p_Other) const { return !(*this == p_Other); }

	TArray<uint8> m_aFlowVectorIndex; // 0x0
	TArray<uint16> m_aFlowCost; // 0x18
};

// Size: 0x4
class /*alignas(2)*/ ZCrowdGridPoint
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZCrowdGridPoint& p_Other) const;
	bool operator!=(const ZCrowdGridPoint& p_Other) const { return !(*this == p_Other); }

	int16 m_nHeightOffset; // 0x0
	uint8 m_nOnNavGrid; // 0x2
	uint8_t _pad3[1] {};
};

// Size: 0xF0
class /*alignas(16)*/ SCrowdMapData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdMapData& p_Other) const;
	bool operator!=(const SCrowdMapData& p_Other) const { return !(*this == p_Other); }

	uint32 m_nVersion; // 0x0
	SVector4 m_vCellConsts; // 0x4
	uint32 m_nGridSizeX; // 0x14
	uint32 m_nGridSizeY; // 0x18
	uint32 m_nCellSizeX; // 0x1C
	uint32 m_nCellSizeY; // 0x20
	uint8_t _pad24[4] {};
	TArray<ZCrowdGridPoint> m_GridMap; // 0x28
	float32 m_fGridMapHeightOffsetsScale; // 0x40
	float32 m_fGridMapHeightOffsetsBias; // 0x44
	TArray<SCrowdCells> m_CellFlags; // 0x48
	TArray<SCrowdCells> m_CellGroups; // 0x60
	int32 m_nGroupFlowStartChannel; // 0x78
	uint8_t _pad7C[4] {};
	TArray<SCrowdFlowChannel> m_aFlowChannels; // 0x80
	float32 m_nGridCellSize; // 0x98
	uint8_t _pad9C[4] {};
	SMatrix m_mObjectToWorld; // 0xA0
	SVector3 m_vGlobalSize; // 0xE0
	float32 m_nGridGeneratorOffset; // 0xEC
};

// Size: 0x14
class /*alignas(4)*/ SCrowdReactionSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdReactionSaveData& p_Other) const;
	bool operator!=(const SCrowdReactionSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_nNumPacify; // 0x0
	uint32 m_nNumShotsFired; // 0x4
	uint32 m_nNumDeaths; // 0x8
	uint32 m_nNumScared; // 0xC
	bool m_bWarzoneSpawned; // 0x10
	uint8_t _pad11[3] {};
};

// Size: 0x18
class /*alignas(8)*/ SCrowdServiceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCrowdServiceSaveData& p_Other) const;
	bool operator!=(const SCrowdServiceSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SCrowdBodySaveData> m_aDeadBodies; // 0x0
};

// Size: 0x10
class /*alignas(8)*/ SCuriousEventSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCuriousEventSaveData& p_Other) const;
	bool operator!=(const SCuriousEventSaveData& p_Other) const { return !(*this == p_Other); }

	ZGameTime m_tExpiresAt; // 0x0
	int32 m_nKnowledgeIndex; // 0x8
	uint8_t _padC[4] {};
};

// Size: 0x18
class /*alignas(8)*/ SCuriousEventServiceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCuriousEventServiceSaveData& p_Other) const;
	bool operator!=(const SCuriousEventServiceSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SCuriousEventSaveData> m_aCuriousEvents; // 0x0
};

// Size: 0x38
class /*alignas(8)*/ SCuriousInvestigateGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCuriousInvestigateGroupSaveData& p_Other) const;
	bool operator!=(const SCuriousInvestigateGroupSaveData& p_Other) const { return !(*this == p_Other); }

	int32 m_nInvestigationId; // 0x0
	EInvestigationType m_type; // 0x4
	uint32 m_target; // 0x8
	uint32 m_pLeader; // 0xC
	uint32 m_pTempLeader; // 0x10
	uint32 m_pSecondary; // 0x14
	EInvestigationState m_state; // 0x18
	uint8_t _pad1C[4] {};
	ZGameTime m_tStartTime; // 0x20
	ZGameTime m_tResolveStartTime; // 0x28
	bool m_bWarned; // 0x30
	uint8_t _pad31[3] {};
	EStandDownType m_eStandDownType; // 0x34
};

// Size: 0x40
class /*alignas(8)*/ SCuriousInvestigateSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCuriousInvestigateSituationSaveData& p_Other) const;
	bool operator!=(const SCuriousInvestigateSituationSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<int32> m_aInvestigationGroupIDs; // 0x0
	TArray<int32> m_aVIPInvestigationGroupIDs; // 0x18
	int32 m_nInvestigationCount; // 0x30
	uint8_t _pad34[4] {};
	ZGameTime m_tLastStandDownOrder; // 0x38
};

// Size: 0x10
class /*alignas(8)*/ SCuriousSituationMemberSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SCuriousSituationMemberSaveData& p_Other) const;
	bool operator!=(const SCuriousSituationMemberSaveData& p_Other) const { return !(*this == p_Other); }

	ZGameTime m_tLastDisturbance; // 0x0
	uint32 m_escalateTarget; // 0x8
	bool m_bWarned; // 0xC
	uint8_t _padD[3] {};
};

// Size: 0x1
class /*alignas(1)*/ SDangerousAreaSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDangerousAreaSaveData& p_Other) const;
	bool operator!=(const SDangerousAreaSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bDangerous; // 0x0
};

// Size: 0x40
class /*alignas(8)*/ SDeadBodyInfoSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDeadBodyInfoSaveData& p_Other) const;
	bool operator!=(const SDeadBodyInfoSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
	uint32 m_rGuard; // 0x4
	TArray<uint32> m_knownByActors; // 0x8
	ZGameTime m_tKnownSince; // 0x20
	ZGameTime m_tInvestigatedSince; // 0x28
	bool m_bPoolKnownOnly; // 0x30
	bool m_bPoolInvestigated; // 0x31
	bool m_bGuarded; // 0x32
	bool m_bBodyInvestigated; // 0x33
	bool m_bHidden; // 0x34
	bool m_bDeadByAccident; // 0x35
	bool m_bDeadByUnnoticed; // 0x36
	bool m_bHitmanSuspectedInCurrentOutfit; // 0x37
	bool m_bDeadByExplosion; // 0x38
	uint8_t _pad39[7] {};
};

// Size: 0x20
class /*alignas(8)*/ SDeadBodySensorSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDeadBodySensorSaveData& p_Other) const;
	bool operator!=(const SDeadBodySensorSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SDeadBodyInfoSaveData> m_aBodies; // 0x0
	int32 m_nBodyIndex; // 0x18
	uint8_t _pad1C[4] {};
};

// Size: 0x8
class /*alignas(4)*/ SVector2
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVector2& p_Other) const;
	bool operator!=(const SVector2& p_Other) const { return !(*this == p_Other); }

	float32 x; // 0x0
	float32 y; // 0x4
};

// Size: 0x80
class /*alignas(16)*/ SDecalSpawnSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDecalSpawnSaveData& p_Other) const;
	bool operator!=(const SDecalSpawnSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bWasSpawned; // 0x0
	uint8_t _pad1[15] {};
	float4 m_vPosition; // 0x10
	float4 m_vNormal; // 0x20
	float4 m_vDirection; // 0x30
	float4 m_vSize; // 0x40
	SColorRGB m_Color; // 0x50
	float32 m_fAlpha; // 0x5C
	float32 m_fAngle; // 0x60
	SVector2 m_vUVOffset; // 0x64
	SVector2 m_vTiling; // 0x6C
	uint32 m_rBlockingSpatialEntity; // 0x74
	uint8_t _pad78[8] {};
};

// Size: 0x28
class /*alignas(8)*/ SDetectedInPrivateGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDetectedInPrivateGroupSaveData& p_Other) const;
	bool operator!=(const SDetectedInPrivateGroupSaveData& p_Other) const { return !(*this == p_Other); }

	SFSMSaveData m_fsmState; // 0x0
	float32 m_fTimeWaiting; // 0x18
	uint32 m_rLead; // 0x1C
	bool m_bDisbanded; // 0x20
	bool m_bFirstWait; // 0x21
	uint8_t _pad22[2] {};
	int32 m_target; // 0x24
};

// Size: 0x1
class /*alignas(1)*/ SDisguiseZoneSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDisguiseZoneSaveData& p_Other) const;
	bool operator!=(const SDisguiseZoneSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
};

// Size: 0x18
class /*alignas(8)*/ SDoorSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDoorSaveData& p_Other) const;
	bool operator!=(const SDoorSaveData& p_Other) const { return !(*this == p_Other); }

	int32 m_nDoorState; // 0x0
	float32 m_fAnimPercent; // 0x4
	float32 m_fTargetAnimPercent; // 0x8
	uint8_t _padC[4] {};
	ZGameTime m_tOpenTime; // 0x10
};

// Size: 0x1
class /*alignas(1)*/ SDoorSoundDefs
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDoorSoundDefs& p_Other) const;
	bool operator!=(const SDoorSoundDefs& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x4
enum class SDoorSoundDefs_EDefinition : int32_t
{
	DoorOpen = 0,
	DoorClose = 1,
	DoorSlam = 2,
	DoorOpenStop = 3,
};

// Size: 0x30
class /*alignas(8)*/ SDoorsSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDoorsSaveData& p_Other) const;
	bool operator!=(const SDoorsSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SDoorSaveData> m_aData; // 0x18
};

// Size: 0x38
class /*alignas(8)*/ SDramaActorSaveState
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDramaActorSaveState& p_Other) const;
	bool operator!=(const SDramaActorSaveState& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
	uint32 m_rSequence; // 0x4
	uint32 m_rBehavior; // 0x8
	uint32 m_rCurrentSpeakEntity; // 0xC
	uint32 m_rScreenplay; // 0x10
	uint8_t _pad14[4] {};
	ZString m_sMatchName; // 0x18
	ZGameTime m_tActorSpeakEnd; // 0x28
	bool m_bIsDone; // 0x30
	bool m_bIsPaused; // 0x31
	bool m_bIsSpeaking; // 0x32
	uint8_t _pad33[5] {};
};

// Size: 0x30
class /*alignas(8)*/ SDramaActorCollectionSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDramaActorCollectionSaveData& p_Other) const;
	bool operator!=(const SDramaActorCollectionSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SDramaActorSaveState> m_aStates; // 0x18
};

// Size: 0x4
enum class ZScreenplay_EState : int32_t
{
	State_Idle = 0,
	State_Running = 1,
	State_Paused = 2,
	State_Failed = 3,
	State_Done = 4,
};

// Size: 0xC
class /*alignas(4)*/ SDramaSetupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDramaSetupSaveData& p_Other) const;
	bool operator!=(const SDramaSetupSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bDoneTriggered; // 0x0
	uint8_t _pad1[3] {};
	ZScreenplay_EState m_eState; // 0x4
	uint32 m_rSituation; // 0x8
};

// Size: 0x30
class /*alignas(8)*/ SDramaSetupCollectionSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDramaSetupCollectionSaveData& p_Other) const;
	bool operator!=(const SDramaSetupCollectionSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SDramaSetupSaveData> m_aStates; // 0x18
};

// Size: 0x10
class /*alignas(4)*/ SDramaSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDramaSituationSaveData& p_Other) const;
	bool operator!=(const SDramaSituationSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bSituationRunning; // 0x0
	bool m_bIsTerminated; // 0x1
	uint8_t _pad2[2] {};
	float32 m_nPriorityModifier; // 0x4
	int32 m_nCurrentDrama; // 0x8
	bool m_bProvidersStarted; // 0xC
	uint8_t _padD[3] {};
};

// Size: 0x30
class /*alignas(8)*/ SDramaSituationCollectionSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDramaSituationCollectionSaveData& p_Other) const;
	bool operator!=(const SDramaSituationCollectionSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SDramaSituationSaveData> m_aStates; // 0x18
};

// Size: 0x30
class /*alignas(16)*/ SDynamicEnforcerCandidateSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDynamicEnforcerCandidateSaveData& p_Other) const;
	bool operator!=(const SDynamicEnforcerCandidateSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
	uint8_t _pad4[12] {};
	float4 m_vPosition; // 0x10
	EAISharedEventType m_eType; // 0x20
	float32 m_fRadius; // 0x24
	uint8_t _pad28[8] {};
};

// Size: 0x18
class /*alignas(8)*/ SDynamicEnforcerServiceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDynamicEnforcerServiceSaveData& p_Other) const;
	bool operator!=(const SDynamicEnforcerServiceSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SDynamicEnforcerCandidateSaveData> m_aCandidates; // 0x0
};

// Size: 0x20
class /*alignas(8)*/ SDynamicObjectKeyValuePair
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDynamicObjectKeyValuePair& p_Other) const;
	bool operator!=(const SDynamicObjectKeyValuePair& p_Other) const { return !(*this == p_Other); }

	ZString sKey; // 0x0
	ZDynamicObject value; // 0x10
};

// Size: 0x1
class /*alignas(1)*/ SDynamicRayCastEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SDynamicRayCastEntitySaveData& p_Other) const;
	bool operator!=(const SDynamicRayCastEntitySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
};

// Size: 0x20
class /*alignas(8)*/ SEntityPath
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEntityPath& p_Other) const;
	bool operator!=(const SEntityPath& p_Other) const { return !(*this == p_Other); }

	uint64 m_nOwnerID; // 0x0
	TArray<uint64> m_aEntityPath; // 0x8
};

// Size: 0x48
class /*alignas(8)*/ SEntityPinDescriptor
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEntityPinDescriptor& p_Other) const;
	bool operator!=(const SEntityPinDescriptor& p_Other) const { return !(*this == p_Other); }

	ZString sName; // 0x0
	ZString sDisplayName; // 0x10
	ZResourceID type; // 0x20
	ZString sHelpText; // 0x30
	bool bIsPlaceholder; // 0x40
	uint8_t _pad41[7] {};
};

// Size: 0x18
class /*alignas(8)*/ SEntityTemplateEntitySubset
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEntityTemplateEntitySubset& p_Other) const;
	bool operator!=(const SEntityTemplateEntitySubset& p_Other) const { return !(*this == p_Other); }

	TArray<int32> entities; // 0x0
};

// Size: 0x28
class /*alignas(8)*/ SEntityTemplatePinConnection
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEntityTemplatePinConnection& p_Other) const;
	bool operator!=(const SEntityTemplatePinConnection& p_Other) const { return !(*this == p_Other); }

	int32 fromID; // 0x0
	int32 toID; // 0x4
	ZString fromPinName; // 0x8
	ZString toPinName; // 0x18
};

// Size: 0x28
class /*alignas(8)*/ SEntityTemplatePropertyAlias
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEntityTemplatePropertyAlias& p_Other) const;
	bool operator!=(const SEntityTemplatePropertyAlias& p_Other) const { return !(*this == p_Other); }

	ZString sAliasName; // 0x0
	int32 entityID; // 0x10
	uint8_t _pad14[4] {};
	ZString sPropertyName; // 0x18
};

// Size: 0x20
class /*alignas(8)*/ SEntityTemplateReference
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEntityTemplateReference& p_Other) const;
	bool operator!=(const SEntityTemplateReference& p_Other) const { return !(*this == p_Other); }

	uint64 entityID; // 0x0
	int32 externalSceneIndex; // 0x8
	int32 entityIndex; // 0xC
	ZString exposedEntity; // 0x10
};

// Size: 0x38
class /*alignas(8)*/ SEntityTemplatePropertyOverride
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEntityTemplatePropertyOverride& p_Other) const;
	bool operator!=(const SEntityTemplatePropertyOverride& p_Other) const { return !(*this == p_Other); }

	SEntityTemplateReference propertyOwner; // 0x0
	SEntityTemplateProperty propertyValue; // 0x20
};

// Size: 0x40
class /*alignas(8)*/ SEnvironmentConfigResourceEntry
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEnvironmentConfigResourceEntry& p_Other) const;
	bool operator!=(const SEnvironmentConfigResourceEntry& p_Other) const { return !(*this == p_Other); }

	ZString Name; // 0x0
	ZResourceID ContractsDatastoreRid; // 0x10
	ZResourceID UnlockablesDatastoreRid; // 0x20
	ZResourceID BlobsDatastoreRid; // 0x30
};

// Size: 0x18
class /*alignas(8)*/ SEnvironmentConfigResource
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEnvironmentConfigResource& p_Other) const;
	bool operator!=(const SEnvironmentConfigResource& p_Other) const { return !(*this == p_Other); }

	TArray<SEnvironmentConfigResourceEntry> Environments; // 0x0
};

// Size: 0x70
class /*alignas(16)*/ SEscortOutBehaviorSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEscortOutBehaviorSaveData& p_Other) const;
	bool operator!=(const SEscortOutBehaviorSaveData& p_Other) const { return !(*this == p_Other); }

	int32 m_nSituation; // 0x0
	bool m_bConversationHelperPaused; // 0x4
	uint8_t _pad5[3] {};
	SFSMSaveData m_fsm; // 0x8
	float4 m_vExitPosition; // 0x20
	ZGameTime m_tWarningTime; // 0x30
	bool m_bHardWarning; // 0x38
	uint8_t _pad39[3] {};
	int32 m_nWarningCount; // 0x3C
	ZGameTime m_tEscortStateSilenceTime; // 0x40
	ZGameTime m_tWaitHitmanToComplyWarningTime; // 0x48
	ZGameTime m_tWaitHitmanToComplyStateTime; // 0x50
	ZGameTime m_tLastLookBack; // 0x58
	bool m_bReachedExitPosition; // 0x60
	bool m_bShowExitWarningEnded; // 0x61
	bool m_bJustShowExit; // 0x62
	uint8_t _pad63[13] {};
};

// Size: 0x18
class /*alignas(8)*/ SEscortOutOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEscortOutOrderSaveData& p_Other) const;
	bool operator!=(const SEscortOutOrderSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<float4> m_aExitPoints; // 0x0
};

// Size: 0x4
enum class ZEscortSituationEntity_EEscortState : int32_t
{
	EES_Idle = 0,
	EES_Evaluate = 1,
	EES_Escorting = 2,
	EES_Searching = 3,
	EES_Intermediate = 4,
};

// Size: 0x1C
class /*alignas(4)*/ SEscortSituationActorStateSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEscortSituationActorStateSaveData& p_Other) const;
	bool operator!=(const SEscortSituationActorStateSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_nID; // 0x0
	bool m_bAllocatedForSituation; // 0x4
	uint8_t _pad5[3] {};
	ZEscortSituationEntity_EEscortState m_eState; // 0x8
	ZEscortSituationEntity_EEscortState m_eStatePrevious; // 0xC
	float32 m_fDistanceToTarget; // 0x10
	uint32 m_rCurrentScreenplay; // 0x14
	uint32 m_rPreferredIntermediateScreenplay; // 0x18
};

// Size: 0x4
class /*alignas(4)*/ SEscortSituationActors
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEscortSituationActors& p_Other) const;
	bool operator!=(const SEscortSituationActors& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
};

// Size: 0x4
enum class ZEscortSituationEntity_ETargetState : int32_t
{
	ETS_Unknown = 0,
	ETS_NoTarget = 1,
	ETS_RunningActBehavior = 2,
	ETS_RunningDummyBehavior = 3,
	ETS_RunningOtherBehavior = 4,
	ETS_Dead = 5,
	ETS_TargetIsHitman = 6,
};

// Size: 0x98
class /*alignas(8)*/ SEscortSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEscortSituationSaveData& p_Other) const;
	bool operator!=(const SEscortSituationSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bActivated; // 0x0
	bool m_bMayEscort; // 0x1
	bool m_bTargetDead; // 0x2
	bool m_bTargetInRange; // 0x3
	bool m_bAllEscortsAreDead; // 0x4
	bool m_bForceSearch; // 0x5
	uint8_t _pad6[2] {};
	SVector3 m_vLastPosition; // 0x8
	bool m_bFoundDeadTarget; // 0x14
	uint8_t _pad15[3] {};
	int64 m_nTargetDeadTime; // 0x18
	bool m_bTargetIsMoving; // 0x20
	uint8_t _pad21[3] {};
	ZEscortSituationEntity_ETargetState m_eTargetState; // 0x24
	EActorEmotionState m_eTargetEmotionState; // 0x28
	ZActBehaviorEntity_EState m_eTargetActState; // 0x2C
	float32 m_fTargetNotMovingTime; // 0x30
	float32 m_fTargetAgitationCooldownTimer; // 0x34
	TArray<SEscortSituationActors> m_aAddedActors; // 0x38
	TArray<SEscortSituationActorStateSaveData> m_aStates; // 0x50
	TArray<uint32> m_aEscortActs; // 0x68
	TArray<uint32> m_aSearchActs; // 0x80
};

// Size: 0xC
class /*alignas(4)*/ SEvacuateSituationMemberSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEvacuateSituationMemberSaveData& p_Other) const;
	bool operator!=(const SEvacuateSituationMemberSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_pGuardDutyPoint; // 0x0
	int32 m_nPatrolWaypointIndex; // 0x4
	uint32 m_nPatrolWaypointSubIndex; // 0x8
};

// Size: 0x60
class /*alignas(8)*/ SEvacuateSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEvacuateSituationSaveData& p_Other) const;
	bool operator!=(const SEvacuateSituationSaveData& p_Other) const { return !(*this == p_Other); }

	SFSMSaveData m_fsmState; // 0x0
	ZGameTime m_tLastSeriousSituation; // 0x18
	ZGameTime m_tLastThreat; // 0x20
	int32 m_tresspassGroup; // 0x28
	uint8_t _pad2C[4] {};
	TArray<int32> m_evacuateGroups; // 0x30
	TArray<uint32> m_activeSafeRooms; // 0x48
};

// Size: 0x30
class /*alignas(8)*/ SEvacuateTrespassGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEvacuateTrespassGroupSaveData& p_Other) const;
	bool operator!=(const SEvacuateTrespassGroupSaveData& p_Other) const { return !(*this == p_Other); }

	SFSMSaveData m_fsmState; // 0x0
	int32 m_target; // 0x18
	uint32 m_safeRoomNode; // 0x1C
	uint32 m_leader; // 0x20
	uint32 m_assistant; // 0x24
	bool m_escalate; // 0x28
	bool m_completed; // 0x29
	bool m_standDown; // 0x2A
	uint8_t _pad2B[1] {};
	int32 m_warningCount; // 0x2C
};

// Size: 0x70
class /*alignas(8)*/ SEvacuateVIPGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEvacuateVIPGroupSaveData& p_Other) const;
	bool operator!=(const SEvacuateVIPGroupSaveData& p_Other) const { return !(*this == p_Other); }

	SFSMSaveData m_fsmState; // 0x0
	uint32 m_rVIP; // 0x18
	uint32 m_rVIPActor; // 0x1C
	uint32 m_rEvacuationNode; // 0x20
	uint32 m_rSafeRoomNode; // 0x24
	uint32 m_rCompromisedEvacNode; // 0x28
	uint8_t _pad2C[4] {};
	TArray<uint32> m_assignedBodyguards; // 0x30
	ZGameTime m_tEvacuationStart; // 0x48
	ZGameTime m_tCornered; // 0x50
	ZGameTime m_tSafeRoom; // 0x58
	ZGameTime m_tSafeRoomStandDown; // 0x60
	bool m_bInitialFlee; // 0x68
	bool m_safeRoomVIPSentActingStarted; // 0x69
	uint8_t _pad6A[6] {};
};

// Size: 0x1
class /*alignas(1)*/ SEventChannelSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SEventChannelSaveData& p_Other) const;
	bool operator!=(const SEventChannelSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
};

// Size: 0x1
class /*alignas(1)*/ SExitSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SExitSaveData& p_Other) const;
	bool operator!=(const SExitSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
};

// Size: 0x40
class /*alignas(8)*/ SExposedEntityDescriptor
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SExposedEntityDescriptor& p_Other) const;
	bool operator!=(const SExposedEntityDescriptor& p_Other) const { return !(*this == p_Other); }

	ZString sName; // 0x0
	ZString sDisplayName; // 0x10
	ZString sUpheldContract; // 0x20
	ZString sHelpText; // 0x30
};

// Size: 0x8
class /*alignas(4)*/ SFRange
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SFRange& p_Other) const;
	bool operator!=(const SFRange& p_Other) const { return !(*this == p_Other); }

	float32 m_fMin; // 0x0
	float32 m_fMax; // 0x4
};

// Size: 0xC
class /*alignas(4)*/ SFaceOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SFaceOrderSaveData& p_Other) const;
	bool operator!=(const SFaceOrderSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bLookAt; // 0x0
	bool m_bAimAt; // 0x1
	bool m_bUpdateKnownPosition; // 0x2
	bool m_bStopActFast; // 0x3
	float32 m_fDuration; // 0x4
	float32 m_fDurationVariance; // 0x8
};

// Size: 0x8
class /*alignas(4)*/ SFleeOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SFleeOrderSaveData& p_Other) const;
	bool operator!=(const SFleeOrderSaveData& p_Other) const { return !(*this == p_Other); }

	EDisturbanceType m_eHelpReason; // 0x0
	uint16 m_nGridNodeIndex; // 0x4
	bool m_bFleeForHelp; // 0x6
	uint8_t _pad7[1] {};
};

// Size: 0x28
class /*alignas(8)*/ SFontDefinition
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SFontDefinition& p_Other) const;
	bool operator!=(const SFontDefinition& p_Other) const { return !(*this == p_Other); }

	ZString sFontId; // 0x0
	ZString sFontName; // 0x10
	EFontFlags eFontFlags; // 0x20
	float32 fScaleFactor; // 0x24
};

// Size: 0x28
class /*alignas(8)*/ SFontLibraryDefinition
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SFontLibraryDefinition& p_Other) const;
	bool operator!=(const SFontLibraryDefinition& p_Other) const { return !(*this == p_Other); }

	ZString sFontLocaleID; // 0x0
	TArray<SFontDefinition> m_aFontDefinitions; // 0x10
};

// Size: 0x4
enum class SFootIKEventData_EFoot : int32_t
{
	eLeft = 0,
	eRight = 1,
	eBoth = 2,
};

// Size: 0x4
class /*alignas(4)*/ SFootIKEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SFootIKEventData& p_Other) const;
	bool operator!=(const SFootIKEventData& p_Other) const { return !(*this == p_Other); }

	SFootIKEventData_EFoot m_Foot; // 0x0
};

// Size: 0x4
enum class ZFriskSuspectGroup_EAssistantState : int32_t
{
	AS_Waiting = 0,
	AS_Approach = 1,
	AS_Approaching = 2,
	AS_Covering = 3,
};

// Size: 0x4
enum class ZFriskSuspectGroup_EHitmanGreetState : int32_t
{
	HGS_NotGreeted = 0,
	HGS_Greeted = 1,
	HGS_ShrugOff = 2,
};

// Size: 0x58
class /*alignas(8)*/ SFriskSuspectGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SFriskSuspectGroupSaveData& p_Other) const;
	bool operator!=(const SFriskSuspectGroupSaveData& p_Other) const { return !(*this == p_Other); }

	SFSMSaveData m_fsmState; // 0x0
	bool m_bHitmanIsGuard; // 0x18
	uint8_t _pad19[3] {};
	int32 m_target; // 0x1C
	uint32 m_pLeader; // 0x20
	uint32 m_pAssistant; // 0x24
	ZFriskSuspectGroup_EAssistantState m_eAssistantState; // 0x28
	EDisturbanceType m_eDisturbanceType; // 0x2C
	ZFriskSuspectGroup_EHitmanGreetState m_eHitmanGreetState; // 0x30
	uint8_t _pad34[4] {};
	ZGameTime m_tHitmanGreet; // 0x38
	float32 m_fMovingTime; // 0x40
	float32 m_fRunningTime; // 0x44
	ZGameTime m_tWaitToComplyTime; // 0x48
	bool m_bWarnOnWeaponFound; // 0x50
	bool m_bWeaponFound; // 0x51
	bool m_bMoveWarning; // 0x52
	bool m_bFirskRequestRepeated; // 0x53
	uint8_t _pad54[4] {};
};

// Size: 0x40
class /*alignas(4)*/ SGBufferSample
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGBufferSample& p_Other) const;
	bool operator!=(const SGBufferSample& p_Other) const { return !(*this == p_Other); }

	SVector3 normal; // 0x0
	SVector3 diffuse; // 0xC
	SVector3 specular; // 0x18
	SVector3 accumulatedLight; // 0x24
	float32 glossiness; // 0x30
	float32 translucency; // 0x34
	float32 ao; // 0x38
	uint32 shadingModel; // 0x3C
};

// Size: 0x30
class /*alignas(16)*/ SGProperties
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGProperties& p_Other) const;
	bool operator!=(const SGProperties& p_Other) const { return !(*this == p_Other); }

	float4 vMin; // 0x0
	float4 vMax; // 0x10
	int32 nGridWidth; // 0x20
	float32 fGridSpacing; // 0x24
	int32 nVisibilityRange; // 0x28
	uint8_t _pad2C[4] {};
};

// Size: 0x30
class /*alignas(16)*/ SGWaypoint
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGWaypoint& p_Other) const;
	bool operator!=(const SGWaypoint& p_Other) const { return !(*this == p_Other); }

	uint16 nNeighbor0; // 0x0
	uint16 nNeighbor1; // 0x2
	uint16 nNeighbor2; // 0x4
	uint16 nNeighbor3; // 0x6
	uint16 nNeighbor4; // 0x8
	uint16 nNeighbor5; // 0xA
	uint16 nNeighbor6; // 0xC
	uint16 nNeighbor7; // 0xE
	float4 vPos; // 0x10
	uint32 nVisionDataOffset; // 0x20
	int16 nLayerIndex; // 0x24
	uint8_t _pad26[10] {};
};

// Size: 0x1
class /*alignas(1)*/ SGameCamProfileEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGameCamProfileEntitySaveData& p_Other) const;
	bool operator!=(const SGameCamProfileEntitySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bIsEnabled; // 0x0
};

// Size: 0x4
class /*alignas(4)*/ SItemKeywordProxySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SItemKeywordProxySaveData& p_Other) const;
	bool operator!=(const SItemKeywordProxySaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rItem; // 0x0
};

// Size: 0x30
class /*alignas(8)*/ SItemKeywordProxiesSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SItemKeywordProxiesSaveData& p_Other) const;
	bool operator!=(const SItemKeywordProxiesSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SItemKeywordProxySaveData> m_aData; // 0x18
};

// Size: 0x58
class /*alignas(8)*/ SItemSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SItemSaveData& p_Other) const;
	bool operator!=(const SItemSaveData& p_Other) const { return !(*this == p_Other); }

	SVector3 m_vPosition; // 0x0
	SVector4 m_vRotation; // 0xC
	bool m_bShowItem; // 0x1C
	bool m_bEnablePickup; // 0x1D
	bool m_bKinematic; // 0x1E
	bool m_bSleeping; // 0x1F
	bool m_bIsPerceptible; // 0x20
	bool m_bDestroyed; // 0x21
	uint8_t _pad22[2] {};
	SVector3 m_vVelocity; // 0x24
	ZVariant m_ContainerSaveData; // 0x30
	uint32 m_rTransformParent; // 0x40
	uint32 m_rSpawner; // 0x44
	uint32 m_rOwner; // 0x48
	uint32 m_rHoldingContainer; // 0x4C
	bool m_bTurnedOn; // 0x50
	bool m_bEverOwnedByHitman; // 0x51
	bool m_bWasPlacedAndAttached; // 0x52
	bool m_bObjectInPhysicsWorld; // 0x53
	uint8_t _pad54[4] {};
};

// Size: 0x30
class /*alignas(8)*/ SItemsSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SItemsSaveData& p_Other) const;
	bool operator!=(const SItemsSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SItemSaveData> m_aData; // 0x18
};

// Size: 0x8
class /*alignas(4)*/ SLampCoreSaveState
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLampCoreSaveState& p_Other) const;
	bool operator!=(const SLampCoreSaveState& p_Other) const { return !(*this == p_Other); }

	float32 m_fDiffusePower; // 0x0
	bool m_bSwitchState; // 0x4
	uint8_t _pad5[3] {};
};

// Size: 0x30
class /*alignas(8)*/ SLampCoreSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLampCoreSaveData& p_Other) const;
	bool operator!=(const SLampCoreSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SLampCoreSaveState> m_aData; // 0x18
};

// Size: 0x1C
class /*alignas(4)*/ SMathLerpSaveData_SColorRGB
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathLerpSaveData_SColorRGB& p_Other) const;
	bool operator!=(const SMathLerpSaveData_SColorRGB& p_Other) const { return !(*this == p_Other); }

	SColorRGB m_A; // 0x0
	SColorRGB m_B; // 0xC
	float32 m_fT; // 0x18
};

// Size: 0x30
class /*alignas(8)*/ SMathLerpsSaveData_SColorRGB
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathLerpsSaveData_SColorRGB& p_Other) const;
	bool operator!=(const SMathLerpsSaveData_SColorRGB& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SMathLerpSaveData_SColorRGB> m_aData; // 0x18
};

// Size: 0x24
class /*alignas(4)*/ SMathLerpSaveData_SColorRGBA
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathLerpSaveData_SColorRGBA& p_Other) const;
	bool operator!=(const SMathLerpSaveData_SColorRGBA& p_Other) const { return !(*this == p_Other); }

	SColorRGBA m_A; // 0x0
	SColorRGBA m_B; // 0x10
	float32 m_fT; // 0x20
};

// Size: 0x30
class /*alignas(8)*/ SMathLerpsSaveData_SColorRGBA
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathLerpsSaveData_SColorRGBA& p_Other) const;
	bool operator!=(const SMathLerpsSaveData_SColorRGBA& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SMathLerpSaveData_SColorRGBA> m_aData; // 0x18
};

// Size: 0x14
class /*alignas(4)*/ SMathLerpSaveData_SVector2
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathLerpSaveData_SVector2& p_Other) const;
	bool operator!=(const SMathLerpSaveData_SVector2& p_Other) const { return !(*this == p_Other); }

	SVector2 m_A; // 0x0
	SVector2 m_B; // 0x8
	float32 m_fT; // 0x10
};

// Size: 0x30
class /*alignas(8)*/ SMathLerpsSaveData_SVector2
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathLerpsSaveData_SVector2& p_Other) const;
	bool operator!=(const SMathLerpsSaveData_SVector2& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SMathLerpSaveData_SVector2> m_aData; // 0x18
};

// Size: 0x1C
class /*alignas(4)*/ SMathLerpSaveData_SVector3
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathLerpSaveData_SVector3& p_Other) const;
	bool operator!=(const SMathLerpSaveData_SVector3& p_Other) const { return !(*this == p_Other); }

	SVector3 m_A; // 0x0
	SVector3 m_B; // 0xC
	float32 m_fT; // 0x18
};

// Size: 0x30
class /*alignas(8)*/ SMathLerpsSaveData_SVector3
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathLerpsSaveData_SVector3& p_Other) const;
	bool operator!=(const SMathLerpsSaveData_SVector3& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SMathLerpSaveData_SVector3> m_aData; // 0x18
};

// Size: 0x24
class /*alignas(4)*/ SMathLerpSaveData_SVector4
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathLerpSaveData_SVector4& p_Other) const;
	bool operator!=(const SMathLerpSaveData_SVector4& p_Other) const { return !(*this == p_Other); }

	SVector4 m_A; // 0x0
	SVector4 m_B; // 0x10
	float32 m_fT; // 0x20
};

// Size: 0x30
class /*alignas(8)*/ SMathLerpsSaveData_SVector4
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathLerpsSaveData_SVector4& p_Other) const;
	bool operator!=(const SMathLerpsSaveData_SVector4& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SMathLerpSaveData_SVector4> m_aData; // 0x18
};

// Size: 0xC
class /*alignas(4)*/ SMathLerpSaveData_float32
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathLerpSaveData_float32& p_Other) const;
	bool operator!=(const SMathLerpSaveData_float32& p_Other) const { return !(*this == p_Other); }

	float32 m_A; // 0x0
	float32 m_B; // 0x4
	float32 m_fT; // 0x8
};

// Size: 0x30
class /*alignas(8)*/ SMathLerpsSaveData_float32
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathLerpsSaveData_float32& p_Other) const;
	bool operator!=(const SMathLerpsSaveData_float32& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SMathLerpSaveData_float32> m_aData; // 0x18
};

// Size: 0x14
class /*alignas(4)*/ SMathMultiplyDivideSaveData_SVector2
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathMultiplyDivideSaveData_SVector2& p_Other) const;
	bool operator!=(const SMathMultiplyDivideSaveData_SVector2& p_Other) const { return !(*this == p_Other); }

	SVector2 m_fA; // 0x0
	SVector2 m_fB; // 0x8
	bool m_bDivide; // 0x10
	uint8_t _pad11[3] {};
};

// Size: 0x30
class /*alignas(8)*/ SMathMultipliesSaveData_SVector2
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathMultipliesSaveData_SVector2& p_Other) const;
	bool operator!=(const SMathMultipliesSaveData_SVector2& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SMathMultiplyDivideSaveData_SVector2> m_aData; // 0x18
};

// Size: 0x1C
class /*alignas(4)*/ SMathMultiplyDivideSaveData_SVector3
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathMultiplyDivideSaveData_SVector3& p_Other) const;
	bool operator!=(const SMathMultiplyDivideSaveData_SVector3& p_Other) const { return !(*this == p_Other); }

	SVector3 m_fA; // 0x0
	SVector3 m_fB; // 0xC
	bool m_bDivide; // 0x18
	uint8_t _pad19[3] {};
};

// Size: 0x30
class /*alignas(8)*/ SMathMultipliesSaveData_SVector3
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathMultipliesSaveData_SVector3& p_Other) const;
	bool operator!=(const SMathMultipliesSaveData_SVector3& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SMathMultiplyDivideSaveData_SVector3> m_aData; // 0x18
};

// Size: 0x24
class /*alignas(4)*/ SMathMultiplyDivideSaveData_SVector4
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathMultiplyDivideSaveData_SVector4& p_Other) const;
	bool operator!=(const SMathMultiplyDivideSaveData_SVector4& p_Other) const { return !(*this == p_Other); }

	SVector4 m_fA; // 0x0
	SVector4 m_fB; // 0x10
	bool m_bDivide; // 0x20
	uint8_t _pad21[3] {};
};

// Size: 0x30
class /*alignas(8)*/ SMathMultipliesSaveData_SVector4
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathMultipliesSaveData_SVector4& p_Other) const;
	bool operator!=(const SMathMultipliesSaveData_SVector4& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SMathMultiplyDivideSaveData_SVector4> m_aData; // 0x18
};

// Size: 0xC
class /*alignas(4)*/ SMathMultiplyDivideSaveData_float32
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathMultiplyDivideSaveData_float32& p_Other) const;
	bool operator!=(const SMathMultiplyDivideSaveData_float32& p_Other) const { return !(*this == p_Other); }

	float32 m_fA; // 0x0
	float32 m_fB; // 0x4
	bool m_bDivide; // 0x8
	uint8_t _pad9[3] {};
};

// Size: 0x30
class /*alignas(8)*/ SMathMultipliesSaveData_float32
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMathMultipliesSaveData_float32& p_Other) const;
	bool operator!=(const SMathMultipliesSaveData_float32& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SMathMultiplyDivideSaveData_float32> m_aData; // 0x18
};

// Size: 0x8
class /*alignas(4)*/ SShatterShardSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SShatterShardSaveData& p_Other) const;
	bool operator!=(const SShatterShardSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_nShardIndex; // 0x0
	bool m_bIsVisible; // 0x4
	bool m_bHasBody; // 0x5
	uint8_t _pad6[2] {};
};

// Size: 0x20
class /*alignas(4)*/ SShatterShardTransformSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SShatterShardTransformSaveData& p_Other) const;
	bool operator!=(const SShatterShardTransformSaveData& p_Other) const { return !(*this == p_Other); }

	SVector4 m_vBoneRotation; // 0x0
	SVector4 m_vBonePosition; // 0x10
};

// Size: 0x60
class /*alignas(8)*/ SShatterSystemSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SShatterSystemSaveData& p_Other) const;
	bool operator!=(const SShatterSystemSaveData& p_Other) const { return !(*this == p_Other); }

	SVector4 m_vRotation; // 0x0
	SVector4 m_vPosition; // 0x10
	TArray<SShatterShardTransformSaveData> m_aShardTransforms; // 0x20
	TArray<SShatterShardSaveData> m_aShardsData; // 0x38
	bool m_bEnabled; // 0x50
	uint8_t _pad51[3] {};
	uint32 m_nShatterSteps; // 0x54
	uint32 m_nCoreIndex; // 0x58
	bool m_bCoreHasBody; // 0x5C
	bool m_bIsCoreKinematic; // 0x5D
	bool m_bIsInitialCoreActive; // 0x5E
	uint8_t _pad5F[1] {};
};

// Size: 0x30
class /*alignas(8)*/ SShatterSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SShatterSaveData& p_Other) const;
	bool operator!=(const SShatterSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SShatterSystemSaveData> m_aData; // 0x18
};

// Size: 0x2
class /*alignas(1)*/ SShotListenerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SShotListenerSaveData& p_Other) const;
	bool operator!=(const SShotListenerSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
	bool m_bNPCShotProcessed; // 0x1
};

// Size: 0x30
class /*alignas(8)*/ SShotListenersSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SShotListenersSaveData& p_Other) const;
	bool operator!=(const SShotListenersSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SShotListenerSaveData> m_aData; // 0x18
};

// Size: 0x8
class /*alignas(4)*/ SItsATrapSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SItsATrapSaveData& p_Other) const;
	bool operator!=(const SItsATrapSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
	uint8_t _pad1[3] {};
	float32 m_fTimer; // 0x4
};

// Size: 0x30
class /*alignas(8)*/ STrapsSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STrapsSaveData& p_Other) const;
	bool operator!=(const STrapsSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SItsATrapSaveData> m_aData; // 0x18
};

// Size: 0x18
class /*alignas(8)*/ SVIPEvacuationNodeSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVIPEvacuationNodeSaveData& p_Other) const;
	bool operator!=(const SVIPEvacuationNodeSaveData& p_Other) const { return !(*this == p_Other); }

	float32 m_fPenaltyMultiplier; // 0x0
	float32 m_fPenaltyDuration; // 0x4
	ZGameTime m_tPenalty; // 0x8
	bool m_bIsEnabled; // 0x10
	bool m_compromisedOnEnter; // 0x11
	uint8_t _pad12[6] {};
};

// Size: 0x30
class /*alignas(8)*/ SVIPEvacuationNodesSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVIPEvacuationNodesSaveData& p_Other) const;
	bool operator!=(const SVIPEvacuationNodesSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SVIPEvacuationNodeSaveData> m_aData; // 0x18
};

// Size: 0x2
class /*alignas(1)*/ SVolumeTriggerListenerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVolumeTriggerListenerSaveData& p_Other) const;
	bool operator!=(const SVolumeTriggerListenerSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bColliding; // 0x0
	bool m_bInternalEnabled; // 0x1
};

// Size: 0x30
class /*alignas(8)*/ SVolumeTriggersSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVolumeTriggersSaveData& p_Other) const;
	bool operator!=(const SVolumeTriggersSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SVolumeTriggerListenerSaveData> m_aData; // 0x18
};

// Size: 0x4B0
class /*alignas(8)*/ SGameEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGameEntitySaveData& p_Other) const;
	bool operator!=(const SGameEntitySaveData& p_Other) const { return !(*this == p_Other); }

	SDoorsSaveData m_DoorData; // 0x0
	SShatterSaveData m_ShatterData; // 0x30
	SItemsSaveData m_ItemsData; // 0x60
	SVolumeTriggersSaveData m_VolumeTriggersData; // 0x90
	SMathMultipliesSaveData_float32 m_MathMultipliesData_float32; // 0xC0
	SMathMultipliesSaveData_SVector2 m_MathMultipliesData_Vector2; // 0xF0
	SMathMultipliesSaveData_SVector3 m_MathMultipliesData_Vector3; // 0x120
	SMathMultipliesSaveData_SVector4 m_MathMultipliesData_Vector4; // 0x150
	SShotListenersSaveData m_ShotListenersData; // 0x180
	STrapsSaveData m_TrapsData; // 0x1B0
	SActorProxiesSaveData m_ActorProxiesData; // 0x1E0
	SActorStandInEntitiesSaveData m_ActorStandInEntitiesData; // 0x210
	SActorBoneAttachmentsSaveData m_ActorBoneAttachmentsData; // 0x240
	SActorKeywordProxiesSaveData m_ActorKeywordProxiesData; // 0x270
	SItemKeywordProxiesSaveData m_ItemKeywordProxiesData; // 0x2A0
	SLampCoreSaveData m_LampCoreData; // 0x2D0
	SVIPEvacuationNodesSaveData m_VIPEvacuationNodesData; // 0x300
	SCollisionControllerAspectsSaveData m_CollisionControllerAspectsData; // 0x330
	SBodyContainersSaveData m_BodyContainersData; // 0x360
	SMathLerpsSaveData_float32 m_MathLerpsData_float32; // 0x390
	SMathLerpsSaveData_SVector2 m_MathLerpsData_SVector2; // 0x3C0
	SMathLerpsSaveData_SVector3 m_MathLerpsData_SVector3; // 0x3F0
	SMathLerpsSaveData_SVector4 m_MathLerpsData_SVector4; // 0x420
	SMathLerpsSaveData_SColorRGB m_MathLerpsData_SColorRGB; // 0x450
	SMathLerpsSaveData_SColorRGBA m_MathLerpsData_SColorRGBA; // 0x480
};

// Size: 0x8
class /*alignas(4)*/ SKeywordSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SKeywordSaveData& p_Other) const;
	bool operator!=(const SKeywordSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_HolderSaveableId; // 0x0
	int32 m_KeywordID; // 0x4
};

// Size: 0x30
class /*alignas(8)*/ SGameKeywordManagerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGameKeywordManagerSaveData& p_Other) const;
	bool operator!=(const SGameKeywordManagerSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SKeywordSaveData> m_aKeywordsData; // 0x0
	TArray<ZString> m_aKeywordStringData; // 0x18
};

// Size: 0x4
enum class eAmmoType : int32_t
{
	eAmmoGun = 0,
	eAmmoRevolver = 1,
	eAmmoSMG = 2,
	eAmmoRifle = 3,
	eAmmoShotgun = 4,
	eAmmoSniper = 5,
	eAmmoMG = 6,
	eAmmoRPG = 7,
	eAmmoFake = 8,
	eAmmoLightPistol = 9,
	eUnknownAmmoType = 10,
};

// Size: 0x4
enum class eItemType : int32_t
{
	eCC_FireExtinguisher_01 = 0,
	eCC_Knife = 10,
	eCC_Axe = 20,
	eCC_PetrolCan = 30,
	eCC_Shovel = 40,
	eCC_Hammer = 50,
	eCC_Cleaver = 60,
	eCC_AntitankMine = 70,
	eCC_C4Brick = 80,
	eCC_RemoteExplosive = 90,
	eDetonator = 100,
	eCC_Wrench = 110,
	eCC_Dildo = 120,
	eCC_Bottle = 130,
	eCC_Saw = 140,
	eCC_Screwdriver = 150,
	eCC_MetalPipe = 160,
	eCC_Gavel = 170,
	eCC_Radio = 180,
	eCC_Bong = 190,
	eCC_Statue_Bust_A = 200,
	eGun_44AutoMag = 210,
	eGun_44AutoMagSilenced = 220,
	eGun_Derringer = 230,
	eGun_Glock = 240,
	eGun_GlockDirty = 250,
	eGun_GlockSilenced = 260,
	eGun_HardBaller_01 = 270,
	eGun_HardBallerSilenced = 280,
	eGun_Sig226 = 290,
	eGun_Sig226Silenced = 300,
	eGun_Sphinx3000 = 310,
	eGun_Taurus24_7 = 320,
	eGun_Taurus24_7Silenced = 330,
	eGun_Spotter = 340,
	eOther_MG = 350,
	eOther_RPG = 360,
	eRevolver_PoliceRevolver = 370,
	eRevolver_Snubnosed = 380,
	eRevolver_Taurus = 390,
	eRifle_HK416 = 400,
	eRifle_HK416Scope = 410,
	eRifle_HK416Silenced = 420,
	eRifle_PumpRifle = 430,
	eRifle_SG552 = 440,
	eRifle_SG552Scope = 450,
	eShotgun_M500 = 460,
	eShotgun_M500New = 470,
	eSMG_HK_UMP = 480,
	eSMG_HK_UMPFlashlight = 490,
	eSMG_HK_UMPScope = 500,
	eSMG_HK_UMPSilenced = 510,
	eSMG_TMP = 520,
	eSniper_AS50 = 530,
	eSniper_Remington700 = 540,
	eSniper_SakoTRG = 550,
	eSniper_SakoTRGSilenced = 560,
	eItemAmmo = 570,
	eCC_FiberWire = 580,
	eOther_ZippoLighter = 590,
	eOther_Keycard_A = 600,
	eOther_SecurityTape = 610,
	eCC_PowerCord = 620,
	eCC_PoliceBaton = 630,
	eCC_Scissor = 640,
	eOther_ContractEnvelope = 650,
	eItemIrrelevantWeapon = 660,
	eCC_BaseballBat = 670,
	eCC_GlassShiv = 680,
	eCC_PoolCue = 690,
	eCC_Rake = 700,
	eCC_ToyCar = 710,
	eCC_Crutch = 720,
	eCC_Guitar = 730,
	eCC_Iron = 740,
	eRifle_Beretta_ARX160 = 760,
	eShotgun_Spas12 = 800,
	eShotgun_Spas12_Compact = 810,
	eShotgun_Silenced = 830,
	eSMG_AK74u = 860,
	eSMG_STK = 880,
	eDLC_TEST_FireArm_01 = 900,
	eDLC_TEST_FireArm_02 = 901,
	eDLC_TEST_Prop_01 = 902,
	eDLC_TEST_Prop_02 = 903,
	eHotSauceBarrel = 910,
	eOther_GenericPickup = 920,
	eCC_SledgeHammer = 921,
	eCC_Katana = 922,
	eCC_Brick = 923,
	cCC_Book_A = 924,
	eSyringe_Lethal = 931,
	eSyringe_Sedative = 932,
	eSyringe_Emetic = 933,
	eUnknownItemType = 1337,
};

// Size: 0x20
class /*alignas(8)*/ SGameStatsWeapon
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGameStatsWeapon& p_Other) const;
	bool operator!=(const SGameStatsWeapon& p_Other) const { return !(*this == p_Other); }

	ZRepositoryID m_WeaponRepositoryID; // 0x0
	eItemType m_eItemWeapon; // 0x10
	EWeaponSpecialSituation m_eSpecialSituation; // 0x14
	eAmmoType m_eAmmoType; // 0x18
	uint8_t _pad1C[4] {};
};

// Size: 0xC
class /*alignas(4)*/ STimerEntityCommandSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STimerEntityCommandSaveData& p_Other) const;
	bool operator!=(const STimerEntityCommandSaveData& p_Other) const { return !(*this == p_Other); }

	ETimerEntityCommandType m_eType; // 0x0
	uint32 m_rEntity; // 0x4
	float32 m_fInterval; // 0x8
};

// Size: 0xC
class /*alignas(4)*/ STimerEntityStateSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STimerEntityStateSaveData& p_Other) const;
	bool operator!=(const STimerEntityStateSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rEntity; // 0x0
	float32 m_fNextEventTime; // 0x4
	bool m_bPending; // 0x8
	uint8_t _pad9[3] {};
};

// Size: 0x48
class /*alignas(8)*/ SGameTimersSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGameTimersSaveData& p_Other) const;
	bool operator!=(const SGameTimersSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<STimerEntityCommandSaveData> m_aTimerEntityCommands; // 0x0
	TArray<STimerEntityStateSaveData> m_aTimerEntityState; // 0x18
	TArray<uint32> m_aPendingTimers; // 0x30
};

// Size: 0xC
class /*alignas(4)*/ SGateSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGateSaveData& p_Other) const;
	bool operator!=(const SGateSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rEntity; // 0x0
	bool m_bIsOpen; // 0x4
	uint8_t _pad5[3] {};
	float32 m_fOpenFraction; // 0x8
};

// Size: 0x1C
class /*alignas(4)*/ SLightSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLightSaveData& p_Other) const;
	bool operator!=(const SLightSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rEntity; // 0x0
	SColorRGB m_DiffuseColor; // 0x4
	float32 m_fDiffusePower; // 0x10
	float32 m_fAspectXByY_Actual; // 0x14
	bool m_bVisible; // 0x18
	uint8_t _pad19[3] {};
};

// Size: 0x14
class /*alignas(4)*/ SParticleEmitterSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SParticleEmitterSaveData& p_Other) const;
	bool operator!=(const SParticleEmitterSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rEntity; // 0x0
	bool m_bIsActivated; // 0x4
	bool m_bIsVisible; // 0x5
	uint8_t _pad6[2] {};
	float32 m_fEmissionTimeLeft; // 0x8
	float32 m_fEmissionTimeFraction; // 0xC
	float32 m_fEmissionCntLeft; // 0x10
};

// Size: 0x88
class /*alignas(4)*/ SPostfilterParametersSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SPostfilterParametersSaveData& p_Other) const;
	bool operator!=(const SPostfilterParametersSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rEntity; // 0x0
	bool m_bDepthOfFieldEnabled; // 0x4
	uint8_t _pad5[3] {};
	float32 m_fDepthOfFieldBlurriness; // 0x8
	bool m_bRadialBlurEnabled; // 0xC
	uint8_t _padD[3] {};
	float32 m_fRadialBlurriness; // 0x10
	SVector2 m_vRadialBlurCenter; // 0x14
	float32 m_fRadialBlurStart; // 0x1C
	bool m_bSpatialBlurEnabled; // 0x20
	uint8_t _pad21[3] {};
	float32 m_fSpatialBlurriness; // 0x24
	SVector3 m_vSpatialBlurCenter; // 0x28
	float32 m_fSpatialBlurStart; // 0x34
	float32 m_fSpatialBlurFade; // 0x38
	bool m_bDistortionWobbleEnabled; // 0x3C
	uint8_t _pad3D[3] {};
	float32 m_fDistortionWobbleScale; // 0x40
	SVector2 m_vDistortionWobbleWaveLength; // 0x44
	SVector2 m_vDistortionWobbleSpeed; // 0x4C
	bool m_bDistortionWobbleUseRealTime; // 0x54
	bool m_bHDRActive; // 0x55
	bool m_bHDREnabled; // 0x56
	uint8_t _pad57[1] {};
	SVector2 m_vHDRAdaptationSpeed; // 0x58
	SVector2 m_vHDRAdaptationLuminanceMinMax; // 0x60
	SVector2 m_vHDRAdaptationMiddleGrayMinMax; // 0x68
	float32 m_fHDRWhitePoint; // 0x70
	float32 m_fHDRBrightPassThreshold; // 0x74
	float32 m_fHDRBrightPassMaxPercentage; // 0x78
	SColorRGB m_HDRColorTint; // 0x7C
};

// Size: 0xC
class /*alignas(4)*/ SRenderMaterialSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SRenderMaterialSaveData& p_Other) const;
	bool operator!=(const SRenderMaterialSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rEntity; // 0x0
	uint32 m_nDynamicParametersOffset; // 0x4
	bool m_bActive; // 0x8
	uint8_t _pad9[3] {};
};

// Size: 0xA8
class /*alignas(8)*/ SGameplayRenderablesSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGameplayRenderablesSaveData& p_Other) const;
	bool operator!=(const SGameplayRenderablesSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SLightSaveData> m_aLightData; // 0x0
	TArray<SRenderMaterialSaveData> m_aMaterialData; // 0x18
	TArray<SParticleEmitterSaveData> m_aParticleData; // 0x30
	TArray<SBoneAttachSaveData> m_aBoneAttachData; // 0x48
	TArray<SPostfilterParametersSaveData> m_aPostFilterParametersData; // 0x60
	TArray<SGateSaveData> m_aGateData; // 0x78
	TArray<uint8> m_aDynamicParametersData; // 0x90
};

// Size: 0x80
class /*alignas(16)*/ SGetHelpGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGetHelpGroupSaveData& p_Other) const;
	bool operator!=(const SGetHelpGroupSaveData& p_Other) const { return !(*this == p_Other); }

	float4 m_vLastKnownTargetPosition; // 0x0
	uint16 m_rReturnNode; // 0x10
	uint8_t _pad12[6] {};
	TArray<uint16> m_blocked; // 0x18
	bool m_bReportingToHitman; // 0x30
	bool m_bStartedReportDialog; // 0x31
	bool m_bMultipleBodies; // 0x32
	bool m_bGetHelpOrderCompleted; // 0x33
	bool m_bDoneReporting; // 0x34
	uint8_t _pad35[3] {};
	ZGameTime m_tGetHelpCompleted; // 0x38
	SFSMSaveData m_fsmState; // 0x40
	EDisturbanceType m_type; // 0x58
	uint32 m_target; // 0x5C
	uint32 m_pReporter; // 0x60
	uint32 m_pGuard; // 0x64
	TArray<uint32> m_additionalGuards; // 0x68
};

// Size: 0x8
class /*alignas(4)*/ SGetHelpOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGetHelpOrderSaveData& p_Other) const;
	bool operator!=(const SGetHelpOrderSaveData& p_Other) const { return !(*this == p_Other); }

	EAISharedEventType m_helpType; // 0x0
	uint32 m_rInitialGuard; // 0x4
};

// Size: 0x28
class /*alignas(8)*/ SHelpingActorRequestSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHelpingActorRequestSaveData& p_Other) const;
	bool operator!=(const SHelpingActorRequestSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aCandidates; // 0x0
	SVector3 m_vLocation; // 0x18
	uint8_t _pad24[4] {};
};

// Size: 0x8
class /*alignas(4)*/ SHelpingActorSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHelpingActorSaveData& p_Other) const;
	bool operator!=(const SHelpingActorSaveData& p_Other) const { return !(*this == p_Other); }

	int32 m_nLocationKnowledgeIndex; // 0x0
	uint32 m_rActor; // 0x4
};

// Size: 0x30
class /*alignas(8)*/ SGetHelpServiceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGetHelpServiceSaveData& p_Other) const;
	bool operator!=(const SGetHelpServiceSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SHelpingActorSaveData> m_aHelpingActors; // 0x0
	TArray<SHelpingActorRequestSaveData> m_aHelpingActorRequests; // 0x18
};

// Size: 0xC
class /*alignas(4)*/ SGuardBodySituationMemberSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGuardBodySituationMemberSaveData& p_Other) const;
	bool operator!=(const SGuardBodySituationMemberSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bHasThingsTodo; // 0x0
	uint8_t _pad1[3] {};
	uint32 m_rDeadBody; // 0x4
	uint32 m_rBodybag; // 0x8
};

// Size: 0x4
class /*alignas(1)*/ SGuardBodySituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGuardBodySituationSaveData& p_Other) const;
	bool operator!=(const SGuardBodySituationSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bBystanderFieldsFailed; // 0x0
	bool m_bGuardInSituation; // 0x1
	bool m_bLastGetHelpGroupFailed; // 0x2
	bool m_bSomeoneCanSeeBody; // 0x3
};

// Size: 0x18
class /*alignas(8)*/ SGuardPointGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGuardPointGroupSaveData& p_Other) const;
	bool operator!=(const SGuardPointGroupSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bGroupEngaged; // 0x0
	uint8_t _pad1[3] {};
	uint32 m_combatZone; // 0x4
	uint32 m_guardPointEntity; // 0x8
	uint8_t _padC[4] {};
	ZGameTime m_tGroupTime; // 0x10
};

// Size: 0x8
class /*alignas(4)*/ SGuardPointOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SGuardPointOrderSaveData& p_Other) const;
	bool operator!=(const SGuardPointOrderSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_guardPoint; // 0x0
	bool m_walkOnly; // 0x4
	uint8_t _pad5[3] {};
};

// Size: 0x36
class /*alignas(1)*/ SHM5CrippleBoxSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHM5CrippleBoxSaveData& p_Other) const;
	bool operator!=(const SHM5CrippleBoxSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bInSequence; // 0x0
	bool m_bAllowBaseMovements; // 0x1
	bool m_bSequenceAllowCamera; // 0x2
	bool m_bLedges; // 0x3
	bool m_bShootingBallet; // 0x4
	bool m_bCover; // 0x5
	bool m_bTakeClothes; // 0x6
	bool m_bLadder; // 0x7
	bool m_bPullVictimFromWindow; // 0x8
	bool m_bFiberWireKill; // 0x9
	bool m_bClimbWindow; // 0xA
	bool m_bThrowBodyOverRail; // 0xB
	bool m_bDumpBody; // 0xC
	bool m_bOperateCPDoor; // 0xD
	bool m_bHideInCloset; // 0xE
	bool m_bCloseCombat; // 0xF
	bool m_bVentilatorShaft; // 0x10
	bool m_bGrabVictim; // 0x11
	bool m_bPushVictimThroughWindowAndRail; // 0x12
	bool m_bKickVictimOverLedge; // 0x13
	bool m_bPickupItem; // 0x14
	bool m_bDropItem; // 0x15
	bool m_bDragBody; // 0x16
	bool m_bThrowItem; // 0x17
	bool m_bPlaceItem; // 0x18
	bool m_bRun; // 0x19
	bool m_bTurn; // 0x1A
	bool m_bSneak; // 0x1B
	bool m_bNoSnapSneak; // 0x1C
	bool m_bStandUp; // 0x1D
	bool m_bFastWalk; // 0x1E
	bool m_bMovementAllowed; // 0x1F
	bool m_bIdleAnimationsAllowed; // 0x20
	bool m_bItems; // 0x21
	bool m_bCanHolsterItems; // 0x22
	bool m_bCoverTakedown; // 0x23
	bool m_bCoverScale; // 0x24
	bool m_bCoverToCover; // 0x25
	bool m_bCloseCombatSnapNeck; // 0x26
	bool m_bCloseCombatChoke; // 0x27
	bool m_bCloseCombatPistolFinish; // 0x28
	bool m_bCloseCombatProps; // 0x29
	bool m_bCloseCombatStandart; // 0x2A
	bool m_bCloseCombatFakeSwing; // 0x2B
	bool m_bGameCameraAutoAlign; // 0x2C
	bool m_bInstinct; // 0x2D
	bool m_bCanCancelShootingBallet; // 0x2E
	bool m_bBlindFire; // 0x2F
	bool m_bAim; // 0x30
	bool m_bHairTrigger; // 0x31
	bool m_bFire; // 0x32
	bool m_bOpenLogbook; // 0x33
	bool m_bOpenPauseMenu; // 0x34
	bool m_bActivatedByPinSignal; // 0x35
};

// Size: 0x58
class /*alignas(8)*/ SHUDPromptDisplayInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHUDPromptDisplayInfo& p_Other) const;
	bool operator!=(const SHUDPromptDisplayInfo& p_Other) const { return !(*this == p_Other); }

	bool m_bActive; // 0x0
	uint8_t _pad1[3] {};
	EActionPromptState m_eState; // 0x4
	int32 m_nIconId; // 0x8
	int32 m_eTypeId; // 0xC
	float32 m_fProgress; // 0x10
	float32 m_fDistance; // 0x14
	bool m_bShowWarning; // 0x18
	bool m_bNoActionAvailable; // 0x19
	uint8_t _pad1A[6] {};
	ZString m_sLabel; // 0x20
	ZString m_sDescription; // 0x30
	ZString m_sGlyph; // 0x40
	float32 m_fOpacity; // 0x50
	bool m_bIllegalItem; // 0x54
	bool m_bSuspiciousItem; // 0x55
	uint8_t _pad56[2] {};
};

// Size: 0x18
class /*alignas(8)*/ SHUDPromptDisplayInfoArray_Dummy
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHUDPromptDisplayInfoArray_Dummy& p_Other) const;
	bool operator!=(const SHUDPromptDisplayInfoArray_Dummy& p_Other) const { return !(*this == p_Other); }

	TArray<SHUDPromptDisplayInfo> dummy; // 0x0
};

// Size: 0x4
class /*alignas(4)*/ SHUDTimerControllerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHUDTimerControllerSaveData& p_Other) const;
	bool operator!=(const SHUDTimerControllerSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_pCurrentInstance; // 0x0
};

// Size: 0x4
enum class ZHUDUIRoot_EHUDVisibility : int32_t
{
	eHV_INSTANT_OFF = 0,
	eHV_FADE_OUT = 1,
	eHV_FADE_IN = 2,
	eHV_INSTANT_ON = 3,
};

// Size: 0x4
class /*alignas(4)*/ SHUDVisibilityController2SaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHUDVisibilityController2SaveData& p_Other) const;
	bool operator!=(const SHUDVisibilityController2SaveData& p_Other) const { return !(*this == p_Other); }

	ZHUDUIRoot_EHUDVisibility m_eCurrentRequest; // 0x0
};

// Size: 0x18
class /*alignas(8)*/ SHandleClosetGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHandleClosetGroupSaveData& p_Other) const;
	bool operator!=(const SHandleClosetGroupSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_pProcessingMember; // 0x0
	uint8_t _pad4[4] {};
	ZGameTime m_startTime; // 0x8
	EHandleClosetSpeechState m_SpeechState; // 0x10
	uint8_t _pad14[4] {};
};

// Size: 0x4
enum class ZHeroEscortSituationEntity_EEscortState : int32_t
{
	EES_Idle = 0,
	EES_Evaluate = 1,
	EES_Escorting = 2,
	EES_Intermediate = 3,
	EES_OutOfRange = 4,
};

// Size: 0x1C
class /*alignas(4)*/ SHeroEscortSituationActorStateSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHeroEscortSituationActorStateSaveData& p_Other) const;
	bool operator!=(const SHeroEscortSituationActorStateSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_nID; // 0x0
	bool m_bAllocatedForSituation; // 0x4
	uint8_t _pad5[3] {};
	ZHeroEscortSituationEntity_EEscortState m_eState; // 0x8
	ZHeroEscortSituationEntity_EEscortState m_eStatePrevious; // 0xC
	float32 m_fDistanceToTarget; // 0x10
	uint32 m_rCurrentScreenplay; // 0x14
	uint32 m_rPreferredIntermediateScreenplay; // 0x18
};

// Size: 0x4
class /*alignas(4)*/ SHeroEscortSituationActors
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHeroEscortSituationActors& p_Other) const;
	bool operator!=(const SHeroEscortSituationActors& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
};

// Size: 0x4
enum class ZHeroEscortSituationEntity_ETargetState : int32_t
{
	ETS_Unknown = 0,
	ETS_NoTarget = 1,
	ETS_RunningActBehavior = 2,
	ETS_RunningDummyBehavior = 3,
	ETS_RunningOtherBehavior = 4,
	ETS_Dead = 5,
	ETS_TargetIsHitman = 6,
};

// Size: 0x90
class /*alignas(8)*/ SHeroEscortSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHeroEscortSituationSaveData& p_Other) const;
	bool operator!=(const SHeroEscortSituationSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bActivated; // 0x0
	bool m_bMayEscort; // 0x1
	bool m_bTargetDead; // 0x2
	bool m_bTargetInRange; // 0x3
	bool m_bAllEscortsAreDead; // 0x4
	uint8_t _pad5[3] {};
	SVector3 m_vLastPosition; // 0x8
	bool m_bTargetIsMoving; // 0x14
	uint8_t _pad15[3] {};
	ZHeroEscortSituationEntity_ETargetState m_eTargetState; // 0x18
	EActorEmotionState m_eTargetEmotionState; // 0x1C
	ZActBehaviorEntity_EState m_eTargetActState; // 0x20
	float32 m_fTargetNotMovingTime; // 0x24
	float32 m_fTargetAgitationCooldownTimer; // 0x28
	uint8_t _pad2C[4] {};
	TArray<SHeroEscortSituationActors> m_aAddedActors; // 0x30
	TArray<SHeroEscortSituationActorStateSaveData> m_aStates; // 0x48
	TArray<uint32> m_aEscortActs; // 0x60
	float32 m_fTimeSinceLossOfSight; // 0x78
	uint8_t _pad7C[4] {};
	ZRepositoryID m_RecordedHitmanOutfit; // 0x80
};

// Size: 0x4
class /*alignas(4)*/ SHeroItemActionSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHeroItemActionSaveData& p_Other) const;
	bool operator!=(const SHeroItemActionSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rItem; // 0x0
};

// Size: 0x4
class /*alignas(4)*/ SHeroItemAttachmentSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHeroItemAttachmentSaveData& p_Other) const;
	bool operator!=(const SHeroItemAttachmentSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rItem; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ SHeroStandInSaveState
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHeroStandInSaveState& p_Other) const;
	bool operator!=(const SHeroStandInSaveState& p_Other) const { return !(*this == p_Other); }

	uint32 m_rCurrentSpeakEntity; // 0x0
	bool m_bPaused; // 0x4
	uint8_t _pad5[3] {};
};

// Size: 0xC
class /*alignas(4)*/ SHintEntrySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHintEntrySaveData& p_Other) const;
	bool operator!=(const SHintEntrySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bIsValid; // 0x0
	uint8_t _pad1[3] {};
	uint32 m_hint; // 0x4
	uint32 m_context; // 0x8
};

// Size: 0x30
class /*alignas(8)*/ SHintManagerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHintManagerSaveData& p_Other) const;
	bool operator!=(const SHintManagerSaveData& p_Other) const { return !(*this == p_Other); }

	SHintEntrySaveData m_activeHint; // 0x0
	uint8_t _padC[4] {};
	TArray<SHintEntrySaveData> m_aQueue; // 0x10
	bool m_bIsRunning; // 0x28
	uint8_t _pad29[7] {};
};

// Size: 0x78
class /*alignas(8)*/ SHitmanSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHitmanSaveData& p_Other) const;
	bool operator!=(const SHitmanSaveData& p_Other) const { return !(*this == p_Other); }

	ZRepositoryID m_OutfitID; // 0x0
	int32 m_nOutfitCharset; // 0x10
	int32 m_nOutfitVariation; // 0x14
	float32 m_fHealth; // 0x18
	SVector3 m_vPosition; // 0x1C
	SVector4 m_vRotation; // 0x28
	ZVariant m_Inventory; // 0x38
	ZVariant m_Camera; // 0x48
	EBaseMovementType m_eMovementType; // 0x58
	uint8_t _pad5C[4] {};
	ZVariant m_MovementData; // 0x60
	bool m_bLethalAgilityElementUsed; // 0x70
	bool m_bIsChangingClothes; // 0x71
	uint8_t _pad72[6] {};
};

// Size: 0x10
class /*alignas(8)*/ SHudMissionTimerControllerData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHudMissionTimerControllerData& p_Other) const;
	bool operator!=(const SHudMissionTimerControllerData& p_Other) const { return !(*this == p_Other); }

	ZGameTime m_fScoreGameTimeStart; // 0x0
	bool m_bWasIntroCutFired; // 0x8
	uint8_t _pad9[7] {};
};

// Size: 0x38
class /*alignas(8)*/ SHumanShieldGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SHumanShieldGroupSaveData& p_Other) const;
	bool operator!=(const SHumanShieldGroupSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_pLeader; // 0x0
	uint8_t _pad4[4] {};
	ZGameTime m_tGroupTime; // 0x8
	uint32 m_pVictim; // 0x10
	uint32 m_pRelationship; // 0x14
	EHumanShieldSpeechState m_SpeechState; // 0x18
	int32 m_nPositionMemberIndex; // 0x1C
	uint32 m_positionRequestMember; // 0x20
	uint8_t _pad24[4] {};
	ZGameTime m_tLastPositionRequest; // 0x28
	ZGameTime m_tLastWeaponFiredTime; // 0x30
};

// Size: 0x40
class /*alignas(8)*/ SIntelData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SIntelData& p_Other) const;
	bool operator!=(const SIntelData& p_Other) const { return !(*this == p_Other); }

	ZString m_sHeadline; // 0x0
	ZString m_sBodyHeadline; // 0x10
	ZString m_sBodytext; // 0x20
	ZString m_sImage; // 0x30
};

// Size: 0x18
class /*alignas(8)*/ SIntelDataArray_dummy
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SIntelDataArray_dummy& p_Other) const;
	bool operator!=(const SIntelDataArray_dummy& p_Other) const { return !(*this == p_Other); }

	TArray<SIntelData> dummy; // 0x0
};

// Size: 0x48
class /*alignas(8)*/ SIntelDisplayInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SIntelDisplayInfo& p_Other) const;
	bool operator!=(const SIntelDisplayInfo& p_Other) const { return !(*this == p_Other); }

	int32 index; // 0x0
	bool selected; // 0x4
	bool active; // 0x5
	uint8_t _pad6[2] {};
	ZString headline; // 0x8
	ZString bodyheadline; // 0x18
	ZString text; // 0x28
	ZString img; // 0x38
};

// Size: 0x18
class /*alignas(8)*/ SIntelDisplayInfoArray_dummy
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SIntelDisplayInfoArray_dummy& p_Other) const;
	bool operator!=(const SIntelDisplayInfoArray_dummy& p_Other) const { return !(*this == p_Other); }

	TArray<SIntelDisplayInfo> dummy; // 0x0
};

// Size: 0x18
class /*alignas(8)*/ SIntelListDisplayInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SIntelListDisplayInfo& p_Other) const;
	bool operator!=(const SIntelListDisplayInfo& p_Other) const { return !(*this == p_Other); }

	int32 index; // 0x0
	bool active; // 0x4
	bool newInfo; // 0x5
	uint8_t _pad6[2] {};
	ZString label; // 0x8
};

// Size: 0x18
class /*alignas(8)*/ SIntelListDisplayInfoArray_dummy
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SIntelListDisplayInfoArray_dummy& p_Other) const;
	bool operator!=(const SIntelListDisplayInfoArray_dummy& p_Other) const { return !(*this == p_Other); }

	TArray<SIntelListDisplayInfo> dummy; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ SIntelSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SIntelSaveData& p_Other) const;
	bool operator!=(const SIntelSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rCurrentStage; // 0x0
	bool m_bTracked; // 0x4
	bool m_bUnlocked; // 0x5
	bool m_bRegistered; // 0x6
	bool m_bIsLastTriggered; // 0x7
};

// Size: 0x68
class /*alignas(8)*/ SInteractionIndicatorInstanceData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SInteractionIndicatorInstanceData& p_Other) const;
	bool operator!=(const SInteractionIndicatorInstanceData& p_Other) const { return !(*this == p_Other); }

	int32 m_eState; // 0x0
	int32 m_nIconId; // 0x4
	int32 m_eTypeId; // 0x8
	float32 m_fProgress; // 0xC
	ZString m_sLabel; // 0x10
	ZString m_sDescription; // 0x20
	ZString m_sGlyph; // 0x30
	float32 m_fAnimation; // 0x40
	bool m_bIllegal; // 0x44
	bool m_bNoActionAvailable; // 0x45
	bool m_bInRange; // 0x46
	bool m_bIllegalItem; // 0x47
	bool m_bSuspiciousItem; // 0x48
	bool m_bRotateIndicator; // 0x49
	uint8_t _pad4A[2] {};
	SVector2 m_vPosition; // 0x4C
	SVector3 m_vRotation; // 0x54
	bool m_bNeedDataUpdate; // 0x60
	uint8_t _pad61[7] {};
};

// Size: 0x18
class /*alignas(8)*/ SInteractionIndicatorInstanceDataArray_Dummy
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SInteractionIndicatorInstanceDataArray_Dummy& p_Other) const;
	bool operator!=(const SInteractionIndicatorInstanceDataArray_Dummy& p_Other) const { return !(*this == p_Other); }

	TArray<SInteractionIndicatorInstanceData> dummy; // 0x0
};

// Size: 0xC
class /*alignas(4)*/ SInventoryControllerItemSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SInventoryControllerItemSaveData& p_Other) const;
	bool operator!=(const SInventoryControllerItemSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rItemEntity; // 0x0
	uint32 m_nAmmo; // 0x4
	float32 m_fShootingBalletCooldown; // 0x8
};

// Size: 0x8
class /*alignas(4)*/ SStoredSlotSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SStoredSlotSaveData& p_Other) const;
	bool operator!=(const SStoredSlotSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_iStoredInventorySlotIndex; // 0x0
	uint8 m_iStoreReason; // 0x4
	bool m_bItemsStored; // 0x5
	uint8_t _pad6[2] {};
};

// Size: 0x50
class /*alignas(8)*/ SInventoryControllerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SInventoryControllerSaveData& p_Other) const;
	bool operator!=(const SInventoryControllerSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SInventoryControllerItemSaveData> m_aItems; // 0x0
	uint32 m_nEquippedItemIndex; // 0x18
	uint32 m_nMostRecentItemIndex; // 0x1C
	SStoredSlotSaveData m_StoredSlot; // 0x20
	uint32 m_nAmmoCountGun; // 0x28
	uint32 m_nAmmoCountRevolver; // 0x2C
	uint32 m_nAmmoCountSMG; // 0x30
	uint32 m_nAmmoCountRifle; // 0x34
	uint32 m_nAmmoCountShotgun; // 0x38
	uint32 m_nAmmoCountSniper; // 0x3C
	uint32 m_nAmmoCountMG; // 0x40
	uint32 m_nAmmoCountRPG; // 0x44
	uint32 m_nAmmoCountFake; // 0x48
	uint32 m_nAmmoCountLightPistol; // 0x4C
};

// Size: 0x60
class /*alignas(8)*/ SInventoryItem
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SInventoryItem& p_Other) const;
	bool operator!=(const SInventoryItem& p_Other) const { return !(*this == p_Other); }

	ZString sInstanceId; // 0x0
	ZString sUnlockableId; // 0x10
	ZRepositoryID repositoryId; // 0x20
	TArray<ZRepositoryID> aRepositoryAssetIds; // 0x30
	TArray<ZRepositoryID> aModifierIds; // 0x48
};

// Size: 0x78
class /*alignas(8)*/ SInventoryInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SInventoryInfo& p_Other) const;
	bool operator!=(const SInventoryInfo& p_Other) const { return !(*this == p_Other); }

	TArray<SInventoryItem> m_aPockets; // 0x0
	SInventoryItem m_CarriedItem; // 0x18
};

// Size: 0x110
class /*alignas(8)*/ SInventoryUISlot
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SInventoryUISlot& p_Other) const;
	bool operator!=(const SInventoryUISlot& p_Other) const { return !(*this == p_Other); }

	ZRuntimeResourceID icon; // 0x0
	ZRuntimeResourceID containedIcon; // 0x8
	ZString label; // 0x10
	ZString containedLabel; // 0x20
	ZString description; // 0x30
	TArray<ZString> perks; // 0x40
	bool silencer; // 0x58
	uint8_t _pad59[3] {};
	int32 count; // 0x5C
	int32 ammo; // 0x60
	uint8_t _pad64[4] {};
	ZRepositoryID id; // 0x68
	ZString weaponCategory; // 0x78
	int32 nAmmoRemaining; // 0x88
	int32 nAmmoTotal; // 0x8C
	int32 nAmmoInClip; // 0x90
	int32 nWeaponType; // 0x94
	ZString itemCategory; // 0x98
	ZString itemCategoryLKey; // 0xA8
	ZString containedItemCategory; // 0xB8
	ZString containedItemCategoryLKey; // 0xC8
	ZString inventoryCategoryIcon; // 0xD8
	bool isDroppable; // 0xE8
	bool detectedDuringFrisk; // 0xE9
	uint8_t _padEA[6] {};
	TArray<ZString> actionAndKillTypes; // 0xF0
	bool suspicious; // 0x108
	bool illegal; // 0x109
	bool canReload; // 0x10A
	uint8_t _pad10B[5] {};
};

// Size: 0x38
class /*alignas(8)*/ SInventoryUI
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SInventoryUI& p_Other) const;
	bool operator!=(const SInventoryUI& p_Other) const { return !(*this == p_Other); }

	TArray<SInventoryUISlot> mainslots; // 0x0
	TArray<SInventoryUISlot> otherslots; // 0x18
	int32 selectedIndex; // 0x30
	bool isActionInventory; // 0x34
	uint8_t _pad35[3] {};
};

// Size: 0x4
enum class ZInvestigateDisguiseGroup_EState : int32_t
{
	eInit = 0,
	eGuardBanter = 1,
	eAcknowledge = 2,
	eMain = 3,
	eSearch = 4,
	eMoveback = 5,
	eStandDown = 6,
	eEscalate = 7,
	eDone = 8,
};

// Size: 0xC
class /*alignas(4)*/ ZInvestigateDisguiseGroup_SDialogLines
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZInvestigateDisguiseGroup_SDialogLines& p_Other) const;
	bool operator!=(const ZInvestigateDisguiseGroup_SDialogLines& p_Other) const { return !(*this == p_Other); }

	SActorSoundDefs_EDefinition m_eFirstWarning; // 0x0
	SActorSoundDefs_EDefinition m_eSecondWarning; // 0x4
	SActorSoundDefs_EDefinition m_eThirdWarning; // 0x8
};

// Size: 0x4
enum class ZMoveToOrder_EMoveSpeed : int32_t
{
	MS_AUTO = 0,
	MS_SPRINT = 1,
	MS_JOG = 2,
	MS_WALK = 3,
};

// Size: 0x80
class /*alignas(16)*/ SInvestigateDisguiseGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SInvestigateDisguiseGroupSaveData& p_Other) const;
	bool operator!=(const SInvestigateDisguiseGroupSaveData& p_Other) const { return !(*this == p_Other); }

	ZInvestigateDisguiseGroup_EState m_state; // 0x0
	int32 m_target; // 0x4
	uint32 m_pLeader; // 0x8
	uint32 m_pPendingLeader; // 0xC
	ZGameTime m_tStart; // 0x10
	float32 m_groupAge; // 0x18
	float32 m_fDisguiseFollowTime; // 0x1C
	float32 m_fTargetRunningTime; // 0x20
	uint8_t _pad24[4] {};
	ZGameTime m_tLastWarning; // 0x28
	int32 m_iWarningCount; // 0x30
	ZMoveToOrder_EMoveSpeed m_eLeaderMoveSpeed; // 0x34
	ZGameTime m_tLastEscalateOrder; // 0x38
	ZGameTime m_tLastStandDownOrder; // 0x40
	ZGameTime m_tStartFollow; // 0x48
	float4 m_vOriginalPositionLeader; // 0x50
	ZInvestigateDisguiseGroup_SDialogLines m_dialogLines; // 0x60
	bool m_bLeaderOrderAssigned; // 0x6C
	bool m_bSearchCompleted; // 0x6D
	bool m_bLeaderMovingBack; // 0x6E
	bool m_bWaitingForDistanceStanddown; // 0x6F
	bool m_bFollow; // 0x70
	bool m_bMembersFollow; // 0x71
	bool m_bRunningWarningIssued; // 0x72
	uint8_t _pad73[13] {};
};

// Size: 0x48
class /*alignas(8)*/ SInvestigateWeaponGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SInvestigateWeaponGroupSaveData& p_Other) const;
	bool operator!=(const SInvestigateWeaponGroupSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rTarget; // 0x0
	uint32 m_rReporter; // 0x4
	uint32 m_rInvestigator; // 0x8
	uint32 m_rGuard; // 0xC
	SFSMSaveData m_fsmState; // 0x10
	ZGameTime m_tLastGuardSearch; // 0x28
	TArray<uint32> m_aUnconsciousGuards; // 0x30
};

// Size: 0x38
class /*alignas(8)*/ SItemInstanceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SItemInstanceSaveData& p_Other) const;
	bool operator!=(const SItemInstanceSaveData& p_Other) const { return !(*this == p_Other); }

	ZRepositoryID m_repositoryId; // 0x0
	ZString m_sOnlineInstanceId; // 0x10
	TArray<ZRepositoryID> m_aItemModifierIds; // 0x20
};

// Size: 0xC
class /*alignas(4)*/ SItemOnBackUIData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SItemOnBackUIData& p_Other) const;
	bool operator!=(const SItemOnBackUIData& p_Other) const { return !(*this == p_Other); }

	ZRuntimeResourceID icon; // 0x0
	bool bHasItemToShow; // 0x8
	bool bSuspicious; // 0x9
	bool bIllegal; // 0xA
	uint8_t _padB[1] {};
};

// Size: 0x1
class /*alignas(1)*/ SItemSpawnerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SItemSpawnerSaveData& p_Other) const;
	bool operator!=(const SItemSpawnerSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bItemUpdateTransformChange; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ SItemStorageSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SItemStorageSaveData& p_Other) const;
	bool operator!=(const SItemStorageSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_ContainedItem; // 0x0
	uint32 m_Storage; // 0x4
};

// Size: 0x4
class /*alignas(2)*/ SItemWeaponSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SItemWeaponSaveData& p_Other) const;
	bool operator!=(const SItemWeaponSaveData& p_Other) const { return !(*this == p_Other); }

	uint16 m_nBulletsInMagazine; // 0x0
	uint16 m_nExtraMagazineBullets; // 0x2
};

// Size: 0x2
class /*alignas(1)*/ SLayerBehaviorConfiguration
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLayerBehaviorConfiguration& p_Other) const;
	bool operator!=(const SLayerBehaviorConfiguration& p_Other) const { return !(*this == p_Other); }

	bool m_bTrigger; // 0x0
	bool m_bCollector; // 0x1
};

// Size: 0x4
enum class ZLeadEscortSituationEntity_EEscortState : int32_t
{
	EES_Idle = 0,
	EES_Evaluate = 1,
	EES_Escorting = 2,
	EES_Intermediate = 3,
};

// Size: 0x1C
class /*alignas(4)*/ SLeadEscortSituationActorStateSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLeadEscortSituationActorStateSaveData& p_Other) const;
	bool operator!=(const SLeadEscortSituationActorStateSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_nID; // 0x0
	bool m_bAllocatedForSituation; // 0x4
	uint8_t _pad5[3] {};
	ZLeadEscortSituationEntity_EEscortState m_eState; // 0x8
	ZLeadEscortSituationEntity_EEscortState m_eStatePrevious; // 0xC
	float32 m_fDistanceToTarget; // 0x10
	uint32 m_rCurrentScreenplay; // 0x14
	uint32 m_rPreferredIntermediateScreenplay; // 0x18
};

// Size: 0x4
class /*alignas(4)*/ SLeadEscortSituationActors
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLeadEscortSituationActors& p_Other) const;
	bool operator!=(const SLeadEscortSituationActors& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
};

// Size: 0x4
enum class ZLeadEscortSituationEntity_ETargetState : int32_t
{
	ETS_Unknown = 0,
	ETS_NoTarget = 1,
	ETS_RunningActBehavior = 2,
	ETS_RunningDummyBehavior = 3,
	ETS_RunningOtherBehavior = 4,
	ETS_Dead = 5,
	ETS_TargetIsHitman = 6,
};

// Size: 0x78
class /*alignas(8)*/ SLeadEscortSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLeadEscortSituationSaveData& p_Other) const;
	bool operator!=(const SLeadEscortSituationSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bActivated; // 0x0
	bool m_bMayEscort; // 0x1
	bool m_bTargetDead; // 0x2
	bool m_bTargetInRange; // 0x3
	bool m_bAllEscortsAreDead; // 0x4
	uint8_t _pad5[3] {};
	SVector3 m_vLastPosition; // 0x8
	bool m_bTargetIsMoving; // 0x14
	uint8_t _pad15[3] {};
	ZLeadEscortSituationEntity_ETargetState m_eTargetState; // 0x18
	EActorEmotionState m_eTargetEmotionState; // 0x1C
	ZActBehaviorEntity_EState m_eTargetActState; // 0x20
	float32 m_fTargetNotMovingTime; // 0x24
	float32 m_fTargetAgitationCooldownTimer; // 0x28
	uint8_t _pad2C[4] {};
	TArray<SLeadEscortSituationActors> m_aAddedActors; // 0x30
	TArray<SLeadEscortSituationActorStateSaveData> m_aStates; // 0x48
	TArray<uint32> m_aEscortActs; // 0x60
};

// Size: 0x28
class /*alignas(8)*/ SLevelReferenceableEntitieSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLevelReferenceableEntitieSaveData& p_Other) const;
	bool operator!=(const SLevelReferenceableEntitieSaveData& p_Other) const { return !(*this == p_Other); }

	ZString m_sSceneResource; // 0x0
	TArray<ZString> m_aAdditionalBrickResources; // 0x10
};

// Size: 0x18
class /*alignas(8)*/ SObjetiveSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SObjetiveSaveData& p_Other) const;
	bool operator!=(const SObjetiveSaveData& p_Other) const { return !(*this == p_Other); }

	IContractObjective_Type m_eType; // 0x0
	uint8_t _pad4[4] {};
	ZVariant m_SaveData; // 0x8
};

// Size: 0x10
class /*alignas(4)*/ SSoundAmbienceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSoundAmbienceSaveData& p_Other) const;
	bool operator!=(const SSoundAmbienceSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rCurrentAmbience; // 0x0
	uint32 m_rCurrentGate; // 0x4
	float32 m_fTransitionAmount; // 0x8
	bool m_bEnteredFromSide0; // 0xC
	bool m_bInTransition; // 0xD
	uint8_t _padE[2] {};
};

// Size: 0x1B0
class /*alignas(8)*/ SLevelSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLevelSaveData& p_Other) const;
	bool operator!=(const SLevelSaveData& p_Other) const { return !(*this == p_Other); }

	int64 m_nGameTime; // 0x0
	int64 m_nGameTimePrev; // 0x8
	int64 m_nGameTimeDelta; // 0x10
	ZString m_sScene; // 0x18
	ZString m_sLocationId; // 0x28
	ZString m_sContractId; // 0x38
	ZString m_sContractSessionId; // 0x48
	ZString m_sLastEventToken; // 0x58
	ZRepositoryID m_EnabledEntranceId; // 0x68
	ZRepositoryID m_StartupDisguiseId; // 0x78
	ZVariant m_contractData; // 0x88
	SInventoryInfo m_aStartupInventory; // 0x98
	SAgencyPickupInfo m_aStartupAgencyPickupSelection; // 0x110
	TArray<SObjetiveSaveData> m_aObjectives; // 0x150
	TArray<ZVariant> m_aGameChangers; // 0x168
	SSoundAmbienceSaveData m_SoundAmbienceData; // 0x180
	SChallengesSaveData m_ChallengesSaveData; // 0x190
	int32 m_nSaveGameLimit; // 0x1A8
	uint8_t _pad1AC[4] {};
};

// Size: 0x2
class /*alignas(1)*/ SLightFlickerEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLightFlickerEntitySaveData& p_Other) const;
	bool operator!=(const SLightFlickerEntitySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bLightOn; // 0x0
	bool m_bFlickerOn; // 0x1
};

// Size: 0x10
class /*alignas(8)*/ SLoadRuntimeResourceResult
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLoadRuntimeResourceResult& p_Other) const;
	bool operator!=(const SLoadRuntimeResourceResult& p_Other) const { return !(*this == p_Other); }

	ZString sFilePath; // 0x0
};

// Size: 0x60
class /*alignas(8)*/ SLocalizedVideoData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLocalizedVideoData& p_Other) const;
	bool operator!=(const SLocalizedVideoData& p_Other) const { return !(*this == p_Other); }

	TArray<ZString> AudioLanguages; // 0x0
	TArray<ZRuntimeResourceID> VideoRidsPerAudioLanguage; // 0x18
	TArray<ZString> SubtitleLanguages; // 0x30
	TArray<ZString> SubtitleMarkupsPerLanguage; // 0x48
};

// Size: 0x18
class /*alignas(8)*/ SLockdownManagerAIZoneSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLockdownManagerAIZoneSaveData& p_Other) const;
	bool operator!=(const SLockdownManagerAIZoneSaveData& p_Other) const { return !(*this == p_Other); }

	ZGameTime m_tExpiry; // 0x0
	ZGameTime m_tExpiryHeroOutside; // 0x8
	uint32 m_rZone; // 0x10
	uint8_t _pad14[4] {};
};

// Size: 0x18
class /*alignas(8)*/ SLockdownManagerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SLockdownManagerSaveData& p_Other) const;
	bool operator!=(const SLockdownManagerSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SLockdownManagerAIZoneSaveData> m_aAIZones; // 0x0
};

// Size: 0x20
class /*alignas(8)*/ SManHuntServiceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SManHuntServiceSaveData& p_Other) const;
	bool operator!=(const SManHuntServiceSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint16> m_rGuardNodes; // 0x0
	uint16 m_rInitialNode; // 0x18
	uint8_t _pad1A[2] {};
	float32 m_fGuardSightRange; // 0x1C
};

// Size: 0x18
class /*alignas(8)*/ SMapMarkerData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMapMarkerData& p_Other) const;
	bool operator!=(const SMapMarkerData& p_Other) const { return !(*this == p_Other); }

	TArray<SVector2> pathPoints; // 0x0
};

// Size: 0x24
class /*alignas(4)*/ SMatrix33
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMatrix33& p_Other) const;
	bool operator!=(const SMatrix33& p_Other) const { return !(*this == p_Other); }

	SVector3 XAxis; // 0x0
	SVector3 YAxis; // 0xC
	SVector3 ZAxis; // 0x18
};

// Size: 0x30
class /*alignas(4)*/ SMatrix43
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMatrix43& p_Other) const;
	bool operator!=(const SMatrix43& p_Other) const { return !(*this == p_Other); }

	SVector3 XAxis; // 0x0
	SVector3 YAxis; // 0xC
	SVector3 ZAxis; // 0x18
	SVector3 Trans; // 0x24
};

// Size: 0x40
class /*alignas(4)*/ SMatrix44
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMatrix44& p_Other) const;
	bool operator!=(const SMatrix44& p_Other) const { return !(*this == p_Other); }

	float32 m11; // 0x0
	float32 m12; // 0x4
	float32 m13; // 0x8
	float32 m14; // 0xC
	float32 m21; // 0x10
	float32 m22; // 0x14
	float32 m23; // 0x18
	float32 m24; // 0x1C
	float32 m31; // 0x20
	float32 m32; // 0x24
	float32 m33; // 0x28
	float32 m34; // 0x2C
	float32 m41; // 0x30
	float32 m42; // 0x34
	float32 m43; // 0x38
	float32 m44; // 0x3C
};

// Size: 0x18
class /*alignas(4)*/ SMovementAgilitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMovementAgilitySaveData& p_Other) const;
	bool operator!=(const SMovementAgilitySaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rLedgeGuide; // 0x0
	float32 m_fFaceLeftRightTarget; // 0x4
	EAgilityState m_ePrevAgilityState; // 0x8
	EAgilityState m_eAgilityState; // 0xC
	uint32 m_nActiveAnimNode; // 0x10
	ECameraOffset_old m_eCameraOffset; // 0x14
};

// Size: 0x50
class /*alignas(16)*/ SMovementCoverSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMovementCoverSaveData& p_Other) const;
	bool operator!=(const SMovementCoverSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rCoverPlane; // 0x0
	uint32 m_nCoverAnimNodeID; // 0x4
	bool m_bLeftSideFacing; // 0x8
	bool m_bCrouched; // 0x9
	uint8_t _padA[6] {};
	SMatrix m_mPositionInCover; // 0x10
};

// Size: 0x8
class /*alignas(4)*/ SMovementDisguiseSafeZoneSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMovementDisguiseSafeZoneSaveData& p_Other) const;
	bool operator!=(const SMovementDisguiseSafeZoneSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rSafeZone; // 0x0
	uint32 m_nSafeZoneAnimNode; // 0x4
};

// Size: 0x8
class /*alignas(4)*/ SMovementDragBodySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMovementDragBodySaveData& p_Other) const;
	bool operator!=(const SMovementDragBodySaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rDraggedActor; // 0x0
	uint32 m_nGrabBoneID; // 0x4
};

// Size: 0x4
class /*alignas(4)*/ SMovementDrainPipeSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMovementDrainPipeSaveData& p_Other) const;
	bool operator!=(const SMovementDrainPipeSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rDrainPipe; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ SMovementHideInClosetSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMovementHideInClosetSaveData& p_Other) const;
	bool operator!=(const SMovementHideInClosetSaveData& p_Other) const { return !(*this == p_Other); }

	ICloset_EClosetType m_eCurrentClosetType; // 0x0
	uint32 m_rCloset; // 0x4
};

// Size: 0x4
class /*alignas(4)*/ SMovementLadderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMovementLadderSaveData& p_Other) const;
	bool operator!=(const SMovementLadderSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rLadder; // 0x0
};

// Size: 0x1
class /*alignas(1)*/ SMovementLocomotionSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMovementLocomotionSaveData& p_Other) const;
	bool operator!=(const SMovementLocomotionSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bIsSneaking; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ SMusicGridData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SMusicGridData& p_Other) const;
	bool operator!=(const SMusicGridData& p_Other) const { return !(*this == p_Other); }

	float32 m_fGridDurationSec; // 0x0
	float32 m_fGridOffsetSec; // 0x4
};

// Size: 0x8
class /*alignas(4)*/ SNRange
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SNRange& p_Other) const;
	bool operator!=(const SNRange& p_Other) const { return !(*this == p_Other); }

	int32 m_nMin; // 0x0
	int32 m_nMax; // 0x4
};

// Size: 0x28
class /*alignas(8)*/ SObserversGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SObserversGroupSaveData& p_Other) const;
	bool operator!=(const SObserversGroupSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_target; // 0x0
	uint8_t _pad4[4] {};
	TArray<uint32> m_aWaitingObservers; // 0x8
	float32 m_observerDistanceMax; // 0x20
	uint8_t _pad24[4] {};
};

// Size: 0x20
class /*alignas(8)*/ SOnlineEvent
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SOnlineEvent& p_Other) const;
	bool operator!=(const SOnlineEvent& p_Other) const { return !(*this == p_Other); }

	ZString sName; // 0x0
	ZDynamicObject data; // 0x10
};

// Size: 0x40
class /*alignas(8)*/ SOnlineSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SOnlineSaveData& p_Other) const;
	bool operator!=(const SOnlineSaveData& p_Other) const { return !(*this == p_Other); }

	ZString m_sName; // 0x0
	int64 m_nTimeStamp; // 0x10
	bool m_bIsOnline; // 0x18
	uint8_t _pad19[7] {};
	ZString m_sContractSessionId; // 0x20
	ZString m_sLastEventToken; // 0x30
};

// Size: 0x10
class /*alignas(8)*/ SOptionValueSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SOptionValueSaveData& p_Other) const;
	bool operator!=(const SOptionValueSaveData& p_Other) const { return !(*this == p_Other); }

	ZVariant m_Value; // 0x0
};

// Size: 0x1
class /*alignas(1)*/ SPFObstactleSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SPFObstactleSaveData& p_Other) const;
	bool operator!=(const SPFObstactleSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
};

// Size: 0x4
class /*alignas(4)*/ SPatrolGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SPatrolGroupSaveData& p_Other) const;
	bool operator!=(const SPatrolGroupSaveData& p_Other) const { return !(*this == p_Other); }

	int32 m_nRouteID; // 0x0
};

// Size: 0x1
class /*alignas(1)*/ SPatrolOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SPatrolOrderSaveData& p_Other) const;
	bool operator!=(const SPatrolOrderSaveData& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x8
class /*alignas(4)*/ SPerceptibleCrowdBodySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SPerceptibleCrowdBodySaveData& p_Other) const;
	bool operator!=(const SPerceptibleCrowdBodySaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rCombatZone; // 0x0
	int32 m_rSharedKnowledge; // 0x4
};

// Size: 0x20
class /*alignas(8)*/ SPersistentEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SPersistentEntitySaveData& p_Other) const;
	bool operator!=(const SPersistentEntitySaveData& p_Other) const { return !(*this == p_Other); }

	uint64 m_nResourceId; // 0x0
	TArray<ZString> m_aEntityNames; // 0x8
};

// Size: 0x18
class /*alignas(8)*/ SPersistentEntitySaveDataList
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SPersistentEntitySaveDataList& p_Other) const;
	bool operator!=(const SPersistentEntitySaveDataList& p_Other) const { return !(*this == p_Other); }

	TArray<SPersistentEntitySaveData> m_aEntityDatas; // 0x0
};

// Size: 0x3
class /*alignas(1)*/ SPhysicsSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SPhysicsSaveData& p_Other) const;
	bool operator!=(const SPhysicsSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bIsInPhysicsWorld; // 0x0
	bool m_bIsKinematicBody; // 0x1
	bool m_bIsVisible; // 0x2
};

// Size: 0x30
class /*alignas(8)*/ SPhysicsListSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SPhysicsListSaveData& p_Other) const;
	bool operator!=(const SPhysicsListSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntityRefs; // 0x0
	TArray<SPhysicsSaveData> m_aEntityDatas; // 0x18
};

// Size: 0x30
class /*alignas(16)*/ SPrivateAreaSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SPrivateAreaSaveData& p_Other) const;
	bool operator!=(const SPrivateAreaSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bIsInside; // 0x0
	bool m_nHasEntered; // 0x1
	bool m_bHasExited; // 0x2
	bool m_bSpotted; // 0x3
	uint8_t _pad4[12] {};
	float4 m_vHitmanEnterPosition; // 0x10
	float4 m_vHitmanExitPosition; // 0x20
};

// Size: 0x10
class /*alignas(4)*/ SRandomTimerEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SRandomTimerEntitySaveData& p_Other) const;
	bool operator!=(const SRandomTimerEntitySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
	bool m_bRegistered; // 0x1
	uint8_t _pad2[2] {};
	float32 m_fMinTime; // 0x4
	float32 m_fMaxTime; // 0x8
	float32 m_fProbability; // 0xC
};

// Size: 0x30
class /*alignas(8)*/ SRandomTimerEntitiesSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SRandomTimerEntitiesSaveData& p_Other) const;
	bool operator!=(const SRandomTimerEntitiesSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SRandomTimerEntitySaveData> m_aData; // 0x18
};

// Size: 0x20
class /*alignas(8)*/ ZBitArray
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZBitArray& p_Other) const;
	bool operator!=(const ZBitArray& p_Other) const { return !(*this == p_Other); }

	TArray<uint8> m_aBytes; // 0x0
	uint32 m_nSize; // 0x18
	uint8_t _pad1C[4] {};
};

// Size: 0xD0
class /*alignas(16)*/ SReasoningGrid
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SReasoningGrid& p_Other) const;
	bool operator!=(const SReasoningGrid& p_Other) const { return !(*this == p_Other); }

	TArray<SGWaypoint> m_WaypointList; // 0x0
	ZBitArray m_LowVisibilityBits; // 0x18
	ZBitArray m_HighVisibilityBits; // 0x38
	uint8_t _pad58[8] {};
	SGProperties m_Properties; // 0x60
	uint32 m_nNodeCount; // 0x90
	uint8_t _pad94[4] {};
	TArray<uint8> m_pVisibilityData; // 0x98
	ZBitArray m_deadEndData; // 0xB0
};

// Size: 0x28
class /*alignas(8)*/ SRecoverUnconsciousGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SRecoverUnconsciousGroupSaveData& p_Other) const;
	bool operator!=(const SRecoverUnconsciousGroupSaveData& p_Other) const { return !(*this == p_Other); }

	SFSMSaveData m_fsmState; // 0x0
	uint32 m_rVictim; // 0x18
	uint32 m_rWaker; // 0x1C
	float32 m_fTimer; // 0x20
	bool m_bEscalate; // 0x24
	bool m_bWokenUpInTheGroup; // 0x25
	bool m_bFastWakeUp; // 0x26
	uint8_t _pad27[1] {};
};

// Size: 0x3
class /*alignas(1)*/ SRemoteControlReceiverSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SRemoteControlReceiverSaveData& p_Other) const;
	bool operator!=(const SRemoteControlReceiverSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
	bool m_bReceiverActivated; // 0x1
	bool m_bDestroyed; // 0x2
};

// Size: 0x18
class /*alignas(8)*/ SRenderVideoPlayerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SRenderVideoPlayerSaveData& p_Other) const;
	bool operator!=(const SRenderVideoPlayerSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bPlaying; // 0x0
	bool m_bPaused; // 0x1
	bool m_bLooping; // 0x2
	bool m_bUseAlpha; // 0x3
	bool m_bFirstFrame; // 0x4
	bool m_bRunning; // 0x5
	bool m_bVideoError; // 0x6
	bool m_bShouldBeStopped; // 0x7
	ZGameTime m_LastVisible; // 0x8
	ZGameTime m_StartTime; // 0x10
};

// Size: 0x2
class /*alignas(1)*/ SRepositionOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SRepositionOrderSaveData& p_Other) const;
	bool operator!=(const SRepositionOrderSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bStrafe; // 0x0
	bool m_bAimAtTarget; // 0x1
};

// Size: 0x10
class /*alignas(4)*/ SRotateEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SRotateEntitySaveData& p_Other) const;
	bool operator!=(const SRotateEntitySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bEnabled; // 0x0
	uint8_t _pad1[3] {};
	float32 m_fXAxisSpeed; // 0x4
	float32 m_fYAxisSpeed; // 0x8
	float32 m_fZAxisSpeed; // 0xC
};

// Size: 0x28
class /*alignas(8)*/ SSavableData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSavableData& p_Other) const;
	bool operator!=(const SSavableData& p_Other) const { return !(*this == p_Other); }

	ZVariant m_EntitiesData; // 0x0
	ZVariant m_Data; // 0x10
	uint32 m_nId; // 0x20
	uint8_t _pad24[4] {};
};

// Size: 0x10
class /*alignas(8)*/ SVariantStruct
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVariantStruct& p_Other) const;
	bool operator!=(const SVariantStruct& p_Other) const { return !(*this == p_Other); }

	ZVariant m_Data; // 0x0
};

// Size: 0x30
class /*alignas(8)*/ SSavableEntitiesSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSavableEntitiesSaveData& p_Other) const;
	bool operator!=(const SSavableEntitiesSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SVariantStruct> m_aEntityData; // 0x18
};

// Size: 0x38
class /*alignas(8)*/ SSaveGameData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSaveGameData& p_Other) const;
	bool operator!=(const SSaveGameData& p_Other) const { return !(*this == p_Other); }

	uint32 m_nVersion; // 0x0
	uint8_t _pad4[4] {};
	TArray<SSavableData> m_aSavableObjectsData; // 0x8
	TArray<SEntityPath> m_aEntityPaths; // 0x20
};

// Size: 0xA0
class /*alignas(8)*/ SSaveGameMetaData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSaveGameMetaData& p_Other) const;
	bool operator!=(const SSaveGameMetaData& p_Other) const { return !(*this == p_Other); }

	uint8 nSlot; // 0x0
	uint8_t _pad1[3] {};
	ESaveType eSaveType; // 0x4
	ZString sContractId; // 0x8
	ZString sContractTitle; // 0x18
	ZString sContractType; // 0x28
	ZString sLocationId; // 0x38
	ZString sContractSessionId; // 0x48
	ZString sLastEventToken; // 0x58
	bool bIsOnline; // 0x68
	uint8_t _pad69[7] {};
	TArray<uint32> aScreenShot; // 0x70
	TArray<ERequirementId> aRequirements; // 0x88
};

// Size: 0xB8
class /*alignas(8)*/ SSaveGameHeader
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSaveGameHeader& p_Other) const;
	bool operator!=(const SSaveGameHeader& p_Other) const { return !(*this == p_Other); }

	uint32 nFourCC; // 0x0
	uint32 nVersion; // 0x4
	uint32 nCrc32; // 0x8
	uint32 nSize; // 0xC
	int64 nTimeStamp; // 0x10
	SSaveGameMetaData MetaData; // 0x18
};

// Size: 0x90
class /*alignas(8)*/ SScreenplayManagerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SScreenplayManagerSaveData& p_Other) const;
	bool operator!=(const SScreenplayManagerSaveData& p_Other) const { return !(*this == p_Other); }

	SDramaActorCollectionSaveData m_DramaActorData; // 0x0
	SDramaSituationCollectionSaveData m_DramaSituationData; // 0x30
	SDramaSetupCollectionSaveData m_DramaSetupData; // 0x60
};

// Size: 0x6
class /*alignas(2)*/ SSecuritySystemCameraSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSecuritySystemCameraSaveData& p_Other) const;
	bool operator!=(const SSecuritySystemCameraSaveData& p_Other) const { return !(*this == p_Other); }

	uint16 m_nEscalation; // 0x0
	bool m_bIsFunctional; // 0x2
	bool m_bHasEnteredOnce; // 0x3
	bool m_bWasInvestigated; // 0x4
	bool m_bDestroyed; // 0x5
};

// Size: 0x2
class /*alignas(1)*/ SSecuritySystemRecorderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSecuritySystemRecorderSaveData& p_Other) const;
	bool operator!=(const SSecuritySystemRecorderSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bHasRecordings; // 0x0
	bool m_bIsFunctional; // 0x1
};

// Size: 0x38
class /*alignas(8)*/ SSentryGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSentryGroupSaveData& p_Other) const;
	bool operator!=(const SSentryGroupSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rTarget; // 0x0
	uint32 m_pLeader; // 0x4
	uint32 m_rSentryZone; // 0x8
	uint8_t _padC[4] {};
	ZGameTime m_tLastEscalateOrder; // 0x10
	SFSMSaveData m_fsmState; // 0x18
	ESentryActionPrompt m_eActionPrompt; // 0x30
	bool m_bRequestedAction; // 0x34
	bool m_bShowingWarning; // 0x35
	uint8_t _pad36[2] {};
};

// Size: 0x4
class /*alignas(4)*/ SSentryOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSentryOrderSaveData& p_Other) const;
	bool operator!=(const SSentryOrderSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rSentryZone; // 0x0
};

// Size: 0x70
class /*alignas(8)*/ SSentryZoneSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSentryZoneSaveData& p_Other) const;
	bool operator!=(const SSentryZoneSaveData& p_Other) const { return !(*this == p_Other); }

	ZGameTime m_tGreetingCooldown; // 0x0
	ZGameTime m_tLoiteringCooldown; // 0x8
	int32 m_nWarningCount; // 0x10
	bool m_bShowingWarning; // 0x14
	bool bLeftThroughWarningZone; // 0x15
	bool bEnteredThroughEntranceZone; // 0x16
	bool bInEntranceZone; // 0x17
	bool bInWarningZone; // 0x18
	bool bInGreetingZone; // 0x19
	bool bInReFriskZone; // 0x1A
	bool m_bInRequiredDisguise; // 0x1B
	bool m_bInFriskExemptDisguise; // 0x1C
	bool m_bHasRequiredItem; // 0x1D
	bool m_bCanShowActionPrompt; // 0x1E
	bool m_bTargetInAnyZone; // 0x1F
	bool m_bSituationActive; // 0x20
	bool m_bFrisked; // 0x21
	bool m_bItemChecked; // 0x22
	bool m_bGreeted; // 0x23
	bool m_bGreetedInstruction; // 0x24
	bool m_bGreetedLoitering; // 0x25
	bool m_bGreetedUnexpected; // 0x26
	bool m_bInFriskWarningZone; // 0x27
	TArray<bool> m_aDisguisesAllowedDisabled; // 0x28
	TArray<bool> m_aDisguisesFriskExemptDisabled; // 0x40
	TArray<bool> m_aDisguisesDontEscalateOnLineCrossingDisabled; // 0x58
};

// Size: 0x18
class /*alignas(8)*/ SSequenceTrackSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSequenceTrackSaveData& p_Other) const;
	bool operator!=(const SSequenceTrackSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rTrackEntity; // 0x0
	uint8_t _pad4[4] {};
	ZVariant m_CustomTrackData; // 0x8
};

// Size: 0x4
enum class ZSequenceEntity_ECommand : int32_t
{
	COMMAND_START = 0,
	COMMAND_ENABLE_PREVIEW = 1,
	COMMAND_STOP = 2,
	COMMAND_DISABLE_PREVIEW = 3,
	COMMAND_ABORT = 4,
	COMMAND_PAUSE = 5,
	COMMAND_UNPAUSE = 6,
	COMMAND_SETTIME = 7,
	COMMAND_GAME_PAUSE = 8,
	COMMAND_GAME_UNPAUSE = 9,
	COMMAND_PREVIEW_PAUSE = 10,
	COMMAND_PREVIEW_STOP = 11,
	COMMAND_PREVIEW_PLAY = 12,
	COMMAND_PREVIEW_LOOPED = 13,
	COMMAND_CLEAR = 14,
};

// Size: 0x58
class /*alignas(8)*/ SSequenceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSequenceSaveData& p_Other) const;
	bool operator!=(const SSequenceSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<ZSequenceEntity_ECommand> m_commandQueue; // 0x0
	ZGameTime m_sequenceTime; // 0x18
	uint32 m_sequenceOrigin; // 0x20
	bool m_bHasRunData; // 0x24
	uint8_t _pad25[3] {};
	TArray<SSequenceTrackSaveData> m_aTrackSaveData; // 0x28
	ZGameTime m_effectiveSequenceTime; // 0x40
	int32 m_nCurrentLoop; // 0x48
	uint16 m_eStateFlags; // 0x4C
	bool m_bPausedOnStart; // 0x4E
	bool m_bActivatedByIActivatable; // 0x4F
	bool m_bGettingDeactivated; // 0x50
	bool m_bOnGameStopped; // 0x51
	uint8_t _pad52[6] {};
};

// Size: 0x30
class /*alignas(8)*/ SSequenceManagerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSequenceManagerSaveData& p_Other) const;
	bool operator!=(const SSequenceManagerSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<SSequenceSaveData> m_aSequenceSaveData; // 0x18
};

// Size: 0x1
class /*alignas(1)*/ SSerializedValue
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSerializedValue& p_Other) const;
	bool operator!=(const SSerializedValue& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x8
class /*alignas(4)*/ SSettingsParamMultiplier
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSettingsParamMultiplier& p_Other) const;
	bool operator!=(const SSettingsParamMultiplier& p_Other) const { return !(*this == p_Other); }

	ESettingsParam m_eSettingsParam; // 0x0
	float32 m_fMultiplier; // 0x4
};

// Size: 0x18
class /*alignas(8)*/ SSituationConversationGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSituationConversationGroupSaveData& p_Other) const;
	bool operator!=(const SSituationConversationGroupSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_members; // 0x0
};

// Size: 0x40
class /*alignas(16)*/ SSituationOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSituationOrderSaveData& p_Other) const;
	bool operator!=(const SSituationOrderSaveData& p_Other) const { return !(*this == p_Other); }

	ZString m_sClassTypeName; // 0x0
	EAISharedEventType m_eType; // 0x10
	int32 m_nTarget; // 0x14
	bool m_bHasPosition; // 0x18
	uint8_t _pad19[7] {};
	float4 m_vPosition; // 0x20
	ZVariant m_CustomData; // 0x30
};

// Size: 0x4
enum class ZSmuggleSituationEntity_ESmuggleState : int32_t
{
	ESS_Idle = 0,
	ESS_Evaluate = 1,
	ESS_FindJob = 2,
	ESS_OnRouteToLocation = 3,
	ESS_PickingUp = 4,
	ESS_PuttingDown = 5,
	ESS_OnABreak = 6,
};

// Size: 0x1C
class /*alignas(4)*/ SSmuggleSituationActorStateSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSmuggleSituationActorStateSaveData& p_Other) const;
	bool operator!=(const SSmuggleSituationActorStateSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rActor; // 0x0
	bool m_bAllocatedForSituation; // 0x4
	uint8_t _pad5[3] {};
	ZSmuggleSituationEntity_ESmuggleState m_nState; // 0x8
	ZSmuggleSituationEntity_ESmuggleState m_nStatePrevious; // 0xC
	float32 m_fStateTimer; // 0x10
	int32 m_nTargetLocationIndex; // 0x14
	uint32 m_rScreenplay; // 0x18
};

// Size: 0x38
class /*alignas(8)*/ SSmuggleSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSmuggleSituationSaveData& p_Other) const;
	bool operator!=(const SSmuggleSituationSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bIsEnabled; // 0x0
	bool m_bIsRunning; // 0x1
	uint8_t _pad2[2] {};
	int32 m_nNumberOfPickups; // 0x4
	TArray<SSmuggleSituationActorStateSaveData> m_aActorsSaveData; // 0x8
	TArray<uint32> m_aMoveToActs; // 0x20
};

// Size: 0x30
class /*alignas(8)*/ SSniperCombatGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSniperCombatGroupSaveData& p_Other) const;
	bool operator!=(const SSniperCombatGroupSaveData& p_Other) const { return !(*this == p_Other); }

	SFSMSaveData m_fsmState; // 0x0
	int32 m_target; // 0x18
	bool m_bFailed; // 0x1C
	uint8_t _pad1D[3] {};
	ZGameTime m_tEscapeTime; // 0x20
	ZGameTime m_tLastTauntTime; // 0x28
};

// Size: 0x1
class /*alignas(1)*/ SSpaceCollectionBehaviorConfiguration
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSpaceCollectionBehaviorConfiguration& p_Other) const;
	bool operator!=(const SSpaceCollectionBehaviorConfiguration& p_Other) const { return !(*this == p_Other); }

	bool m_bInclusive; // 0x0
};

// Size: 0x14
class /*alignas(4)*/ SSpatialMoverEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSpatialMoverEntitySaveData& p_Other) const;
	bool operator!=(const SSpatialMoverEntitySaveData& p_Other) const { return !(*this == p_Other); }

	float32 m_fSpeed; // 0x0
	SVector3 m_vPosition; // 0x4
	bool m_bEnabled; // 0x10
	bool m_bBackwards; // 0x11
	bool m_bIsFrameUpdateRegistered; // 0x12
	uint8_t _pad13[1] {};
};

// Size: 0x20
class /*alignas(4)*/ SSpatialSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSpatialSaveData& p_Other) const;
	bool operator!=(const SSpatialSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bVisible; // 0x0
	uint8_t _pad1[3] {};
	SVector3 m_vPosition; // 0x4
	SVector4 m_vQuaternionRotation; // 0x10
};

// Size: 0x4
class /*alignas(4)*/ SSpeakEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SSpeakEntitySaveData& p_Other) const;
	bool operator!=(const SSpeakEntitySaveData& p_Other) const { return !(*this == p_Other); }

	float32 m_fSeekPosition; // 0x0
};

// Size: 0x30
class /*alignas(8)*/ SStashPointSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SStashPointSaveData& p_Other) const;
	bool operator!=(const SStashPointSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_arItems; // 0x0
	EStashpointContainedEntityType m_eContainedType; // 0x18
	uint8_t _pad1C[4] {};
	ZRepositoryID m_MainItemID; // 0x20
};

// Size: 0x30
class /*alignas(8)*/ SStateControllerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SStateControllerSaveData& p_Other) const;
	bool operator!=(const SStateControllerSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<int32> m_aData; // 0x18
};

// Size: 0x18
class /*alignas(4)*/ SStepCounterEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SStepCounterEntitySaveData& p_Other) const;
	bool operator!=(const SStepCounterEntitySaveData& p_Other) const { return !(*this == p_Other); }

	float32 m_nIndex; // 0x0
	int32 m_nLoopIndex; // 0x4
	bool m_bFirst; // 0x8
	bool m_bEnabled; // 0x9
	uint8_t _padA[2] {};
	float32 m_nCountFrom; // 0xC
	float32 m_nCountTo; // 0x10
	float32 m_nStepSize; // 0x14
};

// Size: 0x48
class /*alignas(8)*/ STargetInfoObjectiveCondition
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STargetInfoObjectiveCondition& p_Other) const;
	bool operator!=(const STargetInfoObjectiveCondition& p_Other) const { return !(*this == p_Other); }

	ZString header; // 0x0
	ZString title; // 0x10
	ZString icon; // 0x20
	ZString type; // 0x30
	bool hardCondition; // 0x40
	uint8_t _pad41[7] {};
};

// Size: 0x58
class /*alignas(8)*/ STargetInfoDisplayData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STargetInfoDisplayData& p_Other) const;
	bool operator!=(const STargetInfoDisplayData& p_Other) const { return !(*this == p_Other); }

	ZString npcName; // 0x0
	ZString disguiseName; // 0x10
	ZString objectiveType; // 0x20
	TArray<STargetInfoObjectiveCondition> objectiveConditions; // 0x30
	int32 fX; // 0x48
	int32 fY; // 0x4C
	float32 fAlpha; // 0x50
	bool bIsTarget; // 0x54
	uint8_t _pad55[3] {};
};

// Size: 0x18
class /*alignas(8)*/ STargetInfoDisplayData_Dummy
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STargetInfoDisplayData_Dummy& p_Other) const;
	bool operator!=(const STargetInfoDisplayData_Dummy& p_Other) const { return !(*this == p_Other); }

	TArray<STargetInfoDisplayData> __dummy; // 0x0
};

// Size: 0x30
class /*alignas(16)*/ STargetTrackingSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STargetTrackingSaveData& p_Other) const;
	bool operator!=(const STargetTrackingSaveData& p_Other) const { return !(*this == p_Other); }

	int32 m_sharedTarget; // 0x0
	uint8_t _pad4[12] {};
	float4 m_position; // 0x10
	ZGameTime m_time; // 0x20
	uint8_t _pad28[8] {};
};

// Size: 0x18
class /*alignas(8)*/ STargetTrackingServiceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STargetTrackingServiceSaveData& p_Other) const;
	bool operator!=(const STargetTrackingServiceSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<STargetTrackingSaveData> m_aTrackedTargets; // 0x0
};

// Size: 0x58
class /*alignas(8)*/ STemplateSubEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STemplateSubEntity& p_Other) const;
	bool operator!=(const STemplateSubEntity& p_Other) const { return !(*this == p_Other); }

	SEntityTemplateReference logicalParent; // 0x0
	int32 entityTypeResourceIndex; // 0x20
	uint8_t _pad24[4] {};
	TArray<SEntityTemplateProperty> propertyValues; // 0x28
	TArray<SEntityTemplateProperty> postInitPropertyValues; // 0x40
};

// Size: 0x58
class /*alignas(8)*/ STemplateEntity
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STemplateEntity& p_Other) const;
	bool operator!=(const STemplateEntity& p_Other) const { return !(*this == p_Other); }

	int32 subType; // 0x0
	int32 blueprintIndexInResourceHeader; // 0x4
	int32 rootEntityIndex; // 0x8
	uint8_t _padC[4] {};
	TArray<STemplateSubEntity> entityTemplates; // 0x10
	TArray<SEntityTemplatePropertyOverride> propertyOverrides; // 0x28
	TArray<int32> externalSceneTypeIndicesInResourceHeader; // 0x40
};

// Size: 0xA0
class /*alignas(8)*/ STemplateSubEntityBlueprint
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STemplateSubEntityBlueprint& p_Other) const;
	bool operator!=(const STemplateSubEntityBlueprint& p_Other) const { return !(*this == p_Other); }

	SEntityTemplateReference logicalParent; // 0x0
	int32 entityTypeResourceIndex; // 0x20
	uint8_t _pad24[4] {};
	uint64 entityId; // 0x28
	ZString entityName; // 0x30
	TArray<SEntityTemplatePropertyAlias> propertyAliases; // 0x40
	TArray<TPair<ZString,SEntityTemplateReference>> exposedEntities; // 0x58
	TArray<TPair<ZString,int32>> exposedInterfaces; // 0x70
	TArray<TPair<ZString,SEntityTemplateEntitySubset>> entitySubsets; // 0x88
};

// Size: 0x98
class /*alignas(8)*/ STemplateEntityBlueprint
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STemplateEntityBlueprint& p_Other) const;
	bool operator!=(const STemplateEntityBlueprint& p_Other) const { return !(*this == p_Other); }

	int32 subType; // 0x0
	int32 rootEntityIndex; // 0x4
	TArray<STemplateSubEntityBlueprint> entityTemplates; // 0x8
	TArray<int32> externalSceneTypeIndicesInResourceHeader; // 0x20
	TArray<SEntityTemplatePinConnection> pinConnections; // 0x38
	TArray<SEntityTemplatePinConnection> inputPinForwardings; // 0x50
	TArray<SEntityTemplatePinConnection> outputPinForwardings; // 0x68
	TArray<SEntityTemplateReference> overrideDeletes; // 0x80
};

// Size: 0x18
class /*alignas(8)*/ STestMiniStruct
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STestMiniStruct& p_Other) const;
	bool operator!=(const STestMiniStruct& p_Other) const { return !(*this == p_Other); }

	int32 m_iIntValue; // 0x0
	float32 m_fFloatValue; // 0x4
	ZString m_sText; // 0x8
};

// Size: 0x4
enum class STestStruct_ETestEnum : int32_t
{
	ETomato = 3,
	EPotato = 5,
};

// Size: 0x20
class /*alignas(8)*/ STestStruct
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STestStruct& p_Other) const;
	bool operator!=(const STestStruct& p_Other) const { return !(*this == p_Other); }

	ZString stringField; // 0x0
	uint32 intField; // 0x10
	float32 floatField; // 0x14
	STestStruct_ETestEnum enumField; // 0x18
	uint8_t _pad1C[4] {};
};

// Size: 0x28
class /*alignas(8)*/ STestStruct2
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STestStruct2& p_Other) const;
	bool operator!=(const STestStruct2& p_Other) const { return !(*this == p_Other); }

	TArray<STestStruct> arrayField; // 0x0
	ZVariant variantField; // 0x18
};

// Size: 0x38
class /*alignas(8)*/ STestStructure
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STestStructure& p_Other) const;
	bool operator!=(const STestStructure& p_Other) const { return !(*this == p_Other); }

	float32 m_fWidth; // 0x0
	float32 m_fHeight; // 0x4
	float32 m_fAngle; // 0x8
	uint8_t _padC[4] {};
	ZString m_sDescription; // 0x10
	STestMiniStruct m_Mini; // 0x20
};

// Size: 0xC
class /*alignas(4)*/ STimerEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STimerEntitySaveData& p_Other) const;
	bool operator!=(const STimerEntitySaveData& p_Other) const { return !(*this == p_Other); }

	int32 m_nInterval; // 0x0
	bool m_bEnabled; // 0x4
	uint8_t _pad5[3] {};
	float32 m_fTimeToNextEvent; // 0x8
};

// Size: 0x30
class /*alignas(8)*/ STimerEntitiesSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STimerEntitiesSaveData& p_Other) const;
	bool operator!=(const STimerEntitiesSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<STimerEntitySaveData> m_aData; // 0x18
};

// Size: 0xA8
class /*alignas(8)*/ STimerManagerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STimerManagerSaveData& p_Other) const;
	bool operator!=(const STimerManagerSaveData& p_Other) const { return !(*this == p_Other); }

	STimerEntitiesSaveData m_TimersData; // 0x0
	SRandomTimerEntitiesSaveData m_RandomTimersData; // 0x30
	SGameTimersSaveData m_GameTimersData; // 0x60
};

// Size: 0x8
class /*alignas(4)*/ STokenID
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STokenID& p_Other) const;
	bool operator!=(const STokenID& p_Other) const { return !(*this == p_Other); }

	uint32 m_iValue; // 0x0
	bool m_bValid; // 0x4
	uint8_t _pad5[3] {};
};

// Size: 0x28
class /*alignas(4)*/ STrackDollyControllerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STrackDollyControllerSaveData& p_Other) const;
	bool operator!=(const STrackDollyControllerSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rTrackEntity; // 0x0
	float32 m_fTrackPosition; // 0x4
	bool m_bIsDollyAttached; // 0x8
	uint8_t _pad9[3] {};
	SVector3 m_vDollyPosition; // 0xC
	SVector4 m_vDollyRotation; // 0x18
};

// Size: 0x8
class /*alignas(4)*/ STrackerEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STrackerEntitySaveData& p_Other) const;
	bool operator!=(const STrackerEntitySaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rTracker; // 0x0
	bool m_bIsVisible; // 0x4
	bool m_bIsEnabled; // 0x5
	bool m_bSpatialVisibility; // 0x6
	uint8_t _pad7[1] {};
};

// Size: 0x18
class /*alignas(8)*/ STrackerManagerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STrackerManagerSaveData& p_Other) const;
	bool operator!=(const STrackerManagerSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<STrackerEntitySaveData> m_aTrackerData; // 0x0
};

// Size: 0x80
class /*alignas(16)*/ STrajectoryTrackSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STrajectoryTrackSaveData& p_Other) const;
	bool operator!=(const STrajectoryTrackSaveData& p_Other) const { return !(*this == p_Other); }

	SMatrix m_vOriginalEntityTransform; // 0x0
	SMatrix m_vTargetStartTransform; // 0x40
};

// Size: 0x18
class /*alignas(8)*/ STrespassingRuleEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STrespassingRuleEntitySaveData& p_Other) const;
	bool operator!=(const STrespassingRuleEntitySaveData& p_Other) const { return !(*this == p_Other); }

	TArray<bool> m_aAllowedProfessionsDisabled; // 0x0
};

// Size: 0x30
class /*alignas(8)*/ STriggerAlarmGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const STriggerAlarmGroupSaveData& p_Other) const;
	bool operator!=(const STriggerAlarmGroupSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rTarget; // 0x0
	uint32 m_rAlarm; // 0x4
	uint32 m_pLeader; // 0x8
	uint8_t _padC[4] {};
	SFSMSaveData m_fsmState; // 0x10
	bool m_bTriggeredAlarm; // 0x28
	uint8_t _pad29[7] {};
};

// Size: 0x10
class /*alignas(4)*/ SUIGridCellPosition
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SUIGridCellPosition& p_Other) const;
	bool operator!=(const SUIGridCellPosition& p_Other) const { return !(*this == p_Other); }

	int32 nColumnIndex; // 0x0
	int32 nRowIndex; // 0x4
	int32 nColumnSpan; // 0x8
	int32 nRowSpan; // 0xC
};

// Size: 0x4
enum class _EUIOptionKey : int32_t
{
	UI_OPTION_GAME_VIBRATION = 100,
	UI_OPTION_GAME_AIM_ASSIST = 200,
	UI_OPTION_GAME_AIM_CAUSAL = 210,
	UI_OPTION_GAME_INVERT_X = 300,
	UI_OPTION_GAME_INVERT_MOUSE_X = 301,
	UI_OPTION_GAME_INVERT_MOUSE_Y = 302,
	UI_OPTION_GAME_INVERT_Y = 310,
	UI_OPTION_GAME_CONTROL_SCHEME = 311,
	UI_OPTION_GAME_FAST_TARGET = 312,
	UI_OPTION_GAME_DIFFICULTY = 321,
	UI_OPTION_GAME_TRIGGER_SHOOT = 330,
	UI_OPTION_GAME_SHOOTING_BALLET_AUTO = 331,
	UI_OPTION_GAME_SWITCH_SNEAK_AND_CAMERA = 332,
	UI_OPTION_GAME_LEFT_HANDED_CONTROLS = 333,
	UI_OPTION_GAME_CAMERA_SENSITIVITY_HORZ = 334,
	UI_OPTION_GAME_CAMERA_SENSITIVITY_VERT = 335,
	UI_OPTION_GAME_MOUSE_SENSITIVITY = 336,
	UI_OPTION_GAME_AIM_SENSITIVITY = 337,
	UI_OPTION_GAME_CAMERA_SENSITIVITY = 338,
	UI_OPTION_GAME_INSTINCT_PATHS = 340,
	UI_OPTION_GAME_INSTINCT_NPCGLOW = 342,
	UI_OPTION_GAME_HINTS_TUTORIAL = 346,
	UI_OPTION_GAME_HINTS_INSTINCT = 348,
	UI_OPTION_GAME_LANG_AUDIO = 350,
	UI_OPTION_GAME_LANG_TEXT = 351,
	UI_OPTION_GAME_COVER_TOGGLE = 352,
	UI_OPTION_GAME_FIXED_MAP = 353,
	UI_OPTION_GAME_MAP_SHOW_NORTH_INDICATOR = 354,
	UI_OPTION_GAME_AID_OPPORTUNITIES = 360,
	UI_OPTION_GAME_AID_INSTINCT = 361,
	UI_OPTION_GAME_AID_MINI_MAP = 362,
	UI_OPTION_GAME_AID_NPC_ICONS = 363,
	UI_OPTION_GAME_AID_ATTENTION = 364,
	UI_OPTION_GAME_AID_VITAL_INFO = 365,
	UI_OPTION_GAME_AID_INTERACTION_H = 366,
	UI_OPTION_GAME_AID_OBJECTIVES = 367,
	UI_OPTION_GAME_AID_WEAPON_HUD = 368,
	UI_OPTION_GAME_AID_CHALLENGEDESCRIPTION = 369,
	UI_OPTION_GAME_MINI_MAP_SHOW_NPCS = 370,
	UI_OPTION_GAME_AID_TARGET_INFO = 371,
	UI_OPTION_GAME_AID_CHALLENGE_HUD = 372,
	UI_OPTION_GAME_MINI_MAP_SHOW_TARGETS = 373,
	UI_OPTION_GAME_CHALLENGES_FILTER = 374,
	UI_OPTION_GAME_AID_MISSION_TIMER = 375,
	UI_OPTION_GAME_DIFFICULTY_LEVEL_HUD = 376,
	UI_OPTION_GAME_AID_GLOBAL_HINTS = 377,
	UI_OPTION_GAME_AUTOSAVE = 390,
	UI_OPTION_TOBII_EYE_TRACKING = 400,
	UI_OPTION_TOBII_EYE_TRACKING_EXTENDED_VIEW = 401,
	UI_OPTION_TOBII_EYE_TRACKING_EXTENDED_VIEW_RESPONSIVENESS = 402,
	UI_OPTION_TOBII_EYE_TRACKING_AIM_AT_GAZE = 403,
	UI_OPTION_TOBII_EYE_TRACKING_THROW_AT_GAZE = 404,
	UI_OPTION_TOBII_EYE_TRACKING_INSTINCT_AT_GAZE = 405,
	UI_OPTION_TOBII_EYE_TRACKING_DYNAMIC_LIGHT_ADAPTATION = 406,
	UI_OPTION_TOBII_EYE_TRACKING_CLEAN_UI = 407,
	UI_OPTION_TOBII_EYE_TRACKING_AUTO_PAUSE = 408,
	UI_OPTION_TOBII_EYE_TRACKING_AUTO_PAUSE_TIMEOUT = 409,
	UI_OPTION_TOBII_EYE_TRACKING_AUTO_UNPAUSE = 410,
	UI_OPTION_TOBII_EYE_TRACKING_DISPLAY_LINK = 411,
	UI_OPTION_TOBII_EYE_TRACKING_KEYBOARD_LIGHTS = 412,
	UI_OPTION_SOUND_VOLUME_MASTER = 1010,
	UI_OPTION_SOUND_VOLUME_EFFECTS = 1020,
	UI_OPTION_SOUND_VOLUME_MUSIC = 1030,
	UI_OPTION_SOUND_VOLUME_VOICE = 1040,
	UI_OPTION_SOUND_OUTPUTMODE = 1200,
	UI_OPTION_GRAPHICS_SUBTITLES = 2000,
	UI_OPTION_GRAPHICS_SUBTITLES_SIZE = 2001,
	UI_OPTION_GRAPHICS_SAFE_AREA_X = 2210,
	UI_OPTION_GRAPHICS_SAFE_AREA_Y = 2220,
	UI_OPTION_GSM_AUTHORITY_BEGIN_MARKER = 2221,
	UI_OPTION_DISPLAY_RESOLUTION = 2230,
	UI_OPTION_DISPLAY_REFRESHRATE = 2240,
	UI_OPTION_DISPLAY_FULLSCREEN = 2250,
	UI_OPTION_DISPLAY_EXCLUSIVE = 2260,
	UI_OPTION_DISPLAY_VSYNC = 2270,
	UI_OPTION_DISPLAY_MONITOR = 2280,
	UI_OPTION_DISPLAY_QUALITY = 2290,
	UI_OPTION_DISPLAY_ASPECT = 2300,
	UI_OPTION_DISPLAY_STEREOSCOPIC = 2310,
	UI_OPTION_DISPLAY_STEREO_DEPTH = 2320,
	UI_OPTION_DISPLAY_STEREO_STRENGTH = 2330,
	UI_OPTION_GRAPHICS_QUALITY = 2600,
	UI_OPTION_GRAPHICS_SHADOW_QUALITY = 2610,
	UI_OPTION_GRAPHICS_SHADOW_RESOLUTION = 2620,
	UI_OPTION_GRAPHICS_TEXTURE_QUALITY = 2630,
	UI_OPTION_GRAPHICS_TEXTURE_FILTER = 2640,
	UI_OPTION_GRAPHICS_SSAO = 2650,
	UI_OPTION_GRAPHICS_VSYNC = 2660,
	UI_OPTION_GRAPHICS_TESSELLATION = 2680,
	UI_OPTION_GRAPHICS_MIRRORS = 2690,
	UI_OPTION_GRAPHICS_ANTI_ALIASING = 2700,
	UI_OPTION_GRAPHICS_LOD = 2710,
	UI_OPTION_GRAPHICS_MOTIONBLUR = 2720,
	UI_OPTION_GRAPHICS_BOKEH = 2740,
	UI_OPTION_GRAPHICS_SUPER_SAMPLING = 2750,
	UI_OPTION_GRAPHICS_GAMMA = 2760,
	UI_OPTION_GRAPHICS_FRAMERATE_LIMIT = 2770,
	UI_OPTION_GRAPHICS_HDR = 2771,
	UI_OPTION_GSM_AUTHORITY_END_MARKER = 2771,
	UI_OPTION_GRAPHICS_HDR_GAMMA = 2772,
	UI_OPTION_GRAPHICS_RENDERING_QUALITY = 2773,
};

// Size: 0x30
class /*alignas(8)*/ SUIOptionsSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SUIOptionsSaveData& p_Other) const;
	bool operator!=(const SUIOptionsSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<_EUIOptionKey> m_aKeys; // 0x0
	TArray<SOptionValueSaveData> m_aValues; // 0x18
};

// Size: 0x4
enum class SUITestData_ETestEnum : int32_t
{
	ETestEnum_Value_One = 1,
	ETestEnum_Value_Two = 2,
	ETestEnum_Value_Three = 3,
};

// Size: 0x10
class /*alignas(8)*/ SUITestData_SSubSubStruct
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SUITestData_SSubSubStruct& p_Other) const;
	bool operator!=(const SUITestData_SSubSubStruct& p_Other) const { return !(*this == p_Other); }

	ZString sDeepString; // 0x0
};

// Size: 0x18
class /*alignas(8)*/ SUITestData_SSubStruct
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SUITestData_SSubStruct& p_Other) const;
	bool operator!=(const SUITestData_SSubStruct& p_Other) const { return !(*this == p_Other); }

	TArray<SUITestData_SSubSubStruct> aSubSubStructs; // 0x0
};

// Size: 0x70
class /*alignas(8)*/ SUITestData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SUITestData& p_Other) const;
	bool operator!=(const SUITestData& p_Other) const { return !(*this == p_Other); }

	int32 nIntProp; // 0x0
	int16 fInt16Prop; // 0x4
	uint8_t _pad6[2] {};
	uint32 fUInt32Prop; // 0x8
	float32 fFloatProp; // 0xC
	ZString sStringProp; // 0x10
	SUITestData_ETestEnum eEnumProp; // 0x20
	ZRuntimeResourceID ridProp; // 0x24
	uint8_t _pad2C[4] {};
	TArray<ZString> aStringArray; // 0x30
	TArray<SUITestData_SSubStruct> aSubStructArray; // 0x48
	TFixedArray<int32, 3> aFixedArray; // 0x60
	uint8_t _pad6C[4] {};
};

// Size: 0x50
class /*alignas(16)*/ SVIPInvestigateGroupSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVIPInvestigateGroupSaveData& p_Other) const;
	bool operator!=(const SVIPInvestigateGroupSaveData& p_Other) const { return !(*this == p_Other); }

	SFSMSaveData m_fsmState; // 0x0
	uint32 m_target; // 0x18
	uint32 m_rVIP; // 0x1C
	uint32 m_rSelectedBodyguard; // 0x20
	uint32 m_rInvestigator; // 0x24
	uint32 m_rSelectedBodyguardActor; // 0x28
	EVIPInvestigateReason m_eReason; // 0x2C
	bool m_bBodyguardNotFound; // 0x30
	bool m_bOrderDialogStarted; // 0x31
	bool m_bReporting; // 0x32
	bool m_bWait; // 0x33
	uint8_t _pad34[12] {};
	float4 m_vOriginalVIPPosition; // 0x40
};

// Size: 0x30
class /*alignas(8)*/ SValueBoolsSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SValueBoolsSaveData& p_Other) const;
	bool operator!=(const SValueBoolsSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<bool> m_aData; // 0x18
};

// Size: 0x30
class /*alignas(8)*/ SValueFloatSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SValueFloatSaveData& p_Other) const;
	bool operator!=(const SValueFloatSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<float32> m_aData; // 0x18
};

// Size: 0x30
class /*alignas(8)*/ SValueIntSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SValueIntSaveData& p_Other) const;
	bool operator!=(const SValueIntSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aEntities; // 0x0
	TArray<int32> m_aData; // 0x18
};

// Size: 0xF0
class /*alignas(8)*/ SValueSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SValueSaveData& p_Other) const;
	bool operator!=(const SValueSaveData& p_Other) const { return !(*this == p_Other); }

	SValueBoolsSaveData m_ValueBool; // 0x0
	SValueFloatSaveData m_ValueFloat; // 0x30
	SValueIntSaveData m_ValueInt; // 0x60
	SStateControllerSaveData m_StateController; // 0x90
	SColorRGBSaveData m_ValueColorRGB; // 0xC0
};

// Size: 0x18
class /*alignas(8)*/ SVideoDatabaseEntry
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVideoDatabaseEntry& p_Other) const;
	bool operator!=(const SVideoDatabaseEntry& p_Other) const { return !(*this == p_Other); }

	ZString VideoId; // 0x0
	ZRuntimeResourceID RuntimeLocalizedVideoRid; // 0x10
};

// Size: 0x18
class /*alignas(8)*/ SVideoDatabaseData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVideoDatabaseData& p_Other) const;
	bool operator!=(const SVideoDatabaseData& p_Other) const { return !(*this == p_Other); }

	TArray<SVideoDatabaseEntry> Videos; // 0x0
};

// Size: 0x1
class /*alignas(1)*/ SVisibilitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVisibilitySaveData& p_Other) const;
	bool operator!=(const SVisibilitySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bIsVisible; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ SVoidSignalEntitySaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SVoidSignalEntitySaveData& p_Other) const;
	bool operator!=(const SVoidSignalEntitySaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bSignaling; // 0x0
	uint8_t _pad1[3] {};
	float32 m_fFiredAtTime; // 0x4
};

// Size: 0x18
class /*alignas(4)*/ SWaveformGeneratorSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SWaveformGeneratorSaveData& p_Other) const;
	bool operator!=(const SWaveformGeneratorSaveData& p_Other) const { return !(*this == p_Other); }

	float32 m_fTime; // 0x0
	float32 m_fFrequency; // 0x4
	float32 m_fOffset; // 0x8
	float32 m_fScale; // 0xC
	float32 m_fStartTime; // 0x10
	uint32 m_nCount; // 0x14
};

// Size: 0x30
class /*alignas(8)*/ SWaveformGeneratorManagerSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SWaveformGeneratorManagerSaveData& p_Other) const;
	bool operator!=(const SWaveformGeneratorManagerSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<uint32> m_aGenerators; // 0x0
	TArray<SWaveformGeneratorSaveData> m_aGeneratorData; // 0x18
};

// Size: 0x1
class /*alignas(1)*/ SWeaponSoundDefs
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SWeaponSoundDefs& p_Other) const;
	bool operator!=(const SWeaponSoundDefs& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[1] {};
};

// Size: 0x4
enum class SWeaponSoundDefs_EDefinition : int32_t
{
	FireWeapon = 0,
	EmptyClipFired = 1,
};

// Size: 0x60
class /*alignas(8)*/ SWeaponStatusUIData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SWeaponStatusUIData& p_Other) const;
	bool operator!=(const SWeaponStatusUIData& p_Other) const { return !(*this == p_Other); }

	ZRuntimeResourceID icon; // 0x0
	ZRuntimeResourceID containedIcon; // 0x8
	ZString sWeaponName; // 0x10
	ZString sContainedWeaponName; // 0x20
	int32 nWeaponType; // 0x30
	int32 nAmmoRemaining; // 0x34
	int32 nAmmoTotal; // 0x38
	int32 nAmmoInClip; // 0x3C
	bool bSilenced; // 0x40
	bool bIsFirearm; // 0x41
	bool bHolstered; // 0x42
	bool bHasItemToShow; // 0x43
	float32 fPointShootingGaunge; // 0x44
	ZRepositoryID containedItemRepoId; // 0x48
	bool bSuspicious; // 0x58
	bool bIllegal; // 0x59
	bool bCanReload; // 0x5A
	uint8_t _pad5B[5] {};
};

// Size: 0x18
class /*alignas(8)*/ SWorldInventoryInstanceSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const SWorldInventoryInstanceSaveData& p_Other) const;
	bool operator!=(const SWorldInventoryInstanceSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<SItemInstanceSaveData> m_aItemInstanceSaveData; // 0x0
};

// Size: 0x4
enum class SniperControllerConditionType : int32_t
{
	SCCT_Enabled = 0,
	SCCT_PrecisionAim = 1,
};

// Size: 0x4
enum class TeleportActionType : int32_t
{
	STAY = 0,
	TELEPORT = 1,
	LEAVE_CROWD = 2,
};

// Size: 0x4
enum class UIMapLayer_EUIMapLayerID : int32_t
{
	eUIMLI_UNSPECIFIED = 0,
	eUIMLI_TEXT = 1,
	eUIMLI_STAIRCASE = 2,
	eUIMLI_DROPPED_ITEMS_AND_DISGUISES = 3,
	eUIMLI_NPC = 4,
	eUIMLI_SECURITY_CAMERA = 5,
	eUIMLI_AGENCY_PICKUP = 6,
	eUIMLI_OPPORTUNITY = 7,
	eUIMLI_EXIT = 8,
	eUIMLI_OBJECTIVE = 9,
	eUIMLI_TARGET = 10,
	eUIMLI_NORTH_INDICATOR = 11,
	eUIMLI_HERO = 12,
};

// Size: 0x4
enum class ZAIPerceptibleEntity_EReactionBehaviorMode : int32_t
{
	FullBehavior = 0,
	StopOnInvestigate = 1,
	StopOnReacted = 2,
	NoReaction = 3,
};

// Size: 0x20
class /*alignas(8)*/ ZAMDEvent
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZAMDEvent& p_Other) const;
	bool operator!=(const ZAMDEvent& p_Other) const { return !(*this == p_Other); }

	uint32 m_nEventID; // 0x0
	float32 m_fStartFraction; // 0x4
	float32 m_fDuration; // 0x8
	uint8_t _padC[4] {};
	ZVariant m_customData; // 0x10
};

// Size: 0x28
class /*alignas(8)*/ ZAMDEventTrack
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZAMDEventTrack& p_Other) const;
	bool operator!=(const ZAMDEventTrack& p_Other) const { return !(*this == p_Other); }

	ZString m_sName; // 0x0
	TArray<ZAMDEvent> m_events; // 0x10
};

// Size: 0x30
class /*alignas(8)*/ ZAMDTake
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZAMDTake& p_Other) const;
	bool operator!=(const ZAMDTake& p_Other) const { return !(*this == p_Other); }

	TArray<ZAMDEventTrack> m_eventTracks; // 0x0
	ZVariant m_customData; // 0x18
	int32 m_nSyncTrackIndex; // 0x28
	uint8_t _pad2C[4] {};
};

// Size: 0x4
enum class ZAT2Controller_EFoot : int32_t
{
	FOOT_LEFT = 0,
	FOOT_RIGHT = 1,
};

// Size: 0x4
enum class ZAT2Controller_EFootstepsMovementType : int32_t
{
	MOVEMENT_WALKING = 0,
	MOVEMENT_WALKING_SLIDING = 1,
	MOVEMENT_RUNNING = 2,
	MOVEMENT_STANDING = 3,
};

// Size: 0x58
class /*alignas(8)*/ ZAT2Controller_SEventPreviewInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZAT2Controller_SEventPreviewInfo& p_Other) const;
	bool operator!=(const ZAT2Controller_SEventPreviewInfo& p_Other) const { return !(*this == p_Other); }

	int32 m_nEventID; // 0x0
	uint8_t _pad4[4] {};
	ZString m_sConsumerID; // 0x8
	float32 m_fDuration; // 0x18
	uint8_t _pad1C[4] {};
	ZString m_sExtraDataTypeName; // 0x20
	TMap<ZString,ZVariant> m_extraDataProperties; // 0x30
};

// Size: 0x8
class /*alignas(4)*/ ZAT2Controller_SGeneratedFootstepEvent
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZAT2Controller_SGeneratedFootstepEvent& p_Other) const;
	bool operator!=(const ZAT2Controller_SGeneratedFootstepEvent& p_Other) const { return !(*this == p_Other); }

	ZAT2Controller_EFoot m_eFoot; // 0x0
	float32 m_fFrame; // 0x4
};

// Size: 0x4
enum class ZAccidentSetupEntity_EAccidentPropagation : int32_t
{
	eAP_None = 0,
	eAP_Far = 1,
};

// Size: 0x4
enum class ZActBehaviorEntity_EApproachAlignment : int32_t
{
	AA_STRICT = 0,
	AA_LOOSE = 1,
};

// Size: 0x4
enum class ZActBehaviorEntity_EMovementType : int32_t
{
	MT_WALK = 0,
	MT_SNAP = 1,
	MT_IGNORE_POSITION = 2,
};

// Size: 0x4
enum class ZActBehaviorEntity_ERotationAlignment : int32_t
{
	RA_NONE = 0,
	RA_LOOSE = 1,
	RA_EXACT = 2,
};

// Size: 0x4
enum class ZActDurationCondition_EState : int32_t
{
	MOVING = 0,
	ENTERING = 1,
	PLAYING = 2,
	STOPPING = 3,
};

// Size: 0x4
enum class ZActStateCondition_EState : int32_t
{
	MOVING = 0,
	ENTERING = 1,
	PLAYING = 2,
};

// Size: 0x4
enum class ZActorAccessoryItemCondition_EConditionTypes : int32_t
{
	ECT_HasInPool = 0,
	ECT_HasAttached = 1,
};

// Size: 0x4
enum class ZActorBoneAttachEntity_EResetMode : int32_t
{
	eAtBoneOrigin = 0,
	eKeepOffset = 1,
};

// Size: 0x4
enum class ZActorDebugEntity_EActorDebugColor : int32_t
{
	EDC_RED = 255,
	EDC_GREEN = 65280,
	EDC_BLUE = 16711680,
	EDC_PINK = 16711935,
	EDC_DARK_RED = 127,
	EDC_DARK_GREEN = 32512,
	EDC_DARK_BLUE = 8323072,
	EDC_DARK_PINK = 8323199,
	EDC_BLACK = 0,
	EDC_WHITE = 16777215,
};

// Size: 0x4
enum class ZActorInstanceEntity_EFFXMode : int32_t
{
	eFFX_MODE_DISABLE = 0,
	eFFX_MODE_OVERWRITE = 1,
};

// Size: 0x4
enum class ZActorKeywordCondition_EEvaluationType : int32_t
{
	ALL = 0,
	NONE = 1,
	ANY = 2,
};

// Size: 0x4
enum class ZActorKnowledgeCondition_EEvaluationType : int32_t
{
	ALL = 0,
	ANY = 1,
};

// Size: 0x4
enum class ZActorPicker_EKeywordEvaluationType : int32_t
{
	ALL = 0,
	NONE = 1,
	ANY = 2,
};

// Size: 0x4
enum class ZActorPickerEffectDrama_EEffectPhaseAction : int32_t
{
	EPA_START = 0,
	EPA_LEAVE = 1,
};

// Size: 0x4
enum class ZActorPickerEffectTrack_EEffectPhaseAction : int32_t
{
	EPA_ATTACH = 0,
	EPA_DETACH = 1,
};

// Size: 0x4
enum class ZActorPickerFilterGroup_EEvaluationType : int32_t
{
	ALL = 0,
	NONE = 1,
	ANY = 2,
};

// Size: 0x4
enum class ZActorProviderFilterKeyword_EEvaluationType : int32_t
{
	ALL = 0,
	NONE = 1,
	ANY = 2,
};

// Size: 0x4
enum class ZActorTensionEntity_ETensionCheckMode : int32_t
{
	ETCM_INSIDE_VOLUME_OR_LIST = 0,
	ETCM_INSIDE_VOLUME_AND_LIST = 1,
};

// Size: 0x4
enum class ZApproachOrder_EApproachStyle : int32_t
{
	AS_AUTO = 0,
	AS_SPRINT = 1,
	AS_JOG = 2,
	AS_WALK = 3,
};

// Size: 0x20
class /*alignas(16)*/ ZApproachOrder_SApproachOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZApproachOrder_SApproachOrderSaveData& p_Other) const;
	bool operator!=(const ZApproachOrder_SApproachOrderSaveData& p_Other) const { return !(*this == p_Other); }

	float4 m_vStopDirection; // 0x0
	ZApproachOrder_EApproachStyle m_style; // 0x10
	bool m_bForceStand; // 0x14
	bool m_bStopActFast; // 0x15
	uint8_t _pad16[10] {};
};

// Size: 0x1
enum class ZAudioEventBase_CullingBehavior : int8_t
{
	AutoSendStop = 0,
	AutoSendStopAfterTriggered = 1,
	NoAutoSendStop = 2,
	NoDistanceCulling = 3,
};

// Size: 0x8
class /*alignas(8)*/ ZAutoNullEntityRef
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZAutoNullEntityRef& p_Other) const;
	bool operator!=(const ZAutoNullEntityRef& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x4
enum class ZAvoidDangerousAreaGroup_EAvoidDangerousAreaGroupState : int32_t
{
	IGS_SelectDestination = 0,
	IGS_Move = 1,
	IGS_Jump = 2,
	IGS_Wait = 3,
	IGS_Completed = 4,
	IGS_Max = 5,
};

// Size: 0x18
class /*alignas(8)*/ ZAvoidDangerousAreaSituation_SSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZAvoidDangerousAreaSituation_SSituationSaveData& p_Other) const;
	bool operator!=(const ZAvoidDangerousAreaSituation_SSituationSaveData& p_Other) const { return !(*this == p_Other); }

	TArray<int32> m_aAvoidDangerousAreaGroups; // 0x0
};

// Size: 0x4
enum class ZBoneAttachEntity_EResetMode : int32_t
{
	eAtBoneOrigin = 0,
	eKeepOffset = 1,
};

// Size: 0x4
enum class ZBoneWeightRotationEntity_eRotationAxises : int32_t
{
	AXIS_X = 0,
	AXIS_Y = 1,
	AXIS_Z = 2,
};

// Size: 0x4
enum class ZBoxReflectionEntity_EBoundsType : int32_t
{
	eBox = 0,
	eRoom = 1,
};

// Size: 0x4
enum class ZBoxReflectionEntity_EType : int32_t
{
	eLocal = 0,
	eFallback = 1,
};

// Size: 0x4
enum class ZCautiousInvestigateGroup_EAssistantState : int32_t
{
	AS_Waiting = 0,
	AS_CalculateFields = 1,
	AS_RequestNode = 2,
	AS_Moving = 3,
	AS_Investigating = 4,
	AS_Max = 5,
};

// Size: 0x4
enum class ZCautiousInvestigateGroup_EInvestigateGroupState : int32_t
{
	IGS_FindAssistant = 0,
	IGS_PreAcknowledge = 1,
	IGS_Acknowledge = 2,
	IGS_Approach = 3,
	IGS_Approaching = 4,
	IGS_Investigating = 5,
	IGS_DeadBody = 6,
	IGS_Completed = 7,
	IGS_Max = 8,
};

// Size: 0x4
enum class ZChannelKeywordCondition_EEvaluationType : int32_t
{
	ALL = 0,
	NONE = 1,
	ANY = 2,
};

// Size: 0x4
enum class ZCharacterSpeakCondition_EState : int32_t
{
	Started = 0,
	Playing = 1,
	Completed = 2,
	SubsSeenAndCompleted = 3,
	Failed = 4,
	Stopped = 5,
};

// Size: 0xC
class /*alignas(4)*/ ZCloseCombatDef_SActorNoise
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZCloseCombatDef_SActorNoise& p_Other) const;
	bool operator!=(const ZCloseCombatDef_SActorNoise& p_Other) const { return !(*this == p_Other); }

	SActorSoundDefs_EDefinition m_iSpeak; // 0x0
	EAIEventType m_eAIEvent; // 0x4
	float32 m_fAIEventDistance; // 0x8
};

// Size: 0x28
class /*alignas(8)*/ ZComponentCreator
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZComponentCreator& p_Other) const;
	bool operator!=(const ZComponentCreator& p_Other) const { return !(*this == p_Other); }

	ZString m_sComponentName; // 0x0
	TArray<ZVariant> m_aArgs; // 0x10
};

// Size: 0x4
enum class ZConditionListEntity_EEvaluationType : int32_t
{
	ALL_TRUE = 0,
	ANY_TRUE = 1,
};

// Size: 0x4
enum class ZContextKillGuide_EContextKillType : int32_t
{
	eCKT_TOILET_DROWN = 0,
	eCKT_SNAP_AND_TOSS = 1,
	eCKT_PUSH = 2,
	eCKT_NO_ANIMATION = 3,
	eCKT_END = 4,
};

// Size: 0x4
enum class ZContextKillGuide_EEvaluationType : int32_t
{
	ALL = 0,
	NONE = 1,
	ANY = 2,
};

// Size: 0x38
class /*alignas(8)*/ ZContractEvaluationContext
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZContractEvaluationContext& p_Other) const;
	bool operator!=(const ZContractEvaluationContext& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[56] {};
};

// Size: 0x4
enum class ZContractObjectiveHudHintEntity_EObjectiveHintIcon : int32_t
{
	eNone = 0,
	eInfoIcon = 7,
	eExclamationMark = 8,
};

// Size: 0x4
enum class ZCoverPlane_ECoverSize : int32_t
{
	eLowCover = 0,
	eMediumCover = 1,
	eHighCover = 2,
};

// Size: 0x4
enum class ZCoverPlane_ECoverType : int32_t
{
	eCoverOnly = 0,
	eCoverAndRail = 1,
	eRailOnly = 2,
};

// Size: 0x4
enum class ZCrowdActorEntity_EActorResourceChangeFlags : int32_t
{
	AR_MODEL = 1,
};

// Size: 0x4
enum class ZCrowdActorEntity_ECharacterSoundType : int32_t
{
	eSoundType_Male = 0,
	eSoundType_Female = 1,
	eSoundType_Female_Heels = 2,
};

// Size: 0x18
class /*alignas(8)*/ ZCurve
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZCurve& p_Other) const;
	bool operator!=(const ZCurve& p_Other) const { return !(*this == p_Other); }

	TArray<TFixedArray<float32, 8>> data; // 0x0
};

// Size: 0x4
enum class ZDeadBodySituation_ESituationFlavor : int32_t
{
	SF_None = 0,
	SF_Unconscious = 1,
	SF_DeadBody = 2,
	SF_BloodPool = 3,
	SF_Accident = 4,
};

// Size: 0xC
class /*alignas(4)*/ ZDeadBodySituation_SIncidentSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZDeadBodySituation_SIncidentSaveData& p_Other) const;
	bool operator!=(const ZDeadBodySituation_SIncidentSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_body; // 0x0
	uint32 m_blood; // 0x4
	bool m_bAccident; // 0x8
	uint8_t _pad9[3] {};
};

// Size: 0x28
class /*alignas(8)*/ ZDeadBodySituation_SState
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZDeadBodySituation_SState& p_Other) const;
	bool operator!=(const ZDeadBodySituation_SState& p_Other) const { return !(*this == p_Other); }

	ZDeadBodySituation_ESituationFlavor m_eFlavor; // 0x0
	uint8_t _pad4[4] {};
	ZGameTime m_tLastEscalateOrder; // 0x8
	ZGameTime m_tNextStanddownTime; // 0x10
	int32 m_nSuspiciousDeaths; // 0x18
	bool m_bAcknowledged; // 0x1C
	bool m_bInspected; // 0x1D
	bool m_bAccidentsResolved; // 0x1E
	bool m_bStanddownComplete; // 0x1F
	bool m_bStandDownUnconscious; // 0x20
	bool m_bEscalateUnconscious; // 0x21
	uint8_t _pad22[6] {};
};

// Size: 0x50
class /*alignas(8)*/ ZDeadBodySituation_SSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZDeadBodySituation_SSituationSaveData& p_Other) const;
	bool operator!=(const ZDeadBodySituation_SSituationSaveData& p_Other) const { return !(*this == p_Other); }

	ZDeadBodySituation_SState m_State; // 0x0
	uint32 m_pLeader; // 0x28
	uint8_t _pad2C[4] {};
	TArray<ZDeadBodySituation_SIncidentSaveData> m_aIncidents; // 0x30
	int32 m_pInvestigateDisguiseGroup; // 0x48
	int32 m_pObserversGroup; // 0x4C
};

// Size: 0x4
enum class ZDebugGizmoEntity_EDrawLayer : int32_t
{
	DL_DEFAULT = 0,
	DL_LIGHT = 1,
	DL_PARTICLES = 2,
	DL_PARTITIONING = 3,
	DL_DECALS = 4,
	DL_CROWD = 5,
	DL_PHYSICS = 6,
	DL_HERO = 7,
	DL_AI = 8,
	DL_AI_GRID = 9,
	DL_AI_SITUATION = 10,
	DL_NPC_LOCOMOTION = 11,
	DL_GAME = 12,
	DL_ALIGNMENT = 13,
	DL_ENGINE = 14,
	DL_SOUND = 15,
	DL_ANIMATION = 16,
	DL_CLOTH = 17,
	DL_SOUND_PARTITIONING = 18,
	DL_UI = 19,
};

// Size: 0x4
enum class ZDebugHM5GameTimeMultiplierEnt_eTMLDReason : int32_t
{
	eTMLDR_HintMessages = 0,
	eTMLDR_Sequence = 1,
	eTMLDR_ActionKillHeadShot = 2,
	eTMLDR_ActionKillCCProp = 3,
	eTMLDR_ActionKillExplosion = 4,
	eTMLDR_ActionKillLastEnemyInEncounter = 5,
	eTMLDR_ActionKillLastEnemyInCheckPoint = 6,
	eTMLDR_NOTSET = 7,
};

// Size: 0x4
enum class ZDebugSpatialEntity_EDrawLayer : int32_t
{
	DL_DEFAULT = 0,
	DL_LIGHT = 1,
	DL_PARTICLES = 2,
	DL_PARTITIONING = 3,
	DL_DECALS = 4,
	DL_CROWD = 5,
	DL_PHYSICS = 6,
	DL_HERO = 7,
	DL_AI = 8,
	DL_AI_GRID = 9,
	DL_AI_SITUATION = 10,
	DL_NPC_LOCOMOTION = 11,
	DL_GAME = 12,
	DL_ALIGNMENT = 13,
	DL_ENGINE = 14,
	DL_SOUND = 15,
	DL_ANIMATION = 16,
	DL_CLOTH = 17,
	DL_SOUND_PARTITIONING = 18,
	DL_UI = 19,
};

// Size: 0x4
enum class ZDebugTextEntity_EHorizontalAlignment : int32_t
{
	HA_LEFT = 1,
	HA_CENTER = 0,
	HA_RIGHT = 2,
};

// Size: 0x4
enum class ZDebugTextEntity_EVerticalAlignment : int32_t
{
	VA_TOP = 16,
	VA_CENTER = 0,
	VA_BOTTOM = 32,
};

// Size: 0x4
enum class ZDecalControllerEntity_ERotationType : int32_t
{
	eRotationDisable = 0,
	eRotationAlignRay = 1,
	eRotationRandom = 2,
};

// Size: 0x4
enum class ZDecalControllerEntity_EScaleType : int32_t
{
	eScaleDisable = 0,
	eScaleUniform = 1,
	eScaleY = 2,
};

// Size: 0x4
enum class ZDetectedInPrivateGroup_EInvestigateGroupState : int32_t
{
	IGS_Delay = 0,
	IGS_Talk = 1,
	IGS_Move = 2,
	IGS_Wait = 3,
	IGS_Completed = 4,
	IGS_Max = 5,
};

// Size: 0x4
class /*alignas(4)*/ ZDetectedInPrivateSituation_SSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZDetectedInPrivateSituation_SSituationSaveData& p_Other) const;
	bool operator!=(const ZDetectedInPrivateSituation_SSituationSaveData& p_Other) const { return !(*this == p_Other); }

	int32 m_pDetectedInPrivateGroup; // 0x0
};

// Size: 0x4
enum class ZDialogEventItemType : int32_t
{
	eDEIT_WavFile = 1,
	eDEIT_RandomContainer = 2,
	eDEIT_SwitchContainer = 3,
	eDEIT_SequenceContainer = 4,
	eDEIT_Invalid = 15,
};

// Size: 0x2
class /*alignas(2)*/ ZDialogEventItemTypedIndex
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZDialogEventItemTypedIndex& p_Other) const;
	bool operator!=(const ZDialogEventItemTypedIndex& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[2] {};
};

// Size: 0x4
enum class ZDialogOptionEntity_EDialogOptionType : int32_t
{
	DOT_NORMAL = 0,
	DOT_UNLOCKABLE = 1,
};

// Size: 0x28
class /*alignas(8)*/ ZDisguiseSituation_SSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZDisguiseSituation_SSituationSaveData& p_Other) const;
	bool operator!=(const ZDisguiseSituation_SSituationSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_pLeader; // 0x0
	uint8_t _pad4[4] {};
	TArray<int32> m_aInvestigateDisguiseGroups; // 0x8
	EAISharedEventType m_eEventSetOnEscalation; // 0x20
	uint8_t _pad24[4] {};
};

// Size: 0x4
enum class ZDistanceCondition_ECompareMethod : int32_t
{
	CM_GreaterOrEqualThan = 0,
	CM_LessThan = 1,
};

// Size: 0x4
enum class ZDistanceCondition_EObjectType : int32_t
{
	DT_ToCam = 0,
	DT_ToPlayer = 1,
};

// Size: 0x4
enum class ZDramaSituationEntity_EDebugExclusionLayerState : int32_t
{
	DEBUGELSTATE_UNKNOWN = 0,
	DEBUGELSTATE_BLOCKED = 1,
	DEBUGELSTATE_UNBLOCKED = 2,
};

// Size: 0x4
enum class ZDramaSituationEntity_EExclusionLayer : int32_t
{
	EL_NONE = 0,
	EL_STORY = 1,
	EL_AMBIENT = 2,
};

// Size: 0x4
enum class ZDramaSituationEntity_EReentryBehavior : int32_t
{
	RB_CONTINUE = 0,
	RB_TERMINATE = 1,
	RB_RESTART = 2,
	RB_RECASTANDRESTART = 3,
	RB_RECASTANDCONTINUE = 4,
};

// Size: 0x30
class /*alignas(8)*/ ZDynamicObject_SArrayTypesRegistrar
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZDynamicObject_SArrayTypesRegistrar& p_Other) const;
	bool operator!=(const ZDynamicObject_SArrayTypesRegistrar& p_Other) const { return !(*this == p_Other); }

	TArray<SDynamicObjectKeyValuePair> _dummy; // 0x0
	TArray<ZDynamicObject> _dummy2; // 0x18
};

// Size: 0x18
class /*alignas(8)*/ ZER64
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZER64& p_Other) const;
	bool operator!=(const ZER64& p_Other) const { return !(*this == p_Other); }

	uint64 m_nEntityID; // 0x0
	ZString m_sExposedEntity; // 0x8
};

// Size: 0x10
class /*alignas(8)*/ ZEntityID
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZEntityID& p_Other) const;
	bool operator!=(const ZEntityID& p_Other) const { return !(*this == p_Other); }

	ZString m_sStr; // 0x0
};

// Size: 0x8
class /*alignas(8)*/ ZEntityRef
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZEntityRef& p_Other) const;
	bool operator!=(const ZEntityRef& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x20
class /*alignas(8)*/ ZEntityReference
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZEntityReference& p_Other) const;
	bool operator!=(const ZEntityReference& p_Other) const { return !(*this == p_Other); }

	ZEntityID m_EntityID; // 0x0
	ZString m_sExposedEntity; // 0x10
};

// Size: 0x20
class /*alignas(16)*/ ZFormationMoveOrder_SFormationMoveOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZFormationMoveOrder_SFormationMoveOrderSaveData& p_Other) const;
	bool operator!=(const ZFormationMoveOrder_SFormationMoveOrderSaveData& p_Other) const { return !(*this == p_Other); }

	float4 m_vStopDirection; // 0x0
	uint32 m_nObstacleBlockageFlags; // 0x10
	EMoveSpeed m_eMoveSpeed; // 0x14
	uint8_t _pad18[8] {};
};

// Size: 0x4
enum class ZGameEventListenerEntity_EGameEventType : int32_t
{
	GET_GameplayStart = 0,
	GET_GameplayStop = 1,
	GET_IntroCutStart = 2,
	GET_IntroCutEnd = 3,
	GET_ProfilingStart = 4,
	GET_SavegameRestored = 5,
};

// Size: 0x4
enum class ZGetHelpGroup_EInvestigateGroupState : int32_t
{
	IGS_Acknowledge = 0,
	IGS_WaitForAckDialog = 1,
	IGS_RunToGuard = 2,
	IGS_ReportToHitman = 3,
	IGS_ReportToGuard = 4,
	IGS_StartMoveBack = 5,
	IGS_MoveBack = 6,
	IGS_Investigate = 7,
	IGS_Completed = 8,
	IGS_Max = 9,
};

// Size: 0x8
class /*alignas(8)*/ ZGfxValueWrapper
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZGfxValueWrapper& p_Other) const;
	bool operator!=(const ZGfxValueWrapper& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x20
class /*alignas(8)*/ ZGridFloatField
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZGridFloatField& p_Other) const;
	bool operator!=(const ZGridFloatField& p_Other) const { return !(*this == p_Other); }

	float32 m_fInitialValue; // 0x4
	TArray<float32> m_field; // 0x8
};

// Size: 0x4
enum class ZHM5AgilityEventConsumer_EEvent : int32_t
{
	EAE_LEFTHAND = 0,
	EAE_RIGHTHAND = 1,
	EAE_LEFTLEG = 2,
	EAE_RIGHTLEG = 3,
};

// Size: 0x4
class /*alignas(4)*/ ZHM5AgilityEventConsumer_SAgilityEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5AgilityEventConsumer_SAgilityEventData& p_Other) const;
	bool operator!=(const ZHM5AgilityEventConsumer_SAgilityEventData& p_Other) const { return !(*this == p_Other); }

	ZHM5AgilityEventConsumer_EEvent m_nEvent; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ ZResourcePtr
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZResourcePtr& p_Other) const;
	bool operator!=(const ZResourcePtr& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x10
class /*alignas(4)*/ ZHM5AudioEventConsumer_SAudioAnimationEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5AudioEventConsumer_SAudioAnimationEventData& p_Other) const;
	bool operator!=(const ZHM5AudioEventConsumer_SAudioAnimationEventData& p_Other) const { return !(*this == p_Other); }

	ZResourcePtr m_pAudioEventRes; // 0x0
	float32 m_fAttenuation; // 0x8
	float32 m_fPitch; // 0xC
};

// Size: 0x4
enum class ZHM5BodyContainer_EBCAnimSet : int32_t
{
	BC_CONTAINER_STANDARD = 0,
	BC_CONTAINER_WOODCHIPPER = 1,
	BC_CAR_STANDARD_TRUNK = 2,
	BC_CONTAINER_CLOSET = 3,
	BC_CONTAINER_LAUNDRYCHUTE = 4,
};

// Size: 0x4
enum class ZHM5BodyContainer_EBCBodyMode : int32_t
{
	BC_1_VICTIM = 0,
	BC_2_VICTIMS = 1,
	BC_1_VICTIM_FLUSHABLE = 2,
	BC_1_VICTIM_AUTOFLUSHABLE = 3,
};

// Size: 0x4
enum class ZHM5BodyContainer_eBCCloseMode : int32_t
{
	BC_AUTOCLOSE = 0,
	BC_MANUALCLOSE = 1,
};

// Size: 0x4
enum class ZHM5BodySoundEventConsumer_EAnimSoundBody : int32_t
{
	eHM5AnimSoundBody_Buttocks = 0,
	eHM5AnimSoundBody_Back = 1,
	eHM5AnimSoundBody_Head = 2,
	eHM5AnimSoundBody_Knee_L = 3,
	eHM5AnimSoundBody_Knee_R = 4,
	eHM5AnimSoundBody_Elbow_L = 5,
	eHM5AnimSoundBody_Elbow_R = 6,
	eHM5AnimSoundBody_Hand_L = 7,
	eHM5AnimSoundBody_Hand_R = 8,
	eHM5AnimSoundBody_Foot_L = 9,
	eHM5AnimSoundBody_Foot_R = 10,
	eHM5AnimSoundBody_Shoulder_L = 11,
	eHM5AnimSoundBody_Shoulder_R = 12,
	eHM5AnimSoundBody_RollFwd = 13,
	eHM5AnimSoundBody_RollSide = 14,
};

// Size: 0x4
class /*alignas(4)*/ ZHM5BodySoundEventConsumer_SBodySoundEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5BodySoundEventConsumer_SBodySoundEventData& p_Other) const;
	bool operator!=(const ZHM5BodySoundEventConsumer_SBodySoundEventData& p_Other) const { return !(*this == p_Other); }

	ZHM5BodySoundEventConsumer_EAnimSoundBody m_nEvent; // 0x0
};

// Size: 0xC
class /*alignas(4)*/ ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData& p_Other) const;
	bool operator!=(const ZHM5CloseCombatEventConsumer_SCloseCombatSoundEventData& p_Other) const { return !(*this == p_Other); }

	EHM5SoundCloseCombatEvent m_nEvent; // 0x0
	float32 m_fAttenuation; // 0x4
	float32 m_fPitch; // 0x8
};

// Size: 0x4
enum class ZHM5ContextActionEntity_EInteraction : int32_t
{
	eIT_RotateLeftStick = 0,
	eIT_AutoComplete = 1,
	eIT_NoInteraction = 2,
};

// Size: 0x10
class /*alignas(4)*/ ZHM5CrowdEventConsumer_SCrowdSoundEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5CrowdEventConsumer_SCrowdSoundEventData& p_Other) const;
	bool operator!=(const ZHM5CrowdEventConsumer_SCrowdSoundEventData& p_Other) const { return !(*this == p_Other); }

	ZResourcePtr m_pAudioEventRes; // 0x0
	float32 m_fAttenuation; // 0x8
	float32 m_fPitch; // 0xC
};

// Size: 0x4
enum class ZHM5CrowdGenericEventConsumer_EEvent : int32_t
{
	eFootstep = 0,
	eClothRustle = 1,
	ePushReaction = 2,
	ePanic = 3,
	eGeneric00 = 4,
	eGeneric01 = 5,
	eGeneric02 = 6,
	eGeneric03 = 7,
};

// Size: 0x4
class /*alignas(4)*/ ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData& p_Other) const;
	bool operator!=(const ZHM5CrowdGenericEventConsumer_SCrowdSoundGenericEventData& p_Other) const { return !(*this == p_Other); }

	ZHM5CrowdGenericEventConsumer_EEvent m_nEvent; // 0x0
};

// Size: 0x4
enum class ZHM5DynamicRayCastEntity_ECollideType : int32_t
{
	eStatic = 0,
	eAnyDynamic = 1,
	eBaseCharacter = 2,
	eHitman = 3,
	eActor = 4,
};

// Size: 0x4
enum class ZHM5FaceFXReactionEventConsumer_EEvent : int32_t
{
	eHitByBullet = 0,
	eFireRegularWeapon = 1,
	eReloadRegularWeapon = 2,
	eFireHeavyWeapon = 3,
	eReloadHeavyWeapon = 4,
	eCCAttacking = 5,
	eCCGettingHit = 6,
	eCoverDodgebulletLeft = 7,
	eCoverDodgebulletRight = 8,
	eReactToExplosion = 9,
};

// Size: 0x4
class /*alignas(4)*/ ZHM5FaceFXReactionEventConsumer_SFaceFXEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5FaceFXReactionEventConsumer_SFaceFXEventData& p_Other) const;
	bool operator!=(const ZHM5FaceFXReactionEventConsumer_SFaceFXEventData& p_Other) const { return !(*this == p_Other); }

	ZHM5FaceFXReactionEventConsumer_EEvent m_nEvent; // 0x0
};

// Size: 0x4
enum class ZHM5FaceFXSpecificEventConsumer_EEvent : int32_t
{
	eNone = 0,
	eGetInCombatCoverExhalation = 1,
	eLeaveCombatCoverExhalation = 2,
	eAgilityStrainedInhaleExhale = 3,
	eAgilityGroan = 4,
	eCloseCombatAttackSnarl = 5,
	eCloseCombatStainedGroan = 6,
	eCloseCombatSilentKillShush = 7,
};

// Size: 0x18
class /*alignas(8)*/ ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData& p_Other) const;
	bool operator!=(const ZHM5FaceFXSpecificEventConsumer_SFaceFXEventData& p_Other) const { return !(*this == p_Other); }

	ZHM5FaceFXSpecificEventConsumer_EEvent m_nEvent; // 0x0
	uint8_t _pad4[4] {};
	ZString m_sFaceExpression; // 0x8
};

// Size: 0x4
class /*alignas(4)*/ ZHM5FootstepEventConsumer_SFootstepSoundEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5FootstepEventConsumer_SFootstepSoundEventData& p_Other) const;
	bool operator!=(const ZHM5FootstepEventConsumer_SFootstepSoundEventData& p_Other) const { return !(*this == p_Other); }

	EHM5SoundFootstepEvent m_nEvent; // 0x0
};

// Size: 0x4
enum class ZHM5ForceCover_EFaceDirection : int32_t
{
	eFaceLeft = 0,
	eFaceRight = 1,
};

// Size: 0x4
enum class ZHM5ForceVentilatorShaft_EFaceDirection : int32_t
{
	eFaceLeft = 0,
	eFaceRight = 1,
};

// Size: 0x4
enum class ZHM5GenericEventConsumer_EEvent : int32_t
{
	eGeneric00 = 0,
	eGeneric01 = 1,
	eGeneric02 = 2,
	eGeneric03 = 3,
	eGeneric04 = 4,
	eGeneric05 = 5,
	eGeneric06 = 6,
	eGeneric07 = 7,
};

// Size: 0x4
class /*alignas(4)*/ ZHM5GenericEventConsumer_SGenericEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5GenericEventConsumer_SGenericEventData& p_Other) const;
	bool operator!=(const ZHM5GenericEventConsumer_SGenericEventData& p_Other) const { return !(*this == p_Other); }

	ZHM5GenericEventConsumer_EEvent m_nEvent; // 0x0
};

// Size: 0x4
enum class ZHM5HIKEventConsumer_EBlend : int32_t
{
	eBlendIn = 0,
	eBlendOut = 1,
	eInstantOn = 2,
	eInstantOff = 3,
};

// Size: 0x4
enum class ZHM5HIKEventConsumer_EEffector : int32_t
{
	eLeftHand = 0,
	eRightHand = 1,
};

// Size: 0x8
class /*alignas(4)*/ ZHM5HIKEventConsumer_SZHM5HIKEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5HIKEventConsumer_SZHM5HIKEventData& p_Other) const;
	bool operator!=(const ZHM5HIKEventConsumer_SZHM5HIKEventData& p_Other) const { return !(*this == p_Other); }

	ZHM5HIKEventConsumer_EEffector m_nEffector; // 0x0
	ZHM5HIKEventConsumer_EBlend m_nBlend; // 0x4
};

// Size: 0x4
enum class ZHM5HitmanFocusModifier_EFocusAddRemove : int32_t
{
	eAddFocusInstantly = 0,
	eRemoveFocusInstantly = 1,
	eIncreaseFocusToValue = 2,
	eDecreaseFocusToValue = 3,
	eAutoAdjustFocus = 4,
};

// Size: 0x4
enum class ZHM5HitmanFocusModifier_EFocusValue : int32_t
{
	eFocus0 = 0,
	eFocus10 = 10,
	eFocus20 = 20,
	eFocus30 = 30,
	eFocus40 = 40,
	eFocus50 = 50,
	eFocus60 = 60,
	eFocus70 = 70,
	eFocus80 = 80,
	eFocus90 = 90,
	eFocus100 = 100,
};

// Size: 0x4
enum class ZHM5HitmanHealthModifier_EHealthDrainType : int32_t
{
	eRemoveHealthInstantly = 0,
	eDecreaseHealthToValue = 1,
};

// Size: 0x4
enum class ZHM5HitmanHealthModifier_EHealthValue : int32_t
{
	eHealth0 = 0,
	eHealth10 = 10,
	eHealth20 = 20,
	eHealth30 = 30,
	eHealth40 = 40,
	eHealth50 = 50,
	eHealth60 = 60,
	eHealth70 = 70,
	eHealth80 = 80,
	eHealth90 = 90,
	eHealth100 = 100,
};

// Size: 0x4
enum class ZHM5HitmanWeaponModifier_EAddAmmo : int32_t
{
	eIncreaseClipsToValue = 0,
	eGiveClipsUpToValue = 1,
	eGiveFullAmmo = 2,
	eSetAmmoToValue = 3,
};

// Size: 0x4
enum class ZHM5HitmanWeaponModifier_EDropWeapon : int32_t
{
	eDropFiberWire = 0,
	eDropAllFireArms = 1,
	eDropCCWeapons = 2,
	eDropAll = 3,
};

// Size: 0x4
enum class ZHM5IndicatorManager_EIndicatorType : int32_t
{
	eActorAmbient = 0,
	eActorAlertedLow = 1,
	eActorAlertedHigh = 2,
	eActorArrest = 3,
	eActorCombat = 4,
	eExplosion = 5,
	eObjective = 6,
	ePointOfInterest = 7,
	eContractExit = 8,
	eEasterActor = 9,
};

// Size: 0x4
enum class ZHM5Item_EKeywordEvaluationType : int32_t
{
	ALL = 0,
	NONE = 1,
	ANY = 2,
};

// Size: 0x4
enum class ZHM5Item_EUseTypes : int32_t
{
	EUT_CantUse = 0,
	EUT_Toggle = 1,
	EUT_TurnOn = 2,
};

// Size: 0x4
enum class ZHM5ItemInteractionEventConsumer_EHM5SoundItemInteractionEvent : int32_t
{
	EIIE_ItemImpactBack = 0,
	EIIE_ItemImpactFront = 1,
	EIIE_ImpactLow = 2,
	EIIE_ItemPullOut = 3,
	EIIE_ItemOnDeadlyThrow = 4,
	EIIE_ItemSlitThroat = 5,
	EIIE_ItemSoundGeneric01 = 6,
	EIIE_ItemSoundGeneric02 = 7,
	EIIE_ItemSoundGeneric03 = 8,
};

// Size: 0x4
class /*alignas(4)*/ ZHM5ItemInteractionEventConsumer_SItemInteractionEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5ItemInteractionEventConsumer_SItemInteractionEventData& p_Other) const;
	bool operator!=(const ZHM5ItemInteractionEventConsumer_SItemInteractionEventData& p_Other) const { return !(*this == p_Other); }

	ZHM5ItemInteractionEventConsumer_EHM5SoundItemInteractionEvent m_nEvent; // 0x0
};

// Size: 0x4
enum class ZHM5LedgeMount_EFaceDirection : int32_t
{
	eFaceFront = 0,
	eFaceLeft = 1,
	eFaceRight = 2,
};

// Size: 0x4
enum class ZHM5LedgeMount_ELedgeEndState : int32_t
{
	eHang = 0,
	eStand = 1,
};

// Size: 0x4
enum class ZHM5ValueEntity_bool_EForwardRule : int32_t
{
	eAlways = 0,
	eValueChanged = 1,
};

// Size: 0x4
enum class ZHM5WeaponBasicConfigEntity_EWeaponBasicConfigAudioClass : int32_t
{
	eWBC_AudioClass_AssaultRifle = 0,
	eWBC_AudioClass_Pistol = 1,
	eWBC_AudioClass_Shotgun = 2,
	eWBC_AudioClass_SMG = 3,
	eWBC_AudioClass_SniperRifle = 4,
};

// Size: 0x4
enum class ZHM5WeaponBasicConfigEntity_EWeaponBasicConfigAudioExoticType : int32_t
{
	eWBC_AudioExoticType_MiniPistol = 0,
	eWBC_AudioExoticType_OneHandSpinReloadShotgun = 1,
	eWBC_AudioExoticType_TranquilizerDartPistol = 2,
	eWBC_AudioExoticType_Walter2000SniperRifle = 3,
	eWBC_AudioExoticType_ShootingRange_NPCAssaultRifle = 4,
	eWBC_AudioExoticType_None = 32768,
};

// Size: 0x4
enum class ZHM5WeaponBasicConfigEntity_EWeaponBasicConfigAudioFamily : int32_t
{
	eWBC_AudioFamily_Exotics = 0,
	eWBC_AudioFamily_Heavy = 1,
	eWBC_AudioFamily_Light = 2,
	eWBC_AudioFamily_NPC = 3,
	eWBC_AudioFamily_Standard = 4,
};

// Size: 0x4
enum class ZHM5WeaponBasicConfigEntity_EWeaponBasicConfigAudioFireType : int32_t
{
	eWBC_AudioFireType_Full_Automatic = 0,
	eWBC_AudioFireType_Single = 1,
};

// Size: 0x4
enum class ZHM5WeaponBasicConfigEntity_EWeaponBasicConfigAudioHeadTailType : int32_t
{
	eWBC_AudioHeadTailType_DryFire = 0,
	eWBC_AudioHeadTailType_Normal = 1,
	eWBC_AudioHeadTailType_NormalSweetener = 2,
	eWBC_AudioHeadTailType_Silenced = 3,
	eWBC_AudioHeadTailType_SilencedSweetener = 4,
};

// Size: 0x4
enum class ZHM5WeaponBasicConfigEntity_EWeaponBasicConfigAudioImpactType : int32_t
{
	eWBC_AudioImpactType_Normal = 0,
	eWBC_AudioImpactType_Sweetener = 1,
};

// Size: 0x4
enum class ZHM5WeaponEventConsumer_EAnimWeapon : int32_t
{
	eHM5Weapon_HideClip = 0,
	eHM5Weapon_ShowClip = 1,
	eHM5Weapon_SpawnPhysicsClip = 2,
	eHM5Weapon_EjectCartridge = 3,
};

// Size: 0x4
class /*alignas(4)*/ ZHM5WeaponEventConsumer_SWeaponEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHM5WeaponEventConsumer_SWeaponEventData& p_Other) const;
	bool operator!=(const ZHM5WeaponEventConsumer_SWeaponEventData& p_Other) const { return !(*this == p_Other); }

	ZHM5WeaponEventConsumer_EAnimWeapon m_nEvent; // 0x0
};

// Size: 0x8
class /*alignas(1)*/ ZHUDAIGuide_SData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHUDAIGuide_SData& p_Other) const;
	bool operator!=(const ZHUDAIGuide_SData& p_Other) const { return !(*this == p_Other); }

	bool bDisguiseBroken; // 0x0
	bool bTrespassing; // 0x1
	bool bInsideCrimeScene; // 0x2
	bool bNearDeadBody; // 0x3
	bool bVisiblyArmed; // 0x4
	bool bDisguiseSuspicious; // 0x5
	bool bDeepTrespassing; // 0x6
	bool bDeepTrespassingNOTUSEDBUTNECESSARYBECAUSEOFREALLYSTRANGEPROPERTYPARSERBUG; // 0x7
};

// Size: 0x20
class /*alignas(8)*/ ZHUDHintController_SData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHUDHintController_SData& p_Other) const;
	bool operator!=(const ZHUDHintController_SData& p_Other) const { return !(*this == p_Other); }

	ZString m_sTitleText; // 0x0
	ZString m_sBodyText; // 0x10
};

// Size: 0x4
enum class ZHUDTimerInstance_ETimeFormatChoice : int32_t
{
	YES = 0,
	NO = 1,
	AUTO = 2,
};

// Size: 0x28
class /*alignas(8)*/ ZHUDUIControllerEntity_SIntelData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHUDUIControllerEntity_SIntelData& p_Other) const;
	bool operator!=(const ZHUDUIControllerEntity_SIntelData& p_Other) const { return !(*this == p_Other); }

	ZString intelHeadline; // 0x0
	ZRepositoryID repoID; // 0x10
	int32 intelType; // 0x20
	float32 showDuration; // 0x24
};

// Size: 0x70
class /*alignas(8)*/ ZHUDUIControllerEntity_SWeaponViewData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHUDUIControllerEntity_SWeaponViewData& p_Other) const;
	bool operator!=(const ZHUDUIControllerEntity_SWeaponViewData& p_Other) const { return !(*this == p_Other); }

	SWeaponStatusUIData weaponStatus; // 0x0
	SItemOnBackUIData itemOnBackStatus; // 0x60
	bool bShowHolstered; // 0x6C
	uint8_t _pad6D[3] {};
};

// Size: 0x4
enum class ZHeroBoneAttachEntity_EResetMode : int32_t
{
	eAtBoneOrigin = 0,
	eKeepOffset = 1,
};

// Size: 0x4
enum class ZHeroInventoryAction_EEvaluationType : int32_t
{
	ALL = 0,
	NONE = 1,
	ANY = 2,
};

// Size: 0x4
enum class ZHeroKeywordCondition_EEvaluationType : int32_t
{
	ALL = 0,
	NONE = 1,
	ANY = 2,
};

// Size: 0x60
class /*alignas(8)*/ ZHttpUrl
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZHttpUrl& p_Other) const;
	bool operator!=(const ZHttpUrl& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[96] {};
};

// Size: 0x4
enum class ZHttpUrl_EVerb : int32_t
{
	eNONE = 0,
	eGET = 1,
	ePOST = 2,
	ePUT = 3,
	eHEAD = 4,
};

// Size: 0x4
enum class ZInputListenerAxisEntity_eInputListenerAxes : int32_t
{
	EILA_HORIZONTAL = 0,
	EILA_VERTICAL = 1,
	EILA_TRIGGER_1 = 2,
	EILA_TRIGGER_2 = 3,
};

// Size: 0x4
enum class ZInputListenerButtonEntity_eInputListenerButtons : int32_t
{
	EILB_UP = 0,
	EILB_LEFT = 1,
	EILB_DOWN = 2,
	EILB_RIGHT = 3,
};

// Size: 0x4
enum class ZInputListenerDpadEntity_eInputListenerDpad : int32_t
{
	EILDP_UP = 0,
	EILDP_LEFT = 1,
	EILDP_DOWN = 2,
	EILDP_RIGHT = 3,
};

// Size: 0x130
class /*alignas(16)*/ ZInteractionData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZInteractionData& p_Other) const;
	bool operator!=(const ZInteractionData& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[304] {};
};

// Size: 0x4
enum class ZInteractionData_EFilterResult : int32_t
{
	EFR_REQUESTED = 0,
	EFR_ENABLE_INTERACTION = 1,
	EFR_EXPANDED_NOT_INTERACTABLE = 2,
	EFR_COLLAPSED_CANT_OPERATE = 3,
	EFR_COLLAPSED_PRIORITY = 4,
	EFR_COLLAPSED_GAMESTATE = 5,
	EFR_COLLAPSED_ACTION_FILTER = 6,
	EFR_REJECTED_OTHER = 7,
	EFR_REJECTED_OUTOFRANGE = 8,
	EFR_REJECTED_OCCLUDED = 9,
	EFR_REJECTED_OUTOFVIEW = 10,
	EFR_REJECTED_GAMESTATE = 11,
	EFR_REJECTED_ACTION_FILTER = 12,
	EFR_REJECTED_INVALIDDATA = 13,
	EFR_REJECTED_PRIORITY = 14,
};

// Size: 0x4
enum class ZInteractionEventConsumer_EEvent : int32_t
{
	eActivate = 0,
	eRH_Place = 1,
	eRH_Retrieve = 2,
	eRH_Swap = 3,
	eRH_Show = 4,
	eRH_Hide = 5,
	eLH_Place = 6,
	eLH_Retrieve = 7,
	eLH_Swap = 8,
	eLH_Show = 9,
	eLH_Hide = 10,
	eObjectEvent01 = 11,
	eObjectEvent02 = 12,
	eObjectEvent03 = 13,
	eObjectEvent04 = 14,
	eSoundEvent01 = 15,
	eSoundEvent02 = 16,
	eSoundEvent03 = 17,
	eSoundEvent04 = 18,
};

// Size: 0x4
class /*alignas(4)*/ ZInteractionEventConsumer_SInteractionEventData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZInteractionEventConsumer_SInteractionEventData& p_Other) const;
	bool operator!=(const ZInteractionEventConsumer_SInteractionEventData& p_Other) const { return !(*this == p_Other); }

	ZInteractionEventConsumer_EEvent m_nEvent; // 0x0
};

// Size: 0xA0
class /*alignas(16)*/ ZInteractionGuideData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZInteractionGuideData& p_Other) const;
	bool operator!=(const ZInteractionGuideData& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[160] {};
};

// Size: 0x4
enum class ZInventoryController_EPendingItemType : int32_t
{
	EPIT_PocketItem = 0,
	EPIT_Container = 1,
	EPIT_ContainerItem = 2,
	EPIT_EquipedItem = 3,
};

// Size: 0x28
class /*alignas(8)*/ ZInventorySlot
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZInventorySlot& p_Other) const;
	bool operator!=(const ZInventorySlot& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[40] {};
};

// Size: 0x4
enum class ZInvestigateStandingSituation_ESituationFlavor : int32_t
{
	SF_Unknown = 0,
	SF_Sick = 1,
	SF_HitByCoin = 2,
	SF_StrangeSound = 3,
	SF_HMAgility = 4,
	SF_HMAgility_Vault = 5,
	SF_HMAgility_Window = 6,
	SF_HMInCover = 7,
	SF_HMRunning = 8,
	SF_HMSneaking = 9,
	SF_HMEnterExitHiding = 10,
	SF_HMPropToss = 11,
	SF_HMTooClose = 12,
	SF_WantsPrivacy = 13,
	SF_HMBumping = 14,
	SF_HMIllegalWeaponDropped = 15,
	SF_HMLegalWeaponDropped = 16,
	SF_HMItemDropped = 17,
};

// Size: 0x4
enum class ZInvestigateStandingSituation_ESituationState : int32_t
{
	SS_Main = 0,
	SS_StandDown = 1,
	SS_Escalate = 2,
};

// Size: 0x28
class /*alignas(8)*/ ZInvestigateStandingSituation_SState
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZInvestigateStandingSituation_SState& p_Other) const;
	bool operator!=(const ZInvestigateStandingSituation_SState& p_Other) const { return !(*this == p_Other); }

	bool m_bHitmanInvadingPrivacy; // 0x0
	bool m_bHitmanBizarre; // 0x1
	bool m_bHitmanWasBizarre; // 0x2
	bool m_bHitmanWarned; // 0x3
	bool m_bShouldReactToWeaponPickup; // 0x4
	bool m_bReactedToWeaponPickup; // 0x5
	uint8_t _pad6[2] {};
	ZInvestigateStandingSituation_ESituationState m_eSituationState; // 0x8
	ZInvestigateStandingSituation_ESituationFlavor m_eFlavor; // 0xC
	ZGameTime m_tHitmanBizarre; // 0x10
	ZGameTime m_tLastComment; // 0x18
	ZGameTime m_tLastBump; // 0x20
};

// Size: 0x30
class /*alignas(8)*/ ZInvestigateStandingSituation_SSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZInvestigateStandingSituation_SSituationSaveData& p_Other) const;
	bool operator!=(const ZInvestigateStandingSituation_SSituationSaveData& p_Other) const { return !(*this == p_Other); }

	ZInvestigateStandingSituation_SState m_State; // 0x0
	uint32 m_pLeader; // 0x28
	uint8_t _pad2C[4] {};
};

// Size: 0x20
class /*alignas(8)*/ ZInvestigateWeaponSituation_SSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZInvestigateWeaponSituation_SSituationSaveData& p_Other) const;
	bool operator!=(const ZInvestigateWeaponSituation_SSituationSaveData& p_Other) const { return !(*this == p_Other); }

	int32 m_nCurrentState; // 0x0
	uint8_t _pad4[4] {};
	ZGameTime m_mainStateStartTime; // 0x8
	ZGameTime m_tLastStandDown; // 0x10
	int32 m_nActiveInvestigationGroup; // 0x18
	uint8_t _pad1C[4] {};
};

// Size: 0x4
enum class ZItemSpawner_EPhysicsMode : int32_t
{
	EPM_DEFINED_BY_ITEM = 0,
	EPM_DYNAMIC = 1,
	EPM_SLEEPING = 2,
	EPM_KINEMATIC = 3,
};

// Size: 0x20
class /*alignas(16)*/ ZJumpToOrder_SJumpToOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZJumpToOrder_SJumpToOrderSaveData& p_Other) const;
	bool operator!=(const ZJumpToOrder_SJumpToOrderSaveData& p_Other) const { return !(*this == p_Other); }

	float4 m_vStopDirection; // 0x0
	float4 m_vTargetPosition; // 0x10
};

// Size: 0x4
enum class ZKeywordCondition_EEvaluationType : int32_t
{
	ALL = 0,
	NONE = 1,
	ANY = 2,
};

// Size: 0x4
enum class ZLogicMultipleGate_EGateType : int32_t
{
	eFireEveryTime = 0,
	eFirePortOnce = 1,
	eFireOnce = 2,
};

// Size: 0x4
enum class ZLookAtLogic_EAxisSelect : int32_t
{
	eX = 0,
	eX_NEG = 1,
	eY = 2,
	eY_NEG = 3,
	eZ = 4,
	eZ_NEG = 5,
};

// Size: 0x4
enum class ZMenuSliderNavigationEntity_ESliderInputMode : int32_t
{
	E_HORIZONTAL = 0,
	E_VERTICAL = 1,
};

// Size: 0x4
enum class ZMirrorEntity_EMirrorBlur : int32_t
{
	BLUR_DISABLED = 0,
	BLUR_LOW = 1,
	BLUR_HIGH = 2,
};

// Size: 0x4
enum class ZMirrorEntity_EMirrorQuality : int32_t
{
	QUALITY_LOW = 0,
	QUALITY_MEDIUM = 1,
	QUALITY_HIGH = 2,
};

// Size: 0x30
class /*alignas(16)*/ ZMoveToOrder_SMoveToOrderSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZMoveToOrder_SMoveToOrderSaveData& p_Other) const;
	bool operator!=(const ZMoveToOrder_SMoveToOrderSaveData& p_Other) const { return !(*this == p_Other); }

	float4 m_vStopDirection; // 0x0
	float32 m_fStopDistance; // 0x10
	float32 m_fWalkDistance; // 0x14
	uint32 m_nObstacleBlockageFlags; // 0x18
	ZMoveToOrder_EMoveSpeed m_eMoveSpeed; // 0x1C
	bool m_bIgnoreEndCollision; // 0x20
	bool m_bPrecisePositioning; // 0x21
	bool m_bForceStand; // 0x22
	bool m_bLookAtTargetMustBeInSight; // 0x23
	bool m_bUseKnownPosition; // 0x24
	bool m_bStopActFast; // 0x25
	bool m_bStrafe; // 0x26
	bool m_bEndStanding; // 0x27
	uint8_t _pad28[8] {};
};

// Size: 0x4
enum class ZMoveToPositionBehaviorEntity_EApproachAlignment : int32_t
{
	AA_STRICT = 0,
	AA_LOOSE = 1,
};

// Size: 0x4
enum class ZMoveToPositionBehaviorEntity_EMovementType : int32_t
{
	MT_WALK = 0,
	MT_SNAP = 1,
	MT_IGNORE_POSITION = 2,
};

// Size: 0x4
enum class ZMoveToPositionBehaviorEntity_ERotationAlignment : int32_t
{
	RA_NONE = 0,
	RA_LOOSE = 1,
	RA_EXACT = 2,
};

// Size: 0x4
enum class ZOnlineManager_EError : int32_t
{
	eNONE = 0,
	eGENERAL = 1000,
	eNETWORK_UNKNOWN = 1001,
	eNETWORK_SEND_FAILED = 1002,
	eAPI_VERSION = 1003,
	eAUTHENTICATION_UNAUTHORIZED = 1004,
	eAUTHENTICATION_PROXY = 1005,
	eAUTHENTICATION_SERVER_ERROR = 1006,
	eAUTHENTICATION_USER_GONE = 1007,
	eAUTHENTICATION_STEAM_GENERAL = 1008,
	eAUTHENTICATION_PSN_GENERAL = 1009,
	eAUTHENTICATION_PSN_NP_CHECK = 1010,
	eAUTHENTICATION_NO_PRIMARY_USER = 1011,
	eAUTHENTICATION_XBLIVE_GENERAL = 1012,
	eAUTHENTICATION_XBLIVE_SIGNED_OUT = 1013,
	eAUTHENTICATION_XBLIVE_USER_CHANGED = 1014,
	ePLATFORM_USERINFO = 1015,
	eCONFIGURATION = 1016,
	eENTITLEMENTS = 1017,
	ePROFILE = 1018,
	eGAME_SESSION = 1019,
	eGENERAL_SERVER_ERROR = 1020,
	eGENERAL_SERVER_BUSY = 1021,
	eGENERAL_CLIENT_ERROR = 1022,
	eDYNAMIC_RESOURCES_CONFIG_ERROR = 1023,
	eDYNAMIC_RESOURCES_UPDATEFAILED = 1024,
	eDYNAMIC_RESOURCES_OUTDATED = 1025,
	eCANCELLED = 1026,
	eERROR_MAX = 1027,
};

// Size: 0x4
enum class ZOnlineManager_EState : int32_t
{
	eTRIGGER_FLOW = 1,
	eOFFLINE = 2,
	eSUSPEND = 3,
	eDISCONNECTED = 4,
	eBEGIN_CONNECTION_FLOW = 5,
	ePREAUTHENTICATE = 6,
	eFETCH_API_VERSION = 7,
	eFETCHING_API_VERSION = 8,
	eAPI_VERSION_RECEIVED = 9,
	eONLINE_CONSENT_CONFIRMATION = 10,
	ePREAUTHENTICATION_ENTITLEMENTS_SYNCHRONIZE_INPROGRESS = 11,
	ePREAUTHENTICATION_ENTITLEMENTS_SYNCHRONIZE_DONE = 12,
	eAUTHENTICATING = 13,
	eAUTHENTICATION_RECEIVED = 14,
	eENTITLEMENTS_SYNCHRONIZE_INPROGRESS = 15,
	eENTITLEMENTS_SYNCHRONIZE_DONE = 16,
	eAUTHENTICATING_GAMESERVICE = 17,
	eAUTHENTICATION_GAMESERVICE_RECEIVED = 18,
	eFETCHING_OFFLINE_CACHE_DB_DIFF = 19,
	eFETCHING_OFFLINE_CACHE_DB_DIFF_RECEIVED = 20,
	eFETCHING_DYNAMIC_RESOURCES = 21,
	eDYNAMIC_RESOURCES_MOUNTED = 22,
	eFETCHING_PLATFORM_USERINFO = 23,
	ePLATFORM_USERINFO_RECEIVED = 24,
	eFETCHING_CONFIGURATION = 25,
	eCONFIGURATION_RECEIVED = 26,
	eFETCHING_PROFILE = 27,
	ePROFILE_RECEIVED = 28,
	eSYNCHRONIZING_PROFILE = 29,
	ePROFILE_SYNCHRONIZED = 30,
	eRETRIEVING_EVENTS = 31,
	eEVENTS_RETRIEVED = 32,
	eWAITING_FOR_SYNCHRONIZING_EVENTS = 33,
	eCONNECTED = 34,
	eCONNECT_TO_GAME_SESSION = 35,
	eCONNECTING_TO_GAME_SESSION = 36,
	eRETRY_SAVE_EVENTS = 37,
	eRETRY_SAVE_EVENTS_INTERNAL = 38,
	eREAUTHENTICATE = 39,
	eSTATE_MAX = 40,
};

// Size: 0x4
enum class ZOperatorBool_EEvaluationType : int32_t
{
	ALL = 0,
	NONE = 1,
	ANY = 2,
};

// Size: 0x4
enum class ZPathfinderDebugEntity_EDebugTestType : int32_t
{
	PATHFINDER = 0,
	TRACELINE = 1,
	MAP_LOCATION = 2,
	REGION_MASK_WITHIN_RADIUS = 3,
};

// Size: 0x4
enum class ZPatrolBehaviorEntity_EMovementType : int32_t
{
	MT_WALK = 0,
	MT_SNAP = 1,
	MT_IGNORE_POSITION = 2,
};

// Size: 0x4
enum class ZPatrolBehaviorEntity_ERotationAlignment : int32_t
{
	RA_NONE = 0,
	RA_LOOSE = 1,
	RA_EXACT = 2,
};

// Size: 0x8
class /*alignas(8)*/ ZPlanningObjectiveInfoBuilder
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZPlanningObjectiveInfoBuilder& p_Other) const;
	bool operator!=(const ZPlanningObjectiveInfoBuilder& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x4
enum class ZPointOfInterestEntity_EPOIType : int32_t
{
	ePOIT_Invalid = 0,
	ePOIT_Glance = 1,
	ePOIT_Inspect = 2,
	ePOIT_Stare = 3,
};

// Size: 0x8
class /*alignas(0)*/ ZPostfilterGraphBaseNode
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZPostfilterGraphBaseNode& p_Other) const;
	bool operator!=(const ZPostfilterGraphBaseNode& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[8] {};
};

// Size: 0x4
enum class ZPreferenceItemEntity_EBoolOptions : int32_t
{
	EBO_INVERTVERTICAL = 0,
	EBO_FIXEDMAP = 1,
};

// Size: 0x4
enum class ZRagdollAttacherEntity_EResetMode : int32_t
{
	eAtBoneOrigin = 0,
	eKeepOffset = 1,
};

// Size: 0x60
class /*alignas(16)*/ ZRayQueryInput
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZRayQueryInput& p_Other) const;
	bool operator!=(const ZRayQueryInput& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[96] {};
};

// Size: 0x4
enum class ZRecoverUnconsciousGroup_EInvestigateGroupState : int32_t
{
	IGS_InitialState = 0,
	IGS_WaitingForVictim = 1,
	IGS_Recovering = 2,
	IGS_Relocating = 3,
	IGS_Reporting = 4,
	IGS_Completed = 5,
	IGS_Max = 6,
};

// Size: 0x14
class /*alignas(4)*/ ZRecoverUnconsciousSituation_SSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZRecoverUnconsciousSituation_SSituationSaveData& p_Other) const;
	bool operator!=(const ZRecoverUnconsciousSituation_SSituationSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rVictim; // 0x0
	int32 m_pInvestigateDisguiseGroup; // 0x4
	int32 m_pRecoverUnconsciousGroup; // 0x8
	int32 m_pObserversGroup; // 0xC
	bool m_bEscalate; // 0x10
	bool m_bVictimPacified; // 0x11
	uint8_t _pad12[2] {};
};

// Size: 0x4
enum class ZRenderPostfilterParametersEntity_EDOFBlurType : int32_t
{
	eFastest = 0,
	eLowRezLensBlur = 1,
	eLowRezLensBlurSoft = 2,
	eHighRezLensBlur = 3,
};

// Size: 0x4
enum class ZRenderPostfilterParametersEntity_EHDRAdaptationType : int32_t
{
	eMedian = 0,
	eGeometricMean = 1,
};

// Size: 0x4
enum class ZRenderPostfilterParametersEntity_EHDRGlareType : int32_t
{
	eCamera = 0,
	eNatural = 1,
	eCheapLens = 2,
	eFilterCrossScreen = 3,
	eFilterCrossScreenSpectral = 4,
	eFilterSnowCross = 5,
	eFilterSnowCrossSpectral = 6,
	eFilterSunnyCross = 7,
	eFilterSunnyCrossSpectral = 8,
	eCinecamVerticalSlits = 9,
	eCinecamHorizontalSlits = 10,
};

// Size: 0x4
enum class ZRenderPostfilterParametersEntity_EHDRToneMapType : int32_t
{
	eLinear = 0,
	eReinhardRGB = 1,
	eFilmicRGB = 2,
	ePhotographicRGB = 3,
	eReinhardLuma = 4,
	eFilmicLuma = 5,
	ePhotographicLuma = 6,
};

// Size: 0x30
class /*alignas(8)*/ ZScopedER64
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZScopedER64& p_Other) const;
	bool operator!=(const ZScopedER64& p_Other) const { return !(*this == p_Other); }

	ZER64 m_er64; // 0x0
	TArray<uint64> m_aScopePath; // 0x18
};

// Size: 0x4
enum class ZSecuritySystemCameraConfiguration_ECameraEscalationSituations : int32_t
{
	eCES_Arrest = 0,
	eCES_Combat = 1,
};

// Size: 0x4
class /*alignas(4)*/ ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule& p_Other) const;
	bool operator!=(const ZSecuritySystemCameraConfiguration_SDeadBodyVisibleEscalationRule& p_Other) const { return !(*this == p_Other); }

	int32 m_NrGuardsToSend; // 0x0
};

// Size: 0x8
class /*alignas(4)*/ ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule& p_Other) const;
	bool operator!=(const ZSecuritySystemCameraConfiguration_SHitmanVisibleEscalationRule& p_Other) const { return !(*this == p_Other); }

	int32 m_NrGuardsToSend; // 0x0
	ZSecuritySystemCameraConfiguration_ECameraEscalationSituations m_Situation; // 0x4
};

// Size: 0x4
enum class ZSequenceEntity_ELetterBoxAspect : int32_t
{
	LETTERBOXASPECT_WIDESCREEN = 0,
	LETTERBOXASPECT_CINEMASCOPE = 1,
};

// Size: 0x58
class /*alignas(8)*/ ZSetPieceIconEntity_SIconData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZSetPieceIconEntity_SIconData& p_Other) const;
	bool operator!=(const ZSetPieceIconEntity_SIconData& p_Other) const { return !(*this == p_Other); }

	ZString iCategory; // 0x0
	ZString iInteraction1; // 0x10
	ZString iInteraction2; // 0x20
	ZString iInteraction3; // 0x30
	ZString sMissingToolText; // 0x40
	bool bShowMissingTool; // 0x50
	uint8_t _pad51[7] {};
};

// Size: 0x4
enum class ZSetVisibleEntity_StartBehavior : int32_t
{
	SB_Nothing = 0,
	SB_MakeVisible = 1,
	SB_MakeInvisible = 2,
};

// Size: 0x28
class /*alignas(4)*/ ZSharedSensorDef_SVisibilitySetting
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZSharedSensorDef_SVisibilitySetting& p_Other) const;
	bool operator!=(const ZSharedSensorDef_SVisibilitySetting& p_Other) const { return !(*this == p_Other); }

	EActorPerceptionSensitivity m_eSensitivity; // 0x0
	float32 m_fCloseRange; // 0x4
	float32 m_fPeripheralAngle; // 0x8
	float32 m_fPeripheralAngleWhileMoving; // 0xC
	float32 m_fPeripheralHigh; // 0x10
	float32 m_fPeripheralLow; // 0x14
	float32 m_fFocusConeWidthAngle; // 0x18
	float32 m_fFocusConeHeightAngle; // 0x1C
	float32 m_fFocusConeRange; // 0x20
	float32 m_fFocusConeBackWidth; // 0x24
};

// Size: 0xD8
class /*alignas(8)*/ ZSituationGroup
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZSituationGroup& p_Other) const;
	bool operator!=(const ZSituationGroup& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[216] {};
};

// Size: 0x50
class /*alignas(16)*/ ZSituationOrder
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZSituationOrder& p_Other) const;
	bool operator!=(const ZSituationOrder& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[80] {};
};

// Size: 0x4
enum class ZSniperCombatGroup_EGroupState : int32_t
{
	IGS_WaitingForActors = 0,
	IGS_Move = 1,
	IGS_Siege = 2,
	IGS_Completed = 3,
	IGS_Max = 4,
};

// Size: 0x4
enum class ZSniperCombatSituation_ESituationState : int32_t
{
	SS_Main = 0,
	SS_StandDown = 1,
	SS_InvalidSituation = 2,
};

// Size: 0x20
class /*alignas(16)*/ ZSniperCombatSituation_SSniperSuspiciousArea
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZSniperCombatSituation_SSniperSuspiciousArea& p_Other) const;
	bool operator!=(const ZSniperCombatSituation_SSniperSuspiciousArea& p_Other) const { return !(*this == p_Other); }

	float4 m_vPosition; // 0x0
	float32 m_fRange; // 0x10
	bool m_bIsIslandEntrance; // 0x14
	uint8_t _pad15[11] {};
};

// Size: 0x98
class /*alignas(8)*/ ZSniperCombatSituation_SSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZSniperCombatSituation_SSituationSaveData& p_Other) const;
	bool operator!=(const ZSniperCombatSituation_SSituationSaveData& p_Other) const { return !(*this == p_Other); }

	uint32 m_rSniperLocation; // 0x0
	uint8_t _pad4[4] {};
	TArray<int32> m_aSniperCombatGroups; // 0x8
	bool m_bAggressive; // 0x20
	bool m_bKiller; // 0x21
	uint8_t _pad22[2] {};
	uint32 m_rIsland; // 0x24
	TArray<ZSniperCombatSituation_SSniperSuspiciousArea> m_aSuspiciousAreas; // 0x28
	TArray<uint32> m_aWaitingGuards; // 0x40
	TArray<uint32> m_aFleeCandidates; // 0x58
	bool m_bHasFailed; // 0x70
	uint8_t _pad71[3] {};
	ZSniperCombatSituation_ESituationState m_eState; // 0x74
	uint32 m_nGuards; // 0x78
	uint8_t _pad7C[4] {};
	TArray<int32> m_aAvoidDangerGroups; // 0x80
};

// Size: 0x4
enum class ZSoundAmbienceGroup_ESoundCollisionType : int32_t
{
	SCT_Box = 0,
	SCT_Cylinder = 1,
	SCT_Sphere = 2,
};

// Size: 0x100
class /*alignas(16)*/ ZSoundCollisionInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZSoundCollisionInfo& p_Other) const;
	bool operator!=(const ZSoundCollisionInfo& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[256] {};
};

// Size: 0x4
enum class ZSpatialEntity_ERoomBehaviour : int32_t
{
	ROOM_STATIC = 0,
	ROOM_DYNAMIC = 1,
	ROOM_STATIC_OUTSIDE_CLIENT = 2,
};

// Size: 0x18
class /*alignas(8)*/ ZSpeakerLevels
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZSpeakerLevels& p_Other) const;
	bool operator!=(const ZSpeakerLevels& p_Other) const { return !(*this == p_Other); }

	TArray<float32> m_aSpeakerMatrix; // 0x0
};

// Size: 0x38
class /*alignas(8)*/ ZSpectatorSituation_SSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZSpectatorSituation_SSituationSaveData& p_Other) const;
	bool operator!=(const ZSpectatorSituation_SSituationSaveData& p_Other) const { return !(*this == p_Other); }

	bool m_bStandingDown; // 0x0
	uint8_t _pad1[7] {};
	TArray<int32> m_aObserverGroupIDs; // 0x8
	TArray<uint32> m_aNonObserverMembers; // 0x20
};

// Size: 0x4
enum class ZStandOffSituation_EDialogState : int32_t
{
	eDS_ReportTarget = 0,
	eDS_ArrestReason = 1,
	eDS_ArrestReasonWait = 2,
	eDS_Warning = 3,
	eDS_WarningWait = 4,
	eDS_WeaponWarning = 5,
	eDS_WeaponWarningWait = 6,
	eDS_StopWait = 7,
	eDS_Done = 8,
};

// Size: 0x4
enum class ZStandOffSituation_ESituationState : int32_t
{
	SS_Uncertain = 0,
	SS_Main = 1,
	SS_Arresting = 2,
	SS_GetHelp = 3,
	SS_Escalate = 4,
	SS_Investigate = 5,
	SS_GetHelpFromFleeingCivilian = 6,
};

// Size: 0x80
class /*alignas(16)*/ ZStandOffSituation_SState
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZStandOffSituation_SState& p_Other) const;
	bool operator!=(const ZStandOffSituation_SState& p_Other) const { return !(*this == p_Other); }

	ZStandOffSituation_ESituationState m_eSituationState; // 0x0
	EDisturbanceType m_eArrestReason; // 0x4
	uint32 m_nWarningPriority; // 0x8
	int32 m_nResetCount; // 0xC
	bool m_bArrestReasonStated; // 0x10
	bool m_bTargetOnStairs; // 0x11
	bool m_bUpdateApproachPositions; // 0x12
	bool m_bHelpOrderAssigned; // 0x13
	bool m_bCivilianTransferredKnowledge; // 0x14
	bool m_bTargetLost; // 0x15
	bool m_bGetHelpGroupStarted; // 0x16
	uint8_t _pad17[9] {};
	float4 m_vLastKnownPosition; // 0x20
	float32 m_fMovingTime; // 0x30
	float32 m_fRunningTime; // 0x34
	float32 m_fEquippedWeaponTime; // 0x38
	bool m_bWarning3Given; // 0x3C
	uint8_t _pad3D[3] {};
	ZGameTime m_mainStateStartTime; // 0x40
	ZGameTime m_tLastTimeTargetLOS; // 0x48
	ZGameTime m_tLastTimeGuardHadLOS; // 0x50
	ZGameTime m_tNextCivBark; // 0x58
	ZGameTime m_tStartSearchCountdown; // 0x60
	ZStandOffSituation_EDialogState m_eDialogState; // 0x68
	int32 m_nWarningCount; // 0x6C
	bool m_bStopWarningGiven; // 0x70
	bool m_reportedTarget; // 0x71
	bool m_bTriggeredBySecurityCameras; // 0x72
	uint8_t _pad73[13] {};
};

// Size: 0xB0
class /*alignas(16)*/ ZStandOffSituation_SSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZStandOffSituation_SSituationSaveData& p_Other) const;
	bool operator!=(const ZStandOffSituation_SSituationSaveData& p_Other) const { return !(*this == p_Other); }

	ZStandOffSituation_SState m_State; // 0x0
	uint32 m_pArrestor; // 0x80
	uint32 m_pSpeaker; // 0x84
	int32 m_pGetHelpGroup; // 0x88
	uint32 m_rIsland; // 0x8C
	ZGameTime m_tLastTimeTargetLOS; // 0x90
	TArray<int32> m_aAvoidDangerGroups; // 0x98
};

// Size: 0x4
enum class ZStateControllerEntity_WrapMode : int32_t
{
	WM_Loop = 0,
	WM_Clamp = 1,
};

// Size: 0x4
enum class ZTestGroupPath_EModifierType : int32_t
{
	EMT_PushCorners = 0,
	EMT_PushCornersAlt = 1,
};

// Size: 0x8
class /*alignas(8)*/ ZTime
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZTime& p_Other) const;
	bool operator!=(const ZTime& p_Other) const { return !(*this == p_Other); }

	uint64 m_nValue; // 0x0
};

// Size: 0x4
enum class ZTrackDollyControllerQueryEntity_ETrackPointQueryType : int32_t
{
	Closest = 0,
	ClosestNext = 1,
	ClosestPrevious = 2,
};

// Size: 0x4
enum class ZTrespassingSituation_ESituationState : int32_t
{
	SS_Main = 1,
	SS_StandDown = 2,
	SS_Escalate = 3,
};

// Size: 0x28
class /*alignas(8)*/ ZTrespassingSituation_SState
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZTrespassingSituation_SState& p_Other) const;
	bool operator!=(const ZTrespassingSituation_SState& p_Other) const { return !(*this == p_Other); }

	ZTrespassingSituation_ESituationState m_eSituationState; // 0x0
	uint8_t _pad4[4] {};
	ZGameTime m_tDeepTrespassingTime; // 0x8
	ZGameTime m_tStartStandDown; // 0x10
	ZGameTime m_tLastTargetVisible; // 0x18
	bool m_bStopWarningGiven; // 0x20
	uint8_t _pad21[7] {};
};

// Size: 0x50
class /*alignas(16)*/ ZTrespassingSituation_SSituationSaveData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZTrespassingSituation_SSituationSaveData& p_Other) const;
	bool operator!=(const ZTrespassingSituation_SSituationSaveData& p_Other) const { return !(*this == p_Other); }

	ZTrespassingSituation_SState m_State; // 0x0
	uint32 m_rEscortingMember; // 0x28
	uint32 m_rHelpingGuardMember; // 0x2C
	float4 m_vEscortOutExitLocation; // 0x30
	int32 m_nGetHelpGroup; // 0x40
	bool m_bPropagationEnabled; // 0x44
	uint8_t _pad45[11] {};
};

// Size: 0xE8
class /*alignas(8)*/ ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo& p_Other) const;
	bool operator!=(const ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo& p_Other) const { return !(*this == p_Other); }

	ZRuntimeResourceID icon; // 0x0
	ZRuntimeResourceID containedIcon; // 0x8
	ZString label; // 0x10
	ZString containedLabel; // 0x20
	bool silencer; // 0x30
	uint8_t _pad31[3] {};
	int32 count; // 0x34
	int32 ammo; // 0x38
	uint8_t _pad3C[4] {};
	ZRepositoryID id; // 0x40
	ZString weaponCategory; // 0x50
	int32 nAmmoRemaining; // 0x60
	int32 nAmmoTotal; // 0x64
	int32 nAmmoInClip; // 0x68
	int32 nWeaponType; // 0x6C
	ZString itemCategory; // 0x70
	ZString itemCategoryLKey; // 0x80
	ZString inventoryCategoryIcon; // 0x90
	bool notininventory; // 0xA0
	bool isIllegal; // 0xA1
	uint8_t _padA2[6] {};
	ZString actionName; // 0xA8
	ZString longDescription; // 0xB8
	ZString missingText; // 0xC8
	ZString warningText; // 0xD8
};

// Size: 0x38
class /*alignas(8)*/ ZUIActionSelectorNavigationInventoryEntity_SActionSelectorInvokeData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZUIActionSelectorNavigationInventoryEntity_SActionSelectorInvokeData& p_Other) const;
	bool operator!=(const ZUIActionSelectorNavigationInventoryEntity_SActionSelectorInvokeData& p_Other) const { return !(*this == p_Other); }

	TArray<ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo> mainslots; // 0x0
	TArray<ZUIActionSelectorNavigationInventoryEntity_SActionSelectorSlotDisplayInfo> otherslots; // 0x18
	int32 selectedIndex; // 0x30
	bool isActionInventory; // 0x34
	uint8_t _pad35[3] {};
};

// Size: 0x4
enum class ZUIControlEntity_EAlignmentType : int32_t
{
	E_ALIGNMENT_TYPE_Center = 0,
	E_ALIGNMENT_TYPE_TopCenter = 1,
	E_ALIGNMENT_TYPE_BottomCenter = 2,
	E_ALIGNMENT_TYPE_CenterLeft = 3,
	E_ALIGNMENT_TYPE_CenterRight = 4,
	E_ALIGNMENT_TYPE_TopLeft = 5,
	E_ALIGNMENT_TYPE_TopRight = 6,
	E_ALIGNMENT_TYPE_BottomLeft = 7,
	E_ALIGNMENT_TYPE_BottomRight = 8,
};

// Size: 0x4
enum class ZUIControlEntity_ELayoutMode : int32_t
{
	E_LAYOUT_MODE_Absolute = 0,
	E_LAYOUT_MODE_Proportional = 1,
	E_LAYOUT_MODE_Proportional_MaintainAspect = 2,
	E_LAYOUT_MODE_Proportional_MaintainAspect_Fill = 3,
	E_LAYOUT_MODE_Proportional_Scale_Fit = 4,
	E_LAYOUT_MODE_Proportional_Scale_MaintainAspect = 5,
	E_LAYOUT_MODE_Proportional_Scale_MaintainAspect_Fill = 6,
};

// Size: 0x40
class /*alignas(0)*/ ZUIDataProvider
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZUIDataProvider& p_Other) const;
	bool operator!=(const ZUIDataProvider& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[64] {};
};

// Size: 0x4
enum class ZUIFlowLayoutEntity_EFlowType : int32_t
{
	E_FLOW_TYPE_HORIZONTAL = 0,
	E_FLOW_TYPE_VERTICAL = 1,
};

// Size: 0x4
enum class ZUIListNavigationEntity_ENavigationInputMode : int32_t
{
	E_MODE_UP_DOWN = 0,
	E_MODE_LEFT_RIGHT = 1,
	E_MODE_PGPREV_PGNEXT = 2,
	E_MODE_SMART_2D = 3,
};

// Size: 0x4
enum class ZUISplashHintDataProviderEntity_ESplashHintType : int32_t
{
	SHT_GlobalHint = 0,
	SHT_TutorialHint = 1,
	SHT_ControlHint = 2,
};

// Size: 0x4
enum class ZUISubtitleDataProvider_EAlignment : int32_t
{
	ALIGN_BOTTOM = 0,
	ALIGN_TOP = 1,
};

// Size: 0x4
enum class ZUIWorldMapView_EMapType : int32_t
{
	E_MAPTYPE_Minimap = 0,
	E_MAPTYPE_MainMap = 1,
	E_MAPTYPE_MenuMap = 2,
};

// Size: 0x4
enum class ZVIPInvestigateGroup_EVIPInvestigateGroupState : int32_t
{
	IGS_FindGuard = 0,
	IGS_WaitForGuard = 1,
	IGS_SpeakOrder = 2,
	IGS_WaitForInvestigation = 3,
	IGS_GuardReturns = 4,
	IGS_SpeakResult = 5,
	IGS_Completed = 6,
	IGS_CantFindBodyguard = 7,
	IGS_BodyguardDisappeared = 8,
	IGS_Max = 9,
};

// Size: 0x4
enum class ZValueBool_Operation_EEvaluationType : int32_t
{
	ALL = 0,
	NONE = 1,
	ANY = 2,
};

// Size: 0x4
enum class ZValueInt_Comparator_EEvaluationType : int32_t
{
	EQUAL = 0,
	NOT_EQUAL = 1,
	LESS = 2,
	LESS_OR_EQUAL = 3,
	HIGHER = 4,
	HIGHER_OR_EQUAL = 5,
};

// Size: 0x4
enum class ZValueInt_Comparator_Poll_EEvaluationType : int32_t
{
	EQUAL = 0,
	NOT_EQUAL = 1,
	LESS = 2,
	LESS_OR_EQUAL = 3,
	HIGHER = 4,
	HIGHER_OR_EQUAL = 5,
};

// Size: 0x4
enum class ZValueInt_Evaluation_EEvaluationType : int32_t
{
	EQUAL = 0,
	NOT_EQUAL = 1,
	LESS = 2,
	LESS_OR_EQUAL = 3,
	HIGHER = 4,
	HIGHER_OR_EQUAL = 5,
};

// Size: 0x4
enum class ZWaveformGeneratorEntity_ECurveType : int32_t
{
	CURVE_TYPE_SINE = 0,
	CURVE_TYPE_SQUARE = 1,
	CURVE_TYPE_TRIANGLE = 2,
	CURVE_TYPE_SAWTOOTH = 3,
	CURVE_TYPE_REVERSE_SAWTOOTH = 4,
};

// Size: 0x4
enum class ZWaypointEntity_EMovementType : int32_t
{
	MT_WALK = 0,
	MT_WALK_IF_NOT_IN_SEQUENCE = 1,
	MT_SNAP = 2,
	MT_IGNORE_POSITION = 3,
};

// Size: 0x10
class /*alignas(8)*/ ZWorldMapMetaData
{
public:
	static ZHMTypeInfo TypeInfo;
	static void WriteSimpleJson(void* p_Object, std::ostream& p_Stream);
	static void FromSimpleJson(simdjson::ondemand::value p_Document, void* p_Target);
	static void Serialize(void* p_Object, ZHMSerializer& p_Serializer, zhmptr_t p_OwnOffset);
	static bool Equals(void* p_Left, void* p_Right);
	static void Destroy(void* p_Object);

	bool operator==(const ZWorldMapMetaData& p_Other) const;
	bool operator!=(const ZWorldMapMetaData& p_Other) const { return !(*this == p_Other); }

	uint8_t _pad0[16] {};
};

// Size: 0x4
enum class ZWorldUIElementInstanceBase_EVisibility : int32_t
{
	EVIS_ALWAYS = 0,
	EVIS_POSY = 1,
	EVIS_NEGY = 2,
	EVIS_POSX = 3,
	EVIS_NEGX = 4,
};

// Size: 0x4
enum class eBurstPatternType : int32_t
{
	eEBP_None = 0,
	eEBP_Circular3Rings = 1,
	eEBP_Box = 2,
};

// Size: 0x4
enum class eContractSessionStartError : int32_t
{
	ERROR_NONE = 0,
	ERROR_MISSING_CONTENT = 1,
	ERROR_SERVER_UNREACHABLE = 2,
	ERROR_SERVER_ERROR = 3,
	ERROR_CONTRACT_NOT_PLAYABLE_YET = 4,
	ERROR_CONTRACT_NOT_PLAYABLE_ANYMORE = 5,
	ERROR_CANCELED = 6,
	ERROR_ALREADY_STARTING = 7,
	ERROR_UNKNOWN = 8,
};

// Size: 0x4
enum class eHitmanPermissionReason : int32_t
{
	eHPReason_MovementContext = 1,
	eHPReason_ItemHandlingInProcess = 2,
	eHPReason_SniperMode = 4,
	eHPReason_CrippleBox = 8,
	eHPReason_LevelDesign = 16,
	eHPReason_PlayerInput = 32,
	eHPReason_InstinctBlendIn = 64,
	eHPReason_FocusInteraction = 128,
	eHPReason_NUM = 7,
	eHPReason_ALLReasons = -1,
};

// Size: 0x4
enum class eHolsterAbility : int32_t
{
	eUndecided = 0,
	eHolsteringAllowed = 1,
	eHolsterTemporarily = 2,
	eHolsterTemporarilyOnly = 3,
	eCanNotBeHolstered = 4,
};

// Size: 0x4
enum class eItemHands : int32_t
{
	IH_NONE = 0,
	IH_ONEHANDED = 1,
	IH_TWOHANDED = 2,
};

// Size: 0x4
enum class eItemSize : int32_t
{
	ITEMSIZE_SMALL = 0,
	ITEMSIZE_LARGE = 1,
	ITEMSIZE_HUGE = 2,
};

// Size: 0x4
enum class eParticleEmitterBoxEntity_SpawnModes : int32_t
{
	BOX_SPAWNMODE_INSIDE = 0,
	BOX_SPAWNMODE_EDGE = 1,
	BOX_SPAWNMODE_FACE = 2,
	BOX_SPAWNMODE_ELLIPSOID_INSIDE = 3,
	BOX_SPAWNMODE_ELLIPSOID = 4,
};

// Size: 0x4
enum class eParticleEmitterMeshEntity_SpawnModes : int32_t
{
	MESH_SPAWNMODE_VERTEX = 0,
	MESH_SPAWNMODE_EDGE = 1,
	MESH_SPAWNMODE_FACE = 2,
};

// Size: 0x4
enum class eWeaponOperation : int32_t
{
	WO_SEMI_AUTO = 0,
	WO_FULL_AUTO = 1,
};

// Size: 0x4
enum class eWeaponType : int32_t
{
	WT_HANDGUN = 0,
	WT_SLOWGUN = 1,
	WT_ASSAULTRIFLE = 2,
	WT_SMG = 3,
	WT_SNIPER = 4,
	WT_RPG = 5,
	WT_KNIFE = 6,
	WT_SHOTGUN = 7,
	WT_SPOTTER = 8,
};

#pragma pack(pop)
